/**
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.KestraIoKestraSdk);
  }
}(this, function(expect, KestraIoKestraSdk) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new KestraIoKestraSdk.UsersApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('UsersApi', function() {
    describe('autocompleteUsers', function() {
      it('should call autocompleteUsers successfully', function(done) {
        //uncomment below and update the code to test autocompleteUsers
        //instance.autocompleteUsers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createApiTokensForUser', function() {
      it('should call createApiTokensForUser successfully', function(done) {
        //uncomment below and update the code to test createApiTokensForUser
        //instance.createApiTokensForUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createApiTokensForUser1', function() {
      it('should call createApiTokensForUser1 successfully', function(done) {
        //uncomment below and update the code to test createApiTokensForUser1
        //instance.createApiTokensForUser1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createApiTokensForUserWithTenant', function() {
      it('should call createApiTokensForUserWithTenant successfully', function(done) {
        //uncomment below and update the code to test createApiTokensForUserWithTenant
        //instance.createApiTokensForUserWithTenant(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createUser', function() {
      it('should call createUser successfully', function(done) {
        //uncomment below and update the code to test createUser
        //instance.createUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteApiToken', function() {
      it('should call deleteApiToken successfully', function(done) {
        //uncomment below and update the code to test deleteApiToken
        //instance.deleteApiToken(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteApiToken1', function() {
      it('should call deleteApiToken1 successfully', function(done) {
        //uncomment below and update the code to test deleteApiToken1
        //instance.deleteApiToken1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteApiTokenWithTenant', function() {
      it('should call deleteApiTokenWithTenant successfully', function(done) {
        //uncomment below and update the code to test deleteApiTokenWithTenant
        //instance.deleteApiTokenWithTenant(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteRefreshToken', function() {
      it('should call deleteRefreshToken successfully', function(done) {
        //uncomment below and update the code to test deleteRefreshToken
        //instance.deleteRefreshToken(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteUser', function() {
      it('should call deleteUser successfully', function(done) {
        //uncomment below and update the code to test deleteUser
        //instance.deleteUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteUserAuthMethod', function() {
      it('should call deleteUserAuthMethod successfully', function(done) {
        //uncomment below and update the code to test deleteUserAuthMethod
        //instance.deleteUserAuthMethod(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUser', function() {
      it('should call getUser successfully', function(done) {
        //uncomment below and update the code to test getUser
        //instance.getUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('impersonate', function() {
      it('should call impersonate successfully', function(done) {
        //uncomment below and update the code to test impersonate
        //instance.impersonate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listApiTokens', function() {
      it('should call listApiTokens successfully', function(done) {
        //uncomment below and update the code to test listApiTokens
        //instance.listApiTokens(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listApiTokens1', function() {
      it('should call listApiTokens1 successfully', function(done) {
        //uncomment below and update the code to test listApiTokens1
        //instance.listApiTokens1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listApiTokensWithTenant', function() {
      it('should call listApiTokensWithTenant successfully', function(done) {
        //uncomment below and update the code to test listApiTokensWithTenant
        //instance.listApiTokensWithTenant(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listUsers', function() {
      it('should call listUsers successfully', function(done) {
        //uncomment below and update the code to test listUsers
        //instance.listUsers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchUser', function() {
      it('should call patchUser successfully', function(done) {
        //uncomment below and update the code to test patchUser
        //instance.patchUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchUserDemo', function() {
      it('should call patchUserDemo successfully', function(done) {
        //uncomment below and update the code to test patchUserDemo
        //instance.patchUserDemo(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchUserPassword', function() {
      it('should call patchUserPassword successfully', function(done) {
        //uncomment below and update the code to test patchUserPassword
        //instance.patchUserPassword(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchUserSuperAdmin', function() {
      it('should call patchUserSuperAdmin successfully', function(done) {
        //uncomment below and update the code to test patchUserSuperAdmin
        //instance.patchUserSuperAdmin(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateCurrentUserPassword', function() {
      it('should call updateCurrentUserPassword successfully', function(done) {
        //uncomment below and update the code to test updateCurrentUserPassword
        //instance.updateCurrentUserPassword(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateUser', function() {
      it('should call updateUser successfully', function(done) {
        //uncomment below and update the code to test updateUser
        //instance.updateUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateUserGroups', function() {
      it('should call updateUserGroups successfully', function(done) {
        //uncomment below and update the code to test updateUserGroups
        //instance.updateUserGroups(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
