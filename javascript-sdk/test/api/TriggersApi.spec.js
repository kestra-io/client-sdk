/**
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.KestraIoKestraSdk);
  }
}(this, function(expect, KestraIoKestraSdk) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new KestraIoKestraSdk.TriggersApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('TriggersApi', function() {
    describe('deleteBackfill', function() {
      it('should call deleteBackfill successfully', function(done) {
        //uncomment below and update the code to test deleteBackfill
        //instance.deleteBackfill(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteBackfillByIds', function() {
      it('should call deleteBackfillByIds successfully', function(done) {
        //uncomment below and update the code to test deleteBackfillByIds
        //instance.deleteBackfillByIds(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteBackfillByQuery', function() {
      it('should call deleteBackfillByQuery successfully', function(done) {
        //uncomment below and update the code to test deleteBackfillByQuery
        //instance.deleteBackfillByQuery(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('disabledTriggersByIds', function() {
      it('should call disabledTriggersByIds successfully', function(done) {
        //uncomment below and update the code to test disabledTriggersByIds
        //instance.disabledTriggersByIds(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('disabledTriggersByQuery', function() {
      it('should call disabledTriggersByQuery successfully', function(done) {
        //uncomment below and update the code to test disabledTriggersByQuery
        //instance.disabledTriggersByQuery(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pauseBackfill', function() {
      it('should call pauseBackfill successfully', function(done) {
        //uncomment below and update the code to test pauseBackfill
        //instance.pauseBackfill(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pauseBackfillByIds', function() {
      it('should call pauseBackfillByIds successfully', function(done) {
        //uncomment below and update the code to test pauseBackfillByIds
        //instance.pauseBackfillByIds(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pauseBackfillByQuery', function() {
      it('should call pauseBackfillByQuery successfully', function(done) {
        //uncomment below and update the code to test pauseBackfillByQuery
        //instance.pauseBackfillByQuery(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('restartTrigger', function() {
      it('should call restartTrigger successfully', function(done) {
        //uncomment below and update the code to test restartTrigger
        //instance.restartTrigger(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('searchTriggers', function() {
      it('should call searchTriggers successfully', function(done) {
        //uncomment below and update the code to test searchTriggers
        //instance.searchTriggers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('searchTriggersForFlow', function() {
      it('should call searchTriggersForFlow successfully', function(done) {
        //uncomment below and update the code to test searchTriggersForFlow
        //instance.searchTriggersForFlow(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('unlockTrigger', function() {
      it('should call unlockTrigger successfully', function(done) {
        //uncomment below and update the code to test unlockTrigger
        //instance.unlockTrigger(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('unlockTriggersByIds', function() {
      it('should call unlockTriggersByIds successfully', function(done) {
        //uncomment below and update the code to test unlockTriggersByIds
        //instance.unlockTriggersByIds(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('unlockTriggersByQuery', function() {
      it('should call unlockTriggersByQuery successfully', function(done) {
        //uncomment below and update the code to test unlockTriggersByQuery
        //instance.unlockTriggersByQuery(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('unpauseBackfill', function() {
      it('should call unpauseBackfill successfully', function(done) {
        //uncomment below and update the code to test unpauseBackfill
        //instance.unpauseBackfill(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('unpauseBackfillByIds', function() {
      it('should call unpauseBackfillByIds successfully', function(done) {
        //uncomment below and update the code to test unpauseBackfillByIds
        //instance.unpauseBackfillByIds(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('unpauseBackfillByQuery', function() {
      it('should call unpauseBackfillByQuery successfully', function(done) {
        //uncomment below and update the code to test unpauseBackfillByQuery
        //instance.unpauseBackfillByQuery(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateTrigger', function() {
      it('should call updateTrigger successfully', function(done) {
        //uncomment below and update the code to test updateTrigger
        //instance.updateTrigger(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
