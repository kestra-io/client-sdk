/**
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.KestraIoKestraSdk);
  }
}(this, function(expect, KestraIoKestraSdk) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new KestraIoKestraSdk.NamespacesApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('NamespacesApi', function() {
    describe('autocompleteNamespaces', function() {
      it('should call autocompleteNamespaces successfully', function(done) {
        //uncomment below and update the code to test autocompleteNamespaces
        //instance.autocompleteNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createNamespace', function() {
      it('should call createNamespace successfully', function(done) {
        //uncomment below and update the code to test createNamespace
        //instance.createNamespace(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteNamespace', function() {
      it('should call deleteNamespace successfully', function(done) {
        //uncomment below and update the code to test deleteNamespace
        //instance.deleteNamespace(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteSecret', function() {
      it('should call deleteSecret successfully', function(done) {
        //uncomment below and update the code to test deleteSecret
        //instance.deleteSecret(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getInheritedSecrets', function() {
      it('should call getInheritedSecrets successfully', function(done) {
        //uncomment below and update the code to test getInheritedSecrets
        //instance.getInheritedSecrets(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getNamespace', function() {
      it('should call getNamespace successfully', function(done) {
        //uncomment below and update the code to test getNamespace
        //instance.getNamespace(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('inheritedPluginDefaults', function() {
      it('should call inheritedPluginDefaults successfully', function(done) {
        //uncomment below and update the code to test inheritedPluginDefaults
        //instance.inheritedPluginDefaults(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('inheritedVariables', function() {
      it('should call inheritedVariables successfully', function(done) {
        //uncomment below and update the code to test inheritedVariables
        //instance.inheritedVariables(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listNamespaceSecrets', function() {
      it('should call listNamespaceSecrets successfully', function(done) {
        //uncomment below and update the code to test listNamespaceSecrets
        //instance.listNamespaceSecrets(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchSecret', function() {
      it('should call patchSecret successfully', function(done) {
        //uncomment below and update the code to test patchSecret
        //instance.patchSecret(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putSecrets', function() {
      it('should call putSecrets successfully', function(done) {
        //uncomment below and update the code to test putSecrets
        //instance.putSecrets(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('searchNamespaces', function() {
      it('should call searchNamespaces successfully', function(done) {
        //uncomment below and update the code to test searchNamespaces
        //instance.searchNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateNamespace', function() {
      it('should call updateNamespace successfully', function(done) {
        //uncomment below and update the code to test updateNamespace
        //instance.updateNamespace(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
