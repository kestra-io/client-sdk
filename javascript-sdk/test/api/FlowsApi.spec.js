/**
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.KestraIoKestraSdk);
  }
}(this, function(expect, KestraIoKestraSdk) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new KestraIoKestraSdk.FlowsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('FlowsApi', function() {
    describe('bulkImportApps', function() {
      it('should call bulkImportApps successfully', function(done) {
        //uncomment below and update the code to test bulkImportApps
        //instance.bulkImportApps(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('bulkUpdateFlows', function() {
      it('should call bulkUpdateFlows successfully', function(done) {
        //uncomment below and update the code to test bulkUpdateFlows
        //instance.bulkUpdateFlows(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createFlow', function() {
      it('should call createFlow successfully', function(done) {
        //uncomment below and update the code to test createFlow
        //instance.createFlow(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteFlow', function() {
      it('should call deleteFlow successfully', function(done) {
        //uncomment below and update the code to test deleteFlow
        //instance.deleteFlow(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteFlowsByIds', function() {
      it('should call deleteFlowsByIds successfully', function(done) {
        //uncomment below and update the code to test deleteFlowsByIds
        //instance.deleteFlowsByIds(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteFlowsByQuery', function() {
      it('should call deleteFlowsByQuery successfully', function(done) {
        //uncomment below and update the code to test deleteFlowsByQuery
        //instance.deleteFlowsByQuery(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('disableFlowsByIds', function() {
      it('should call disableFlowsByIds successfully', function(done) {
        //uncomment below and update the code to test disableFlowsByIds
        //instance.disableFlowsByIds(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('disableFlowsByQuery', function() {
      it('should call disableFlowsByQuery successfully', function(done) {
        //uncomment below and update the code to test disableFlowsByQuery
        //instance.disableFlowsByQuery(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('enableFlowsByIds', function() {
      it('should call enableFlowsByIds successfully', function(done) {
        //uncomment below and update the code to test enableFlowsByIds
        //instance.enableFlowsByIds(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('enableFlowsByQuery', function() {
      it('should call enableFlowsByQuery successfully', function(done) {
        //uncomment below and update the code to test enableFlowsByQuery
        //instance.enableFlowsByQuery(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('exportFlowsByIds', function() {
      it('should call exportFlowsByIds successfully', function(done) {
        //uncomment below and update the code to test exportFlowsByIds
        //instance.exportFlowsByIds(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('exportFlowsByQuery', function() {
      it('should call exportFlowsByQuery successfully', function(done) {
        //uncomment below and update the code to test exportFlowsByQuery
        //instance.exportFlowsByQuery(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('generateFlowGraph', function() {
      it('should call generateFlowGraph successfully', function(done) {
        //uncomment below and update the code to test generateFlowGraph
        //instance.generateFlowGraph(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('generateFlowGraphFromSource', function() {
      it('should call generateFlowGraphFromSource successfully', function(done) {
        //uncomment below and update the code to test generateFlowGraphFromSource
        //instance.generateFlowGraphFromSource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getFlow', function() {
      it('should call getFlow successfully', function(done) {
        //uncomment below and update the code to test getFlow
        //instance.getFlow(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getFlowDependencies', function() {
      it('should call getFlowDependencies successfully', function(done) {
        //uncomment below and update the code to test getFlowDependencies
        //instance.getFlowDependencies(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getFlowDependenciesFromNamespace', function() {
      it('should call getFlowDependenciesFromNamespace successfully', function(done) {
        //uncomment below and update the code to test getFlowDependenciesFromNamespace
        //instance.getFlowDependenciesFromNamespace(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getTaskFromFlow', function() {
      it('should call getTaskFromFlow successfully', function(done) {
        //uncomment below and update the code to test getTaskFromFlow
        //instance.getTaskFromFlow(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('importFlows', function() {
      it('should call importFlows successfully', function(done) {
        //uncomment below and update the code to test importFlows
        //instance.importFlows(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listDistinctNamespaces', function() {
      it('should call listDistinctNamespaces successfully', function(done) {
        //uncomment below and update the code to test listDistinctNamespaces
        //instance.listDistinctNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listFlowRevisions', function() {
      it('should call listFlowRevisions successfully', function(done) {
        //uncomment below and update the code to test listFlowRevisions
        //instance.listFlowRevisions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listFlowsByNamespace', function() {
      it('should call listFlowsByNamespace successfully', function(done) {
        //uncomment below and update the code to test listFlowsByNamespace
        //instance.listFlowsByNamespace(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('searchFlows', function() {
      it('should call searchFlows successfully', function(done) {
        //uncomment below and update the code to test searchFlows
        //instance.searchFlows(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('searchFlowsBySourceCode', function() {
      it('should call searchFlowsBySourceCode successfully', function(done) {
        //uncomment below and update the code to test searchFlowsBySourceCode
        //instance.searchFlowsBySourceCode(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateFlow', function() {
      it('should call updateFlow successfully', function(done) {
        //uncomment below and update the code to test updateFlow
        //instance.updateFlow(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateFlowsInNamespaceFromJson', function() {
      it('should call updateFlowsInNamespaceFromJson successfully', function(done) {
        //uncomment below and update the code to test updateFlowsInNamespaceFromJson
        //instance.updateFlowsInNamespaceFromJson(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateTask', function() {
      it('should call updateTask successfully', function(done) {
        //uncomment below and update the code to test updateTask
        //instance.updateTask(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('validateFlows', function() {
      it('should call validateFlows successfully', function(done) {
        //uncomment below and update the code to test validateFlows
        //instance.validateFlows(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('validateTask', function() {
      it('should call validateTask successfully', function(done) {
        //uncomment below and update the code to test validateTask
        //instance.validateTask(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('validateTrigger', function() {
      it('should call validateTrigger successfully', function(done) {
        //uncomment below and update the code to test validateTrigger
        //instance.validateTrigger(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
