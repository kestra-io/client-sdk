/**
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.KestraIoKestraSdk);
  }
}(this, function(expect, KestraIoKestraSdk) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new KestraIoKestraSdk.ExecutionsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ExecutionsApi', function() {
    describe('createExecution', function() {
      it('should call createExecution successfully', function(done) {
        //uncomment below and update the code to test createExecution
        //instance.createExecution(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteExecution', function() {
      it('should call deleteExecution successfully', function(done) {
        //uncomment below and update the code to test deleteExecution
        //instance.deleteExecution(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteExecutionsByIds', function() {
      it('should call deleteExecutionsByIds successfully', function(done) {
        //uncomment below and update the code to test deleteExecutionsByIds
        //instance.deleteExecutionsByIds(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteExecutionsByQuery', function() {
      it('should call deleteExecutionsByQuery successfully', function(done) {
        //uncomment below and update the code to test deleteExecutionsByQuery
        //instance.deleteExecutionsByQuery(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('downloadFileFromExecution', function() {
      it('should call downloadFileFromExecution successfully', function(done) {
        //uncomment below and update the code to test downloadFileFromExecution
        //instance.downloadFileFromExecution(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('evalTaskRunExpression', function() {
      it('should call evalTaskRunExpression successfully', function(done) {
        //uncomment below and update the code to test evalTaskRunExpression
        //instance.evalTaskRunExpression(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('followDependenciesExecutions', function() {
      it('should call followDependenciesExecutions successfully', function(done) {
        //uncomment below and update the code to test followDependenciesExecutions
        //instance.followDependenciesExecutions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('followExecution', function() {
      it('should call followExecution successfully', function(done) {
        //uncomment below and update the code to test followExecution
        //instance.followExecution(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('forceRunByIds', function() {
      it('should call forceRunByIds successfully', function(done) {
        //uncomment below and update the code to test forceRunByIds
        //instance.forceRunByIds(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('forceRunExecution', function() {
      it('should call forceRunExecution successfully', function(done) {
        //uncomment below and update the code to test forceRunExecution
        //instance.forceRunExecution(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('forceRunExecutionsByQuery', function() {
      it('should call forceRunExecutionsByQuery successfully', function(done) {
        //uncomment below and update the code to test forceRunExecutionsByQuery
        //instance.forceRunExecutionsByQuery(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getExecution', function() {
      it('should call getExecution successfully', function(done) {
        //uncomment below and update the code to test getExecution
        //instance.getExecution(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getExecutionFlowGraph', function() {
      it('should call getExecutionFlowGraph successfully', function(done) {
        //uncomment below and update the code to test getExecutionFlowGraph
        //instance.getExecutionFlowGraph(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getFileMetadatasFromExecution', function() {
      it('should call getFileMetadatasFromExecution successfully', function(done) {
        //uncomment below and update the code to test getFileMetadatasFromExecution
        //instance.getFileMetadatasFromExecution(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getFlowFromExecution', function() {
      it('should call getFlowFromExecution successfully', function(done) {
        //uncomment below and update the code to test getFlowFromExecution
        //instance.getFlowFromExecution(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getFlowFromExecutionById', function() {
      it('should call getFlowFromExecutionById successfully', function(done) {
        //uncomment below and update the code to test getFlowFromExecutionById
        //instance.getFlowFromExecutionById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getLatestExecutions', function() {
      it('should call getLatestExecutions successfully', function(done) {
        //uncomment below and update the code to test getLatestExecutions
        //instance.getLatestExecutions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('killExecution', function() {
      it('should call killExecution successfully', function(done) {
        //uncomment below and update the code to test killExecution
        //instance.killExecution(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('killExecutionsByIds', function() {
      it('should call killExecutionsByIds successfully', function(done) {
        //uncomment below and update the code to test killExecutionsByIds
        //instance.killExecutionsByIds(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('killExecutionsByQuery', function() {
      it('should call killExecutionsByQuery successfully', function(done) {
        //uncomment below and update the code to test killExecutionsByQuery
        //instance.killExecutionsByQuery(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listExecutableDistinctNamespaces', function() {
      it('should call listExecutableDistinctNamespaces successfully', function(done) {
        //uncomment below and update the code to test listExecutableDistinctNamespaces
        //instance.listExecutableDistinctNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listFlowExecutionsByNamespace', function() {
      it('should call listFlowExecutionsByNamespace successfully', function(done) {
        //uncomment below and update the code to test listFlowExecutionsByNamespace
        //instance.listFlowExecutionsByNamespace(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pauseExecution', function() {
      it('should call pauseExecution successfully', function(done) {
        //uncomment below and update the code to test pauseExecution
        //instance.pauseExecution(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pauseExecutionsByIds', function() {
      it('should call pauseExecutionsByIds successfully', function(done) {
        //uncomment below and update the code to test pauseExecutionsByIds
        //instance.pauseExecutionsByIds(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pauseExecutionsByQuery', function() {
      it('should call pauseExecutionsByQuery successfully', function(done) {
        //uncomment below and update the code to test pauseExecutionsByQuery
        //instance.pauseExecutionsByQuery(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('previewFileFromExecution', function() {
      it('should call previewFileFromExecution successfully', function(done) {
        //uncomment below and update the code to test previewFileFromExecution
        //instance.previewFileFromExecution(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replayExecution', function() {
      it('should call replayExecution successfully', function(done) {
        //uncomment below and update the code to test replayExecution
        //instance.replayExecution(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replayExecutionWithinputs', function() {
      it('should call replayExecutionWithinputs successfully', function(done) {
        //uncomment below and update the code to test replayExecutionWithinputs
        //instance.replayExecutionWithinputs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replayExecutionsByIds', function() {
      it('should call replayExecutionsByIds successfully', function(done) {
        //uncomment below and update the code to test replayExecutionsByIds
        //instance.replayExecutionsByIds(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replayExecutionsByQuery', function() {
      it('should call replayExecutionsByQuery successfully', function(done) {
        //uncomment below and update the code to test replayExecutionsByQuery
        //instance.replayExecutionsByQuery(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('restartExecution', function() {
      it('should call restartExecution successfully', function(done) {
        //uncomment below and update the code to test restartExecution
        //instance.restartExecution(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('restartExecutionsByIds', function() {
      it('should call restartExecutionsByIds successfully', function(done) {
        //uncomment below and update the code to test restartExecutionsByIds
        //instance.restartExecutionsByIds(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('restartExecutionsByQuery', function() {
      it('should call restartExecutionsByQuery successfully', function(done) {
        //uncomment below and update the code to test restartExecutionsByQuery
        //instance.restartExecutionsByQuery(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('resumeExecution', function() {
      it('should call resumeExecution successfully', function(done) {
        //uncomment below and update the code to test resumeExecution
        //instance.resumeExecution(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('resumeExecutionFromBreakpoint', function() {
      it('should call resumeExecutionFromBreakpoint successfully', function(done) {
        //uncomment below and update the code to test resumeExecutionFromBreakpoint
        //instance.resumeExecutionFromBreakpoint(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('resumeExecutionsByIds', function() {
      it('should call resumeExecutionsByIds successfully', function(done) {
        //uncomment below and update the code to test resumeExecutionsByIds
        //instance.resumeExecutionsByIds(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('resumeExecutionsByQuery', function() {
      it('should call resumeExecutionsByQuery successfully', function(done) {
        //uncomment below and update the code to test resumeExecutionsByQuery
        //instance.resumeExecutionsByQuery(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('searchExecutions', function() {
      it('should call searchExecutions successfully', function(done) {
        //uncomment below and update the code to test searchExecutions
        //instance.searchExecutions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('searchExecutionsByFlowId', function() {
      it('should call searchExecutionsByFlowId successfully', function(done) {
        //uncomment below and update the code to test searchExecutionsByFlowId
        //instance.searchExecutionsByFlowId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('searchTaskRun', function() {
      it('should call searchTaskRun successfully', function(done) {
        //uncomment below and update the code to test searchTaskRun
        //instance.searchTaskRun(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setLabelsOnTerminatedExecution', function() {
      it('should call setLabelsOnTerminatedExecution successfully', function(done) {
        //uncomment below and update the code to test setLabelsOnTerminatedExecution
        //instance.setLabelsOnTerminatedExecution(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setLabelsOnTerminatedExecutionsByIds', function() {
      it('should call setLabelsOnTerminatedExecutionsByIds successfully', function(done) {
        //uncomment below and update the code to test setLabelsOnTerminatedExecutionsByIds
        //instance.setLabelsOnTerminatedExecutionsByIds(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setLabelsOnTerminatedExecutionsByQuery', function() {
      it('should call setLabelsOnTerminatedExecutionsByQuery successfully', function(done) {
        //uncomment below and update the code to test setLabelsOnTerminatedExecutionsByQuery
        //instance.setLabelsOnTerminatedExecutionsByQuery(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('triggerExecution', function() {
      it('should call triggerExecution successfully', function(done) {
        //uncomment below and update the code to test triggerExecution
        //instance.triggerExecution(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('triggerExecutionByGetWebhook', function() {
      it('should call triggerExecutionByGetWebhook successfully', function(done) {
        //uncomment below and update the code to test triggerExecutionByGetWebhook
        //instance.triggerExecutionByGetWebhook(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('triggerExecutionByPostWebhook', function() {
      it('should call triggerExecutionByPostWebhook successfully', function(done) {
        //uncomment below and update the code to test triggerExecutionByPostWebhook
        //instance.triggerExecutionByPostWebhook(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('triggerExecutionByPutWebhook', function() {
      it('should call triggerExecutionByPutWebhook successfully', function(done) {
        //uncomment below and update the code to test triggerExecutionByPutWebhook
        //instance.triggerExecutionByPutWebhook(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('unqueueExecution', function() {
      it('should call unqueueExecution successfully', function(done) {
        //uncomment below and update the code to test unqueueExecution
        //instance.unqueueExecution(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('unqueueExecutionsByIds', function() {
      it('should call unqueueExecutionsByIds successfully', function(done) {
        //uncomment below and update the code to test unqueueExecutionsByIds
        //instance.unqueueExecutionsByIds(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('unqueueExecutionsByQuery', function() {
      it('should call unqueueExecutionsByQuery successfully', function(done) {
        //uncomment below and update the code to test unqueueExecutionsByQuery
        //instance.unqueueExecutionsByQuery(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateExecutionStatus', function() {
      it('should call updateExecutionStatus successfully', function(done) {
        //uncomment below and update the code to test updateExecutionStatus
        //instance.updateExecutionStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateExecutionsStatusByIds', function() {
      it('should call updateExecutionsStatusByIds successfully', function(done) {
        //uncomment below and update the code to test updateExecutionsStatusByIds
        //instance.updateExecutionsStatusByIds(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateExecutionsStatusByQuery', function() {
      it('should call updateExecutionsStatusByQuery successfully', function(done) {
        //uncomment below and update the code to test updateExecutionsStatusByQuery
        //instance.updateExecutionsStatusByQuery(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateTaskRunState', function() {
      it('should call updateTaskRunState successfully', function(done) {
        //uncomment below and update the code to test updateTaskRunState
        //instance.updateTaskRunState(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('validateNewExecutionInputs', function() {
      it('should call validateNewExecutionInputs successfully', function(done) {
        //uncomment below and update the code to test validateNewExecutionInputs
        //instance.validateNewExecutionInputs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('validateResumeExecutionInputs', function() {
      it('should call validateResumeExecutionInputs successfully', function(done) {
        //uncomment below and update the code to test validateResumeExecutionInputs
        //instance.validateResumeExecutionInputs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
