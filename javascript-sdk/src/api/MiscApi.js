/**
 * Kestra EE
 * All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Action from '../model/Action';
import ApiUser from '../model/ApiUser';
import MiscControllerBasicAuthCredentials from '../model/MiscControllerBasicAuthCredentials';
import MiscControllerEEConfiguration from '../model/MiscControllerEEConfiguration';
import MiscControllerLicenseInfo from '../model/MiscControllerLicenseInfo';
import Permission from '../model/Permission';
import SetupConfiguration from '../model/SetupConfiguration';
import SetupConfigurationSetupData from '../model/SetupConfigurationSetupData';
import Usage from '../model/Usage';
import UsageEE from '../model/UsageEE';

/**
* Misc service.
* @module api/MiscApi
* @version v1
*/
export default class MiscApi {

    /**
    * Constructs a new MiscApi. 
    * @alias module:api/MiscApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createBasicAuth operation.
     * @callback module:api/MiscApi~createBasicAuthCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create basic auth for the current instance
     * @param {module:model/MiscControllerBasicAuthCredentials} miscControllerBasicAuthCredentials 
     * @param {module:api/MiscApi~createBasicAuthCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createBasicAuth(miscControllerBasicAuthCredentials, callback) {
      let postBody = miscControllerBasicAuthCredentials;
      // verify the required parameter 'miscControllerBasicAuthCredentials' is set
      if (miscControllerBasicAuthCredentials === undefined || miscControllerBasicAuthCredentials === null) {
        throw new Error("Missing the required parameter 'miscControllerBasicAuthCredentials' when calling createBasicAuth");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/main/basicAuth', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getConfiguration operation.
     * @callback module:api/MiscApi~getConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MiscControllerEEConfiguration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get current configurations
     * @param {module:api/MiscApi~getConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MiscControllerEEConfiguration}
     */
    getConfiguration(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MiscControllerEEConfiguration;
      return this.apiClient.callApi(
        '/api/v1/configs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUsages operation.
     * @callback module:api/MiscApi~getUsagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Usage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get instance usage information
     * @param {String} tenant 
     * @param {module:api/MiscApi~getUsagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Usage}
     */
    getUsages(tenant, callback) {
      let postBody = null;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling getUsages");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Usage;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/usages/all', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the licenseInfo operation.
     * @callback module:api/MiscApi~licenseInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MiscControllerLicenseInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get current license information
     * @param {module:api/MiscApi~licenseInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MiscControllerLicenseInfo}
     */
    licenseInfo(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MiscControllerLicenseInfo;
      return this.apiClient.callApi(
        '/api/v1/license-info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listActions operation.
     * @callback module:api/MiscApi~listActionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Action>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of actions
     * @param {String} tenant 
     * @param {module:api/MiscApi~listActionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Action>}
     */
    listActions(tenant, callback) {
      let postBody = null;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling listActions");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Action];
      return this.apiClient.callApi(
        '/api/v1/{tenant}/acls/actions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listPermissions operation.
     * @callback module:api/MiscApi~listPermissionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Permission>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of permissions
     * @param {String} tenant 
     * @param {module:api/MiscApi~listPermissionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Permission>}
     */
    listPermissions(tenant, callback) {
      let postBody = null;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling listPermissions");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Permission];
      return this.apiClient.callApi(
        '/api/v1/{tenant}/acls/permissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setupConfiguration operation.
     * @callback module:api/MiscApi~setupConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SetupConfiguration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Currently running configuration
     * @param {module:api/MiscApi~setupConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SetupConfiguration}
     */
    setupConfiguration(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SetupConfiguration;
      return this.apiClient.callApi(
        '/api/v1/setup', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setupKestra operation.
     * @callback module:api/MiscApi~setupKestraCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiUser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create the first user
     * @param {module:model/SetupConfigurationSetupData} setupConfigurationSetupData 
     * @param {module:api/MiscApi~setupKestraCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiUser}
     */
    setupKestra(setupConfigurationSetupData, callback) {
      let postBody = setupConfigurationSetupData;
      // verify the required parameter 'setupConfigurationSetupData' is set
      if (setupConfigurationSetupData === undefined || setupConfigurationSetupData === null) {
        throw new Error("Missing the required parameter 'setupConfigurationSetupData' when calling setupKestra");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApiUser;
      return this.apiClient.callApi(
        '/api/v1/setup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tenantUsage operation.
     * @callback module:api/MiscApi~tenantUsageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsageEE} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get instance usage information for the current tenant
     * @param {String} tenant 
     * @param {module:api/MiscApi~tenantUsageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsageEE}
     */
    tenantUsage(tenant, callback) {
      let postBody = null;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling tenantUsage");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UsageEE;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/usages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
