/**
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import KVControllerApiDeleteBulkRequest from '../model/KVControllerApiDeleteBulkRequest';
import KVControllerApiDeleteBulkResponse from '../model/KVControllerApiDeleteBulkResponse';
import KVControllerTypedValue from '../model/KVControllerTypedValue';
import KVEntry from '../model/KVEntry';

/**
* KV service.
* @module api/KVApi
* @version v1.0.5
*/
export default class KVApi {

    /**
    * Constructs a new KVApi. 
    * @alias module:api/KVApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }




            

    /**
     * Delete a key-value pair
     * @param {String} namespace The namespace id
     * @param {String} key The key
     * @param {String} tenant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Boolean} and HTTP response
     */
    deleteKeyValueWithHttpInfo(namespace, key, tenant) {
      let postBody = null;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling deleteKeyValue");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteKeyValue");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling deleteKeyValue");
      }

      let pathParams = {
        'namespace': namespace,
        'key': key,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Boolean';
      return this.apiClient.callApi(
        '/api/v1/{tenant}/namespaces/{namespace}/kv/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a key-value pair
     * @param {String} namespace The namespace id
     * @param {String} key The key
     * @param {String} tenant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Boolean}
     */
    deleteKeyValue(namespace, key, tenant) {
      return this.deleteKeyValueWithHttpInfo(namespace, key, tenant)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }









            

    /**
     * Bulk-delete multiple key/value pairs from the given namespace.
     * @param {String} namespace The namespace id
     * @param {String} tenant 
     * @param {module:model/KVControllerApiDeleteBulkRequest} kVControllerApiDeleteBulkRequest The keys
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/KVControllerApiDeleteBulkResponse} and HTTP response
     */
    deleteKeyValuesWithHttpInfo(namespace, tenant, kVControllerApiDeleteBulkRequest) {
      let postBody = kVControllerApiDeleteBulkRequest;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling deleteKeyValues");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling deleteKeyValues");
      }
      // verify the required parameter 'kVControllerApiDeleteBulkRequest' is set
      if (kVControllerApiDeleteBulkRequest === undefined || kVControllerApiDeleteBulkRequest === null) {
        throw new Error("Missing the required parameter 'kVControllerApiDeleteBulkRequest' when calling deleteKeyValues");
      }

      let pathParams = {
        'namespace': namespace,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = KVControllerApiDeleteBulkResponse;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/namespaces/{namespace}/kv', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Bulk-delete multiple key/value pairs from the given namespace.
     * @param {String} namespace The namespace id
     * @param {String} tenant 
     * @param {module:model/KVControllerApiDeleteBulkRequest} kVControllerApiDeleteBulkRequest The keys
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/KVControllerApiDeleteBulkResponse}
     */
    deleteKeyValues(namespace, tenant, kVControllerApiDeleteBulkRequest) {
      return this.deleteKeyValuesWithHttpInfo(namespace, tenant, kVControllerApiDeleteBulkRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }









            

    /**
     * Get value for a key
     * @param {String} namespace The namespace id
     * @param {String} key The key
     * @param {String} tenant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/KVControllerTypedValue} and HTTP response
     */
    getKeyValueWithHttpInfo(namespace, key, tenant) {
      let postBody = null;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling getKeyValue");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getKeyValue");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling getKeyValue");
      }

      let pathParams = {
        'namespace': namespace,
        'key': key,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = KVControllerTypedValue;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/namespaces/{namespace}/kv/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get value for a key
     * @param {String} namespace The namespace id
     * @param {String} key The key
     * @param {String} tenant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/KVControllerTypedValue}
     */
    getKeyValue(namespace, key, tenant) {
      return this.getKeyValueWithHttpInfo(namespace, key, tenant)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }









            

    /**
     * List all keys for a namespace
     * @param {String} namespace The namespace id
     * @param {String} tenant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/KVEntry>} and HTTP response
     */
    listKeysWithHttpInfo(namespace, tenant) {
      let postBody = null;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling listKeys");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling listKeys");
      }

      let pathParams = {
        'namespace': namespace,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [KVEntry];
      return this.apiClient.callApi(
        '/api/v1/{tenant}/namespaces/{namespace}/kv', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List all keys for a namespace
     * @param {String} namespace The namespace id
     * @param {String} tenant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/KVEntry>}
     */
    listKeys(namespace, tenant) {
      return this.listKeysWithHttpInfo(namespace, tenant)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }









            

    /**
     * List all keys for inherited namespaces
     * @param {String} namespace The namespace id
     * @param {String} tenant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/KVEntry>} and HTTP response
     */
    listKeysWithInheritenceWithHttpInfo(namespace, tenant) {
      let postBody = null;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling listKeysWithInheritence");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling listKeysWithInheritence");
      }

      let pathParams = {
        'namespace': namespace,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [KVEntry];
      return this.apiClient.callApi(
        '/api/v1/{tenant}/namespaces/{namespace}/kv/inheritance', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List all keys for inherited namespaces
     * @param {String} namespace The namespace id
     * @param {String} tenant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/KVEntry>}
     */
    listKeysWithInheritence(namespace, tenant) {
      return this.listKeysWithInheritenceWithHttpInfo(namespace, tenant)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }









            

    /**
     * Puts a key-value pair in store
     * @param {String} namespace The namespace id
     * @param {String} key The key
     * @param {String} tenant 
     * @param {String} body The value of the key
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setKeyValueWithHttpInfo(namespace, key, tenant, body) {
      let postBody = body;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling setKeyValue");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling setKeyValue");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling setKeyValue");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling setKeyValue");
      }

      let pathParams = {
        'namespace': namespace,
        'key': key,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json', 'text/plain'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/namespaces/{namespace}/kv/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Puts a key-value pair in store
     * @param {String} namespace The namespace id
     * @param {String} key The key
     * @param {String} tenant 
     * @param {String} body The value of the key
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setKeyValue(namespace, key, tenant, body) {
      return this.setKeyValueWithHttpInfo(namespace, key, tenant, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }








}
