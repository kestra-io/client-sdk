/**
 * Kestra EE
 * All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Invitation from '../model/Invitation';
import InvitationInvitationStatus from '../model/InvitationInvitationStatus';
import PagedResultsInvitation from '../model/PagedResultsInvitation';

/**
* Invitations service.
* @module api/InvitationsApi
* @version v1
*/
export default class InvitationsApi {

    /**
    * Constructs a new InvitationsApi. 
    * @alias module:api/InvitationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createInvitation operation.
     * @callback module:api/InvitationsApi~createInvitationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Invitation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an invitation
     * @param {String} tenant 
     * @param {module:model/Invitation} invitation Create a new invitation, send an email if the server-mail is enabled
     * @param {module:api/InvitationsApi~createInvitationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Invitation}
     */
    createInvitation(tenant, invitation, callback) {
      let postBody = invitation;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling createInvitation");
      }
      // verify the required parameter 'invitation' is set
      if (invitation === undefined || invitation === null) {
        throw new Error("Missing the required parameter 'invitation' when calling createInvitation");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Invitation;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/invitations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createInvitationWithResourceTenantasSuperAdmin operation.
     * @callback module:api/InvitationsApi~createInvitationWithResourceTenantasSuperAdminCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Invitation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an invitation
     * @param {String} resourceTenant 
     * @param {module:model/Invitation} invitation Create a new invitation, send an email if the server-mail is enabled
     * @param {module:api/InvitationsApi~createInvitationWithResourceTenantasSuperAdminCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Invitation}
     */
    createInvitationWithResourceTenantasSuperAdmin(resourceTenant, invitation, callback) {
      let postBody = invitation;
      // verify the required parameter 'resourceTenant' is set
      if (resourceTenant === undefined || resourceTenant === null) {
        throw new Error("Missing the required parameter 'resourceTenant' when calling createInvitationWithResourceTenantasSuperAdmin");
      }
      // verify the required parameter 'invitation' is set
      if (invitation === undefined || invitation === null) {
        throw new Error("Missing the required parameter 'invitation' when calling createInvitationWithResourceTenantasSuperAdmin");
      }

      let pathParams = {
        'resourceTenant': resourceTenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Invitation;
      return this.apiClient.callApi(
        '/api/v1/tenants/{resourceTenant}/invitations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createInvitationasSuperAdmin operation.
     * @callback module:api/InvitationsApi~createInvitationasSuperAdminCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Invitation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an invitation
     * @param {module:model/Invitation} invitation Create a new invitation, send an email if the server-mail is enabled
     * @param {module:api/InvitationsApi~createInvitationasSuperAdminCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Invitation}
     */
    createInvitationasSuperAdmin(invitation, callback) {
      let postBody = invitation;
      // verify the required parameter 'invitation' is set
      if (invitation === undefined || invitation === null) {
        throw new Error("Missing the required parameter 'invitation' when calling createInvitationasSuperAdmin");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Invitation;
      return this.apiClient.callApi(
        '/api/v1/tenants/invitations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteInvitation operation.
     * @callback module:api/InvitationsApi~deleteInvitationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an invitation
     * @param {String} id The id of the invitation
     * @param {String} tenant 
     * @param {module:api/InvitationsApi~deleteInvitationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteInvitation(id, tenant, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteInvitation");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling deleteInvitation");
      }

      let pathParams = {
        'id': id,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/invitations/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteInvitationWithResourceTenantasSuperAdmin operation.
     * @callback module:api/InvitationsApi~deleteInvitationWithResourceTenantasSuperAdminCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an invitation
     * @param {String} id The id of the invitation
     * @param {String} resourceTenant 
     * @param {module:api/InvitationsApi~deleteInvitationWithResourceTenantasSuperAdminCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteInvitationWithResourceTenantasSuperAdmin(id, resourceTenant, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteInvitationWithResourceTenantasSuperAdmin");
      }
      // verify the required parameter 'resourceTenant' is set
      if (resourceTenant === undefined || resourceTenant === null) {
        throw new Error("Missing the required parameter 'resourceTenant' when calling deleteInvitationWithResourceTenantasSuperAdmin");
      }

      let pathParams = {
        'id': id,
        'resourceTenant': resourceTenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/tenants/{resourceTenant}/invitations/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteInvitationasSuperAdmin operation.
     * @callback module:api/InvitationsApi~deleteInvitationasSuperAdminCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an invitation
     * @param {String} id The id of the invitation
     * @param {module:api/InvitationsApi~deleteInvitationasSuperAdminCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteInvitationasSuperAdmin(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteInvitationasSuperAdmin");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/tenants/invitations/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findAllInvitationsForCurrentUser operation.
     * @callback module:api/InvitationsApi~findAllInvitationsForCurrentUserCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Invitation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all invitations for a given email
     * @param {module:api/InvitationsApi~findAllInvitationsForCurrentUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Invitation>}
     */
    findAllInvitationsForCurrentUser(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Invitation];
      return this.apiClient.callApi(
        '/api/v1/me/invitations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findAllInvitationsForCurrentUserWithTenant operation.
     * @callback module:api/InvitationsApi~findAllInvitationsForCurrentUserWithTenantCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Invitation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all invitations for a given email
     * @param {String} tenant 
     * @param {module:api/InvitationsApi~findAllInvitationsForCurrentUserWithTenantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Invitation>}
     */
    findAllInvitationsForCurrentUserWithTenant(tenant, callback) {
      let postBody = null;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling findAllInvitationsForCurrentUserWithTenant");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Invitation];
      return this.apiClient.callApi(
        '/api/v1/{tenant}/me/invitations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInvitation operation.
     * @callback module:api/InvitationsApi~getInvitationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Invitation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an invitation
     * @param {String} id The id of the invitation
     * @param {String} tenant 
     * @param {module:api/InvitationsApi~getInvitationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Invitation}
     */
    getInvitation(id, tenant, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getInvitation");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling getInvitation");
      }

      let pathParams = {
        'id': id,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Invitation;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/invitations/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInvitationWithResourceTenantasSuperAdmin operation.
     * @callback module:api/InvitationsApi~getInvitationWithResourceTenantasSuperAdminCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Invitation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an invitation
     * @param {String} id The id of the invitation
     * @param {String} resourceTenant 
     * @param {module:api/InvitationsApi~getInvitationWithResourceTenantasSuperAdminCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Invitation}
     */
    getInvitationWithResourceTenantasSuperAdmin(id, resourceTenant, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getInvitationWithResourceTenantasSuperAdmin");
      }
      // verify the required parameter 'resourceTenant' is set
      if (resourceTenant === undefined || resourceTenant === null) {
        throw new Error("Missing the required parameter 'resourceTenant' when calling getInvitationWithResourceTenantasSuperAdmin");
      }

      let pathParams = {
        'id': id,
        'resourceTenant': resourceTenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Invitation;
      return this.apiClient.callApi(
        '/api/v1/tenants/{resourceTenant}/invitations/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInvitationasSuperAdmin operation.
     * @callback module:api/InvitationsApi~getInvitationasSuperAdminCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Invitation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an invitation
     * @param {String} id The id of the invitation
     * @param {module:api/InvitationsApi~getInvitationasSuperAdminCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Invitation}
     */
    getInvitationasSuperAdmin(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getInvitationasSuperAdmin");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Invitation;
      return this.apiClient.callApi(
        '/api/v1/tenants/invitations/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listByEmail operation.
     * @callback module:api/InvitationsApi~listByEmailCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Invitation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all invitations for a given email
     * @param {String} email The email address of the invited
     * @param {String} tenant 
     * @param {module:api/InvitationsApi~listByEmailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Invitation>}
     */
    listByEmail(email, tenant, callback) {
      let postBody = null;
      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling listByEmail");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling listByEmail");
      }

      let pathParams = {
        'email': email,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Invitation];
      return this.apiClient.callApi(
        '/api/v1/{tenant}/invitations/email/{email}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listByEmailWithResourceTenantasSuperAdmin operation.
     * @callback module:api/InvitationsApi~listByEmailWithResourceTenantasSuperAdminCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Invitation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all invitations for a given email
     * @param {String} email The email address of the invited
     * @param {String} resourceTenant 
     * @param {module:api/InvitationsApi~listByEmailWithResourceTenantasSuperAdminCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Invitation>}
     */
    listByEmailWithResourceTenantasSuperAdmin(email, resourceTenant, callback) {
      let postBody = null;
      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling listByEmailWithResourceTenantasSuperAdmin");
      }
      // verify the required parameter 'resourceTenant' is set
      if (resourceTenant === undefined || resourceTenant === null) {
        throw new Error("Missing the required parameter 'resourceTenant' when calling listByEmailWithResourceTenantasSuperAdmin");
      }

      let pathParams = {
        'email': email,
        'resourceTenant': resourceTenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Invitation];
      return this.apiClient.callApi(
        '/api/v1/tenants/{resourceTenant}/invitations/email/{email}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listByEmailasSuperAdmin operation.
     * @callback module:api/InvitationsApi~listByEmailasSuperAdminCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Invitation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all invitations for a given email
     * @param {String} email The email address of the invited
     * @param {module:api/InvitationsApi~listByEmailasSuperAdminCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Invitation>}
     */
    listByEmailasSuperAdmin(email, callback) {
      let postBody = null;
      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling listByEmailasSuperAdmin");
      }

      let pathParams = {
        'email': email
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Invitation];
      return this.apiClient.callApi(
        '/api/v1/tenants/invitations/email/{email}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchInvitations operation.
     * @callback module:api/InvitationsApi~searchInvitationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedResultsInvitation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for invitations
     * @param {Number} page The current page
     * @param {Number} size The current page size
     * @param {String} tenant 
     * @param {Object} opts Optional parameters
     * @param {String} [email] The email address of the invited
     * @param {module:model/InvitationInvitationStatus} [status] The current status of the invitations
     * @param {Array.<String>} [sort] The sort of current page
     * @param {module:api/InvitationsApi~searchInvitationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedResultsInvitation}
     */
    searchInvitations(page, size, tenant, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling searchInvitations");
      }
      // verify the required parameter 'size' is set
      if (size === undefined || size === null) {
        throw new Error("Missing the required parameter 'size' when calling searchInvitations");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling searchInvitations");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
        'email': opts['email'],
        'status': opts['status'],
        'page': page,
        'size': size,
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagedResultsInvitation;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/invitations/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchInvitationsWithResourceTenantasSuperAdmin operation.
     * @callback module:api/InvitationsApi~searchInvitationsWithResourceTenantasSuperAdminCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedResultsInvitation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for invitations
     * @param {Number} page The current page
     * @param {Number} size The current page size
     * @param {String} resourceTenant 
     * @param {Object} opts Optional parameters
     * @param {String} [email] The email address of the invited
     * @param {module:model/InvitationInvitationStatus} [status] The current status of the invitations
     * @param {Array.<String>} [sort] The sort of current page
     * @param {module:api/InvitationsApi~searchInvitationsWithResourceTenantasSuperAdminCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedResultsInvitation}
     */
    searchInvitationsWithResourceTenantasSuperAdmin(page, size, resourceTenant, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling searchInvitationsWithResourceTenantasSuperAdmin");
      }
      // verify the required parameter 'size' is set
      if (size === undefined || size === null) {
        throw new Error("Missing the required parameter 'size' when calling searchInvitationsWithResourceTenantasSuperAdmin");
      }
      // verify the required parameter 'resourceTenant' is set
      if (resourceTenant === undefined || resourceTenant === null) {
        throw new Error("Missing the required parameter 'resourceTenant' when calling searchInvitationsWithResourceTenantasSuperAdmin");
      }

      let pathParams = {
        'resourceTenant': resourceTenant
      };
      let queryParams = {
        'email': opts['email'],
        'status': opts['status'],
        'page': page,
        'size': size,
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagedResultsInvitation;
      return this.apiClient.callApi(
        '/api/v1/tenants/{resourceTenant}/invitations/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchInvitationsasSuperAdmin operation.
     * @callback module:api/InvitationsApi~searchInvitationsasSuperAdminCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedResultsInvitation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for invitations
     * @param {Number} page The current page
     * @param {Number} size The current page size
     * @param {Object} opts Optional parameters
     * @param {String} [email] The email address of the invited
     * @param {module:model/InvitationInvitationStatus} [status] The current status of the invitations
     * @param {Array.<String>} [sort] The sort of current page
     * @param {module:api/InvitationsApi~searchInvitationsasSuperAdminCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedResultsInvitation}
     */
    searchInvitationsasSuperAdmin(page, size, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling searchInvitationsasSuperAdmin");
      }
      // verify the required parameter 'size' is set
      if (size === undefined || size === null) {
        throw new Error("Missing the required parameter 'size' when calling searchInvitationsasSuperAdmin");
      }

      let pathParams = {
      };
      let queryParams = {
        'email': opts['email'],
        'status': opts['status'],
        'page': page,
        'size': size,
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagedResultsInvitation;
      return this.apiClient.callApi(
        '/api/v1/tenants/invitations/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
