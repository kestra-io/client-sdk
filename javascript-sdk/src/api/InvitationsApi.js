/**
 * Kestra EE
 * All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Invitation from '../model/Invitation';
import InvitationInvitationStatus from '../model/InvitationInvitationStatus';
import PagedResultsInvitation from '../model/PagedResultsInvitation';

/**
* Invitations service.
* @module api/InvitationsApi
* @version v1
*/
export default class InvitationsApi {

    /**
    * Constructs a new InvitationsApi. 
    * @alias module:api/InvitationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create an invitation
     * @param {String} tenant 
     * @param {module:model/Invitation} invitation Create a new invitation, send an email if the server-mail is enabled
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Invitation} and HTTP response
     */
    createInvitationWithHttpInfo(tenant, invitation) {
      let postBody = invitation;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling createInvitation");
      }
      // verify the required parameter 'invitation' is set
      if (invitation === undefined || invitation === null) {
        throw new Error("Missing the required parameter 'invitation' when calling createInvitation");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Invitation;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/invitations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create an invitation
     * @param {String} tenant 
     * @param {module:model/Invitation} invitation Create a new invitation, send an email if the server-mail is enabled
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Invitation}
     */
    createInvitation(tenant, invitation) {
      return this.createInvitationWithHttpInfo(tenant, invitation)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create an invitation
     * @param {String} resourceTenant 
     * @param {module:model/Invitation} invitation Create a new invitation, send an email if the server-mail is enabled
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Invitation} and HTTP response
     */
    createInvitationWithResourceTenantasSuperAdminWithHttpInfo(resourceTenant, invitation) {
      let postBody = invitation;
      // verify the required parameter 'resourceTenant' is set
      if (resourceTenant === undefined || resourceTenant === null) {
        throw new Error("Missing the required parameter 'resourceTenant' when calling createInvitationWithResourceTenantasSuperAdmin");
      }
      // verify the required parameter 'invitation' is set
      if (invitation === undefined || invitation === null) {
        throw new Error("Missing the required parameter 'invitation' when calling createInvitationWithResourceTenantasSuperAdmin");
      }

      let pathParams = {
        'resourceTenant': resourceTenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Invitation;
      return this.apiClient.callApi(
        '/api/v1/tenants/{resourceTenant}/invitations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create an invitation
     * @param {String} resourceTenant 
     * @param {module:model/Invitation} invitation Create a new invitation, send an email if the server-mail is enabled
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Invitation}
     */
    createInvitationWithResourceTenantasSuperAdmin(resourceTenant, invitation) {
      return this.createInvitationWithResourceTenantasSuperAdminWithHttpInfo(resourceTenant, invitation)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create an invitation
     * @param {module:model/Invitation} invitation Create a new invitation, send an email if the server-mail is enabled
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Invitation} and HTTP response
     */
    createInvitationasSuperAdminWithHttpInfo(invitation) {
      let postBody = invitation;
      // verify the required parameter 'invitation' is set
      if (invitation === undefined || invitation === null) {
        throw new Error("Missing the required parameter 'invitation' when calling createInvitationasSuperAdmin");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Invitation;
      return this.apiClient.callApi(
        '/api/v1/tenants/invitations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create an invitation
     * @param {module:model/Invitation} invitation Create a new invitation, send an email if the server-mail is enabled
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Invitation}
     */
    createInvitationasSuperAdmin(invitation) {
      return this.createInvitationasSuperAdminWithHttpInfo(invitation)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete an invitation
     * @param {String} id The id of the invitation
     * @param {String} tenant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteInvitationWithHttpInfo(id, tenant) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteInvitation");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling deleteInvitation");
      }

      let pathParams = {
        'id': id,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/invitations/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete an invitation
     * @param {String} id The id of the invitation
     * @param {String} tenant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteInvitation(id, tenant) {
      return this.deleteInvitationWithHttpInfo(id, tenant)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete an invitation
     * @param {String} id The id of the invitation
     * @param {String} resourceTenant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteInvitationWithResourceTenantasSuperAdminWithHttpInfo(id, resourceTenant) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteInvitationWithResourceTenantasSuperAdmin");
      }
      // verify the required parameter 'resourceTenant' is set
      if (resourceTenant === undefined || resourceTenant === null) {
        throw new Error("Missing the required parameter 'resourceTenant' when calling deleteInvitationWithResourceTenantasSuperAdmin");
      }

      let pathParams = {
        'id': id,
        'resourceTenant': resourceTenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/tenants/{resourceTenant}/invitations/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete an invitation
     * @param {String} id The id of the invitation
     * @param {String} resourceTenant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteInvitationWithResourceTenantasSuperAdmin(id, resourceTenant) {
      return this.deleteInvitationWithResourceTenantasSuperAdminWithHttpInfo(id, resourceTenant)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete an invitation
     * @param {String} id The id of the invitation
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteInvitationasSuperAdminWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteInvitationasSuperAdmin");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/tenants/invitations/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete an invitation
     * @param {String} id The id of the invitation
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteInvitationasSuperAdmin(id) {
      return this.deleteInvitationasSuperAdminWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all invitations for a given email
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Invitation>} and HTTP response
     */
    findAllInvitationsForCurrentUserWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Invitation];
      return this.apiClient.callApi(
        '/api/v1/me/invitations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all invitations for a given email
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Invitation>}
     */
    findAllInvitationsForCurrentUser() {
      return this.findAllInvitationsForCurrentUserWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all invitations for a given email
     * @param {String} tenant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Invitation>} and HTTP response
     */
    findAllInvitationsForCurrentUserWithTenantWithHttpInfo(tenant) {
      let postBody = null;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling findAllInvitationsForCurrentUserWithTenant");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Invitation];
      return this.apiClient.callApi(
        '/api/v1/{tenant}/me/invitations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all invitations for a given email
     * @param {String} tenant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Invitation>}
     */
    findAllInvitationsForCurrentUserWithTenant(tenant) {
      return this.findAllInvitationsForCurrentUserWithTenantWithHttpInfo(tenant)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get an invitation
     * @param {String} id The id of the invitation
     * @param {String} tenant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Invitation} and HTTP response
     */
    getInvitationWithHttpInfo(id, tenant) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getInvitation");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling getInvitation");
      }

      let pathParams = {
        'id': id,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Invitation;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/invitations/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get an invitation
     * @param {String} id The id of the invitation
     * @param {String} tenant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Invitation}
     */
    getInvitation(id, tenant) {
      return this.getInvitationWithHttpInfo(id, tenant)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get an invitation
     * @param {String} id The id of the invitation
     * @param {String} resourceTenant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Invitation} and HTTP response
     */
    getInvitationWithResourceTenantasSuperAdminWithHttpInfo(id, resourceTenant) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getInvitationWithResourceTenantasSuperAdmin");
      }
      // verify the required parameter 'resourceTenant' is set
      if (resourceTenant === undefined || resourceTenant === null) {
        throw new Error("Missing the required parameter 'resourceTenant' when calling getInvitationWithResourceTenantasSuperAdmin");
      }

      let pathParams = {
        'id': id,
        'resourceTenant': resourceTenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Invitation;
      return this.apiClient.callApi(
        '/api/v1/tenants/{resourceTenant}/invitations/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get an invitation
     * @param {String} id The id of the invitation
     * @param {String} resourceTenant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Invitation}
     */
    getInvitationWithResourceTenantasSuperAdmin(id, resourceTenant) {
      return this.getInvitationWithResourceTenantasSuperAdminWithHttpInfo(id, resourceTenant)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get an invitation
     * @param {String} id The id of the invitation
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Invitation} and HTTP response
     */
    getInvitationasSuperAdminWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getInvitationasSuperAdmin");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Invitation;
      return this.apiClient.callApi(
        '/api/v1/tenants/invitations/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get an invitation
     * @param {String} id The id of the invitation
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Invitation}
     */
    getInvitationasSuperAdmin(id) {
      return this.getInvitationasSuperAdminWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all invitations for a given email
     * @param {String} email The email address of the invited
     * @param {String} tenant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Invitation>} and HTTP response
     */
    listByEmailWithHttpInfo(email, tenant) {
      let postBody = null;
      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling listByEmail");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling listByEmail");
      }

      let pathParams = {
        'email': email,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Invitation];
      return this.apiClient.callApi(
        '/api/v1/{tenant}/invitations/email/{email}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all invitations for a given email
     * @param {String} email The email address of the invited
     * @param {String} tenant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Invitation>}
     */
    listByEmail(email, tenant) {
      return this.listByEmailWithHttpInfo(email, tenant)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all invitations for a given email
     * @param {String} email The email address of the invited
     * @param {String} resourceTenant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Invitation>} and HTTP response
     */
    listByEmailWithResourceTenantasSuperAdminWithHttpInfo(email, resourceTenant) {
      let postBody = null;
      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling listByEmailWithResourceTenantasSuperAdmin");
      }
      // verify the required parameter 'resourceTenant' is set
      if (resourceTenant === undefined || resourceTenant === null) {
        throw new Error("Missing the required parameter 'resourceTenant' when calling listByEmailWithResourceTenantasSuperAdmin");
      }

      let pathParams = {
        'email': email,
        'resourceTenant': resourceTenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Invitation];
      return this.apiClient.callApi(
        '/api/v1/tenants/{resourceTenant}/invitations/email/{email}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all invitations for a given email
     * @param {String} email The email address of the invited
     * @param {String} resourceTenant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Invitation>}
     */
    listByEmailWithResourceTenantasSuperAdmin(email, resourceTenant) {
      return this.listByEmailWithResourceTenantasSuperAdminWithHttpInfo(email, resourceTenant)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all invitations for a given email
     * @param {String} email The email address of the invited
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Invitation>} and HTTP response
     */
    listByEmailasSuperAdminWithHttpInfo(email) {
      let postBody = null;
      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling listByEmailasSuperAdmin");
      }

      let pathParams = {
        'email': email
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Invitation];
      return this.apiClient.callApi(
        '/api/v1/tenants/invitations/email/{email}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all invitations for a given email
     * @param {String} email The email address of the invited
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Invitation>}
     */
    listByEmailasSuperAdmin(email) {
      return this.listByEmailasSuperAdminWithHttpInfo(email)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Search for invitations
     * @param {Number} page The current page
     * @param {Number} size The current page size
     * @param {String} tenant 
     * @param {Object} opts Optional parameters
     * @param {String} [email] The email address of the invited
     * @param {module:model/InvitationInvitationStatus} [status] The current status of the invitations
     * @param {Array.<String>} [sort] The sort of current page
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PagedResultsInvitation} and HTTP response
     */
    searchInvitationsWithHttpInfo(page, size, tenant, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling searchInvitations");
      }
      // verify the required parameter 'size' is set
      if (size === undefined || size === null) {
        throw new Error("Missing the required parameter 'size' when calling searchInvitations");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling searchInvitations");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
        'email': opts['email'],
        'status': opts['status'],
        'page': page,
        'size': size,
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagedResultsInvitation;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/invitations/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Search for invitations
     * @param {Number} page The current page
     * @param {Number} size The current page size
     * @param {String} tenant 
     * @param {Object} opts Optional parameters
     * @param {String} opts.email The email address of the invited
     * @param {module:model/InvitationInvitationStatus} opts.status The current status of the invitations
     * @param {Array.<String>} opts.sort The sort of current page
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PagedResultsInvitation}
     */
    searchInvitations(page, size, tenant, opts) {
      return this.searchInvitationsWithHttpInfo(page, size, tenant, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Search for invitations
     * @param {Number} page The current page
     * @param {Number} size The current page size
     * @param {String} resourceTenant 
     * @param {Object} opts Optional parameters
     * @param {String} [email] The email address of the invited
     * @param {module:model/InvitationInvitationStatus} [status] The current status of the invitations
     * @param {Array.<String>} [sort] The sort of current page
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PagedResultsInvitation} and HTTP response
     */
    searchInvitationsWithResourceTenantasSuperAdminWithHttpInfo(page, size, resourceTenant, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling searchInvitationsWithResourceTenantasSuperAdmin");
      }
      // verify the required parameter 'size' is set
      if (size === undefined || size === null) {
        throw new Error("Missing the required parameter 'size' when calling searchInvitationsWithResourceTenantasSuperAdmin");
      }
      // verify the required parameter 'resourceTenant' is set
      if (resourceTenant === undefined || resourceTenant === null) {
        throw new Error("Missing the required parameter 'resourceTenant' when calling searchInvitationsWithResourceTenantasSuperAdmin");
      }

      let pathParams = {
        'resourceTenant': resourceTenant
      };
      let queryParams = {
        'email': opts['email'],
        'status': opts['status'],
        'page': page,
        'size': size,
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagedResultsInvitation;
      return this.apiClient.callApi(
        '/api/v1/tenants/{resourceTenant}/invitations/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Search for invitations
     * @param {Number} page The current page
     * @param {Number} size The current page size
     * @param {String} resourceTenant 
     * @param {Object} opts Optional parameters
     * @param {String} opts.email The email address of the invited
     * @param {module:model/InvitationInvitationStatus} opts.status The current status of the invitations
     * @param {Array.<String>} opts.sort The sort of current page
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PagedResultsInvitation}
     */
    searchInvitationsWithResourceTenantasSuperAdmin(page, size, resourceTenant, opts) {
      return this.searchInvitationsWithResourceTenantasSuperAdminWithHttpInfo(page, size, resourceTenant, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Search for invitations
     * @param {Number} page The current page
     * @param {Number} size The current page size
     * @param {Object} opts Optional parameters
     * @param {String} [email] The email address of the invited
     * @param {module:model/InvitationInvitationStatus} [status] The current status of the invitations
     * @param {Array.<String>} [sort] The sort of current page
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PagedResultsInvitation} and HTTP response
     */
    searchInvitationsasSuperAdminWithHttpInfo(page, size, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling searchInvitationsasSuperAdmin");
      }
      // verify the required parameter 'size' is set
      if (size === undefined || size === null) {
        throw new Error("Missing the required parameter 'size' when calling searchInvitationsasSuperAdmin");
      }

      let pathParams = {
      };
      let queryParams = {
        'email': opts['email'],
        'status': opts['status'],
        'page': page,
        'size': size,
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagedResultsInvitation;
      return this.apiClient.callApi(
        '/api/v1/tenants/invitations/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Search for invitations
     * @param {Number} page The current page
     * @param {Number} size The current page size
     * @param {Object} opts Optional parameters
     * @param {String} opts.email The email address of the invited
     * @param {module:model/InvitationInvitationStatus} opts.status The current status of the invitations
     * @param {Array.<String>} opts.sort The sort of current page
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PagedResultsInvitation}
     */
    searchInvitationsasSuperAdmin(page, size, opts) {
      return this.searchInvitationsasSuperAdminWithHttpInfo(page, size, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
