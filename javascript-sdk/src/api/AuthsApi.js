/**
 * Kestra EE
 * All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AuthControllerAuth from '../model/AuthControllerAuth';
import CreateApiTokenRequest from '../model/CreateApiTokenRequest';
import MeControllerMe from '../model/MeControllerMe';
import MeControllerUserDetailsRequest from '../model/MeControllerUserDetailsRequest';

/**
* Auths service.
* @module api/AuthsApi
* @version v1
*/
export default class AuthsApi {

    /**
    * Constructs a new AuthsApi. 
    * @alias module:api/AuthsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create new API Token for authenticated user
     * @param {module:model/CreateApiTokenRequest} createApiTokenRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    createApiTokenForCurrentUserWithHttpInfo(createApiTokenRequest) {
      let postBody = createApiTokenRequest;
      // verify the required parameter 'createApiTokenRequest' is set
      if (createApiTokenRequest === undefined || createApiTokenRequest === null) {
        throw new Error("Missing the required parameter 'createApiTokenRequest' when calling createApiTokenForCurrentUser");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/me/api-tokens', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create new API Token for authenticated user
     * @param {module:model/CreateApiTokenRequest} createApiTokenRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    createApiTokenForCurrentUser(createApiTokenRequest) {
      return this.createApiTokenForCurrentUserWithHttpInfo(createApiTokenRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create new API Token for authenticated user
     * @param {String} tenant 
     * @param {module:model/CreateApiTokenRequest} createApiTokenRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    createApiTokenForCurrentUserWithTenantWithHttpInfo(tenant, createApiTokenRequest) {
      let postBody = createApiTokenRequest;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling createApiTokenForCurrentUserWithTenant");
      }
      // verify the required parameter 'createApiTokenRequest' is set
      if (createApiTokenRequest === undefined || createApiTokenRequest === null) {
        throw new Error("Missing the required parameter 'createApiTokenRequest' when calling createApiTokenForCurrentUserWithTenant");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/me/api-tokens', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create new API Token for authenticated user
     * @param {String} tenant 
     * @param {module:model/CreateApiTokenRequest} createApiTokenRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    createApiTokenForCurrentUserWithTenant(tenant, createApiTokenRequest) {
      return this.createApiTokenForCurrentUserWithTenantWithHttpInfo(tenant, createApiTokenRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete an API Token for authenticated user
     * @param {String} tokenId The token id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    deleteApiTokenForCurrentUserWithHttpInfo(tokenId) {
      let postBody = null;
      // verify the required parameter 'tokenId' is set
      if (tokenId === undefined || tokenId === null) {
        throw new Error("Missing the required parameter 'tokenId' when calling deleteApiTokenForCurrentUser");
      }

      let pathParams = {
        'tokenId': tokenId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/me/api-tokens/{tokenId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete an API Token for authenticated user
     * @param {String} tokenId The token id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    deleteApiTokenForCurrentUser(tokenId) {
      return this.deleteApiTokenForCurrentUserWithHttpInfo(tokenId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete an API Token for authenticated user
     * @param {String} tokenId The token id
     * @param {String} tenant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    deleteApiTokenForCurrentUserWithTenantWithHttpInfo(tokenId, tenant) {
      let postBody = null;
      // verify the required parameter 'tokenId' is set
      if (tokenId === undefined || tokenId === null) {
        throw new Error("Missing the required parameter 'tokenId' when calling deleteApiTokenForCurrentUserWithTenant");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling deleteApiTokenForCurrentUserWithTenant");
      }

      let pathParams = {
        'tokenId': tokenId,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/me/api-tokens/{tokenId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete an API Token for authenticated user
     * @param {String} tokenId The token id
     * @param {String} tenant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    deleteApiTokenForCurrentUserWithTenant(tokenId, tenant) {
      return this.deleteApiTokenForCurrentUserWithTenantWithHttpInfo(tokenId, tenant)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get current user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MeControllerMe} and HTTP response
     */
    getCurrentUserWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MeControllerMe;
      return this.apiClient.callApi(
        '/api/v1/me', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get current user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MeControllerMe}
     */
    getCurrentUser() {
      return this.getCurrentUserWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get current user
     * @param {String} tenant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MeControllerMe} and HTTP response
     */
    getCurrentUserWithTenantWithHttpInfo(tenant) {
      let postBody = null;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling getCurrentUserWithTenant");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MeControllerMe;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/me', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get current user
     * @param {String} tenant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MeControllerMe}
     */
    getCurrentUserWithTenant(tenant) {
      return this.getCurrentUserWithTenantWithHttpInfo(tenant)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get list of authentication methods
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AuthControllerAuth} and HTTP response
     */
    indexWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AuthControllerAuth;
      return this.apiClient.callApi(
        '/api/v1/auths', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get list of authentication methods
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AuthControllerAuth}
     */
    index() {
      return this.indexWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List all API Tokens for the authenticated user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    listApiTokensForCurrentUserWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/me/api-tokens', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List all API Tokens for the authenticated user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    listApiTokensForCurrentUser() {
      return this.listApiTokensForCurrentUserWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List all API Tokens for the authenticated user
     * @param {String} tenant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    listApiTokensForCurrentUserWithTenantWithHttpInfo(tenant) {
      let postBody = null;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling listApiTokensForCurrentUserWithTenant");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/me/api-tokens', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List all API Tokens for the authenticated user
     * @param {String} tenant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    listApiTokensForCurrentUserWithTenant(tenant) {
      return this.listApiTokensForCurrentUserWithTenantWithHttpInfo(tenant)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates details for the current user. Returns user's updated information upon success.
     * @param {module:model/MeControllerUserDetailsRequest} meControllerUserDetailsRequest The user details
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    patchCurrentUserWithHttpInfo(meControllerUserDetailsRequest) {
      let postBody = meControllerUserDetailsRequest;
      // verify the required parameter 'meControllerUserDetailsRequest' is set
      if (meControllerUserDetailsRequest === undefined || meControllerUserDetailsRequest === null) {
        throw new Error("Missing the required parameter 'meControllerUserDetailsRequest' when calling patchCurrentUser");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/me', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Updates details for the current user. Returns user's updated information upon success.
     * @param {module:model/MeControllerUserDetailsRequest} meControllerUserDetailsRequest The user details
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    patchCurrentUser(meControllerUserDetailsRequest) {
      return this.patchCurrentUserWithHttpInfo(meControllerUserDetailsRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates details for the current user. Returns user's updated information upon success.
     * @param {String} tenant 
     * @param {module:model/MeControllerUserDetailsRequest} meControllerUserDetailsRequest The user details
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    patchCurrentUserWithTenantWithHttpInfo(tenant, meControllerUserDetailsRequest) {
      let postBody = meControllerUserDetailsRequest;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling patchCurrentUserWithTenant");
      }
      // verify the required parameter 'meControllerUserDetailsRequest' is set
      if (meControllerUserDetailsRequest === undefined || meControllerUserDetailsRequest === null) {
        throw new Error("Missing the required parameter 'meControllerUserDetailsRequest' when calling patchCurrentUserWithTenant");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/me', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Updates details for the current user. Returns user's updated information upon success.
     * @param {String} tenant 
     * @param {module:model/MeControllerUserDetailsRequest} meControllerUserDetailsRequest The user details
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    patchCurrentUserWithTenant(tenant, meControllerUserDetailsRequest) {
      return this.patchCurrentUserWithTenantWithHttpInfo(tenant, meControllerUserDetailsRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
