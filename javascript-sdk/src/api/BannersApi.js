/**
 * Kestra EE
 * All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Banner from '../model/Banner';

/**
* Banners service.
* @module api/BannersApi
* @version v1
*/
export default class BannersApi {

    /**
    * Constructs a new BannersApi. 
    * @alias module:api/BannersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createBanner operation.
     * @callback module:api/BannersApi~createBannerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Banner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new banner
     * @param {module:model/Banner} banner The banner to create
     * @param {module:api/BannersApi~createBannerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Banner}
     */
    createBanner(banner, callback) {
      let postBody = banner;
      // verify the required parameter 'banner' is set
      if (banner === undefined || banner === null) {
        throw new Error("Missing the required parameter 'banner' when calling createBanner");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Banner;
      return this.apiClient.callApi(
        '/api/v1/banners', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBanner operation.
     * @callback module:api/BannersApi~deleteBannerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a banner
     * @param {String} id The banner id
     * @param {module:api/BannersApi~deleteBannerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteBanner(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteBanner");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/banners/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchBanners operation.
     * @callback module:api/BannersApi~searchBannersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Banner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get banners
     * @param {module:api/BannersApi~searchBannersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Banner>}
     */
    searchBanners(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Banner];
      return this.apiClient.callApi(
        '/api/v1/banners/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBanner operation.
     * @callback module:api/BannersApi~updateBannerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Banner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a banner
     * @param {String} id The banner id
     * @param {module:model/Banner} banner The banner to update
     * @param {module:api/BannersApi~updateBannerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Banner}
     */
    updateBanner(id, banner, callback) {
      let postBody = banner;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateBanner");
      }
      // verify the required parameter 'banner' is set
      if (banner === undefined || banner === null) {
        throw new Error("Missing the required parameter 'banner' when calling updateBanner");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Banner;
      return this.apiClient.callApi(
        '/api/v1/banners/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
