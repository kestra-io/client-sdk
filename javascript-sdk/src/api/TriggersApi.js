/**
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PagedResultsTrigger from '../model/PagedResultsTrigger';
import PagedResultsTriggerControllerTriggers from '../model/PagedResultsTriggerControllerTriggers';
import QueryFilter from '../model/QueryFilter';
import Trigger from '../model/Trigger';
import TriggerControllerSetDisabledRequest from '../model/TriggerControllerSetDisabledRequest';

/**
* Triggers service.
* @module api/TriggersApi
* @version v1.0.5
*/
export default class TriggersApi {

    /**
    * Constructs a new TriggersApi. 
    * @alias module:api/TriggersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }




            

    /**
     * Delete a backfill
     * @param {String} tenant 
     * @param {module:model/Trigger} trigger 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Trigger} and HTTP response
     */
    deleteBackfillWithHttpInfo(tenant, trigger) {
      let postBody = trigger;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling deleteBackfill");
      }
      // verify the required parameter 'trigger' is set
      if (trigger === undefined || trigger === null) {
        throw new Error("Missing the required parameter 'trigger' when calling deleteBackfill");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Trigger;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/triggers/backfill/delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a backfill
     * @param {String} tenant 
     * @param {module:model/Trigger} trigger 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Trigger}
     */
    deleteBackfill(tenant, trigger) {
      return this.deleteBackfillWithHttpInfo(tenant, trigger)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }









            

    /**
     * Delete backfill for given triggers
     * @param {String} tenant 
     * @param {Array.<module:model/Trigger>} trigger 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    deleteBackfillByIdsWithHttpInfo(tenant, trigger) {
      let postBody = trigger;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling deleteBackfillByIds");
      }
      // verify the required parameter 'trigger' is set
      if (trigger === undefined || trigger === null) {
        throw new Error("Missing the required parameter 'trigger' when calling deleteBackfillByIds");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/triggers/backfill/delete/by-triggers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete backfill for given triggers
     * @param {String} tenant 
     * @param {Array.<module:model/Trigger>} trigger 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    deleteBackfillByIds(tenant, trigger) {
      return this.deleteBackfillByIdsWithHttpInfo(tenant, trigger)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }









            

    /**
     * Delete backfill for given triggers
     * @param {String} tenant 
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/QueryFilter>} [filters] Filters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    deleteBackfillByQueryWithHttpInfo(tenant, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling deleteBackfillByQuery");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
        'filters': this.apiClient.buildCollectionParam(opts['filters'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/triggers/backfill/delete/by-query', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete backfill for given triggers
     * @param {String} tenant 
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/QueryFilter>} opts.filters Filters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    deleteBackfillByQuery(tenant, opts) {
      return this.deleteBackfillByQueryWithHttpInfo(tenant, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }









            

    /**
     * Disable/enable given triggers
     * @param {String} tenant 
     * @param {module:model/TriggerControllerSetDisabledRequest} triggerControllerSetDisabledRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    disabledTriggersByIdsWithHttpInfo(tenant, triggerControllerSetDisabledRequest) {
      let postBody = triggerControllerSetDisabledRequest;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling disabledTriggersByIds");
      }
      // verify the required parameter 'triggerControllerSetDisabledRequest' is set
      if (triggerControllerSetDisabledRequest === undefined || triggerControllerSetDisabledRequest === null) {
        throw new Error("Missing the required parameter 'triggerControllerSetDisabledRequest' when calling disabledTriggersByIds");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/triggers/set-disabled/by-triggers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Disable/enable given triggers
     * @param {String} tenant 
     * @param {module:model/TriggerControllerSetDisabledRequest} triggerControllerSetDisabledRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    disabledTriggersByIds(tenant, triggerControllerSetDisabledRequest) {
      return this.disabledTriggersByIdsWithHttpInfo(tenant, triggerControllerSetDisabledRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }









            

    /**
     * Disable/enable triggers by query parameters
     * @param {Boolean} disabled The disabled state
     * @param {String} tenant 
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/QueryFilter>} [filters] Filters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    disabledTriggersByQueryWithHttpInfo(disabled, tenant, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'disabled' is set
      if (disabled === undefined || disabled === null) {
        throw new Error("Missing the required parameter 'disabled' when calling disabledTriggersByQuery");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling disabledTriggersByQuery");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
        'filters': this.apiClient.buildCollectionParam(opts['filters'], 'csv'),
        'disabled': disabled
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/triggers/set-disabled/by-query', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Disable/enable triggers by query parameters
     * @param {Boolean} disabled The disabled state
     * @param {String} tenant 
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/QueryFilter>} opts.filters Filters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    disabledTriggersByQuery(disabled, tenant, opts) {
      return this.disabledTriggersByQueryWithHttpInfo(disabled, tenant, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }









            

    /**
     * Pause a backfill
     * @param {String} tenant 
     * @param {module:model/Trigger} trigger 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Trigger} and HTTP response
     */
    pauseBackfillWithHttpInfo(tenant, trigger) {
      let postBody = trigger;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling pauseBackfill");
      }
      // verify the required parameter 'trigger' is set
      if (trigger === undefined || trigger === null) {
        throw new Error("Missing the required parameter 'trigger' when calling pauseBackfill");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Trigger;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/triggers/backfill/pause', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Pause a backfill
     * @param {String} tenant 
     * @param {module:model/Trigger} trigger 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Trigger}
     */
    pauseBackfill(tenant, trigger) {
      return this.pauseBackfillWithHttpInfo(tenant, trigger)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }









            

    /**
     * Pause backfill for given triggers
     * @param {String} tenant 
     * @param {Array.<module:model/Trigger>} trigger 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    pauseBackfillByIdsWithHttpInfo(tenant, trigger) {
      let postBody = trigger;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling pauseBackfillByIds");
      }
      // verify the required parameter 'trigger' is set
      if (trigger === undefined || trigger === null) {
        throw new Error("Missing the required parameter 'trigger' when calling pauseBackfillByIds");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/triggers/backfill/pause/by-triggers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Pause backfill for given triggers
     * @param {String} tenant 
     * @param {Array.<module:model/Trigger>} trigger 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    pauseBackfillByIds(tenant, trigger) {
      return this.pauseBackfillByIdsWithHttpInfo(tenant, trigger)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }









            

    /**
     * Pause backfill for given triggers
     * @param {String} tenant 
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/QueryFilter>} [filters] Filters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    pauseBackfillByQueryWithHttpInfo(tenant, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling pauseBackfillByQuery");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
        'filters': this.apiClient.buildCollectionParam(opts['filters'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/triggers/backfill/pause/by-query', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Pause backfill for given triggers
     * @param {String} tenant 
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/QueryFilter>} opts.filters Filters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    pauseBackfillByQuery(tenant, opts) {
      return this.pauseBackfillByQueryWithHttpInfo(tenant, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }









            

    /**
     * Restart a trigger
     * @param {String} namespace The namespace
     * @param {String} flowId The flow id
     * @param {String} triggerId The trigger id
     * @param {String} tenant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    restartTriggerWithHttpInfo(namespace, flowId, triggerId, tenant) {
      let postBody = null;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling restartTrigger");
      }
      // verify the required parameter 'flowId' is set
      if (flowId === undefined || flowId === null) {
        throw new Error("Missing the required parameter 'flowId' when calling restartTrigger");
      }
      // verify the required parameter 'triggerId' is set
      if (triggerId === undefined || triggerId === null) {
        throw new Error("Missing the required parameter 'triggerId' when calling restartTrigger");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling restartTrigger");
      }

      let pathParams = {
        'namespace': namespace,
        'flowId': flowId,
        'triggerId': triggerId,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/triggers/{namespace}/{flowId}/{triggerId}/restart', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Restart a trigger
     * @param {String} namespace The namespace
     * @param {String} flowId The flow id
     * @param {String} triggerId The trigger id
     * @param {String} tenant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    restartTrigger(namespace, flowId, triggerId, tenant) {
      return this.restartTriggerWithHttpInfo(namespace, flowId, triggerId, tenant)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }









            

    /**
     * Search for triggers
     * @param {Number} page The current page
     * @param {Number} size The current page size
     * @param {String} tenant 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [sort] The sort of current page
     * @param {Array.<module:model/QueryFilter>} [filters] Filters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PagedResultsTriggerControllerTriggers} and HTTP response
     */
    searchTriggersWithHttpInfo(page, size, tenant, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling searchTriggers");
      }
      // verify the required parameter 'size' is set
      if (size === undefined || size === null) {
        throw new Error("Missing the required parameter 'size' when calling searchTriggers");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling searchTriggers");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
        'page': page,
        'size': size,
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        'filters': this.apiClient.buildCollectionParam(opts['filters'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagedResultsTriggerControllerTriggers;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/triggers/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Search for triggers
     * @param {Number} page The current page
     * @param {Number} size The current page size
     * @param {String} tenant 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.sort The sort of current page
     * @param {Array.<module:model/QueryFilter>} opts.filters Filters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PagedResultsTriggerControllerTriggers}
     */
    searchTriggers(page, size, tenant, opts) {
      return this.searchTriggersWithHttpInfo(page, size, tenant, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }









            

    /**
     * Get all triggers for a flow
     * @param {Number} page The current page
     * @param {Number} size The current page size
     * @param {String} namespace The namespace
     * @param {String} flowId The flow id
     * @param {String} tenant 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [sort] The sort of current page
     * @param {String} [q] A string filter
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PagedResultsTrigger} and HTTP response
     */
    searchTriggersForFlowWithHttpInfo(page, size, namespace, flowId, tenant, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling searchTriggersForFlow");
      }
      // verify the required parameter 'size' is set
      if (size === undefined || size === null) {
        throw new Error("Missing the required parameter 'size' when calling searchTriggersForFlow");
      }
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling searchTriggersForFlow");
      }
      // verify the required parameter 'flowId' is set
      if (flowId === undefined || flowId === null) {
        throw new Error("Missing the required parameter 'flowId' when calling searchTriggersForFlow");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling searchTriggersForFlow");
      }

      let pathParams = {
        'namespace': namespace,
        'flowId': flowId,
        'tenant': tenant
      };
      let queryParams = {
        'page': page,
        'size': size,
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagedResultsTrigger;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/triggers/{namespace}/{flowId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all triggers for a flow
     * @param {Number} page The current page
     * @param {Number} size The current page size
     * @param {String} namespace The namespace
     * @param {String} flowId The flow id
     * @param {String} tenant 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.sort The sort of current page
     * @param {String} opts.q A string filter
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PagedResultsTrigger}
     */
    searchTriggersForFlow(page, size, namespace, flowId, tenant, opts) {
      return this.searchTriggersForFlowWithHttpInfo(page, size, namespace, flowId, tenant, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }









            

    /**
     * Unlock a trigger
     * @param {String} namespace The namespace
     * @param {String} flowId The flow id
     * @param {String} triggerId The trigger id
     * @param {String} tenant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Trigger} and HTTP response
     */
    unlockTriggerWithHttpInfo(namespace, flowId, triggerId, tenant) {
      let postBody = null;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling unlockTrigger");
      }
      // verify the required parameter 'flowId' is set
      if (flowId === undefined || flowId === null) {
        throw new Error("Missing the required parameter 'flowId' when calling unlockTrigger");
      }
      // verify the required parameter 'triggerId' is set
      if (triggerId === undefined || triggerId === null) {
        throw new Error("Missing the required parameter 'triggerId' when calling unlockTrigger");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling unlockTrigger");
      }

      let pathParams = {
        'namespace': namespace,
        'flowId': flowId,
        'triggerId': triggerId,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Trigger;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/triggers/{namespace}/{flowId}/{triggerId}/unlock', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Unlock a trigger
     * @param {String} namespace The namespace
     * @param {String} flowId The flow id
     * @param {String} triggerId The trigger id
     * @param {String} tenant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Trigger}
     */
    unlockTrigger(namespace, flowId, triggerId, tenant) {
      return this.unlockTriggerWithHttpInfo(namespace, flowId, triggerId, tenant)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }









            

    /**
     * Unlock given triggers
     * @param {String} tenant 
     * @param {Array.<module:model/Trigger>} trigger 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    unlockTriggersByIdsWithHttpInfo(tenant, trigger) {
      let postBody = trigger;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling unlockTriggersByIds");
      }
      // verify the required parameter 'trigger' is set
      if (trigger === undefined || trigger === null) {
        throw new Error("Missing the required parameter 'trigger' when calling unlockTriggersByIds");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/triggers/unlock/by-triggers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Unlock given triggers
     * @param {String} tenant 
     * @param {Array.<module:model/Trigger>} trigger 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    unlockTriggersByIds(tenant, trigger) {
      return this.unlockTriggersByIdsWithHttpInfo(tenant, trigger)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }









            

    /**
     * Unlock triggers by query parameters
     * @param {String} tenant 
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/QueryFilter>} [filters] Filters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    unlockTriggersByQueryWithHttpInfo(tenant, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling unlockTriggersByQuery");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
        'filters': this.apiClient.buildCollectionParam(opts['filters'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/triggers/unlock/by-query', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Unlock triggers by query parameters
     * @param {String} tenant 
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/QueryFilter>} opts.filters Filters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    unlockTriggersByQuery(tenant, opts) {
      return this.unlockTriggersByQueryWithHttpInfo(tenant, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }









            

    /**
     * Unpause a backfill
     * @param {String} tenant 
     * @param {module:model/Trigger} trigger 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Trigger} and HTTP response
     */
    unpauseBackfillWithHttpInfo(tenant, trigger) {
      let postBody = trigger;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling unpauseBackfill");
      }
      // verify the required parameter 'trigger' is set
      if (trigger === undefined || trigger === null) {
        throw new Error("Missing the required parameter 'trigger' when calling unpauseBackfill");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Trigger;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/triggers/backfill/unpause', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Unpause a backfill
     * @param {String} tenant 
     * @param {module:model/Trigger} trigger 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Trigger}
     */
    unpauseBackfill(tenant, trigger) {
      return this.unpauseBackfillWithHttpInfo(tenant, trigger)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }









            

    /**
     * Unpause backfill for given triggers
     * @param {String} tenant 
     * @param {Array.<module:model/Trigger>} trigger 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    unpauseBackfillByIdsWithHttpInfo(tenant, trigger) {
      let postBody = trigger;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling unpauseBackfillByIds");
      }
      // verify the required parameter 'trigger' is set
      if (trigger === undefined || trigger === null) {
        throw new Error("Missing the required parameter 'trigger' when calling unpauseBackfillByIds");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/triggers/backfill/unpause/by-triggers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Unpause backfill for given triggers
     * @param {String} tenant 
     * @param {Array.<module:model/Trigger>} trigger 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    unpauseBackfillByIds(tenant, trigger) {
      return this.unpauseBackfillByIdsWithHttpInfo(tenant, trigger)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }









            

    /**
     * Unpause backfill for given triggers
     * @param {String} tenant 
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/QueryFilter>} [filters] Filters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    unpauseBackfillByQueryWithHttpInfo(tenant, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling unpauseBackfillByQuery");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
        'filters': this.apiClient.buildCollectionParam(opts['filters'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/triggers/backfill/unpause/by-query', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Unpause backfill for given triggers
     * @param {String} tenant 
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/QueryFilter>} opts.filters Filters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    unpauseBackfillByQuery(tenant, opts) {
      return this.unpauseBackfillByQueryWithHttpInfo(tenant, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }









            

    /**
     * Update a trigger
     * @param {String} tenant 
     * @param {module:model/Trigger} trigger 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Trigger} and HTTP response
     */
    updateTriggerWithHttpInfo(tenant, trigger) {
      let postBody = trigger;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling updateTrigger");
      }
      // verify the required parameter 'trigger' is set
      if (trigger === undefined || trigger === null) {
        throw new Error("Missing the required parameter 'trigger' when calling updateTrigger");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Trigger;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/triggers', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update a trigger
     * @param {String} tenant 
     * @param {module:model/Trigger} trigger 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Trigger}
     */
    updateTrigger(tenant, trigger) {
      return this.updateTriggerWithHttpInfo(tenant, trigger)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }








}
