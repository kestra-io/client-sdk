/**
 * Kestra EE
 * All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ClusterControllerApiActiveServiceList from '../model/ClusterControllerApiActiveServiceList';
import PagedResultsClusterControllerApiServiceInstance from '../model/PagedResultsClusterControllerApiServiceInstance';
import ServiceInstance from '../model/ServiceInstance';
import ServiceServiceState from '../model/ServiceServiceState';
import ServiceType from '../model/ServiceType';

/**
* Services service.
* @module api/ServicesApi
* @version v1
*/
export default class ServicesApi {

    /**
    * Constructs a new ServicesApi. 
    * @alias module:api/ServicesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getActiveServices operation.
     * @callback module:api/ServicesApi~getActiveServicesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClusterControllerApiActiveServiceList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get details about active services
     * @param {module:api/ServicesApi~getActiveServicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClusterControllerApiActiveServiceList}
     */
    getActiveServices(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ClusterControllerApiActiveServiceList;
      return this.apiClient.callApi(
        '/api/v1/cluster/services/active', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getService operation.
     * @callback module:api/ServicesApi~getServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceInstance} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get details about a service
     * @param {String} id 
     * @param {module:api/ServicesApi~getServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceInstance}
     */
    getService(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getService");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServiceInstance;
      return this.apiClient.callApi(
        '/api/v1/cluster/services/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchServices operation.
     * @callback module:api/ServicesApi~searchServicesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedResultsClusterControllerApiServiceInstance} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for service
     * @param {Number} page The current page
     * @param {Number} size The current page size
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [sort] The sort of current page
     * @param {Array.<module:model/ServiceServiceState>} [state] The state filter
     * @param {Array.<module:model/ServiceType>} [type] The server type filter
     * @param {module:api/ServicesApi~searchServicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedResultsClusterControllerApiServiceInstance}
     */
    searchServices(page, size, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling searchServices");
      }
      // verify the required parameter 'size' is set
      if (size === undefined || size === null) {
        throw new Error("Missing the required parameter 'size' when calling searchServices");
      }

      let pathParams = {
      };
      let queryParams = {
        'page': page,
        'size': size,
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        'state': this.apiClient.buildCollectionParam(opts['state'], 'csv'),
        'type': this.apiClient.buildCollectionParam(opts['type'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagedResultsClusterControllerApiServiceInstance;
      return this.apiClient.callApi(
        '/api/v1/cluster/services/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
