/**
 * Kestra EE
 * All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AuditLogControllerAuditLogDiff from '../model/AuditLogControllerAuditLogDiff';
import AuditLogControllerAuditLogOption from '../model/AuditLogControllerAuditLogOption';
import AuditLogControllerAuditLogWithUser from '../model/AuditLogControllerAuditLogWithUser';
import AuditLogControllerFindRequest from '../model/AuditLogControllerFindRequest';
import CrudEventType from '../model/CrudEventType';
import PagedResultsAuditLogControllerAuditLogWithUser from '../model/PagedResultsAuditLogControllerAuditLogWithUser';
import Permission from '../model/Permission';

/**
* AuditLogs service.
* @module api/AuditLogsApi
* @version v1
*/
export default class AuditLogsApi {

    /**
    * Constructs a new AuditLogsApi. 
    * @alias module:api/AuditLogsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Find a specific audit log
     * @param {String} tenant 
     * @param {module:model/AuditLogControllerFindRequest} auditLogControllerFindRequest The find request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AuditLogControllerAuditLogWithUser} and HTTP response
     */
    findAuditLogWithHttpInfo(tenant, auditLogControllerFindRequest) {
      let postBody = auditLogControllerFindRequest;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling findAuditLog");
      }
      // verify the required parameter 'auditLogControllerFindRequest' is set
      if (auditLogControllerFindRequest === undefined || auditLogControllerFindRequest === null) {
        throw new Error("Missing the required parameter 'auditLogControllerFindRequest' when calling findAuditLog");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AuditLogControllerAuditLogWithUser;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/auditlogs/find', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Find a specific audit log
     * @param {String} tenant 
     * @param {module:model/AuditLogControllerFindRequest} auditLogControllerFindRequest The find request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AuditLogControllerAuditLogWithUser}
     */
    findAuditLog(tenant, auditLogControllerFindRequest) {
      return this.findAuditLogWithHttpInfo(tenant, auditLogControllerFindRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the diff of an object between current version and a previous version. Can also compare two version from specific audit logs.
     * @param {String} id The id of the audit log
     * @param {String} tenant 
     * @param {Object} opts Optional parameters
     * @param {String} [previousId] The id of a previous audit log to compare with
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AuditLogControllerAuditLogDiff} and HTTP response
     */
    getResourceDiffFromAuditLogWithHttpInfo(id, tenant, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getResourceDiffFromAuditLog");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling getResourceDiffFromAuditLog");
      }

      let pathParams = {
        'id': id,
        'tenant': tenant
      };
      let queryParams = {
        'previousId': opts['previousId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AuditLogControllerAuditLogDiff;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/auditlogs/{id}/diff', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get the diff of an object between current version and a previous version. Can also compare two version from specific audit logs.
     * @param {String} id The id of the audit log
     * @param {String} tenant 
     * @param {Object} opts Optional parameters
     * @param {String} opts.previousId The id of a previous audit log to compare with
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AuditLogControllerAuditLogDiff}
     */
    getResourceDiffFromAuditLog(id, tenant, opts) {
      return this.getResourceDiffFromAuditLogWithHttpInfo(id, tenant, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Find all audit logs about a specific resource.
     * @param {String} detailId The resource Id
     * @param {String} tenant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/AuditLogControllerAuditLogOption>} and HTTP response
     */
    listAuditLogFromResourceIdWithHttpInfo(detailId, tenant) {
      let postBody = null;
      // verify the required parameter 'detailId' is set
      if (detailId === undefined || detailId === null) {
        throw new Error("Missing the required parameter 'detailId' when calling listAuditLogFromResourceId");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling listAuditLogFromResourceId");
      }

      let pathParams = {
        'detailId': detailId,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AuditLogControllerAuditLogOption];
      return this.apiClient.callApi(
        '/api/v1/{tenant}/auditlogs/history/{detailId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Find all audit logs about a specific resource.
     * @param {String} detailId The resource Id
     * @param {String} tenant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/AuditLogControllerAuditLogOption>}
     */
    listAuditLogFromResourceId(detailId, tenant) {
      return this.listAuditLogFromResourceIdWithHttpInfo(detailId, tenant)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Search for audit logs
     * @param {Number} page The current page
     * @param {Number} size The current page size
     * @param {String} tenant 
     * @param {Object} opts Optional parameters
     * @param {String} [q] A string filter
     * @param {Array.<String>} [sort] The sort of current page
     * @param {String} [namespace] A namespace filter
     * @param {String} [flowId] A flow id filter
     * @param {String} [executionId] An execution filter
     * @param {String} [userId] A user id filter
     * @param {String} [id] A id filter
     * @param {module:model/Permission} [permission] A permission filter
     * @param {Date} [startDate] The start datetime
     * @param {Date} [endDate] The end datetime
     * @param {Object.<String, {String: String}>} [details] A list of auditLog details
     * @param {module:model/CrudEventType} [type] The event that create the audit log
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PagedResultsAuditLogControllerAuditLogWithUser} and HTTP response
     */
    searchAuditLogsWithHttpInfo(page, size, tenant, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling searchAuditLogs");
      }
      // verify the required parameter 'size' is set
      if (size === undefined || size === null) {
        throw new Error("Missing the required parameter 'size' when calling searchAuditLogs");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling searchAuditLogs");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
        'q': opts['q'],
        'page': page,
        'size': size,
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        'namespace': opts['namespace'],
        'flowId': opts['flowId'],
        'executionId': opts['executionId'],
        'userId': opts['userId'],
        'id': opts['id'],
        'permission': opts['permission'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'details': opts['details'],
        'type': opts['type']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagedResultsAuditLogControllerAuditLogWithUser;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/auditlogs/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Search for audit logs
     * @param {Number} page The current page
     * @param {Number} size The current page size
     * @param {String} tenant 
     * @param {Object} opts Optional parameters
     * @param {String} opts.q A string filter
     * @param {Array.<String>} opts.sort The sort of current page
     * @param {String} opts.namespace A namespace filter
     * @param {String} opts.flowId A flow id filter
     * @param {String} opts.executionId An execution filter
     * @param {String} opts.userId A user id filter
     * @param {String} opts.id A id filter
     * @param {module:model/Permission} opts.permission A permission filter
     * @param {Date} opts.startDate The start datetime
     * @param {Date} opts.endDate The end datetime
     * @param {Object.<String, {String: String}>} opts.details A list of auditLog details
     * @param {module:model/CrudEventType} opts.type The event that create the audit log
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PagedResultsAuditLogControllerAuditLogWithUser}
     */
    searchAuditLogs(page, size, tenant, opts) {
      return this.searchAuditLogsWithHttpInfo(page, size, tenant, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
