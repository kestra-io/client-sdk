/**
 * Kestra EE
 * All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiAutocomplete from '../model/ApiAutocomplete';
import ApiIds from '../model/ApiIds';
import PagedResultsRole from '../model/PagedResultsRole';
import Role from '../model/Role';

/**
* Roles service.
* @module api/RolesApi
* @version v1
*/
export default class RolesApi {

    /**
    * Constructs a new RolesApi. 
    * @alias module:api/RolesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the autocompleteRoles operation.
     * @callback module:api/RolesApi~autocompleteRolesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Role>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List roles for autocomplete
     * @param {String} tenant 
     * @param {module:model/ApiAutocomplete} apiAutocomplete Autocomplete request
     * @param {module:api/RolesApi~autocompleteRolesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Role>}
     */
    autocompleteRoles(tenant, apiAutocomplete, callback) {
      let postBody = apiAutocomplete;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling autocompleteRoles");
      }
      // verify the required parameter 'apiAutocomplete' is set
      if (apiAutocomplete === undefined || apiAutocomplete === null) {
        throw new Error("Missing the required parameter 'apiAutocomplete' when calling autocompleteRoles");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Role];
      return this.apiClient.callApi(
        '/api/v1/{tenant}/roles/autocomplete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the autocompleteRolesWithResourceTenantasSuperAdmin operation.
     * @callback module:api/RolesApi~autocompleteRolesWithResourceTenantasSuperAdminCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Role>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List roles for autocomplete
     * @param {String} resourceTenant 
     * @param {module:model/ApiAutocomplete} apiAutocomplete Autocomplete request
     * @param {module:api/RolesApi~autocompleteRolesWithResourceTenantasSuperAdminCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Role>}
     */
    autocompleteRolesWithResourceTenantasSuperAdmin(resourceTenant, apiAutocomplete, callback) {
      let postBody = apiAutocomplete;
      // verify the required parameter 'resourceTenant' is set
      if (resourceTenant === undefined || resourceTenant === null) {
        throw new Error("Missing the required parameter 'resourceTenant' when calling autocompleteRolesWithResourceTenantasSuperAdmin");
      }
      // verify the required parameter 'apiAutocomplete' is set
      if (apiAutocomplete === undefined || apiAutocomplete === null) {
        throw new Error("Missing the required parameter 'apiAutocomplete' when calling autocompleteRolesWithResourceTenantasSuperAdmin");
      }

      let pathParams = {
        'resourceTenant': resourceTenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Role];
      return this.apiClient.callApi(
        '/api/v1/tenants/{resourceTenant}/roles/autocomplete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the autocompleteRolesasSuperAdmin operation.
     * @callback module:api/RolesApi~autocompleteRolesasSuperAdminCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Role>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List roles for autocomplete
     * @param {module:model/ApiAutocomplete} apiAutocomplete Autocomplete request
     * @param {module:api/RolesApi~autocompleteRolesasSuperAdminCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Role>}
     */
    autocompleteRolesasSuperAdmin(apiAutocomplete, callback) {
      let postBody = apiAutocomplete;
      // verify the required parameter 'apiAutocomplete' is set
      if (apiAutocomplete === undefined || apiAutocomplete === null) {
        throw new Error("Missing the required parameter 'apiAutocomplete' when calling autocompleteRolesasSuperAdmin");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Role];
      return this.apiClient.callApi(
        '/api/v1/tenants/roles/autocomplete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createRole operation.
     * @callback module:api/RolesApi~createRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Role} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a role
     * @param {String} tenant 
     * @param {module:model/Role} role 
     * @param {module:api/RolesApi~createRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Role}
     */
    createRole(tenant, role, callback) {
      let postBody = role;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling createRole");
      }
      // verify the required parameter 'role' is set
      if (role === undefined || role === null) {
        throw new Error("Missing the required parameter 'role' when calling createRole");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Role;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/roles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createRoleWithResourceTenantasSuperAdmin operation.
     * @callback module:api/RolesApi~createRoleWithResourceTenantasSuperAdminCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Role} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a role
     * @param {String} resourceTenant 
     * @param {module:model/Role} role 
     * @param {module:api/RolesApi~createRoleWithResourceTenantasSuperAdminCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Role}
     */
    createRoleWithResourceTenantasSuperAdmin(resourceTenant, role, callback) {
      let postBody = role;
      // verify the required parameter 'resourceTenant' is set
      if (resourceTenant === undefined || resourceTenant === null) {
        throw new Error("Missing the required parameter 'resourceTenant' when calling createRoleWithResourceTenantasSuperAdmin");
      }
      // verify the required parameter 'role' is set
      if (role === undefined || role === null) {
        throw new Error("Missing the required parameter 'role' when calling createRoleWithResourceTenantasSuperAdmin");
      }

      let pathParams = {
        'resourceTenant': resourceTenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Role;
      return this.apiClient.callApi(
        '/api/v1/tenants/{resourceTenant}/roles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createRoleasSuperAdmin operation.
     * @callback module:api/RolesApi~createRoleasSuperAdminCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Role} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a role
     * @param {module:model/Role} role 
     * @param {module:api/RolesApi~createRoleasSuperAdminCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Role}
     */
    createRoleasSuperAdmin(role, callback) {
      let postBody = role;
      // verify the required parameter 'role' is set
      if (role === undefined || role === null) {
        throw new Error("Missing the required parameter 'role' when calling createRoleasSuperAdmin");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Role;
      return this.apiClient.callApi(
        '/api/v1/tenants/roles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRole operation.
     * @callback module:api/RolesApi~deleteRoleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a role
     * @param {String} id The role id
     * @param {String} tenant 
     * @param {module:api/RolesApi~deleteRoleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteRole(id, tenant, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteRole");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling deleteRole");
      }

      let pathParams = {
        'id': id,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/roles/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRoleWithResourceTenantasSuperAdmin operation.
     * @callback module:api/RolesApi~deleteRoleWithResourceTenantasSuperAdminCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a role
     * @param {String} id The role id
     * @param {String} resourceTenant 
     * @param {module:api/RolesApi~deleteRoleWithResourceTenantasSuperAdminCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteRoleWithResourceTenantasSuperAdmin(id, resourceTenant, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteRoleWithResourceTenantasSuperAdmin");
      }
      // verify the required parameter 'resourceTenant' is set
      if (resourceTenant === undefined || resourceTenant === null) {
        throw new Error("Missing the required parameter 'resourceTenant' when calling deleteRoleWithResourceTenantasSuperAdmin");
      }

      let pathParams = {
        'id': id,
        'resourceTenant': resourceTenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/tenants/{resourceTenant}/roles/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRoleasSuperAdmin operation.
     * @callback module:api/RolesApi~deleteRoleasSuperAdminCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a role
     * @param {String} id The role id
     * @param {module:api/RolesApi~deleteRoleasSuperAdminCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteRoleasSuperAdmin(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteRoleasSuperAdmin");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/tenants/roles/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRole operation.
     * @callback module:api/RolesApi~getRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Role} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a role
     * @param {String} id The role id
     * @param {String} tenant 
     * @param {module:api/RolesApi~getRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Role}
     */
    getRole(id, tenant, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getRole");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling getRole");
      }

      let pathParams = {
        'id': id,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Role;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/roles/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRoleWithResourceTenantasSuperAdmin operation.
     * @callback module:api/RolesApi~getRoleWithResourceTenantasSuperAdminCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Role} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a role
     * @param {String} id The role id
     * @param {String} resourceTenant 
     * @param {module:api/RolesApi~getRoleWithResourceTenantasSuperAdminCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Role}
     */
    getRoleWithResourceTenantasSuperAdmin(id, resourceTenant, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getRoleWithResourceTenantasSuperAdmin");
      }
      // verify the required parameter 'resourceTenant' is set
      if (resourceTenant === undefined || resourceTenant === null) {
        throw new Error("Missing the required parameter 'resourceTenant' when calling getRoleWithResourceTenantasSuperAdmin");
      }

      let pathParams = {
        'id': id,
        'resourceTenant': resourceTenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Role;
      return this.apiClient.callApi(
        '/api/v1/tenants/{resourceTenant}/roles/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRoleasSuperAdmin operation.
     * @callback module:api/RolesApi~getRoleasSuperAdminCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Role} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a role
     * @param {String} id The role id
     * @param {module:api/RolesApi~getRoleasSuperAdminCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Role}
     */
    getRoleasSuperAdmin(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getRoleasSuperAdmin");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Role;
      return this.apiClient.callApi(
        '/api/v1/tenants/roles/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listRolesFromGivenIds operation.
     * @callback module:api/RolesApi~listRolesFromGivenIdsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Role>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List roles by ids
     * @param {String} tenant 
     * @param {module:model/ApiIds} apiIds The ids that must be present on results
     * @param {module:api/RolesApi~listRolesFromGivenIdsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Role>}
     */
    listRolesFromGivenIds(tenant, apiIds, callback) {
      let postBody = apiIds;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling listRolesFromGivenIds");
      }
      // verify the required parameter 'apiIds' is set
      if (apiIds === undefined || apiIds === null) {
        throw new Error("Missing the required parameter 'apiIds' when calling listRolesFromGivenIds");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Role];
      return this.apiClient.callApi(
        '/api/v1/{tenant}/roles/ids', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listRolesFromGivenIdsWithResourceTenantasSuperAdmin operation.
     * @callback module:api/RolesApi~listRolesFromGivenIdsWithResourceTenantasSuperAdminCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Role>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List roles by ids
     * @param {String} resourceTenant 
     * @param {module:model/ApiIds} apiIds The ids that must be present on results
     * @param {module:api/RolesApi~listRolesFromGivenIdsWithResourceTenantasSuperAdminCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Role>}
     */
    listRolesFromGivenIdsWithResourceTenantasSuperAdmin(resourceTenant, apiIds, callback) {
      let postBody = apiIds;
      // verify the required parameter 'resourceTenant' is set
      if (resourceTenant === undefined || resourceTenant === null) {
        throw new Error("Missing the required parameter 'resourceTenant' when calling listRolesFromGivenIdsWithResourceTenantasSuperAdmin");
      }
      // verify the required parameter 'apiIds' is set
      if (apiIds === undefined || apiIds === null) {
        throw new Error("Missing the required parameter 'apiIds' when calling listRolesFromGivenIdsWithResourceTenantasSuperAdmin");
      }

      let pathParams = {
        'resourceTenant': resourceTenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Role];
      return this.apiClient.callApi(
        '/api/v1/tenants/{resourceTenant}/roles/ids', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listRolesFromGivenIdsasSuperAdmin operation.
     * @callback module:api/RolesApi~listRolesFromGivenIdsasSuperAdminCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Role>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List roles by ids
     * @param {module:model/ApiIds} apiIds The ids that must be present on results
     * @param {module:api/RolesApi~listRolesFromGivenIdsasSuperAdminCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Role>}
     */
    listRolesFromGivenIdsasSuperAdmin(apiIds, callback) {
      let postBody = apiIds;
      // verify the required parameter 'apiIds' is set
      if (apiIds === undefined || apiIds === null) {
        throw new Error("Missing the required parameter 'apiIds' when calling listRolesFromGivenIdsasSuperAdmin");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Role];
      return this.apiClient.callApi(
        '/api/v1/tenants/roles/ids', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchRoles operation.
     * @callback module:api/RolesApi~searchRolesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedResultsRole} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for roles
     * @param {Number} page The current page
     * @param {Number} size The current page size
     * @param {String} tenant 
     * @param {Object} opts Optional parameters
     * @param {String} [q] A string filter
     * @param {Array.<String>} [sort] The sort of current page
     * @param {module:api/RolesApi~searchRolesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedResultsRole}
     */
    searchRoles(page, size, tenant, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling searchRoles");
      }
      // verify the required parameter 'size' is set
      if (size === undefined || size === null) {
        throw new Error("Missing the required parameter 'size' when calling searchRoles");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling searchRoles");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
        'q': opts['q'],
        'page': page,
        'size': size,
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagedResultsRole;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/roles/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchRolesWithResourceTenantasSuperAdmin operation.
     * @callback module:api/RolesApi~searchRolesWithResourceTenantasSuperAdminCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedResultsRole} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for roles
     * @param {Number} page The current page
     * @param {Number} size The current page size
     * @param {String} resourceTenant 
     * @param {Object} opts Optional parameters
     * @param {String} [q] A string filter
     * @param {Array.<String>} [sort] The sort of current page
     * @param {module:api/RolesApi~searchRolesWithResourceTenantasSuperAdminCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedResultsRole}
     */
    searchRolesWithResourceTenantasSuperAdmin(page, size, resourceTenant, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling searchRolesWithResourceTenantasSuperAdmin");
      }
      // verify the required parameter 'size' is set
      if (size === undefined || size === null) {
        throw new Error("Missing the required parameter 'size' when calling searchRolesWithResourceTenantasSuperAdmin");
      }
      // verify the required parameter 'resourceTenant' is set
      if (resourceTenant === undefined || resourceTenant === null) {
        throw new Error("Missing the required parameter 'resourceTenant' when calling searchRolesWithResourceTenantasSuperAdmin");
      }

      let pathParams = {
        'resourceTenant': resourceTenant
      };
      let queryParams = {
        'q': opts['q'],
        'page': page,
        'size': size,
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagedResultsRole;
      return this.apiClient.callApi(
        '/api/v1/tenants/{resourceTenant}/roles/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchRolesasSuperAdmin operation.
     * @callback module:api/RolesApi~searchRolesasSuperAdminCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedResultsRole} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for roles
     * @param {Number} page The current page
     * @param {Number} size The current page size
     * @param {Object} opts Optional parameters
     * @param {String} [q] A string filter
     * @param {Array.<String>} [sort] The sort of current page
     * @param {module:api/RolesApi~searchRolesasSuperAdminCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedResultsRole}
     */
    searchRolesasSuperAdmin(page, size, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling searchRolesasSuperAdmin");
      }
      // verify the required parameter 'size' is set
      if (size === undefined || size === null) {
        throw new Error("Missing the required parameter 'size' when calling searchRolesasSuperAdmin");
      }

      let pathParams = {
      };
      let queryParams = {
        'q': opts['q'],
        'page': page,
        'size': size,
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagedResultsRole;
      return this.apiClient.callApi(
        '/api/v1/tenants/roles/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRole operation.
     * @callback module:api/RolesApi~updateRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Role} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a role
     * @param {String} id The role id
     * @param {String} tenant 
     * @param {module:model/Role} role 
     * @param {module:api/RolesApi~updateRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Role}
     */
    updateRole(id, tenant, role, callback) {
      let postBody = role;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateRole");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling updateRole");
      }
      // verify the required parameter 'role' is set
      if (role === undefined || role === null) {
        throw new Error("Missing the required parameter 'role' when calling updateRole");
      }

      let pathParams = {
        'id': id,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Role;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/roles/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRoleWithResourceTenantasSuperAdmin operation.
     * @callback module:api/RolesApi~updateRoleWithResourceTenantasSuperAdminCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Role} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a role
     * @param {String} id The role id
     * @param {String} resourceTenant 
     * @param {module:model/Role} role 
     * @param {module:api/RolesApi~updateRoleWithResourceTenantasSuperAdminCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Role}
     */
    updateRoleWithResourceTenantasSuperAdmin(id, resourceTenant, role, callback) {
      let postBody = role;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateRoleWithResourceTenantasSuperAdmin");
      }
      // verify the required parameter 'resourceTenant' is set
      if (resourceTenant === undefined || resourceTenant === null) {
        throw new Error("Missing the required parameter 'resourceTenant' when calling updateRoleWithResourceTenantasSuperAdmin");
      }
      // verify the required parameter 'role' is set
      if (role === undefined || role === null) {
        throw new Error("Missing the required parameter 'role' when calling updateRoleWithResourceTenantasSuperAdmin");
      }

      let pathParams = {
        'id': id,
        'resourceTenant': resourceTenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Role;
      return this.apiClient.callApi(
        '/api/v1/tenants/{resourceTenant}/roles/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRoleasSuperAdmin operation.
     * @callback module:api/RolesApi~updateRoleasSuperAdminCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Role} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a role
     * @param {String} id The role id
     * @param {module:model/Role} role 
     * @param {module:api/RolesApi~updateRoleasSuperAdminCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Role}
     */
    updateRoleasSuperAdmin(id, role, callback) {
      let postBody = role;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateRoleasSuperAdmin");
      }
      // verify the required parameter 'role' is set
      if (role === undefined || role === null) {
        throw new Error("Missing the required parameter 'role' when calling updateRoleasSuperAdmin");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Role;
      return this.apiClient.callApi(
        '/api/v1/tenants/roles/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
