/**
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiAutocomplete from '../model/ApiAutocomplete';
import ApiIds from '../model/ApiIds';
import ApiRoleSummary from '../model/ApiRoleSummary';
import IAMRoleControllerApiRoleCreateOrUpdateRequest from '../model/IAMRoleControllerApiRoleCreateOrUpdateRequest';
import IAMRoleControllerApiRoleDetail from '../model/IAMRoleControllerApiRoleDetail';
import PagedResultsApiRoleSummary from '../model/PagedResultsApiRoleSummary';
import Role from '../model/Role';

/**
* Roles service.
* @module api/RolesApi
* @version v1.0.5
*/
export default class RolesApi {

    /**
    * Constructs a new RolesApi. 
    * @alias module:api/RolesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * List roles for autocomplete
     * @param {String} tenant 
     * @param {module:model/ApiAutocomplete} apiAutocomplete Autocomplete request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ApiRoleSummary>} and HTTP response
     */
    autocompleteRolesWithHttpInfo(tenant, apiAutocomplete) {
      let postBody = apiAutocomplete;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling autocompleteRoles");
      }
      // verify the required parameter 'apiAutocomplete' is set
      if (apiAutocomplete === undefined || apiAutocomplete === null) {
        throw new Error("Missing the required parameter 'apiAutocomplete' when calling autocompleteRoles");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [ApiRoleSummary];
      return this.apiClient.callApi(
        '/api/v1/{tenant}/roles/autocomplete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List roles for autocomplete
     * @param {String} tenant 
     * @param {module:model/ApiAutocomplete} apiAutocomplete Autocomplete request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ApiRoleSummary>}
     */
    autocompleteRoles(tenant, apiAutocomplete) {
      return this.autocompleteRolesWithHttpInfo(tenant, apiAutocomplete)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a role
     * @param {String} tenant 
     * @param {module:model/IAMRoleControllerApiRoleCreateOrUpdateRequest} iAMRoleControllerApiRoleCreateOrUpdateRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IAMRoleControllerApiRoleDetail} and HTTP response
     */
    createRoleWithHttpInfo(tenant, iAMRoleControllerApiRoleCreateOrUpdateRequest) {
      let postBody = iAMRoleControllerApiRoleCreateOrUpdateRequest;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling createRole");
      }
      // verify the required parameter 'iAMRoleControllerApiRoleCreateOrUpdateRequest' is set
      if (iAMRoleControllerApiRoleCreateOrUpdateRequest === undefined || iAMRoleControllerApiRoleCreateOrUpdateRequest === null) {
        throw new Error("Missing the required parameter 'iAMRoleControllerApiRoleCreateOrUpdateRequest' when calling createRole");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IAMRoleControllerApiRoleDetail;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/roles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a role
     * @param {String} tenant 
     * @param {module:model/IAMRoleControllerApiRoleCreateOrUpdateRequest} iAMRoleControllerApiRoleCreateOrUpdateRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IAMRoleControllerApiRoleDetail}
     */
    createRole(tenant, iAMRoleControllerApiRoleCreateOrUpdateRequest) {
      return this.createRoleWithHttpInfo(tenant, iAMRoleControllerApiRoleCreateOrUpdateRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a role
     * @param {String} id The role id
     * @param {String} tenant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteRoleWithHttpInfo(id, tenant) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteRole");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling deleteRole");
      }

      let pathParams = {
        'id': id,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/roles/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a role
     * @param {String} id The role id
     * @param {String} tenant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteRole(id, tenant) {
      return this.deleteRoleWithHttpInfo(id, tenant)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a role
     * @param {String} id The role id
     * @param {String} tenant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IAMRoleControllerApiRoleDetail} and HTTP response
     */
    getRoleWithHttpInfo(id, tenant) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getRole");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling getRole");
      }

      let pathParams = {
        'id': id,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IAMRoleControllerApiRoleDetail;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/roles/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve a role
     * @param {String} id The role id
     * @param {String} tenant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IAMRoleControllerApiRoleDetail}
     */
    getRole(id, tenant) {
      return this.getRoleWithHttpInfo(id, tenant)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List roles by ids
     * @param {String} tenant 
     * @param {module:model/ApiIds} apiIds The ids that must be present on results
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Role>} and HTTP response
     */
    listRolesFromGivenIdsWithHttpInfo(tenant, apiIds) {
      let postBody = apiIds;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling listRolesFromGivenIds");
      }
      // verify the required parameter 'apiIds' is set
      if (apiIds === undefined || apiIds === null) {
        throw new Error("Missing the required parameter 'apiIds' when calling listRolesFromGivenIds");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Role];
      return this.apiClient.callApi(
        '/api/v1/{tenant}/roles/ids', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List roles by ids
     * @param {String} tenant 
     * @param {module:model/ApiIds} apiIds The ids that must be present on results
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Role>}
     */
    listRolesFromGivenIds(tenant, apiIds) {
      return this.listRolesFromGivenIdsWithHttpInfo(tenant, apiIds)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Search for roles
     * @param {Number} page The current page
     * @param {Number} size The current page size
     * @param {String} tenant 
     * @param {Object} opts Optional parameters
     * @param {String} [q] A string filter
     * @param {Array.<String>} [sort] The sort of current page
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PagedResultsApiRoleSummary} and HTTP response
     */
    searchRolesWithHttpInfo(page, size, tenant, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling searchRoles");
      }
      // verify the required parameter 'size' is set
      if (size === undefined || size === null) {
        throw new Error("Missing the required parameter 'size' when calling searchRoles");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling searchRoles");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
        'q': opts['q'],
        'page': page,
        'size': size,
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagedResultsApiRoleSummary;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/roles/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Search for roles
     * @param {Number} page The current page
     * @param {Number} size The current page size
     * @param {String} tenant 
     * @param {Object} opts Optional parameters
     * @param {String} opts.q A string filter
     * @param {Array.<String>} opts.sort The sort of current page
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PagedResultsApiRoleSummary}
     */
    searchRoles(page, size, tenant, opts) {
      return this.searchRolesWithHttpInfo(page, size, tenant, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a role
     * @param {String} id The role id
     * @param {String} tenant 
     * @param {module:model/IAMRoleControllerApiRoleCreateOrUpdateRequest} iAMRoleControllerApiRoleCreateOrUpdateRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IAMRoleControllerApiRoleDetail} and HTTP response
     */
    updateRoleWithHttpInfo(id, tenant, iAMRoleControllerApiRoleCreateOrUpdateRequest) {
      let postBody = iAMRoleControllerApiRoleCreateOrUpdateRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateRole");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling updateRole");
      }
      // verify the required parameter 'iAMRoleControllerApiRoleCreateOrUpdateRequest' is set
      if (iAMRoleControllerApiRoleCreateOrUpdateRequest === undefined || iAMRoleControllerApiRoleCreateOrUpdateRequest === null) {
        throw new Error("Missing the required parameter 'iAMRoleControllerApiRoleCreateOrUpdateRequest' when calling updateRole");
      }

      let pathParams = {
        'id': id,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IAMRoleControllerApiRoleDetail;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/roles/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update a role
     * @param {String} id The role id
     * @param {String} tenant 
     * @param {module:model/IAMRoleControllerApiRoleCreateOrUpdateRequest} iAMRoleControllerApiRoleCreateOrUpdateRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IAMRoleControllerApiRoleDetail}
     */
    updateRole(id, tenant, iAMRoleControllerApiRoleCreateOrUpdateRequest) {
      return this.updateRoleWithHttpInfo(id, tenant, iAMRoleControllerApiRoleCreateOrUpdateRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
