/**
 * Kestra EE
 * All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AbstractUserControllerPasswordRequest from '../model/AbstractUserControllerPasswordRequest';
import AbstractUserControllerUserApiAutocomplete from '../model/AbstractUserControllerUserApiAutocomplete';
import ApiServiceAccount from '../model/ApiServiceAccount';
import ApiUser from '../model/ApiUser';
import CreateApiTokenRequest from '../model/CreateApiTokenRequest';
import MeControllerUpdatePasswordRequest from '../model/MeControllerUpdatePasswordRequest';
import PagedResultsApiUser from '../model/PagedResultsApiUser';
import UserType from '../model/UserType';

/**
* Users service.
* @module api/UsersApi
* @version v1
*/
export default class UsersApi {

    /**
    * Constructs a new UsersApi. 
    * @alias module:api/UsersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * List users for autocomplete
     * @param {String} tenant 
     * @param {module:model/AbstractUserControllerUserApiAutocomplete} abstractUserControllerUserApiAutocomplete Autocomplete request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ApiUser>} and HTTP response
     */
    autocompleteUsersWithHttpInfo(tenant, abstractUserControllerUserApiAutocomplete) {
      let postBody = abstractUserControllerUserApiAutocomplete;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling autocompleteUsers");
      }
      // verify the required parameter 'abstractUserControllerUserApiAutocomplete' is set
      if (abstractUserControllerUserApiAutocomplete === undefined || abstractUserControllerUserApiAutocomplete === null) {
        throw new Error("Missing the required parameter 'abstractUserControllerUserApiAutocomplete' when calling autocompleteUsers");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [ApiUser];
      return this.apiClient.callApi(
        '/api/v1/{tenant}/users/autocomplete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List users for autocomplete
     * @param {String} tenant 
     * @param {module:model/AbstractUserControllerUserApiAutocomplete} abstractUserControllerUserApiAutocomplete Autocomplete request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ApiUser>}
     */
    autocompleteUsers(tenant, abstractUserControllerUserApiAutocomplete) {
      return this.autocompleteUsersWithHttpInfo(tenant, abstractUserControllerUserApiAutocomplete)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List users for autocomplete
     * @param {String} resourceTenant 
     * @param {module:model/AbstractUserControllerUserApiAutocomplete} abstractUserControllerUserApiAutocomplete Autocomplete request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ApiUser>} and HTTP response
     */
    autocompleteUsersWithResourceTenantasSuperAdminWithHttpInfo(resourceTenant, abstractUserControllerUserApiAutocomplete) {
      let postBody = abstractUserControllerUserApiAutocomplete;
      // verify the required parameter 'resourceTenant' is set
      if (resourceTenant === undefined || resourceTenant === null) {
        throw new Error("Missing the required parameter 'resourceTenant' when calling autocompleteUsersWithResourceTenantasSuperAdmin");
      }
      // verify the required parameter 'abstractUserControllerUserApiAutocomplete' is set
      if (abstractUserControllerUserApiAutocomplete === undefined || abstractUserControllerUserApiAutocomplete === null) {
        throw new Error("Missing the required parameter 'abstractUserControllerUserApiAutocomplete' when calling autocompleteUsersWithResourceTenantasSuperAdmin");
      }

      let pathParams = {
        'resourceTenant': resourceTenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [ApiUser];
      return this.apiClient.callApi(
        '/api/v1/tenants/{resourceTenant}/users/autocomplete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List users for autocomplete
     * @param {String} resourceTenant 
     * @param {module:model/AbstractUserControllerUserApiAutocomplete} abstractUserControllerUserApiAutocomplete Autocomplete request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ApiUser>}
     */
    autocompleteUsersWithResourceTenantasSuperAdmin(resourceTenant, abstractUserControllerUserApiAutocomplete) {
      return this.autocompleteUsersWithResourceTenantasSuperAdminWithHttpInfo(resourceTenant, abstractUserControllerUserApiAutocomplete)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List users for autocomplete
     * @param {module:model/AbstractUserControllerUserApiAutocomplete} abstractUserControllerUserApiAutocomplete Autocomplete request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ApiUser>} and HTTP response
     */
    autocompleteUsersasSuperAdminWithHttpInfo(abstractUserControllerUserApiAutocomplete) {
      let postBody = abstractUserControllerUserApiAutocomplete;
      // verify the required parameter 'abstractUserControllerUserApiAutocomplete' is set
      if (abstractUserControllerUserApiAutocomplete === undefined || abstractUserControllerUserApiAutocomplete === null) {
        throw new Error("Missing the required parameter 'abstractUserControllerUserApiAutocomplete' when calling autocompleteUsersasSuperAdmin");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [ApiUser];
      return this.apiClient.callApi(
        '/api/v1/tenants/users/autocomplete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List users for autocomplete
     * @param {module:model/AbstractUserControllerUserApiAutocomplete} abstractUserControllerUserApiAutocomplete Autocomplete request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ApiUser>}
     */
    autocompleteUsersasSuperAdmin(abstractUserControllerUserApiAutocomplete) {
      return this.autocompleteUsersasSuperAdminWithHttpInfo(abstractUserControllerUserApiAutocomplete)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create new API Token for a specific user
     * @param {String} id The user id
     * @param {String} tenant 
     * @param {module:model/CreateApiTokenRequest} createApiTokenRequest The create api-token request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    createApiTokensForUserWithHttpInfo(id, tenant, createApiTokenRequest) {
      let postBody = createApiTokenRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling createApiTokensForUser");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling createApiTokensForUser");
      }
      // verify the required parameter 'createApiTokenRequest' is set
      if (createApiTokenRequest === undefined || createApiTokenRequest === null) {
        throw new Error("Missing the required parameter 'createApiTokenRequest' when calling createApiTokensForUser");
      }

      let pathParams = {
        'id': id,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/users/{id}/api-tokens', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create new API Token for a specific user
     * @param {String} id The user id
     * @param {String} tenant 
     * @param {module:model/CreateApiTokenRequest} createApiTokenRequest The create api-token request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    createApiTokensForUser(id, tenant, createApiTokenRequest) {
      return this.createApiTokensForUserWithHttpInfo(id, tenant, createApiTokenRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create new API Token for a specific user
     * @param {String} id The user id
     * @param {String} resourceTenant 
     * @param {module:model/CreateApiTokenRequest} createApiTokenRequest The create api-token request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    createApiTokensForUserWithResourceTenantasSuperAdminWithHttpInfo(id, resourceTenant, createApiTokenRequest) {
      let postBody = createApiTokenRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling createApiTokensForUserWithResourceTenantasSuperAdmin");
      }
      // verify the required parameter 'resourceTenant' is set
      if (resourceTenant === undefined || resourceTenant === null) {
        throw new Error("Missing the required parameter 'resourceTenant' when calling createApiTokensForUserWithResourceTenantasSuperAdmin");
      }
      // verify the required parameter 'createApiTokenRequest' is set
      if (createApiTokenRequest === undefined || createApiTokenRequest === null) {
        throw new Error("Missing the required parameter 'createApiTokenRequest' when calling createApiTokensForUserWithResourceTenantasSuperAdmin");
      }

      let pathParams = {
        'id': id,
        'resourceTenant': resourceTenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/tenants/{resourceTenant}/users/{id}/api-tokens', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create new API Token for a specific user
     * @param {String} id The user id
     * @param {String} resourceTenant 
     * @param {module:model/CreateApiTokenRequest} createApiTokenRequest The create api-token request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    createApiTokensForUserWithResourceTenantasSuperAdmin(id, resourceTenant, createApiTokenRequest) {
      return this.createApiTokensForUserWithResourceTenantasSuperAdminWithHttpInfo(id, resourceTenant, createApiTokenRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create new API Token for a specific user
     * @param {String} id The user id
     * @param {module:model/CreateApiTokenRequest} createApiTokenRequest The create api-token request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    createApiTokensForUserasSuperAdminWithHttpInfo(id, createApiTokenRequest) {
      let postBody = createApiTokenRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling createApiTokensForUserasSuperAdmin");
      }
      // verify the required parameter 'createApiTokenRequest' is set
      if (createApiTokenRequest === undefined || createApiTokenRequest === null) {
        throw new Error("Missing the required parameter 'createApiTokenRequest' when calling createApiTokensForUserasSuperAdmin");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/tenants/users/{id}/api-tokens', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create new API Token for a specific user
     * @param {String} id The user id
     * @param {module:model/CreateApiTokenRequest} createApiTokenRequest The create api-token request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    createApiTokensForUserasSuperAdmin(id, createApiTokenRequest) {
      return this.createApiTokensForUserasSuperAdminWithHttpInfo(id, createApiTokenRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a user service account
     * @param {String} tenant 
     * @param {module:model/ApiServiceAccount} apiServiceAccount The service account
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiServiceAccount} and HTTP response
     */
    createServiceAccountWithHttpInfo(tenant, apiServiceAccount) {
      let postBody = apiServiceAccount;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling createServiceAccount");
      }
      // verify the required parameter 'apiServiceAccount' is set
      if (apiServiceAccount === undefined || apiServiceAccount === null) {
        throw new Error("Missing the required parameter 'apiServiceAccount' when calling createServiceAccount");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApiServiceAccount;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/users/service-accounts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a user service account
     * @param {String} tenant 
     * @param {module:model/ApiServiceAccount} apiServiceAccount The service account
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiServiceAccount}
     */
    createServiceAccount(tenant, apiServiceAccount) {
      return this.createServiceAccountWithHttpInfo(tenant, apiServiceAccount)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a user service account
     * @param {String} resourceTenant 
     * @param {module:model/ApiServiceAccount} apiServiceAccount The service account
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiServiceAccount} and HTTP response
     */
    createServiceAccountWithResourceTenantasSuperAdminWithHttpInfo(resourceTenant, apiServiceAccount) {
      let postBody = apiServiceAccount;
      // verify the required parameter 'resourceTenant' is set
      if (resourceTenant === undefined || resourceTenant === null) {
        throw new Error("Missing the required parameter 'resourceTenant' when calling createServiceAccountWithResourceTenantasSuperAdmin");
      }
      // verify the required parameter 'apiServiceAccount' is set
      if (apiServiceAccount === undefined || apiServiceAccount === null) {
        throw new Error("Missing the required parameter 'apiServiceAccount' when calling createServiceAccountWithResourceTenantasSuperAdmin");
      }

      let pathParams = {
        'resourceTenant': resourceTenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApiServiceAccount;
      return this.apiClient.callApi(
        '/api/v1/tenants/{resourceTenant}/users/service-accounts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a user service account
     * @param {String} resourceTenant 
     * @param {module:model/ApiServiceAccount} apiServiceAccount The service account
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiServiceAccount}
     */
    createServiceAccountWithResourceTenantasSuperAdmin(resourceTenant, apiServiceAccount) {
      return this.createServiceAccountWithResourceTenantasSuperAdminWithHttpInfo(resourceTenant, apiServiceAccount)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a user service account
     * @param {module:model/ApiServiceAccount} apiServiceAccount The service account
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiServiceAccount} and HTTP response
     */
    createServiceAccountasSuperAdminWithHttpInfo(apiServiceAccount) {
      let postBody = apiServiceAccount;
      // verify the required parameter 'apiServiceAccount' is set
      if (apiServiceAccount === undefined || apiServiceAccount === null) {
        throw new Error("Missing the required parameter 'apiServiceAccount' when calling createServiceAccountasSuperAdmin");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApiServiceAccount;
      return this.apiClient.callApi(
        '/api/v1/tenants/users/service-accounts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a user service account
     * @param {module:model/ApiServiceAccount} apiServiceAccount The service account
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiServiceAccount}
     */
    createServiceAccountasSuperAdmin(apiServiceAccount) {
      return this.createServiceAccountasSuperAdminWithHttpInfo(apiServiceAccount)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a standard user
     * @param {String} tenant 
     * @param {module:model/ApiUser} apiUser The user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiUser} and HTTP response
     */
    createUserWithHttpInfo(tenant, apiUser) {
      let postBody = apiUser;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling createUser");
      }
      // verify the required parameter 'apiUser' is set
      if (apiUser === undefined || apiUser === null) {
        throw new Error("Missing the required parameter 'apiUser' when calling createUser");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApiUser;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a standard user
     * @param {String} tenant 
     * @param {module:model/ApiUser} apiUser The user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiUser}
     */
    createUser(tenant, apiUser) {
      return this.createUserWithHttpInfo(tenant, apiUser)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a basic auth password for a standard user
     * @param {String} id The user id
     * @param {String} tenant 
     * @param {module:model/AbstractUserControllerPasswordRequest} abstractUserControllerPasswordRequest The password
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiUser} and HTTP response
     */
    createUserBasicAuthWithHttpInfo(id, tenant, abstractUserControllerPasswordRequest) {
      let postBody = abstractUserControllerPasswordRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling createUserBasicAuth");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling createUserBasicAuth");
      }
      // verify the required parameter 'abstractUserControllerPasswordRequest' is set
      if (abstractUserControllerPasswordRequest === undefined || abstractUserControllerPasswordRequest === null) {
        throw new Error("Missing the required parameter 'abstractUserControllerPasswordRequest' when calling createUserBasicAuth");
      }

      let pathParams = {
        'id': id,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApiUser;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/users/{id}/password', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a basic auth password for a standard user
     * @param {String} id The user id
     * @param {String} tenant 
     * @param {module:model/AbstractUserControllerPasswordRequest} abstractUserControllerPasswordRequest The password
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiUser}
     */
    createUserBasicAuth(id, tenant, abstractUserControllerPasswordRequest) {
      return this.createUserBasicAuthWithHttpInfo(id, tenant, abstractUserControllerPasswordRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a basic auth password for a standard user
     * @param {String} id The user id
     * @param {String} resourceTenant 
     * @param {module:model/AbstractUserControllerPasswordRequest} abstractUserControllerPasswordRequest The password
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiUser} and HTTP response
     */
    createUserBasicAuthWithResourceTenantasSuperAdminWithHttpInfo(id, resourceTenant, abstractUserControllerPasswordRequest) {
      let postBody = abstractUserControllerPasswordRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling createUserBasicAuthWithResourceTenantasSuperAdmin");
      }
      // verify the required parameter 'resourceTenant' is set
      if (resourceTenant === undefined || resourceTenant === null) {
        throw new Error("Missing the required parameter 'resourceTenant' when calling createUserBasicAuthWithResourceTenantasSuperAdmin");
      }
      // verify the required parameter 'abstractUserControllerPasswordRequest' is set
      if (abstractUserControllerPasswordRequest === undefined || abstractUserControllerPasswordRequest === null) {
        throw new Error("Missing the required parameter 'abstractUserControllerPasswordRequest' when calling createUserBasicAuthWithResourceTenantasSuperAdmin");
      }

      let pathParams = {
        'id': id,
        'resourceTenant': resourceTenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApiUser;
      return this.apiClient.callApi(
        '/api/v1/tenants/{resourceTenant}/users/{id}/password', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a basic auth password for a standard user
     * @param {String} id The user id
     * @param {String} resourceTenant 
     * @param {module:model/AbstractUserControllerPasswordRequest} abstractUserControllerPasswordRequest The password
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiUser}
     */
    createUserBasicAuthWithResourceTenantasSuperAdmin(id, resourceTenant, abstractUserControllerPasswordRequest) {
      return this.createUserBasicAuthWithResourceTenantasSuperAdminWithHttpInfo(id, resourceTenant, abstractUserControllerPasswordRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a basic auth password for a standard user
     * @param {String} id The user id
     * @param {module:model/AbstractUserControllerPasswordRequest} abstractUserControllerPasswordRequest The password
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiUser} and HTTP response
     */
    createUserBasicAuthasSuperAdminWithHttpInfo(id, abstractUserControllerPasswordRequest) {
      let postBody = abstractUserControllerPasswordRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling createUserBasicAuthasSuperAdmin");
      }
      // verify the required parameter 'abstractUserControllerPasswordRequest' is set
      if (abstractUserControllerPasswordRequest === undefined || abstractUserControllerPasswordRequest === null) {
        throw new Error("Missing the required parameter 'abstractUserControllerPasswordRequest' when calling createUserBasicAuthasSuperAdmin");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApiUser;
      return this.apiClient.callApi(
        '/api/v1/tenants/users/{id}/password', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a basic auth password for a standard user
     * @param {String} id The user id
     * @param {module:model/AbstractUserControllerPasswordRequest} abstractUserControllerPasswordRequest The password
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiUser}
     */
    createUserBasicAuthasSuperAdmin(id, abstractUserControllerPasswordRequest) {
      return this.createUserBasicAuthasSuperAdminWithHttpInfo(id, abstractUserControllerPasswordRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a standard user
     * @param {String} resourceTenant 
     * @param {module:model/ApiUser} apiUser The user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiUser} and HTTP response
     */
    createUserWithResourceTenantasSuperAdminWithHttpInfo(resourceTenant, apiUser) {
      let postBody = apiUser;
      // verify the required parameter 'resourceTenant' is set
      if (resourceTenant === undefined || resourceTenant === null) {
        throw new Error("Missing the required parameter 'resourceTenant' when calling createUserWithResourceTenantasSuperAdmin");
      }
      // verify the required parameter 'apiUser' is set
      if (apiUser === undefined || apiUser === null) {
        throw new Error("Missing the required parameter 'apiUser' when calling createUserWithResourceTenantasSuperAdmin");
      }

      let pathParams = {
        'resourceTenant': resourceTenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApiUser;
      return this.apiClient.callApi(
        '/api/v1/tenants/{resourceTenant}/users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a standard user
     * @param {String} resourceTenant 
     * @param {module:model/ApiUser} apiUser The user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiUser}
     */
    createUserWithResourceTenantasSuperAdmin(resourceTenant, apiUser) {
      return this.createUserWithResourceTenantasSuperAdminWithHttpInfo(resourceTenant, apiUser)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a standard user
     * @param {module:model/ApiUser} apiUser The user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiUser} and HTTP response
     */
    createUserasSuperAdminWithHttpInfo(apiUser) {
      let postBody = apiUser;
      // verify the required parameter 'apiUser' is set
      if (apiUser === undefined || apiUser === null) {
        throw new Error("Missing the required parameter 'apiUser' when calling createUserasSuperAdmin");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApiUser;
      return this.apiClient.callApi(
        '/api/v1/tenants/users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a standard user
     * @param {module:model/ApiUser} apiUser The user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiUser}
     */
    createUserasSuperAdmin(apiUser) {
      return this.createUserasSuperAdminWithHttpInfo(apiUser)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete an API Token for specific user and token id
     * @param {String} id The user id
     * @param {String} tokenId The token id
     * @param {String} tenant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    deleteApiTokenWithHttpInfo(id, tokenId, tenant) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteApiToken");
      }
      // verify the required parameter 'tokenId' is set
      if (tokenId === undefined || tokenId === null) {
        throw new Error("Missing the required parameter 'tokenId' when calling deleteApiToken");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling deleteApiToken");
      }

      let pathParams = {
        'id': id,
        'tokenId': tokenId,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/users/{id}/api-tokens/{tokenId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete an API Token for specific user and token id
     * @param {String} id The user id
     * @param {String} tokenId The token id
     * @param {String} tenant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    deleteApiToken(id, tokenId, tenant) {
      return this.deleteApiTokenWithHttpInfo(id, tokenId, tenant)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete an API Token for specific user and token id
     * @param {String} id The user id
     * @param {String} tokenId The token id
     * @param {String} resourceTenant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    deleteApiTokenWithResourceTenantasSuperAdminWithHttpInfo(id, tokenId, resourceTenant) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteApiTokenWithResourceTenantasSuperAdmin");
      }
      // verify the required parameter 'tokenId' is set
      if (tokenId === undefined || tokenId === null) {
        throw new Error("Missing the required parameter 'tokenId' when calling deleteApiTokenWithResourceTenantasSuperAdmin");
      }
      // verify the required parameter 'resourceTenant' is set
      if (resourceTenant === undefined || resourceTenant === null) {
        throw new Error("Missing the required parameter 'resourceTenant' when calling deleteApiTokenWithResourceTenantasSuperAdmin");
      }

      let pathParams = {
        'id': id,
        'tokenId': tokenId,
        'resourceTenant': resourceTenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/tenants/{resourceTenant}/users/{id}/api-tokens/{tokenId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete an API Token for specific user and token id
     * @param {String} id The user id
     * @param {String} tokenId The token id
     * @param {String} resourceTenant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    deleteApiTokenWithResourceTenantasSuperAdmin(id, tokenId, resourceTenant) {
      return this.deleteApiTokenWithResourceTenantasSuperAdminWithHttpInfo(id, tokenId, resourceTenant)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete an API Token for specific user and token id
     * @param {String} id The user id
     * @param {String} tokenId The token id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    deleteApiTokenasSuperAdminWithHttpInfo(id, tokenId) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteApiTokenasSuperAdmin");
      }
      // verify the required parameter 'tokenId' is set
      if (tokenId === undefined || tokenId === null) {
        throw new Error("Missing the required parameter 'tokenId' when calling deleteApiTokenasSuperAdmin");
      }

      let pathParams = {
        'id': id,
        'tokenId': tokenId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/tenants/users/{id}/api-tokens/{tokenId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete an API Token for specific user and token id
     * @param {String} id The user id
     * @param {String} tokenId The token id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    deleteApiTokenasSuperAdmin(id, tokenId) {
      return this.deleteApiTokenasSuperAdminWithHttpInfo(id, tokenId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete an Auth for a user
     * @param {String} id The user id
     * @param {String} uid The auth id
     * @param {String} tenant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiUser} and HTTP response
     */
    deleteAuthWithHttpInfo(id, uid, tenant) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteAuth");
      }
      // verify the required parameter 'uid' is set
      if (uid === undefined || uid === null) {
        throw new Error("Missing the required parameter 'uid' when calling deleteAuth");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling deleteAuth");
      }

      let pathParams = {
        'id': id,
        'uid': uid,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiUser;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/users/{id}/auths/{uid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete an Auth for a user
     * @param {String} id The user id
     * @param {String} uid The auth id
     * @param {String} tenant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiUser}
     */
    deleteAuth(id, uid, tenant) {
      return this.deleteAuthWithHttpInfo(id, uid, tenant)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete an Auth for a user
     * @param {String} id The user id
     * @param {String} uid The auth id
     * @param {String} resourceTenant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiUser} and HTTP response
     */
    deleteAuthWithResourceTenantasSuperAdminWithHttpInfo(id, uid, resourceTenant) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteAuthWithResourceTenantasSuperAdmin");
      }
      // verify the required parameter 'uid' is set
      if (uid === undefined || uid === null) {
        throw new Error("Missing the required parameter 'uid' when calling deleteAuthWithResourceTenantasSuperAdmin");
      }
      // verify the required parameter 'resourceTenant' is set
      if (resourceTenant === undefined || resourceTenant === null) {
        throw new Error("Missing the required parameter 'resourceTenant' when calling deleteAuthWithResourceTenantasSuperAdmin");
      }

      let pathParams = {
        'id': id,
        'uid': uid,
        'resourceTenant': resourceTenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiUser;
      return this.apiClient.callApi(
        '/api/v1/tenants/{resourceTenant}/users/{id}/auths/{uid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete an Auth for a user
     * @param {String} id The user id
     * @param {String} uid The auth id
     * @param {String} resourceTenant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiUser}
     */
    deleteAuthWithResourceTenantasSuperAdmin(id, uid, resourceTenant) {
      return this.deleteAuthWithResourceTenantasSuperAdminWithHttpInfo(id, uid, resourceTenant)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete an Auth for a user
     * @param {String} id The user id
     * @param {String} uid The auth id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiUser} and HTTP response
     */
    deleteAuthasSuperAdminWithHttpInfo(id, uid) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteAuthasSuperAdmin");
      }
      // verify the required parameter 'uid' is set
      if (uid === undefined || uid === null) {
        throw new Error("Missing the required parameter 'uid' when calling deleteAuthasSuperAdmin");
      }

      let pathParams = {
        'id': id,
        'uid': uid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiUser;
      return this.apiClient.callApi(
        '/api/v1/tenants/users/{id}/auths/{uid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete an Auth for a user
     * @param {String} id The user id
     * @param {String} uid The auth id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiUser}
     */
    deleteAuthasSuperAdmin(id, uid) {
      return this.deleteAuthasSuperAdminWithHttpInfo(id, uid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a user refresh token
     * @param {String} id The user id
     * @param {String} tenant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiUser} and HTTP response
     */
    deleteRefreshTokenWithHttpInfo(id, tenant) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteRefreshToken");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling deleteRefreshToken");
      }

      let pathParams = {
        'id': id,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiUser;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/users/{id}/refresh-token', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a user refresh token
     * @param {String} id The user id
     * @param {String} tenant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiUser}
     */
    deleteRefreshToken(id, tenant) {
      return this.deleteRefreshTokenWithHttpInfo(id, tenant)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a user refresh token
     * @param {String} id The user id
     * @param {String} resourceTenant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiUser} and HTTP response
     */
    deleteRefreshTokenWithResourceTenantasSuperAdminWithHttpInfo(id, resourceTenant) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteRefreshTokenWithResourceTenantasSuperAdmin");
      }
      // verify the required parameter 'resourceTenant' is set
      if (resourceTenant === undefined || resourceTenant === null) {
        throw new Error("Missing the required parameter 'resourceTenant' when calling deleteRefreshTokenWithResourceTenantasSuperAdmin");
      }

      let pathParams = {
        'id': id,
        'resourceTenant': resourceTenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiUser;
      return this.apiClient.callApi(
        '/api/v1/tenants/{resourceTenant}/users/{id}/refresh-token', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a user refresh token
     * @param {String} id The user id
     * @param {String} resourceTenant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiUser}
     */
    deleteRefreshTokenWithResourceTenantasSuperAdmin(id, resourceTenant) {
      return this.deleteRefreshTokenWithResourceTenantasSuperAdminWithHttpInfo(id, resourceTenant)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a user refresh token
     * @param {String} id The user id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiUser} and HTTP response
     */
    deleteRefreshTokenasSuperAdminWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteRefreshTokenasSuperAdmin");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiUser;
      return this.apiClient.callApi(
        '/api/v1/tenants/users/{id}/refresh-token', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a user refresh token
     * @param {String} id The user id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiUser}
     */
    deleteRefreshTokenasSuperAdmin(id) {
      return this.deleteRefreshTokenasSuperAdminWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a user
     * @param {String} id The user id
     * @param {String} tenant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteUserWithHttpInfo(id, tenant) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteUser");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling deleteUser");
      }

      let pathParams = {
        'id': id,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/users/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a user
     * @param {String} id The user id
     * @param {String} tenant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteUser(id, tenant) {
      return this.deleteUserWithHttpInfo(id, tenant)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a user
     * @param {String} id The user id
     * @param {String} resourceTenant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteUserWithResourceTenantasSuperAdminWithHttpInfo(id, resourceTenant) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteUserWithResourceTenantasSuperAdmin");
      }
      // verify the required parameter 'resourceTenant' is set
      if (resourceTenant === undefined || resourceTenant === null) {
        throw new Error("Missing the required parameter 'resourceTenant' when calling deleteUserWithResourceTenantasSuperAdmin");
      }

      let pathParams = {
        'id': id,
        'resourceTenant': resourceTenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/tenants/{resourceTenant}/users/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a user
     * @param {String} id The user id
     * @param {String} resourceTenant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteUserWithResourceTenantasSuperAdmin(id, resourceTenant) {
      return this.deleteUserWithResourceTenantasSuperAdminWithHttpInfo(id, resourceTenant)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a user
     * @param {String} id The user id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteUserasSuperAdminWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteUserasSuperAdmin");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/tenants/users/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a user
     * @param {String} id The user id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteUserasSuperAdmin(id) {
      return this.deleteUserasSuperAdminWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all users in the instance across all tenantd
     * @param {Number} page The current page
     * @param {Number} size The current page size
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [sort] The sort of current page
     * @param {String} [q] A string filter
     * @param {module:model/UserType} [type] The type of user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PagedResultsApiUser} and HTTP response
     */
    findAllForAllTenantsWithHttpInfo(page, size, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling findAllForAllTenants");
      }
      // verify the required parameter 'size' is set
      if (size === undefined || size === null) {
        throw new Error("Missing the required parameter 'size' when calling findAllForAllTenants");
      }

      let pathParams = {
      };
      let queryParams = {
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        'page': page,
        'size': size,
        'q': opts['q'],
        'type': opts['type']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagedResultsApiUser;
      return this.apiClient.callApi(
        '/api/v1/tenants/users/instance', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all users in the instance across all tenantd
     * @param {Number} page The current page
     * @param {Number} size The current page size
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.sort The sort of current page
     * @param {String} opts.q A string filter
     * @param {module:model/UserType} opts.type The type of user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PagedResultsApiUser}
     */
    findAllForAllTenants(page, size, opts) {
      return this.findAllForAllTenantsWithHttpInfo(page, size, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all users in the instance across all tenantd
     * @param {Number} page The current page
     * @param {Number} size The current page size
     * @param {String} resourceTenant 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [sort] The sort of current page
     * @param {String} [q] A string filter
     * @param {module:model/UserType} [type] The type of user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PagedResultsApiUser} and HTTP response
     */
    findAllForAllTenantsWithResourceTenantWithHttpInfo(page, size, resourceTenant, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling findAllForAllTenantsWithResourceTenant");
      }
      // verify the required parameter 'size' is set
      if (size === undefined || size === null) {
        throw new Error("Missing the required parameter 'size' when calling findAllForAllTenantsWithResourceTenant");
      }
      // verify the required parameter 'resourceTenant' is set
      if (resourceTenant === undefined || resourceTenant === null) {
        throw new Error("Missing the required parameter 'resourceTenant' when calling findAllForAllTenantsWithResourceTenant");
      }

      let pathParams = {
        'resourceTenant': resourceTenant
      };
      let queryParams = {
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        'page': page,
        'size': size,
        'q': opts['q'],
        'type': opts['type']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagedResultsApiUser;
      return this.apiClient.callApi(
        '/api/v1/tenants/{resourceTenant}/users/instance', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all users in the instance across all tenantd
     * @param {Number} page The current page
     * @param {Number} size The current page size
     * @param {String} resourceTenant 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.sort The sort of current page
     * @param {String} opts.q A string filter
     * @param {module:model/UserType} opts.type The type of user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PagedResultsApiUser}
     */
    findAllForAllTenantsWithResourceTenant(page, size, resourceTenant, opts) {
      return this.findAllForAllTenantsWithResourceTenantWithHttpInfo(page, size, resourceTenant, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a user
     * @param {String} id The user id
     * @param {String} tenant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiUser} and HTTP response
     */
    getUserWithHttpInfo(id, tenant) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getUser");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling getUser");
      }

      let pathParams = {
        'id': id,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiUser;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/users/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get a user
     * @param {String} id The user id
     * @param {String} tenant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiUser}
     */
    getUser(id, tenant) {
      return this.getUserWithHttpInfo(id, tenant)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a user
     * @param {String} id The user id
     * @param {String} resourceTenant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiUser} and HTTP response
     */
    getUserWithResourceTenantasSuperAdminWithHttpInfo(id, resourceTenant) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getUserWithResourceTenantasSuperAdmin");
      }
      // verify the required parameter 'resourceTenant' is set
      if (resourceTenant === undefined || resourceTenant === null) {
        throw new Error("Missing the required parameter 'resourceTenant' when calling getUserWithResourceTenantasSuperAdmin");
      }

      let pathParams = {
        'id': id,
        'resourceTenant': resourceTenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiUser;
      return this.apiClient.callApi(
        '/api/v1/tenants/{resourceTenant}/users/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get a user
     * @param {String} id The user id
     * @param {String} resourceTenant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiUser}
     */
    getUserWithResourceTenantasSuperAdmin(id, resourceTenant) {
      return this.getUserWithResourceTenantasSuperAdminWithHttpInfo(id, resourceTenant)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a user
     * @param {String} id The user id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiUser} and HTTP response
     */
    getUserasSuperAdminWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getUserasSuperAdmin");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiUser;
      return this.apiClient.callApi(
        '/api/v1/tenants/users/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get a user
     * @param {String} id The user id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiUser}
     */
    getUserasSuperAdmin(id) {
      return this.getUserasSuperAdminWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Impersonate a user
     * @param {String} id The user id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    impersonateWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling impersonate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/tenants/users/{id}/impersonate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Impersonate a user
     * @param {String} id The user id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    impersonate(id) {
      return this.impersonateWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Impersonate a user
     * @param {String} resourceTenant 
     * @param {String} id The user id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    impersonateWithResourceTenantWithHttpInfo(resourceTenant, id) {
      let postBody = null;
      // verify the required parameter 'resourceTenant' is set
      if (resourceTenant === undefined || resourceTenant === null) {
        throw new Error("Missing the required parameter 'resourceTenant' when calling impersonateWithResourceTenant");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling impersonateWithResourceTenant");
      }

      let pathParams = {
        'resourceTenant': resourceTenant,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/tenants/{resourceTenant}/users/{id}/impersonate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Impersonate a user
     * @param {String} resourceTenant 
     * @param {String} id The user id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    impersonateWithResourceTenant(resourceTenant, id) {
      return this.impersonateWithResourceTenantWithHttpInfo(resourceTenant, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List all API Tokens for specific user
     * @param {String} id The user id
     * @param {String} tenant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    listApiTokensWithHttpInfo(id, tenant) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listApiTokens");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling listApiTokens");
      }

      let pathParams = {
        'id': id,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/users/{id}/api-tokens', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List all API Tokens for specific user
     * @param {String} id The user id
     * @param {String} tenant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    listApiTokens(id, tenant) {
      return this.listApiTokensWithHttpInfo(id, tenant)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List all API Tokens for specific user
     * @param {String} id The user id
     * @param {String} resourceTenant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    listApiTokensWithResourceTenantasSuperAdminWithHttpInfo(id, resourceTenant) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listApiTokensWithResourceTenantasSuperAdmin");
      }
      // verify the required parameter 'resourceTenant' is set
      if (resourceTenant === undefined || resourceTenant === null) {
        throw new Error("Missing the required parameter 'resourceTenant' when calling listApiTokensWithResourceTenantasSuperAdmin");
      }

      let pathParams = {
        'id': id,
        'resourceTenant': resourceTenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/tenants/{resourceTenant}/users/{id}/api-tokens', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List all API Tokens for specific user
     * @param {String} id The user id
     * @param {String} resourceTenant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    listApiTokensWithResourceTenantasSuperAdmin(id, resourceTenant) {
      return this.listApiTokensWithResourceTenantasSuperAdminWithHttpInfo(id, resourceTenant)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List all API Tokens for specific user
     * @param {String} id The user id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    listApiTokensasSuperAdminWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listApiTokensasSuperAdmin");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/tenants/users/{id}/api-tokens', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List all API Tokens for specific user
     * @param {String} id The user id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    listApiTokensasSuperAdmin(id) {
      return this.listApiTokensasSuperAdminWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Search for users
     * @param {Number} page The current page
     * @param {Number} size The current page size
     * @param {String} tenant 
     * @param {Object} opts Optional parameters
     * @param {String} [q] A string filter
     * @param {Array.<String>} [sort] The sort of current page
     * @param {module:model/UserType} [type] The type of user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PagedResultsApiUser} and HTTP response
     */
    searchUsersWithHttpInfo(page, size, tenant, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling searchUsers");
      }
      // verify the required parameter 'size' is set
      if (size === undefined || size === null) {
        throw new Error("Missing the required parameter 'size' when calling searchUsers");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling searchUsers");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
        'q': opts['q'],
        'page': page,
        'size': size,
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        'type': opts['type']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagedResultsApiUser;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/users/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Search for users
     * @param {Number} page The current page
     * @param {Number} size The current page size
     * @param {String} tenant 
     * @param {Object} opts Optional parameters
     * @param {String} opts.q A string filter
     * @param {Array.<String>} opts.sort The sort of current page
     * @param {module:model/UserType} opts.type The type of user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PagedResultsApiUser}
     */
    searchUsers(page, size, tenant, opts) {
      return this.searchUsersWithHttpInfo(page, size, tenant, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Search for users
     * @param {Number} page The current page
     * @param {Number} size The current page size
     * @param {String} resourceTenant 
     * @param {Object} opts Optional parameters
     * @param {String} [q] A string filter
     * @param {Array.<String>} [sort] The sort of current page
     * @param {module:model/UserType} [type] The type of user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PagedResultsApiUser} and HTTP response
     */
    searchUsersWithResourceTenantasSuperAdminWithHttpInfo(page, size, resourceTenant, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling searchUsersWithResourceTenantasSuperAdmin");
      }
      // verify the required parameter 'size' is set
      if (size === undefined || size === null) {
        throw new Error("Missing the required parameter 'size' when calling searchUsersWithResourceTenantasSuperAdmin");
      }
      // verify the required parameter 'resourceTenant' is set
      if (resourceTenant === undefined || resourceTenant === null) {
        throw new Error("Missing the required parameter 'resourceTenant' when calling searchUsersWithResourceTenantasSuperAdmin");
      }

      let pathParams = {
        'resourceTenant': resourceTenant
      };
      let queryParams = {
        'q': opts['q'],
        'page': page,
        'size': size,
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        'type': opts['type']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagedResultsApiUser;
      return this.apiClient.callApi(
        '/api/v1/tenants/{resourceTenant}/users/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Search for users
     * @param {Number} page The current page
     * @param {Number} size The current page size
     * @param {String} resourceTenant 
     * @param {Object} opts Optional parameters
     * @param {String} opts.q A string filter
     * @param {Array.<String>} opts.sort The sort of current page
     * @param {module:model/UserType} opts.type The type of user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PagedResultsApiUser}
     */
    searchUsersWithResourceTenantasSuperAdmin(page, size, resourceTenant, opts) {
      return this.searchUsersWithResourceTenantasSuperAdminWithHttpInfo(page, size, resourceTenant, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Search for users
     * @param {Number} page The current page
     * @param {Number} size The current page size
     * @param {Object} opts Optional parameters
     * @param {String} [q] A string filter
     * @param {Array.<String>} [sort] The sort of current page
     * @param {module:model/UserType} [type] The type of user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PagedResultsApiUser} and HTTP response
     */
    searchUsersasSuperAdminWithHttpInfo(page, size, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling searchUsersasSuperAdmin");
      }
      // verify the required parameter 'size' is set
      if (size === undefined || size === null) {
        throw new Error("Missing the required parameter 'size' when calling searchUsersasSuperAdmin");
      }

      let pathParams = {
      };
      let queryParams = {
        'q': opts['q'],
        'page': page,
        'size': size,
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        'type': opts['type']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagedResultsApiUser;
      return this.apiClient.callApi(
        '/api/v1/tenants/users/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Search for users
     * @param {Number} page The current page
     * @param {Number} size The current page size
     * @param {Object} opts Optional parameters
     * @param {String} opts.q A string filter
     * @param {Array.<String>} opts.sort The sort of current page
     * @param {module:model/UserType} opts.type The type of user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PagedResultsApiUser}
     */
    searchUsersasSuperAdmin(page, size, opts) {
      return this.searchUsersasSuperAdminWithHttpInfo(page, size, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a user service account
     * @param {String} id The user id
     * @param {Boolean} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiUser} and HTTP response
     */
    setSuperAdminWithHttpInfo(id, body) {
      let postBody = body;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setSuperAdmin");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling setSuperAdmin");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApiUser;
      return this.apiClient.callApi(
        '/api/v1/tenants/users/{id}/set-superadmin', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update a user service account
     * @param {String} id The user id
     * @param {Boolean} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiUser}
     */
    setSuperAdmin(id, body) {
      return this.setSuperAdminWithHttpInfo(id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a user service account
     * @param {String} resourceTenant 
     * @param {String} id The user id
     * @param {Boolean} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiUser} and HTTP response
     */
    setSuperAdminWithResourceTenantWithHttpInfo(resourceTenant, id, body) {
      let postBody = body;
      // verify the required parameter 'resourceTenant' is set
      if (resourceTenant === undefined || resourceTenant === null) {
        throw new Error("Missing the required parameter 'resourceTenant' when calling setSuperAdminWithResourceTenant");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setSuperAdminWithResourceTenant");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling setSuperAdminWithResourceTenant");
      }

      let pathParams = {
        'resourceTenant': resourceTenant,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApiUser;
      return this.apiClient.callApi(
        '/api/v1/tenants/{resourceTenant}/users/{id}/set-superadmin', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update a user service account
     * @param {String} resourceTenant 
     * @param {String} id The user id
     * @param {Boolean} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiUser}
     */
    setSuperAdminWithResourceTenant(resourceTenant, id, body) {
      return this.setSuperAdminWithResourceTenantWithHttpInfo(resourceTenant, id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update login password for the current user.
     * @param {module:model/MeControllerUpdatePasswordRequest} meControllerUpdatePasswordRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    updateCurrentUserPasswordWithHttpInfo(meControllerUpdatePasswordRequest) {
      let postBody = meControllerUpdatePasswordRequest;
      // verify the required parameter 'meControllerUpdatePasswordRequest' is set
      if (meControllerUpdatePasswordRequest === undefined || meControllerUpdatePasswordRequest === null) {
        throw new Error("Missing the required parameter 'meControllerUpdatePasswordRequest' when calling updateCurrentUserPassword");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/me/password', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update login password for the current user.
     * @param {module:model/MeControllerUpdatePasswordRequest} meControllerUpdatePasswordRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    updateCurrentUserPassword(meControllerUpdatePasswordRequest) {
      return this.updateCurrentUserPasswordWithHttpInfo(meControllerUpdatePasswordRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update login password for the current user.
     * @param {String} tenant 
     * @param {module:model/MeControllerUpdatePasswordRequest} meControllerUpdatePasswordRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    updateCurrentUserPasswordWithTenantWithHttpInfo(tenant, meControllerUpdatePasswordRequest) {
      let postBody = meControllerUpdatePasswordRequest;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling updateCurrentUserPasswordWithTenant");
      }
      // verify the required parameter 'meControllerUpdatePasswordRequest' is set
      if (meControllerUpdatePasswordRequest === undefined || meControllerUpdatePasswordRequest === null) {
        throw new Error("Missing the required parameter 'meControllerUpdatePasswordRequest' when calling updateCurrentUserPasswordWithTenant");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/me/password', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update login password for the current user.
     * @param {String} tenant 
     * @param {module:model/MeControllerUpdatePasswordRequest} meControllerUpdatePasswordRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    updateCurrentUserPasswordWithTenant(tenant, meControllerUpdatePasswordRequest) {
      return this.updateCurrentUserPasswordWithTenantWithHttpInfo(tenant, meControllerUpdatePasswordRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a user service account
     * @param {String} id The user id
     * @param {String} tenant 
     * @param {module:model/ApiServiceAccount} apiServiceAccount The user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiServiceAccount} and HTTP response
     */
    updateServiceAccountWithHttpInfo(id, tenant, apiServiceAccount) {
      let postBody = apiServiceAccount;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateServiceAccount");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling updateServiceAccount");
      }
      // verify the required parameter 'apiServiceAccount' is set
      if (apiServiceAccount === undefined || apiServiceAccount === null) {
        throw new Error("Missing the required parameter 'apiServiceAccount' when calling updateServiceAccount");
      }

      let pathParams = {
        'id': id,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApiServiceAccount;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/users/service-accounts/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update a user service account
     * @param {String} id The user id
     * @param {String} tenant 
     * @param {module:model/ApiServiceAccount} apiServiceAccount The user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiServiceAccount}
     */
    updateServiceAccount(id, tenant, apiServiceAccount) {
      return this.updateServiceAccountWithHttpInfo(id, tenant, apiServiceAccount)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a user service account
     * @param {String} id The user id
     * @param {String} resourceTenant 
     * @param {module:model/ApiServiceAccount} apiServiceAccount The user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiServiceAccount} and HTTP response
     */
    updateServiceAccountWithResourceTenantasSuperAdminWithHttpInfo(id, resourceTenant, apiServiceAccount) {
      let postBody = apiServiceAccount;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateServiceAccountWithResourceTenantasSuperAdmin");
      }
      // verify the required parameter 'resourceTenant' is set
      if (resourceTenant === undefined || resourceTenant === null) {
        throw new Error("Missing the required parameter 'resourceTenant' when calling updateServiceAccountWithResourceTenantasSuperAdmin");
      }
      // verify the required parameter 'apiServiceAccount' is set
      if (apiServiceAccount === undefined || apiServiceAccount === null) {
        throw new Error("Missing the required parameter 'apiServiceAccount' when calling updateServiceAccountWithResourceTenantasSuperAdmin");
      }

      let pathParams = {
        'id': id,
        'resourceTenant': resourceTenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApiServiceAccount;
      return this.apiClient.callApi(
        '/api/v1/tenants/{resourceTenant}/users/service-accounts/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update a user service account
     * @param {String} id The user id
     * @param {String} resourceTenant 
     * @param {module:model/ApiServiceAccount} apiServiceAccount The user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiServiceAccount}
     */
    updateServiceAccountWithResourceTenantasSuperAdmin(id, resourceTenant, apiServiceAccount) {
      return this.updateServiceAccountWithResourceTenantasSuperAdminWithHttpInfo(id, resourceTenant, apiServiceAccount)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a user service account
     * @param {String} id The user id
     * @param {module:model/ApiServiceAccount} apiServiceAccount The user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiServiceAccount} and HTTP response
     */
    updateServiceAccountasSuperAdminWithHttpInfo(id, apiServiceAccount) {
      let postBody = apiServiceAccount;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateServiceAccountasSuperAdmin");
      }
      // verify the required parameter 'apiServiceAccount' is set
      if (apiServiceAccount === undefined || apiServiceAccount === null) {
        throw new Error("Missing the required parameter 'apiServiceAccount' when calling updateServiceAccountasSuperAdmin");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApiServiceAccount;
      return this.apiClient.callApi(
        '/api/v1/tenants/users/service-accounts/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update a user service account
     * @param {String} id The user id
     * @param {module:model/ApiServiceAccount} apiServiceAccount The user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiServiceAccount}
     */
    updateServiceAccountasSuperAdmin(id, apiServiceAccount) {
      return this.updateServiceAccountasSuperAdminWithHttpInfo(id, apiServiceAccount)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a standard user
     * @param {String} id The user id
     * @param {String} tenant 
     * @param {module:model/ApiUser} apiUser The user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiUser} and HTTP response
     */
    updateUserWithHttpInfo(id, tenant, apiUser) {
      let postBody = apiUser;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateUser");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling updateUser");
      }
      // verify the required parameter 'apiUser' is set
      if (apiUser === undefined || apiUser === null) {
        throw new Error("Missing the required parameter 'apiUser' when calling updateUser");
      }

      let pathParams = {
        'id': id,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApiUser;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/users/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update a standard user
     * @param {String} id The user id
     * @param {String} tenant 
     * @param {module:model/ApiUser} apiUser The user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiUser}
     */
    updateUser(id, tenant, apiUser) {
      return this.updateUserWithHttpInfo(id, tenant, apiUser)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a standard user
     * @param {String} id The user id
     * @param {String} resourceTenant 
     * @param {module:model/ApiUser} apiUser The user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiUser} and HTTP response
     */
    updateUserWithResourceTenantasSuperAdminWithHttpInfo(id, resourceTenant, apiUser) {
      let postBody = apiUser;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateUserWithResourceTenantasSuperAdmin");
      }
      // verify the required parameter 'resourceTenant' is set
      if (resourceTenant === undefined || resourceTenant === null) {
        throw new Error("Missing the required parameter 'resourceTenant' when calling updateUserWithResourceTenantasSuperAdmin");
      }
      // verify the required parameter 'apiUser' is set
      if (apiUser === undefined || apiUser === null) {
        throw new Error("Missing the required parameter 'apiUser' when calling updateUserWithResourceTenantasSuperAdmin");
      }

      let pathParams = {
        'id': id,
        'resourceTenant': resourceTenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApiUser;
      return this.apiClient.callApi(
        '/api/v1/tenants/{resourceTenant}/users/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update a standard user
     * @param {String} id The user id
     * @param {String} resourceTenant 
     * @param {module:model/ApiUser} apiUser The user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiUser}
     */
    updateUserWithResourceTenantasSuperAdmin(id, resourceTenant, apiUser) {
      return this.updateUserWithResourceTenantasSuperAdminWithHttpInfo(id, resourceTenant, apiUser)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a standard user
     * @param {String} id The user id
     * @param {module:model/ApiUser} apiUser The user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiUser} and HTTP response
     */
    updateUserasSuperAdminWithHttpInfo(id, apiUser) {
      let postBody = apiUser;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateUserasSuperAdmin");
      }
      // verify the required parameter 'apiUser' is set
      if (apiUser === undefined || apiUser === null) {
        throw new Error("Missing the required parameter 'apiUser' when calling updateUserasSuperAdmin");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApiUser;
      return this.apiClient.callApi(
        '/api/v1/tenants/users/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update a standard user
     * @param {String} id The user id
     * @param {module:model/ApiUser} apiUser The user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiUser}
     */
    updateUserasSuperAdmin(id, apiUser) {
      return this.updateUserasSuperAdminWithHttpInfo(id, apiUser)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
