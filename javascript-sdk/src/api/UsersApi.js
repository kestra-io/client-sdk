/**
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiPatchSuperAdminRequest from '../model/ApiPatchSuperAdminRequest';
import CreateApiTokenRequest from '../model/CreateApiTokenRequest';
import CreateApiTokenResponse from '../model/CreateApiTokenResponse';
import IAMTenantAccessControllerApiUserTenantAccess from '../model/IAMTenantAccessControllerApiUserTenantAccess';
import IAMTenantAccessControllerUserApiAutocomplete from '../model/IAMTenantAccessControllerUserApiAutocomplete';
import IAMUserControllerApiCreateOrUpdateUserRequest from '../model/IAMUserControllerApiCreateOrUpdateUserRequest';
import IAMUserControllerApiPatchRestrictedRequest from '../model/IAMUserControllerApiPatchRestrictedRequest';
import IAMUserControllerApiPatchUserPasswordRequest from '../model/IAMUserControllerApiPatchUserPasswordRequest';
import IAMUserControllerApiUser from '../model/IAMUserControllerApiUser';
import IAMUserGroupControllerApiUpdateUserGroupsRequest from '../model/IAMUserGroupControllerApiUpdateUserGroupsRequest';
import MeControllerApiUpdatePasswordRequest from '../model/MeControllerApiUpdatePasswordRequest';
import MeControllerApiUserDetailsRequest from '../model/MeControllerApiUserDetailsRequest';
import PagedResultsIAMUserControllerApiUserSummary from '../model/PagedResultsIAMUserControllerApiUserSummary';

/**
* Users service.
* @module api/UsersApi
* @version v1.0.5
*/
export default class UsersApi {

    /**
    * Constructs a new UsersApi. 
    * @alias module:api/UsersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * List users for autocomplete
     * @param {String} tenant 
     * @param {module:model/IAMTenantAccessControllerUserApiAutocomplete} iAMTenantAccessControllerUserApiAutocomplete Autocomplete request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/IAMTenantAccessControllerApiUserTenantAccess>} and HTTP response
     */
    autocompleteUsersWithHttpInfo(tenant, iAMTenantAccessControllerUserApiAutocomplete) {
      let postBody = iAMTenantAccessControllerUserApiAutocomplete;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling autocompleteUsers");
      }
      // verify the required parameter 'iAMTenantAccessControllerUserApiAutocomplete' is set
      if (iAMTenantAccessControllerUserApiAutocomplete === undefined || iAMTenantAccessControllerUserApiAutocomplete === null) {
        throw new Error("Missing the required parameter 'iAMTenantAccessControllerUserApiAutocomplete' when calling autocompleteUsers");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [IAMTenantAccessControllerApiUserTenantAccess];
      return this.apiClient.callApi(
        '/api/v1/{tenant}/tenant-access/autocomplete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List users for autocomplete
     * @param {String} tenant 
     * @param {module:model/IAMTenantAccessControllerUserApiAutocomplete} iAMTenantAccessControllerUserApiAutocomplete Autocomplete request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/IAMTenantAccessControllerApiUserTenantAccess>}
     */
    autocompleteUsers(tenant, iAMTenantAccessControllerUserApiAutocomplete) {
      return this.autocompleteUsersWithHttpInfo(tenant, iAMTenantAccessControllerUserApiAutocomplete)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create new API Token for a specific user
     * Superadmin-only. Create a new API token for a user.
     * @param {String} id The user id
     * @param {module:model/CreateApiTokenRequest} createApiTokenRequest The create api-token request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateApiTokenResponse} and HTTP response
     */
    createApiTokensForUserWithHttpInfo(id, createApiTokenRequest) {
      let postBody = createApiTokenRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling createApiTokensForUser");
      }
      // verify the required parameter 'createApiTokenRequest' is set
      if (createApiTokenRequest === undefined || createApiTokenRequest === null) {
        throw new Error("Missing the required parameter 'createApiTokenRequest' when calling createApiTokensForUser");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateApiTokenResponse;
      return this.apiClient.callApi(
        '/api/v1/users/{id}/api-tokens', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create new API Token for a specific user
     * Superadmin-only. Create a new API token for a user.
     * @param {String} id The user id
     * @param {module:model/CreateApiTokenRequest} createApiTokenRequest The create api-token request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateApiTokenResponse}
     */
    createApiTokensForUser(id, createApiTokenRequest) {
      return this.createApiTokensForUserWithHttpInfo(id, createApiTokenRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a new user account
     * Superadmin-only. Create a new user account with an optional password based authentication method.
     * @param {module:model/IAMUserControllerApiCreateOrUpdateUserRequest} iAMUserControllerApiCreateOrUpdateUserRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IAMUserControllerApiUser} and HTTP response
     */
    createUserWithHttpInfo(iAMUserControllerApiCreateOrUpdateUserRequest) {
      let postBody = iAMUserControllerApiCreateOrUpdateUserRequest;
      // verify the required parameter 'iAMUserControllerApiCreateOrUpdateUserRequest' is set
      if (iAMUserControllerApiCreateOrUpdateUserRequest === undefined || iAMUserControllerApiCreateOrUpdateUserRequest === null) {
        throw new Error("Missing the required parameter 'iAMUserControllerApiCreateOrUpdateUserRequest' when calling createUser");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IAMUserControllerApiUser;
      return this.apiClient.callApi(
        '/api/v1/users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a new user account
     * Superadmin-only. Create a new user account with an optional password based authentication method.
     * @param {module:model/IAMUserControllerApiCreateOrUpdateUserRequest} iAMUserControllerApiCreateOrUpdateUserRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IAMUserControllerApiUser}
     */
    createUser(iAMUserControllerApiCreateOrUpdateUserRequest) {
      return this.createUserWithHttpInfo(iAMUserControllerApiCreateOrUpdateUserRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete an API Token for specific user and token id
     * Superadmin-only. Delete an API token for a user.
     * @param {String} id The user id
     * @param {String} tokenId The token id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteApiTokenForUserWithHttpInfo(id, tokenId) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteApiTokenForUser");
      }
      // verify the required parameter 'tokenId' is set
      if (tokenId === undefined || tokenId === null) {
        throw new Error("Missing the required parameter 'tokenId' when calling deleteApiTokenForUser");
      }

      let pathParams = {
        'id': id,
        'tokenId': tokenId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/users/{id}/api-tokens/{tokenId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete an API Token for specific user and token id
     * Superadmin-only. Delete an API token for a user.
     * @param {String} id The user id
     * @param {String} tokenId The token id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteApiTokenForUser(id, tokenId) {
      return this.deleteApiTokenForUserWithHttpInfo(id, tokenId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a user refresh token
     * @param {String} id The user id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteRefreshTokenWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteRefreshToken");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/users/{id}/refresh-token', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a user refresh token
     * @param {String} id The user id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteRefreshToken(id) {
      return this.deleteRefreshTokenWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a user
     * Superadmin-only. Delete a user including all its access.
     * @param {String} id The user id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteUserWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteUser");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/users/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a user
     * Superadmin-only. Delete a user including all its access.
     * @param {String} id The user id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteUser(id) {
      return this.deleteUserWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update user password
     * Superadmin-only. Updates whether a user is a superadmin.
     * @param {String} id The user id
     * @param {String} auth The user auth method id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IAMUserControllerApiUser} and HTTP response
     */
    deleteUserAuthMethodWithHttpInfo(id, auth) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteUserAuthMethod");
      }
      // verify the required parameter 'auth' is set
      if (auth === undefined || auth === null) {
        throw new Error("Missing the required parameter 'auth' when calling deleteUserAuthMethod");
      }

      let pathParams = {
        'id': id,
        'auth': auth
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IAMUserControllerApiUser;
      return this.apiClient.callApi(
        '/api/v1/users/{id}/auths/{auth}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update user password
     * Superadmin-only. Updates whether a user is a superadmin.
     * @param {String} id The user id
     * @param {String} auth The user auth method id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IAMUserControllerApiUser}
     */
    deleteUserAuthMethod(id, auth) {
      return this.deleteUserAuthMethodWithHttpInfo(id, auth)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a user
     * Superadmin-only. Get user account details.
     * @param {String} id The user id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IAMUserControllerApiUser} and HTTP response
     */
    getUserWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getUser");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IAMUserControllerApiUser;
      return this.apiClient.callApi(
        '/api/v1/users/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get a user
     * Superadmin-only. Get user account details.
     * @param {String} id The user id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IAMUserControllerApiUser}
     */
    getUser(id) {
      return this.getUserWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Impersonate a user
     * Superadmin-only. Allows an admin to impersonate another user.
     * @param {String} id The user id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    impersonateWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling impersonate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/users/{id}/impersonate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Impersonate a user
     * Superadmin-only. Allows an admin to impersonate another user.
     * @param {String} id The user id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    impersonate(id) {
      return this.impersonateWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List API tokens for a specific user
     * Superadmin-only. Get all API token existing for a user.
     * @param {String} id The user id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    listApiTokensForUserWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listApiTokensForUser");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/users/{id}/api-tokens', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List API tokens for a specific user
     * Superadmin-only. Get all API token existing for a user.
     * @param {String} id The user id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    listApiTokensForUser(id) {
      return this.listApiTokensForUserWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve users
     * @param {Number} page The current page
     * @param {Number} size The current page size
     * @param {Object} opts Optional parameters
     * @param {String} [q] A string filter
     * @param {Array.<String>} [sort] The sort of current page
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PagedResultsIAMUserControllerApiUserSummary} and HTTP response
     */
    listUsersWithHttpInfo(page, size, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling listUsers");
      }
      // verify the required parameter 'size' is set
      if (size === undefined || size === null) {
        throw new Error("Missing the required parameter 'size' when calling listUsers");
      }

      let pathParams = {
      };
      let queryParams = {
        'q': opts['q'],
        'page': page,
        'size': size,
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagedResultsIAMUserControllerApiUserSummary;
      return this.apiClient.callApi(
        '/api/v1/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve users
     * @param {Number} page The current page
     * @param {Number} size The current page size
     * @param {Object} opts Optional parameters
     * @param {String} opts.q A string filter
     * @param {Array.<String>} opts.sort The sort of current page
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PagedResultsIAMUserControllerApiUserSummary}
     */
    listUsers(page, size, opts) {
      return this.listUsersWithHttpInfo(page, size, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update user details
     * Superadmin-only. Updates the the details of a user.
     * @param {String} id The user id
     * @param {module:model/MeControllerApiUserDetailsRequest} meControllerApiUserDetailsRequest The user details
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IAMUserControllerApiUser} and HTTP response
     */
    patchUserWithHttpInfo(id, meControllerApiUserDetailsRequest) {
      let postBody = meControllerApiUserDetailsRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchUser");
      }
      // verify the required parameter 'meControllerApiUserDetailsRequest' is set
      if (meControllerApiUserDetailsRequest === undefined || meControllerApiUserDetailsRequest === null) {
        throw new Error("Missing the required parameter 'meControllerApiUserDetailsRequest' when calling patchUser");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IAMUserControllerApiUser;
      return this.apiClient.callApi(
        '/api/v1/users/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update user details
     * Superadmin-only. Updates the the details of a user.
     * @param {String} id The user id
     * @param {module:model/MeControllerApiUserDetailsRequest} meControllerApiUserDetailsRequest The user details
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IAMUserControllerApiUser}
     */
    patchUser(id, meControllerApiUserDetailsRequest) {
      return this.patchUserWithHttpInfo(id, meControllerApiUserDetailsRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update user demo
     * Superadmin-only. Updates whether a user is for demo.
     * @param {String} id The user id
     * @param {module:model/IAMUserControllerApiPatchRestrictedRequest} iAMUserControllerApiPatchRestrictedRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    patchUserDemoWithHttpInfo(id, iAMUserControllerApiPatchRestrictedRequest) {
      let postBody = iAMUserControllerApiPatchRestrictedRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchUserDemo");
      }
      // verify the required parameter 'iAMUserControllerApiPatchRestrictedRequest' is set
      if (iAMUserControllerApiPatchRestrictedRequest === undefined || iAMUserControllerApiPatchRestrictedRequest === null) {
        throw new Error("Missing the required parameter 'iAMUserControllerApiPatchRestrictedRequest' when calling patchUserDemo");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/users/{id}/restricted', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update user demo
     * Superadmin-only. Updates whether a user is for demo.
     * @param {String} id The user id
     * @param {module:model/IAMUserControllerApiPatchRestrictedRequest} iAMUserControllerApiPatchRestrictedRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    patchUserDemo(id, iAMUserControllerApiPatchRestrictedRequest) {
      return this.patchUserDemoWithHttpInfo(id, iAMUserControllerApiPatchRestrictedRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update user password
     * Superadmin-only. Updates whether a user is a superadmin.
     * @param {String} id The user id
     * @param {module:model/IAMUserControllerApiPatchUserPasswordRequest} iAMUserControllerApiPatchUserPasswordRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IAMUserControllerApiUser} and HTTP response
     */
    patchUserPasswordWithHttpInfo(id, iAMUserControllerApiPatchUserPasswordRequest) {
      let postBody = iAMUserControllerApiPatchUserPasswordRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchUserPassword");
      }
      // verify the required parameter 'iAMUserControllerApiPatchUserPasswordRequest' is set
      if (iAMUserControllerApiPatchUserPasswordRequest === undefined || iAMUserControllerApiPatchUserPasswordRequest === null) {
        throw new Error("Missing the required parameter 'iAMUserControllerApiPatchUserPasswordRequest' when calling patchUserPassword");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IAMUserControllerApiUser;
      return this.apiClient.callApi(
        '/api/v1/users/{id}/password', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update user password
     * Superadmin-only. Updates whether a user is a superadmin.
     * @param {String} id The user id
     * @param {module:model/IAMUserControllerApiPatchUserPasswordRequest} iAMUserControllerApiPatchUserPasswordRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IAMUserControllerApiUser}
     */
    patchUserPassword(id, iAMUserControllerApiPatchUserPasswordRequest) {
      return this.patchUserPasswordWithHttpInfo(id, iAMUserControllerApiPatchUserPasswordRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update user superadmin privileges
     * Superadmin-only. Updates whether a user is a superadmin.
     * @param {String} id The user id
     * @param {module:model/ApiPatchSuperAdminRequest} apiPatchSuperAdminRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    patchUserSuperAdminWithHttpInfo(id, apiPatchSuperAdminRequest) {
      let postBody = apiPatchSuperAdminRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchUserSuperAdmin");
      }
      // verify the required parameter 'apiPatchSuperAdminRequest' is set
      if (apiPatchSuperAdminRequest === undefined || apiPatchSuperAdminRequest === null) {
        throw new Error("Missing the required parameter 'apiPatchSuperAdminRequest' when calling patchUserSuperAdmin");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/users/{id}/superadmin', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update user superadmin privileges
     * Superadmin-only. Updates whether a user is a superadmin.
     * @param {String} id The user id
     * @param {module:model/ApiPatchSuperAdminRequest} apiPatchSuperAdminRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    patchUserSuperAdmin(id, apiPatchSuperAdminRequest) {
      return this.patchUserSuperAdminWithHttpInfo(id, apiPatchSuperAdminRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update authenticated user password
     * Changes the login password for the authenticated user.
     * @param {module:model/MeControllerApiUpdatePasswordRequest} meControllerApiUpdatePasswordRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    updateCurrentUserPasswordWithHttpInfo(meControllerApiUpdatePasswordRequest) {
      let postBody = meControllerApiUpdatePasswordRequest;
      // verify the required parameter 'meControllerApiUpdatePasswordRequest' is set
      if (meControllerApiUpdatePasswordRequest === undefined || meControllerApiUpdatePasswordRequest === null) {
        throw new Error("Missing the required parameter 'meControllerApiUpdatePasswordRequest' when calling updateCurrentUserPassword");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/me/password', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update authenticated user password
     * Changes the login password for the authenticated user.
     * @param {module:model/MeControllerApiUpdatePasswordRequest} meControllerApiUpdatePasswordRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    updateCurrentUserPassword(meControllerApiUpdatePasswordRequest) {
      return this.updateCurrentUserPasswordWithHttpInfo(meControllerApiUpdatePasswordRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a user account
     * Superadmin-only. Update an existing user account with an optional password based authentication method.
     * @param {String} id The user id
     * @param {module:model/IAMUserControllerApiCreateOrUpdateUserRequest} iAMUserControllerApiCreateOrUpdateUserRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IAMUserControllerApiUser} and HTTP response
     */
    updateUserWithHttpInfo(id, iAMUserControllerApiCreateOrUpdateUserRequest) {
      let postBody = iAMUserControllerApiCreateOrUpdateUserRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateUser");
      }
      // verify the required parameter 'iAMUserControllerApiCreateOrUpdateUserRequest' is set
      if (iAMUserControllerApiCreateOrUpdateUserRequest === undefined || iAMUserControllerApiCreateOrUpdateUserRequest === null) {
        throw new Error("Missing the required parameter 'iAMUserControllerApiCreateOrUpdateUserRequest' when calling updateUser");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IAMUserControllerApiUser;
      return this.apiClient.callApi(
        '/api/v1/users/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update a user account
     * Superadmin-only. Update an existing user account with an optional password based authentication method.
     * @param {String} id The user id
     * @param {module:model/IAMUserControllerApiCreateOrUpdateUserRequest} iAMUserControllerApiCreateOrUpdateUserRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IAMUserControllerApiUser}
     */
    updateUser(id, iAMUserControllerApiCreateOrUpdateUserRequest) {
      return this.updateUserWithHttpInfo(id, iAMUserControllerApiCreateOrUpdateUserRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update the list of groups a user belongs to for the given tenant
     * @param {String} id The user ID
     * @param {String} tenant 
     * @param {module:model/IAMUserGroupControllerApiUpdateUserGroupsRequest} iAMUserGroupControllerApiUpdateUserGroupsRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    updateUserGroupsWithHttpInfo(id, tenant, iAMUserGroupControllerApiUpdateUserGroupsRequest) {
      let postBody = iAMUserGroupControllerApiUpdateUserGroupsRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateUserGroups");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling updateUserGroups");
      }
      // verify the required parameter 'iAMUserGroupControllerApiUpdateUserGroupsRequest' is set
      if (iAMUserGroupControllerApiUpdateUserGroupsRequest === undefined || iAMUserGroupControllerApiUpdateUserGroupsRequest === null) {
        throw new Error("Missing the required parameter 'iAMUserGroupControllerApiUpdateUserGroupsRequest' when calling updateUserGroups");
      }

      let pathParams = {
        'id': id,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/users/{id}/groups', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update the list of groups a user belongs to for the given tenant
     * @param {String} id The user ID
     * @param {String} tenant 
     * @param {module:model/IAMUserGroupControllerApiUpdateUserGroupsRequest} iAMUserGroupControllerApiUpdateUserGroupsRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    updateUserGroups(id, tenant, iAMUserGroupControllerApiUpdateUserGroupsRequest) {
      return this.updateUserGroupsWithHttpInfo(id, tenant, iAMUserGroupControllerApiUpdateUserGroupsRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
