/**
 * Kestra EE
 * All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BlueprintControllerApiBlueprintTagItem from '../model/BlueprintControllerApiBlueprintTagItem';
import BlueprintControllerKind from '../model/BlueprintControllerKind';

/**
* BlueprintTags service.
* @module api/BlueprintTagsApi
* @version v1
*/
export default class BlueprintTagsApi {

    /**
    * Constructs a new BlueprintTagsApi. 
    * @alias module:api/BlueprintTagsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * List all internal blueprint tags
     * @param {String} tenant 
     * @param {Object} opts Optional parameters
     * @param {String} [q] A string filter to get tags with matching blueprints only
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<String>} and HTTP response
     */
    internalBlueprintTagsWithHttpInfo(tenant, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling internalBlueprintTags");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/api/v1/{tenant}/blueprints/custom/tags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List all internal blueprint tags
     * @param {String} tenant 
     * @param {Object} opts Optional parameters
     * @param {String} opts.q A string filter to get tags with matching blueprints only
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<String>}
     */
    internalBlueprintTags(tenant, opts) {
      return this.internalBlueprintTagsWithHttpInfo(tenant, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List blueprint tags matching the filter
     * @param {module:model/BlueprintControllerKind} kind The blueprint kind
     * @param {String} tenant 
     * @param {Object} opts Optional parameters
     * @param {String} [q] A string filter to get tags with matching blueprints only
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/BlueprintControllerApiBlueprintTagItem>} and HTTP response
     */
    listBlueprintTagsWithHttpInfo(kind, tenant, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'kind' is set
      if (kind === undefined || kind === null) {
        throw new Error("Missing the required parameter 'kind' when calling listBlueprintTags");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling listBlueprintTags");
      }

      let pathParams = {
        'kind': kind,
        'tenant': tenant
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [BlueprintControllerApiBlueprintTagItem];
      return this.apiClient.callApi(
        '/api/v1/{tenant}/blueprints/community/{kind}/tags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List blueprint tags matching the filter
     * @param {module:model/BlueprintControllerKind} kind The blueprint kind
     * @param {String} tenant 
     * @param {Object} opts Optional parameters
     * @param {String} opts.q A string filter to get tags with matching blueprints only
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/BlueprintControllerApiBlueprintTagItem>}
     */
    listBlueprintTags(kind, tenant, opts) {
      return this.listBlueprintTagsWithHttpInfo(kind, tenant, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
