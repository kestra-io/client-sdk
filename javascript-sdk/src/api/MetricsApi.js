/**
 * Kestra EE
 * All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import MetricAggregations from '../model/MetricAggregations';
import PagedResultsMetricEntry from '../model/PagedResultsMetricEntry';

/**
* Metrics service.
* @module api/MetricsApi
* @version v1
*/
export default class MetricsApi {

    /**
    * Constructs a new MetricsApi. 
    * @alias module:api/MetricsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Get metrics aggregations for a specific flow
     * @param {String} namespace The namespace
     * @param {String} flowId The flow Id
     * @param {String} metric The metric name
     * @param {String} aggregation The type of aggregation: avg, sum, min or max
     * @param {String} tenant 
     * @param {Object} opts Optional parameters
     * @param {Date} [startDate] The start datetime, default to now - 30 days
     * @param {Date} [endDate] The end datetime, default to now
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MetricAggregations} and HTTP response
     */
    aggregateMetricsFromFlowWithHttpInfo(namespace, flowId, metric, aggregation, tenant, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling aggregateMetricsFromFlow");
      }
      // verify the required parameter 'flowId' is set
      if (flowId === undefined || flowId === null) {
        throw new Error("Missing the required parameter 'flowId' when calling aggregateMetricsFromFlow");
      }
      // verify the required parameter 'metric' is set
      if (metric === undefined || metric === null) {
        throw new Error("Missing the required parameter 'metric' when calling aggregateMetricsFromFlow");
      }
      // verify the required parameter 'aggregation' is set
      if (aggregation === undefined || aggregation === null) {
        throw new Error("Missing the required parameter 'aggregation' when calling aggregateMetricsFromFlow");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling aggregateMetricsFromFlow");
      }

      let pathParams = {
        'namespace': namespace,
        'flowId': flowId,
        'metric': metric,
        'tenant': tenant
      };
      let queryParams = {
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'aggregation': aggregation
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MetricAggregations;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/metrics/aggregates/{namespace}/{flowId}/{metric}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get metrics aggregations for a specific flow
     * @param {String} namespace The namespace
     * @param {String} flowId The flow Id
     * @param {String} metric The metric name
     * @param {String} aggregation The type of aggregation: avg, sum, min or max
     * @param {String} tenant 
     * @param {Object} opts Optional parameters
     * @param {Date} opts.startDate The start datetime, default to now - 30 days
     * @param {Date} opts.endDate The end datetime, default to now
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MetricAggregations}
     */
    aggregateMetricsFromFlow(namespace, flowId, metric, aggregation, tenant, opts) {
      return this.aggregateMetricsFromFlowWithHttpInfo(namespace, flowId, metric, aggregation, tenant, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get metrics aggregations for a specific flow
     * @param {String} namespace The namespace
     * @param {String} flowId The flow Id
     * @param {String} taskId The task Id
     * @param {String} metric The metric name
     * @param {String} aggregation The type of aggregation: avg, sum, min or max
     * @param {String} tenant 
     * @param {Object} opts Optional parameters
     * @param {Date} [startDate] The start datetime, default to now - 30 days
     * @param {Date} [endDate] The end datetime, default to now
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MetricAggregations} and HTTP response
     */
    aggregateMetricsFromTaskWithHttpInfo(namespace, flowId, taskId, metric, aggregation, tenant, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling aggregateMetricsFromTask");
      }
      // verify the required parameter 'flowId' is set
      if (flowId === undefined || flowId === null) {
        throw new Error("Missing the required parameter 'flowId' when calling aggregateMetricsFromTask");
      }
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling aggregateMetricsFromTask");
      }
      // verify the required parameter 'metric' is set
      if (metric === undefined || metric === null) {
        throw new Error("Missing the required parameter 'metric' when calling aggregateMetricsFromTask");
      }
      // verify the required parameter 'aggregation' is set
      if (aggregation === undefined || aggregation === null) {
        throw new Error("Missing the required parameter 'aggregation' when calling aggregateMetricsFromTask");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling aggregateMetricsFromTask");
      }

      let pathParams = {
        'namespace': namespace,
        'flowId': flowId,
        'taskId': taskId,
        'metric': metric,
        'tenant': tenant
      };
      let queryParams = {
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'aggregation': aggregation
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MetricAggregations;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/metrics/aggregates/{namespace}/{flowId}/{taskId}/{metric}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get metrics aggregations for a specific flow
     * @param {String} namespace The namespace
     * @param {String} flowId The flow Id
     * @param {String} taskId The task Id
     * @param {String} metric The metric name
     * @param {String} aggregation The type of aggregation: avg, sum, min or max
     * @param {String} tenant 
     * @param {Object} opts Optional parameters
     * @param {Date} opts.startDate The start datetime, default to now - 30 days
     * @param {Date} opts.endDate The end datetime, default to now
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MetricAggregations}
     */
    aggregateMetricsFromTask(namespace, flowId, taskId, metric, aggregation, tenant, opts) {
      return this.aggregateMetricsFromTaskWithHttpInfo(namespace, flowId, taskId, metric, aggregation, tenant, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get metrics names for a specific flow
     * @param {String} namespace The namespace
     * @param {String} flowId The flow Id
     * @param {String} tenant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<String>} and HTTP response
     */
    listFlowMetricsWithHttpInfo(namespace, flowId, tenant) {
      let postBody = null;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling listFlowMetrics");
      }
      // verify the required parameter 'flowId' is set
      if (flowId === undefined || flowId === null) {
        throw new Error("Missing the required parameter 'flowId' when calling listFlowMetrics");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling listFlowMetrics");
      }

      let pathParams = {
        'namespace': namespace,
        'flowId': flowId,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/api/v1/{tenant}/metrics/names/{namespace}/{flowId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get metrics names for a specific flow
     * @param {String} namespace The namespace
     * @param {String} flowId The flow Id
     * @param {String} tenant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<String>}
     */
    listFlowMetrics(namespace, flowId, tenant) {
      return this.listFlowMetricsWithHttpInfo(namespace, flowId, tenant)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get metrics names for a specific task in a flow
     * @param {String} namespace The namespace
     * @param {String} flowId The flow Id
     * @param {String} taskId The task Id
     * @param {String} tenant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<String>} and HTTP response
     */
    listTaskMetricsWithHttpInfo(namespace, flowId, taskId, tenant) {
      let postBody = null;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling listTaskMetrics");
      }
      // verify the required parameter 'flowId' is set
      if (flowId === undefined || flowId === null) {
        throw new Error("Missing the required parameter 'flowId' when calling listTaskMetrics");
      }
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling listTaskMetrics");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling listTaskMetrics");
      }

      let pathParams = {
        'namespace': namespace,
        'flowId': flowId,
        'taskId': taskId,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/api/v1/{tenant}/metrics/names/{namespace}/{flowId}/{taskId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get metrics names for a specific task in a flow
     * @param {String} namespace The namespace
     * @param {String} flowId The flow Id
     * @param {String} taskId The task Id
     * @param {String} tenant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<String>}
     */
    listTaskMetrics(namespace, flowId, taskId, tenant) {
      return this.listTaskMetricsWithHttpInfo(namespace, flowId, taskId, tenant)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get tasks id that have metrics for a specific flow, include deleted or renamed tasks
     * @param {String} namespace The namespace
     * @param {String} flowId The flow Id
     * @param {String} tenant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<String>} and HTTP response
     */
    listTasksWithMetricsWithHttpInfo(namespace, flowId, tenant) {
      let postBody = null;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling listTasksWithMetrics");
      }
      // verify the required parameter 'flowId' is set
      if (flowId === undefined || flowId === null) {
        throw new Error("Missing the required parameter 'flowId' when calling listTasksWithMetrics");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling listTasksWithMetrics");
      }

      let pathParams = {
        'namespace': namespace,
        'flowId': flowId,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/api/v1/{tenant}/metrics/tasks/{namespace}/{flowId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get tasks id that have metrics for a specific flow, include deleted or renamed tasks
     * @param {String} namespace The namespace
     * @param {String} flowId The flow Id
     * @param {String} tenant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<String>}
     */
    listTasksWithMetrics(namespace, flowId, tenant) {
      return this.listTasksWithMetricsWithHttpInfo(namespace, flowId, tenant)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get metrics for a specific execution
     * @param {Number} page The current page
     * @param {Number} size The current page size
     * @param {String} executionId The execution id
     * @param {String} tenant 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [sort] The sort of current page
     * @param {String} [taskRunId] The taskrun id
     * @param {String} [taskId] The task id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PagedResultsMetricEntry} and HTTP response
     */
    searchByExecutionWithHttpInfo(page, size, executionId, tenant, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling searchByExecution");
      }
      // verify the required parameter 'size' is set
      if (size === undefined || size === null) {
        throw new Error("Missing the required parameter 'size' when calling searchByExecution");
      }
      // verify the required parameter 'executionId' is set
      if (executionId === undefined || executionId === null) {
        throw new Error("Missing the required parameter 'executionId' when calling searchByExecution");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling searchByExecution");
      }

      let pathParams = {
        'executionId': executionId,
        'tenant': tenant
      };
      let queryParams = {
        'page': page,
        'size': size,
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        'taskRunId': opts['taskRunId'],
        'taskId': opts['taskId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagedResultsMetricEntry;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/metrics/{executionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get metrics for a specific execution
     * @param {Number} page The current page
     * @param {Number} size The current page size
     * @param {String} executionId The execution id
     * @param {String} tenant 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.sort The sort of current page
     * @param {String} opts.taskRunId The taskrun id
     * @param {String} opts.taskId The task id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PagedResultsMetricEntry}
     */
    searchByExecution(page, size, executionId, tenant, opts) {
      return this.searchByExecutionWithHttpInfo(page, size, executionId, tenant, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
