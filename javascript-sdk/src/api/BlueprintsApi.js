/**
 * Kestra EE
 * All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BlueprintControllerApiBlueprintItemWithSource from '../model/BlueprintControllerApiBlueprintItemWithSource';
import BlueprintControllerKind from '../model/BlueprintControllerKind';
import BlueprintWithFlow from '../model/BlueprintWithFlow';
import PagedResultsBlueprint from '../model/PagedResultsBlueprint';
import PagedResultsBlueprintControllerApiBlueprintItem from '../model/PagedResultsBlueprintControllerApiBlueprintItem';

/**
* Blueprints service.
* @module api/BlueprintsApi
* @version v1
*/
export default class BlueprintsApi {

    /**
    * Constructs a new BlueprintsApi. 
    * @alias module:api/BlueprintsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create a new internal blueprint
     * @param {String} tenant 
     * @param {module:model/BlueprintControllerApiBlueprintItemWithSource} blueprintControllerApiBlueprintItemWithSource The internal blueprint to create
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BlueprintControllerApiBlueprintItemWithSource} and HTTP response
     */
    createInternalBlueprintsWithHttpInfo(tenant, blueprintControllerApiBlueprintItemWithSource) {
      let postBody = blueprintControllerApiBlueprintItemWithSource;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling createInternalBlueprints");
      }
      // verify the required parameter 'blueprintControllerApiBlueprintItemWithSource' is set
      if (blueprintControllerApiBlueprintItemWithSource === undefined || blueprintControllerApiBlueprintItemWithSource === null) {
        throw new Error("Missing the required parameter 'blueprintControllerApiBlueprintItemWithSource' when calling createInternalBlueprints");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BlueprintControllerApiBlueprintItemWithSource;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/blueprints/custom', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a new internal blueprint
     * @param {String} tenant 
     * @param {module:model/BlueprintControllerApiBlueprintItemWithSource} blueprintControllerApiBlueprintItemWithSource The internal blueprint to create
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BlueprintControllerApiBlueprintItemWithSource}
     */
    createInternalBlueprints(tenant, blueprintControllerApiBlueprintItemWithSource) {
      return this.createInternalBlueprintsWithHttpInfo(tenant, blueprintControllerApiBlueprintItemWithSource)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete an internal blueprint
     * @param {String} id The internal blueprint id to delete
     * @param {String} tenant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteInternalBlueprintsWithHttpInfo(id, tenant) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteInternalBlueprints");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling deleteInternalBlueprints");
      }

      let pathParams = {
        'id': id,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/blueprints/custom/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete an internal blueprint
     * @param {String} id The internal blueprint id to delete
     * @param {String} tenant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteInternalBlueprints(id, tenant) {
      return this.deleteInternalBlueprintsWithHttpInfo(id, tenant)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a blueprint
     * @param {String} id The blueprint id
     * @param {module:model/BlueprintControllerKind} kind The blueprint kind
     * @param {String} tenant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BlueprintControllerApiBlueprintItemWithSource} and HTTP response
     */
    getBlueprintWithHttpInfo(id, kind, tenant) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getBlueprint");
      }
      // verify the required parameter 'kind' is set
      if (kind === undefined || kind === null) {
        throw new Error("Missing the required parameter 'kind' when calling getBlueprint");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling getBlueprint");
      }

      let pathParams = {
        'id': id,
        'kind': kind,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BlueprintControllerApiBlueprintItemWithSource;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/blueprints/community/{kind}/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get a blueprint
     * @param {String} id The blueprint id
     * @param {module:model/BlueprintControllerKind} kind The blueprint kind
     * @param {String} tenant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BlueprintControllerApiBlueprintItemWithSource}
     */
    getBlueprint(id, kind, tenant) {
      return this.getBlueprintWithHttpInfo(id, kind, tenant)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a blueprint graph
     * @param {String} id The blueprint id
     * @param {module:model/BlueprintControllerKind} kind The blueprint kind
     * @param {String} tenant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: Object}>} and HTTP response
     */
    getBlueprintGraphWithHttpInfo(id, kind, tenant) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getBlueprintGraph");
      }
      // verify the required parameter 'kind' is set
      if (kind === undefined || kind === null) {
        throw new Error("Missing the required parameter 'kind' when calling getBlueprintGraph");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling getBlueprintGraph");
      }

      let pathParams = {
        'id': id,
        'kind': kind,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': Object};
      return this.apiClient.callApi(
        '/api/v1/{tenant}/blueprints/community/{kind}/{id}/graph', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get a blueprint graph
     * @param {String} id The blueprint id
     * @param {module:model/BlueprintControllerKind} kind The blueprint kind
     * @param {String} tenant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: Object}>}
     */
    getBlueprintGraph(id, kind, tenant) {
      return this.getBlueprintGraphWithHttpInfo(id, kind, tenant)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a blueprint source code
     * @param {String} id The blueprint id
     * @param {module:model/BlueprintControllerKind} kind The blueprint kind
     * @param {String} tenant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    getBlueprintSourceWithHttpInfo(id, kind, tenant) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getBlueprintSource");
      }
      // verify the required parameter 'kind' is set
      if (kind === undefined || kind === null) {
        throw new Error("Missing the required parameter 'kind' when calling getBlueprintSource");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling getBlueprintSource");
      }

      let pathParams = {
        'id': id,
        'kind': kind,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/yaml'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/v1/{tenant}/blueprints/community/{kind}/{id}/source', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get a blueprint source code
     * @param {String} id The blueprint id
     * @param {module:model/BlueprintControllerKind} kind The blueprint kind
     * @param {String} tenant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    getBlueprintSource(id, kind, tenant) {
      return this.getBlueprintSourceWithHttpInfo(id, kind, tenant)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get an internal blueprint
     * @param {String} id The blueprint id
     * @param {String} tenant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BlueprintControllerApiBlueprintItemWithSource} and HTTP response
     */
    internalBlueprintWithHttpInfo(id, tenant) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling internalBlueprint");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling internalBlueprint");
      }

      let pathParams = {
        'id': id,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BlueprintControllerApiBlueprintItemWithSource;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/blueprints/custom/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get an internal blueprint
     * @param {String} id The blueprint id
     * @param {String} tenant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BlueprintControllerApiBlueprintItemWithSource}
     */
    internalBlueprint(id, tenant) {
      return this.internalBlueprintWithHttpInfo(id, tenant)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get an internal blueprint source code
     * @param {String} id The blueprint id
     * @param {String} tenant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    internalBlueprintFlowWithHttpInfo(id, tenant) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling internalBlueprintFlow");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling internalBlueprintFlow");
      }

      let pathParams = {
        'id': id,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/yaml'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/v1/{tenant}/blueprints/custom/{id}/source', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get an internal blueprint source code
     * @param {String} id The blueprint id
     * @param {String} tenant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    internalBlueprintFlow(id, tenant) {
      return this.internalBlueprintFlowWithHttpInfo(id, tenant)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List all blueprints
     * @param {Number} page The current page
     * @param {Number} size The current page size
     * @param {module:model/BlueprintControllerKind} kind The blueprint kind
     * @param {String} tenant 
     * @param {Object} opts Optional parameters
     * @param {String} [q] A string filter
     * @param {String} [sort] The sort of current page
     * @param {Array.<String>} [tags] A tags filter
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PagedResultsBlueprintControllerApiBlueprintItem} and HTTP response
     */
    searchBlueprintsWithHttpInfo(page, size, kind, tenant, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling searchBlueprints");
      }
      // verify the required parameter 'size' is set
      if (size === undefined || size === null) {
        throw new Error("Missing the required parameter 'size' when calling searchBlueprints");
      }
      // verify the required parameter 'kind' is set
      if (kind === undefined || kind === null) {
        throw new Error("Missing the required parameter 'kind' when calling searchBlueprints");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling searchBlueprints");
      }

      let pathParams = {
        'kind': kind,
        'tenant': tenant
      };
      let queryParams = {
        'q': opts['q'],
        'sort': opts['sort'],
        'tags': this.apiClient.buildCollectionParam(opts['tags'], 'csv'),
        'page': page,
        'size': size
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagedResultsBlueprintControllerApiBlueprintItem;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/blueprints/community/{kind}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List all blueprints
     * @param {Number} page The current page
     * @param {Number} size The current page size
     * @param {module:model/BlueprintControllerKind} kind The blueprint kind
     * @param {String} tenant 
     * @param {Object} opts Optional parameters
     * @param {String} opts.q A string filter
     * @param {String} opts.sort The sort of current page
     * @param {Array.<String>} opts.tags A tags filter
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PagedResultsBlueprintControllerApiBlueprintItem}
     */
    searchBlueprints(page, size, kind, tenant, opts) {
      return this.searchBlueprintsWithHttpInfo(page, size, kind, tenant, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List all internal blueprints
     * @param {Number} page The current page
     * @param {Number} size The current page size
     * @param {String} tenant 
     * @param {Object} opts Optional parameters
     * @param {String} [q] A string filter
     * @param {String} [sort] The sort of current page
     * @param {Array.<String>} [tags] A tags filter
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PagedResultsBlueprint} and HTTP response
     */
    searchInternalBlueprintsWithHttpInfo(page, size, tenant, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling searchInternalBlueprints");
      }
      // verify the required parameter 'size' is set
      if (size === undefined || size === null) {
        throw new Error("Missing the required parameter 'size' when calling searchInternalBlueprints");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling searchInternalBlueprints");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
        'q': opts['q'],
        'sort': opts['sort'],
        'tags': this.apiClient.buildCollectionParam(opts['tags'], 'csv'),
        'page': page,
        'size': size
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagedResultsBlueprint;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/blueprints/custom', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List all internal blueprints
     * @param {Number} page The current page
     * @param {Number} size The current page size
     * @param {String} tenant 
     * @param {Object} opts Optional parameters
     * @param {String} opts.q A string filter
     * @param {String} opts.sort The sort of current page
     * @param {Array.<String>} opts.tags A tags filter
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PagedResultsBlueprint}
     */
    searchInternalBlueprints(page, size, tenant, opts) {
      return this.searchInternalBlueprintsWithHttpInfo(page, size, tenant, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an internal blueprint
     * @param {String} id The id of the internal blueprint to update
     * @param {String} tenant 
     * @param {module:model/BlueprintControllerApiBlueprintItemWithSource} blueprintControllerApiBlueprintItemWithSource The new internal blueprint for update
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BlueprintWithFlow} and HTTP response
     */
    updateInternalBlueprintsWithHttpInfo(id, tenant, blueprintControllerApiBlueprintItemWithSource) {
      let postBody = blueprintControllerApiBlueprintItemWithSource;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateInternalBlueprints");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling updateInternalBlueprints");
      }
      // verify the required parameter 'blueprintControllerApiBlueprintItemWithSource' is set
      if (blueprintControllerApiBlueprintItemWithSource === undefined || blueprintControllerApiBlueprintItemWithSource === null) {
        throw new Error("Missing the required parameter 'blueprintControllerApiBlueprintItemWithSource' when calling updateInternalBlueprints");
      }

      let pathParams = {
        'id': id,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BlueprintWithFlow;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/blueprints/custom/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update an internal blueprint
     * @param {String} id The id of the internal blueprint to update
     * @param {String} tenant 
     * @param {module:model/BlueprintControllerApiBlueprintItemWithSource} blueprintControllerApiBlueprintItemWithSource The new internal blueprint for update
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BlueprintWithFlow}
     */
    updateInternalBlueprints(id, tenant, blueprintControllerApiBlueprintItemWithSource) {
      return this.updateInternalBlueprintsWithHttpInfo(id, tenant, blueprintControllerApiBlueprintItemWithSource)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
