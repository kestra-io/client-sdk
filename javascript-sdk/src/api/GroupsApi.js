/**
 * Kestra EE
 * All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AbstractGroupControllerGroupWithMembers from '../model/AbstractGroupControllerGroupWithMembers';
import AbstractUserGroupIdentifierMembership from '../model/AbstractUserGroupIdentifierMembership';
import ApiAutocomplete from '../model/ApiAutocomplete';
import ApiIds from '../model/ApiIds';
import ApiUser from '../model/ApiUser';
import Group from '../model/Group';
import PagedResultsApiUser from '../model/PagedResultsApiUser';
import PagedResultsGroup from '../model/PagedResultsGroup';

/**
* Groups service.
* @module api/GroupsApi
* @version v1
*/
export default class GroupsApi {

    /**
    * Constructs a new GroupsApi. 
    * @alias module:api/GroupsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addUserToGroup operation.
     * @callback module:api/GroupsApi~addUserToGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiUser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a group for a user
     * @param {String} id The group id
     * @param {String} userId The user id
     * @param {String} tenant 
     * @param {module:api/GroupsApi~addUserToGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiUser}
     */
    addUserToGroup(id, userId, tenant, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addUserToGroup");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling addUserToGroup");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling addUserToGroup");
      }

      let pathParams = {
        'id': id,
        'userId': userId,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiUser;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/groups/{id}/members/{userId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addUserToGroupWithResourceTenantasSuperAdmin operation.
     * @callback module:api/GroupsApi~addUserToGroupWithResourceTenantasSuperAdminCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiUser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a group for a user
     * @param {String} id The group id
     * @param {String} userId The user id
     * @param {String} resourceTenant 
     * @param {module:api/GroupsApi~addUserToGroupWithResourceTenantasSuperAdminCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiUser}
     */
    addUserToGroupWithResourceTenantasSuperAdmin(id, userId, resourceTenant, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addUserToGroupWithResourceTenantasSuperAdmin");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling addUserToGroupWithResourceTenantasSuperAdmin");
      }
      // verify the required parameter 'resourceTenant' is set
      if (resourceTenant === undefined || resourceTenant === null) {
        throw new Error("Missing the required parameter 'resourceTenant' when calling addUserToGroupWithResourceTenantasSuperAdmin");
      }

      let pathParams = {
        'id': id,
        'userId': userId,
        'resourceTenant': resourceTenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiUser;
      return this.apiClient.callApi(
        '/api/v1/tenants/{resourceTenant}/groups/{id}/members/{userId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addUserToGroupasSuperAdmin operation.
     * @callback module:api/GroupsApi~addUserToGroupasSuperAdminCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiUser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a group for a user
     * @param {String} id The group id
     * @param {String} userId The user id
     * @param {module:api/GroupsApi~addUserToGroupasSuperAdminCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiUser}
     */
    addUserToGroupasSuperAdmin(id, userId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addUserToGroupasSuperAdmin");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling addUserToGroupasSuperAdmin");
      }

      let pathParams = {
        'id': id,
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiUser;
      return this.apiClient.callApi(
        '/api/v1/tenants/groups/{id}/members/{userId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the autocompleteGroups operation.
     * @callback module:api/GroupsApi~autocompleteGroupsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Group>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List groups for autocomplete
     * @param {String} tenant 
     * @param {module:model/ApiAutocomplete} apiAutocomplete Autocomplete request
     * @param {module:api/GroupsApi~autocompleteGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Group>}
     */
    autocompleteGroups(tenant, apiAutocomplete, callback) {
      let postBody = apiAutocomplete;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling autocompleteGroups");
      }
      // verify the required parameter 'apiAutocomplete' is set
      if (apiAutocomplete === undefined || apiAutocomplete === null) {
        throw new Error("Missing the required parameter 'apiAutocomplete' when calling autocompleteGroups");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Group];
      return this.apiClient.callApi(
        '/api/v1/{tenant}/groups/autocomplete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the autocompleteGroupsWithResourceTenantasSuperAdmin operation.
     * @callback module:api/GroupsApi~autocompleteGroupsWithResourceTenantasSuperAdminCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Group>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List groups for autocomplete
     * @param {String} resourceTenant 
     * @param {module:model/ApiAutocomplete} apiAutocomplete Autocomplete request
     * @param {module:api/GroupsApi~autocompleteGroupsWithResourceTenantasSuperAdminCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Group>}
     */
    autocompleteGroupsWithResourceTenantasSuperAdmin(resourceTenant, apiAutocomplete, callback) {
      let postBody = apiAutocomplete;
      // verify the required parameter 'resourceTenant' is set
      if (resourceTenant === undefined || resourceTenant === null) {
        throw new Error("Missing the required parameter 'resourceTenant' when calling autocompleteGroupsWithResourceTenantasSuperAdmin");
      }
      // verify the required parameter 'apiAutocomplete' is set
      if (apiAutocomplete === undefined || apiAutocomplete === null) {
        throw new Error("Missing the required parameter 'apiAutocomplete' when calling autocompleteGroupsWithResourceTenantasSuperAdmin");
      }

      let pathParams = {
        'resourceTenant': resourceTenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Group];
      return this.apiClient.callApi(
        '/api/v1/tenants/{resourceTenant}/groups/autocomplete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the autocompleteGroupsasSuperAdmin operation.
     * @callback module:api/GroupsApi~autocompleteGroupsasSuperAdminCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Group>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List groups for autocomplete
     * @param {module:model/ApiAutocomplete} apiAutocomplete Autocomplete request
     * @param {module:api/GroupsApi~autocompleteGroupsasSuperAdminCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Group>}
     */
    autocompleteGroupsasSuperAdmin(apiAutocomplete, callback) {
      let postBody = apiAutocomplete;
      // verify the required parameter 'apiAutocomplete' is set
      if (apiAutocomplete === undefined || apiAutocomplete === null) {
        throw new Error("Missing the required parameter 'apiAutocomplete' when calling autocompleteGroupsasSuperAdmin");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Group];
      return this.apiClient.callApi(
        '/api/v1/tenants/groups/autocomplete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createGroup operation.
     * @callback module:api/GroupsApi~createGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Group} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a group
     * @param {String} tenant 
     * @param {module:model/AbstractGroupControllerGroupWithMembers} abstractGroupControllerGroupWithMembers The group
     * @param {module:api/GroupsApi~createGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Group}
     */
    createGroup(tenant, abstractGroupControllerGroupWithMembers, callback) {
      let postBody = abstractGroupControllerGroupWithMembers;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling createGroup");
      }
      // verify the required parameter 'abstractGroupControllerGroupWithMembers' is set
      if (abstractGroupControllerGroupWithMembers === undefined || abstractGroupControllerGroupWithMembers === null) {
        throw new Error("Missing the required parameter 'abstractGroupControllerGroupWithMembers' when calling createGroup");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Group;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/groups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createGroupWithResourceTenantasSuperAdmin operation.
     * @callback module:api/GroupsApi~createGroupWithResourceTenantasSuperAdminCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Group} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a group
     * @param {String} resourceTenant 
     * @param {module:model/AbstractGroupControllerGroupWithMembers} abstractGroupControllerGroupWithMembers The group
     * @param {module:api/GroupsApi~createGroupWithResourceTenantasSuperAdminCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Group}
     */
    createGroupWithResourceTenantasSuperAdmin(resourceTenant, abstractGroupControllerGroupWithMembers, callback) {
      let postBody = abstractGroupControllerGroupWithMembers;
      // verify the required parameter 'resourceTenant' is set
      if (resourceTenant === undefined || resourceTenant === null) {
        throw new Error("Missing the required parameter 'resourceTenant' when calling createGroupWithResourceTenantasSuperAdmin");
      }
      // verify the required parameter 'abstractGroupControllerGroupWithMembers' is set
      if (abstractGroupControllerGroupWithMembers === undefined || abstractGroupControllerGroupWithMembers === null) {
        throw new Error("Missing the required parameter 'abstractGroupControllerGroupWithMembers' when calling createGroupWithResourceTenantasSuperAdmin");
      }

      let pathParams = {
        'resourceTenant': resourceTenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Group;
      return this.apiClient.callApi(
        '/api/v1/tenants/{resourceTenant}/groups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createGroupasSuperAdmin operation.
     * @callback module:api/GroupsApi~createGroupasSuperAdminCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Group} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a group
     * @param {module:model/AbstractGroupControllerGroupWithMembers} abstractGroupControllerGroupWithMembers The group
     * @param {module:api/GroupsApi~createGroupasSuperAdminCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Group}
     */
    createGroupasSuperAdmin(abstractGroupControllerGroupWithMembers, callback) {
      let postBody = abstractGroupControllerGroupWithMembers;
      // verify the required parameter 'abstractGroupControllerGroupWithMembers' is set
      if (abstractGroupControllerGroupWithMembers === undefined || abstractGroupControllerGroupWithMembers === null) {
        throw new Error("Missing the required parameter 'abstractGroupControllerGroupWithMembers' when calling createGroupasSuperAdmin");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Group;
      return this.apiClient.callApi(
        '/api/v1/tenants/groups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteGroup operation.
     * @callback module:api/GroupsApi~deleteGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a group
     * @param {String} id The group id
     * @param {String} tenant 
     * @param {module:api/GroupsApi~deleteGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteGroup(id, tenant, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteGroup");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling deleteGroup");
      }

      let pathParams = {
        'id': id,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/groups/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteGroupWithResourceTenantasSuperAdmin operation.
     * @callback module:api/GroupsApi~deleteGroupWithResourceTenantasSuperAdminCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a group
     * @param {String} id The group id
     * @param {String} resourceTenant 
     * @param {module:api/GroupsApi~deleteGroupWithResourceTenantasSuperAdminCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteGroupWithResourceTenantasSuperAdmin(id, resourceTenant, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteGroupWithResourceTenantasSuperAdmin");
      }
      // verify the required parameter 'resourceTenant' is set
      if (resourceTenant === undefined || resourceTenant === null) {
        throw new Error("Missing the required parameter 'resourceTenant' when calling deleteGroupWithResourceTenantasSuperAdmin");
      }

      let pathParams = {
        'id': id,
        'resourceTenant': resourceTenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/tenants/{resourceTenant}/groups/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteGroupasSuperAdmin operation.
     * @callback module:api/GroupsApi~deleteGroupasSuperAdminCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a group
     * @param {String} id The group id
     * @param {module:api/GroupsApi~deleteGroupasSuperAdminCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteGroupasSuperAdmin(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteGroupasSuperAdmin");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/tenants/groups/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUserFromGroup operation.
     * @callback module:api/GroupsApi~deleteUserFromGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiUser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a group for a user
     * @param {String} id The group id
     * @param {String} userId The user id
     * @param {String} tenant 
     * @param {module:api/GroupsApi~deleteUserFromGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiUser}
     */
    deleteUserFromGroup(id, userId, tenant, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteUserFromGroup");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deleteUserFromGroup");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling deleteUserFromGroup");
      }

      let pathParams = {
        'id': id,
        'userId': userId,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiUser;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/groups/{id}/members/{userId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUserFromGroupWithResourceTenantasSuperAdmin operation.
     * @callback module:api/GroupsApi~deleteUserFromGroupWithResourceTenantasSuperAdminCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiUser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a group for a user
     * @param {String} id The group id
     * @param {String} userId The user id
     * @param {String} resourceTenant 
     * @param {module:api/GroupsApi~deleteUserFromGroupWithResourceTenantasSuperAdminCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiUser}
     */
    deleteUserFromGroupWithResourceTenantasSuperAdmin(id, userId, resourceTenant, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteUserFromGroupWithResourceTenantasSuperAdmin");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deleteUserFromGroupWithResourceTenantasSuperAdmin");
      }
      // verify the required parameter 'resourceTenant' is set
      if (resourceTenant === undefined || resourceTenant === null) {
        throw new Error("Missing the required parameter 'resourceTenant' when calling deleteUserFromGroupWithResourceTenantasSuperAdmin");
      }

      let pathParams = {
        'id': id,
        'userId': userId,
        'resourceTenant': resourceTenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiUser;
      return this.apiClient.callApi(
        '/api/v1/tenants/{resourceTenant}/groups/{id}/members/{userId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUserFromGroupasSuperAdmin operation.
     * @callback module:api/GroupsApi~deleteUserFromGroupasSuperAdminCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiUser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a group for a user
     * @param {String} id The group id
     * @param {String} userId The user id
     * @param {module:api/GroupsApi~deleteUserFromGroupasSuperAdminCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiUser}
     */
    deleteUserFromGroupasSuperAdmin(id, userId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteUserFromGroupasSuperAdmin");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deleteUserFromGroupasSuperAdmin");
      }

      let pathParams = {
        'id': id,
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiUser;
      return this.apiClient.callApi(
        '/api/v1/tenants/groups/{id}/members/{userId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGroup operation.
     * @callback module:api/GroupsApi~getGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Group} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a group
     * @param {String} id The group id
     * @param {String} tenant 
     * @param {module:api/GroupsApi~getGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Group}
     */
    getGroup(id, tenant, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getGroup");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling getGroup");
      }

      let pathParams = {
        'id': id,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Group;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/groups/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGroupWithResourceTenantasSuperAdmin operation.
     * @callback module:api/GroupsApi~getGroupWithResourceTenantasSuperAdminCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Group} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a group
     * @param {String} id The group id
     * @param {String} resourceTenant 
     * @param {module:api/GroupsApi~getGroupWithResourceTenantasSuperAdminCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Group}
     */
    getGroupWithResourceTenantasSuperAdmin(id, resourceTenant, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getGroupWithResourceTenantasSuperAdmin");
      }
      // verify the required parameter 'resourceTenant' is set
      if (resourceTenant === undefined || resourceTenant === null) {
        throw new Error("Missing the required parameter 'resourceTenant' when calling getGroupWithResourceTenantasSuperAdmin");
      }

      let pathParams = {
        'id': id,
        'resourceTenant': resourceTenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Group;
      return this.apiClient.callApi(
        '/api/v1/tenants/{resourceTenant}/groups/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGroupasSuperAdmin operation.
     * @callback module:api/GroupsApi~getGroupasSuperAdminCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Group} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a group
     * @param {String} id The group id
     * @param {module:api/GroupsApi~getGroupasSuperAdminCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Group}
     */
    getGroupasSuperAdmin(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getGroupasSuperAdmin");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Group;
      return this.apiClient.callApi(
        '/api/v1/tenants/groups/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listGroupIds operation.
     * @callback module:api/GroupsApi~listGroupIdsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Group>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List groups by ids
     * @param {String} tenant 
     * @param {module:model/ApiIds} apiIds The ids that must be present on results
     * @param {module:api/GroupsApi~listGroupIdsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Group>}
     */
    listGroupIds(tenant, apiIds, callback) {
      let postBody = apiIds;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling listGroupIds");
      }
      // verify the required parameter 'apiIds' is set
      if (apiIds === undefined || apiIds === null) {
        throw new Error("Missing the required parameter 'apiIds' when calling listGroupIds");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Group];
      return this.apiClient.callApi(
        '/api/v1/{tenant}/groups/ids', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listGroupIdsWithResourceTenantasSuperAdmin operation.
     * @callback module:api/GroupsApi~listGroupIdsWithResourceTenantasSuperAdminCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Group>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List groups by ids
     * @param {String} resourceTenant 
     * @param {module:model/ApiIds} apiIds The ids that must be present on results
     * @param {module:api/GroupsApi~listGroupIdsWithResourceTenantasSuperAdminCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Group>}
     */
    listGroupIdsWithResourceTenantasSuperAdmin(resourceTenant, apiIds, callback) {
      let postBody = apiIds;
      // verify the required parameter 'resourceTenant' is set
      if (resourceTenant === undefined || resourceTenant === null) {
        throw new Error("Missing the required parameter 'resourceTenant' when calling listGroupIdsWithResourceTenantasSuperAdmin");
      }
      // verify the required parameter 'apiIds' is set
      if (apiIds === undefined || apiIds === null) {
        throw new Error("Missing the required parameter 'apiIds' when calling listGroupIdsWithResourceTenantasSuperAdmin");
      }

      let pathParams = {
        'resourceTenant': resourceTenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Group];
      return this.apiClient.callApi(
        '/api/v1/tenants/{resourceTenant}/groups/ids', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listGroupIdsasSuperAdmin operation.
     * @callback module:api/GroupsApi~listGroupIdsasSuperAdminCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Group>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List groups by ids
     * @param {module:model/ApiIds} apiIds The ids that must be present on results
     * @param {module:api/GroupsApi~listGroupIdsasSuperAdminCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Group>}
     */
    listGroupIdsasSuperAdmin(apiIds, callback) {
      let postBody = apiIds;
      // verify the required parameter 'apiIds' is set
      if (apiIds === undefined || apiIds === null) {
        throw new Error("Missing the required parameter 'apiIds' when calling listGroupIdsasSuperAdmin");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Group];
      return this.apiClient.callApi(
        '/api/v1/tenants/groups/ids', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchGroupMembers operation.
     * @callback module:api/GroupsApi~searchGroupMembersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedResultsApiUser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for users in a group
     * @param {String} id The group id
     * @param {Number} page The current page
     * @param {Number} size The current page size
     * @param {String} tenant 
     * @param {Object} opts Optional parameters
     * @param {String} [q] A string filter
     * @param {Array.<String>} [sort] The sort of current page
     * @param {module:api/GroupsApi~searchGroupMembersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedResultsApiUser}
     */
    searchGroupMembers(id, page, size, tenant, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling searchGroupMembers");
      }
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling searchGroupMembers");
      }
      // verify the required parameter 'size' is set
      if (size === undefined || size === null) {
        throw new Error("Missing the required parameter 'size' when calling searchGroupMembers");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling searchGroupMembers");
      }

      let pathParams = {
        'id': id,
        'tenant': tenant
      };
      let queryParams = {
        'q': opts['q'],
        'page': page,
        'size': size,
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagedResultsApiUser;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/groups/{id}/members', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchGroupMembersWithResourceTenantasSuperAdmin operation.
     * @callback module:api/GroupsApi~searchGroupMembersWithResourceTenantasSuperAdminCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedResultsApiUser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for users in a group
     * @param {String} id The group id
     * @param {Number} page The current page
     * @param {Number} size The current page size
     * @param {String} resourceTenant 
     * @param {Object} opts Optional parameters
     * @param {String} [q] A string filter
     * @param {Array.<String>} [sort] The sort of current page
     * @param {module:api/GroupsApi~searchGroupMembersWithResourceTenantasSuperAdminCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedResultsApiUser}
     */
    searchGroupMembersWithResourceTenantasSuperAdmin(id, page, size, resourceTenant, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling searchGroupMembersWithResourceTenantasSuperAdmin");
      }
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling searchGroupMembersWithResourceTenantasSuperAdmin");
      }
      // verify the required parameter 'size' is set
      if (size === undefined || size === null) {
        throw new Error("Missing the required parameter 'size' when calling searchGroupMembersWithResourceTenantasSuperAdmin");
      }
      // verify the required parameter 'resourceTenant' is set
      if (resourceTenant === undefined || resourceTenant === null) {
        throw new Error("Missing the required parameter 'resourceTenant' when calling searchGroupMembersWithResourceTenantasSuperAdmin");
      }

      let pathParams = {
        'id': id,
        'resourceTenant': resourceTenant
      };
      let queryParams = {
        'q': opts['q'],
        'page': page,
        'size': size,
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagedResultsApiUser;
      return this.apiClient.callApi(
        '/api/v1/tenants/{resourceTenant}/groups/{id}/members', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchGroupMembersasSuperAdmin operation.
     * @callback module:api/GroupsApi~searchGroupMembersasSuperAdminCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedResultsApiUser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for users in a group
     * @param {String} id The group id
     * @param {Number} page The current page
     * @param {Number} size The current page size
     * @param {Object} opts Optional parameters
     * @param {String} [q] A string filter
     * @param {Array.<String>} [sort] The sort of current page
     * @param {module:api/GroupsApi~searchGroupMembersasSuperAdminCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedResultsApiUser}
     */
    searchGroupMembersasSuperAdmin(id, page, size, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling searchGroupMembersasSuperAdmin");
      }
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling searchGroupMembersasSuperAdmin");
      }
      // verify the required parameter 'size' is set
      if (size === undefined || size === null) {
        throw new Error("Missing the required parameter 'size' when calling searchGroupMembersasSuperAdmin");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'q': opts['q'],
        'page': page,
        'size': size,
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagedResultsApiUser;
      return this.apiClient.callApi(
        '/api/v1/tenants/groups/{id}/members', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchGroups operation.
     * @callback module:api/GroupsApi~searchGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedResultsGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for groups
     * @param {Number} page The current page
     * @param {Number} size The current page size
     * @param {String} tenant 
     * @param {Object} opts Optional parameters
     * @param {String} [q] A string filter
     * @param {Array.<String>} [sort] The sort of current page
     * @param {module:api/GroupsApi~searchGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedResultsGroup}
     */
    searchGroups(page, size, tenant, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling searchGroups");
      }
      // verify the required parameter 'size' is set
      if (size === undefined || size === null) {
        throw new Error("Missing the required parameter 'size' when calling searchGroups");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling searchGroups");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
        'q': opts['q'],
        'page': page,
        'size': size,
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagedResultsGroup;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/groups/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchGroupsWithResourceTenantasSuperAdmin operation.
     * @callback module:api/GroupsApi~searchGroupsWithResourceTenantasSuperAdminCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedResultsGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for groups
     * @param {Number} page The current page
     * @param {Number} size The current page size
     * @param {String} resourceTenant 
     * @param {Object} opts Optional parameters
     * @param {String} [q] A string filter
     * @param {Array.<String>} [sort] The sort of current page
     * @param {module:api/GroupsApi~searchGroupsWithResourceTenantasSuperAdminCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedResultsGroup}
     */
    searchGroupsWithResourceTenantasSuperAdmin(page, size, resourceTenant, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling searchGroupsWithResourceTenantasSuperAdmin");
      }
      // verify the required parameter 'size' is set
      if (size === undefined || size === null) {
        throw new Error("Missing the required parameter 'size' when calling searchGroupsWithResourceTenantasSuperAdmin");
      }
      // verify the required parameter 'resourceTenant' is set
      if (resourceTenant === undefined || resourceTenant === null) {
        throw new Error("Missing the required parameter 'resourceTenant' when calling searchGroupsWithResourceTenantasSuperAdmin");
      }

      let pathParams = {
        'resourceTenant': resourceTenant
      };
      let queryParams = {
        'q': opts['q'],
        'page': page,
        'size': size,
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagedResultsGroup;
      return this.apiClient.callApi(
        '/api/v1/tenants/{resourceTenant}/groups/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchGroupsasSuperAdmin operation.
     * @callback module:api/GroupsApi~searchGroupsasSuperAdminCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedResultsGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for groups
     * @param {Number} page The current page
     * @param {Number} size The current page size
     * @param {Object} opts Optional parameters
     * @param {String} [q] A string filter
     * @param {Array.<String>} [sort] The sort of current page
     * @param {module:api/GroupsApi~searchGroupsasSuperAdminCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedResultsGroup}
     */
    searchGroupsasSuperAdmin(page, size, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling searchGroupsasSuperAdmin");
      }
      // verify the required parameter 'size' is set
      if (size === undefined || size === null) {
        throw new Error("Missing the required parameter 'size' when calling searchGroupsasSuperAdmin");
      }

      let pathParams = {
      };
      let queryParams = {
        'q': opts['q'],
        'page': page,
        'size': size,
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagedResultsGroup;
      return this.apiClient.callApi(
        '/api/v1/tenants/groups/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setUserMembershipForGroup operation.
     * @callback module:api/GroupsApi~setUserMembershipForGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiUser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the membership type of a user in a group
     * Sets the membership type of a user in a group. This method allows a group owner or a user with UPDATE permission to modify the membership of a user in a specific group.
     * @param {String} id The group id
     * @param {String} userId The user id
     * @param {module:model/AbstractUserGroupIdentifierMembership} membership The membership type
     * @param {String} tenant 
     * @param {module:api/GroupsApi~setUserMembershipForGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiUser}
     */
    setUserMembershipForGroup(id, userId, membership, tenant, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setUserMembershipForGroup");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling setUserMembershipForGroup");
      }
      // verify the required parameter 'membership' is set
      if (membership === undefined || membership === null) {
        throw new Error("Missing the required parameter 'membership' when calling setUserMembershipForGroup");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling setUserMembershipForGroup");
      }

      let pathParams = {
        'id': id,
        'userId': userId,
        'tenant': tenant
      };
      let queryParams = {
        'membership': membership
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiUser;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/groups/{id}/members/membership/{userId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setUserMembershipForGroupWithResourceTenantasSuperAdmin operation.
     * @callback module:api/GroupsApi~setUserMembershipForGroupWithResourceTenantasSuperAdminCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiUser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the membership type of a user in a group
     * Sets the membership type of a user in a group. This method allows a group owner or a user with UPDATE permission to modify the membership of a user in a specific group.
     * @param {String} id The group id
     * @param {String} userId The user id
     * @param {module:model/AbstractUserGroupIdentifierMembership} membership The membership type
     * @param {String} resourceTenant 
     * @param {module:api/GroupsApi~setUserMembershipForGroupWithResourceTenantasSuperAdminCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiUser}
     */
    setUserMembershipForGroupWithResourceTenantasSuperAdmin(id, userId, membership, resourceTenant, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setUserMembershipForGroupWithResourceTenantasSuperAdmin");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling setUserMembershipForGroupWithResourceTenantasSuperAdmin");
      }
      // verify the required parameter 'membership' is set
      if (membership === undefined || membership === null) {
        throw new Error("Missing the required parameter 'membership' when calling setUserMembershipForGroupWithResourceTenantasSuperAdmin");
      }
      // verify the required parameter 'resourceTenant' is set
      if (resourceTenant === undefined || resourceTenant === null) {
        throw new Error("Missing the required parameter 'resourceTenant' when calling setUserMembershipForGroupWithResourceTenantasSuperAdmin");
      }

      let pathParams = {
        'id': id,
        'userId': userId,
        'resourceTenant': resourceTenant
      };
      let queryParams = {
        'membership': membership
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiUser;
      return this.apiClient.callApi(
        '/api/v1/tenants/{resourceTenant}/groups/{id}/members/membership/{userId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setUserMembershipForGroupasSuperAdmin operation.
     * @callback module:api/GroupsApi~setUserMembershipForGroupasSuperAdminCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiUser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the membership type of a user in a group
     * Sets the membership type of a user in a group. This method allows a group owner or a user with UPDATE permission to modify the membership of a user in a specific group.
     * @param {String} id The group id
     * @param {String} userId The user id
     * @param {module:model/AbstractUserGroupIdentifierMembership} membership The membership type
     * @param {module:api/GroupsApi~setUserMembershipForGroupasSuperAdminCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiUser}
     */
    setUserMembershipForGroupasSuperAdmin(id, userId, membership, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setUserMembershipForGroupasSuperAdmin");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling setUserMembershipForGroupasSuperAdmin");
      }
      // verify the required parameter 'membership' is set
      if (membership === undefined || membership === null) {
        throw new Error("Missing the required parameter 'membership' when calling setUserMembershipForGroupasSuperAdmin");
      }

      let pathParams = {
        'id': id,
        'userId': userId
      };
      let queryParams = {
        'membership': membership
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiUser;
      return this.apiClient.callApi(
        '/api/v1/tenants/groups/{id}/members/membership/{userId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateGroup operation.
     * @callback module:api/GroupsApi~updateGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Group} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a group
     * @param {String} id The group id
     * @param {String} tenant 
     * @param {module:model/Group} group The group
     * @param {module:api/GroupsApi~updateGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Group}
     */
    updateGroup(id, tenant, group, callback) {
      let postBody = group;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateGroup");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling updateGroup");
      }
      // verify the required parameter 'group' is set
      if (group === undefined || group === null) {
        throw new Error("Missing the required parameter 'group' when calling updateGroup");
      }

      let pathParams = {
        'id': id,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Group;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/groups/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateGroupWithResourceTenantasSuperAdmin operation.
     * @callback module:api/GroupsApi~updateGroupWithResourceTenantasSuperAdminCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Group} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a group
     * @param {String} id The group id
     * @param {String} resourceTenant 
     * @param {module:model/Group} group The group
     * @param {module:api/GroupsApi~updateGroupWithResourceTenantasSuperAdminCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Group}
     */
    updateGroupWithResourceTenantasSuperAdmin(id, resourceTenant, group, callback) {
      let postBody = group;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateGroupWithResourceTenantasSuperAdmin");
      }
      // verify the required parameter 'resourceTenant' is set
      if (resourceTenant === undefined || resourceTenant === null) {
        throw new Error("Missing the required parameter 'resourceTenant' when calling updateGroupWithResourceTenantasSuperAdmin");
      }
      // verify the required parameter 'group' is set
      if (group === undefined || group === null) {
        throw new Error("Missing the required parameter 'group' when calling updateGroupWithResourceTenantasSuperAdmin");
      }

      let pathParams = {
        'id': id,
        'resourceTenant': resourceTenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Group;
      return this.apiClient.callApi(
        '/api/v1/tenants/{resourceTenant}/groups/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateGroupasSuperAdmin operation.
     * @callback module:api/GroupsApi~updateGroupasSuperAdminCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Group} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a group
     * @param {String} id The group id
     * @param {module:model/Group} group The group
     * @param {module:api/GroupsApi~updateGroupasSuperAdminCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Group}
     */
    updateGroupasSuperAdmin(id, group, callback) {
      let postBody = group;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateGroupasSuperAdmin");
      }
      // verify the required parameter 'group' is set
      if (group === undefined || group === null) {
        throw new Error("Missing the required parameter 'group' when calling updateGroupasSuperAdmin");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Group;
      return this.apiClient.callApi(
        '/api/v1/tenants/groups/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
