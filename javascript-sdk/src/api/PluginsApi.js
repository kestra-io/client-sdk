/**
 * Kestra EE
 * All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ClusterControllerApiPluginArtifactListPluginArtifact from '../model/ClusterControllerApiPluginArtifactListPluginArtifact';
import ClusterControllerApiPluginArtifactListPluginResolutionResult from '../model/ClusterControllerApiPluginArtifactListPluginResolutionResult';
import ClusterControllerApiPluginListRequest from '../model/ClusterControllerApiPluginListRequest';
import ClusterControllerApiPluginVersionDetails from '../model/ClusterControllerApiPluginVersionDetails';
import ClusterControllerApiPluginVersions from '../model/ClusterControllerApiPluginVersions';
import DocumentationWithSchema from '../model/DocumentationWithSchema';
import InputType from '../model/InputType';
import PagedResultsClusterControllerApiPluginArtifact from '../model/PagedResultsClusterControllerApiPluginArtifact';
import Plugin from '../model/Plugin';
import PluginArtifact from '../model/PluginArtifact';
import PluginControllerApiPluginVersions from '../model/PluginControllerApiPluginVersions';
import PluginIcon from '../model/PluginIcon';
import SchemaType from '../model/SchemaType';
import Type from '../model/Type';

/**
* Plugins service.
* @module api/PluginsApi
* @version v1
*/
export default class PluginsApi {

    /**
    * Constructs a new PluginsApi. 
    * @alias module:api/PluginsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getAllInputTypes operation.
     * @callback module:api/PluginsApi~getAllInputTypesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InputType>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all types for an inputs
     * @param {String} tenant 
     * @param {module:api/PluginsApi~getAllInputTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InputType>}
     */
    getAllInputTypes(tenant, callback) {
      let postBody = null;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling getAllInputTypes");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [InputType];
      return this.apiClient.callApi(
        '/api/v1/{tenant}/plugins/inputs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPluginBySubgroups operation.
     * @callback module:api/PluginsApi~getPluginBySubgroupsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Plugin>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get plugins group by subgroups
     * @param {Boolean} includeDeprecated Whether to include deprecated plugins
     * @param {String} tenant 
     * @param {module:api/PluginsApi~getPluginBySubgroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Plugin>}
     */
    getPluginBySubgroups(includeDeprecated, tenant, callback) {
      let postBody = null;
      // verify the required parameter 'includeDeprecated' is set
      if (includeDeprecated === undefined || includeDeprecated === null) {
        throw new Error("Missing the required parameter 'includeDeprecated' when calling getPluginBySubgroups");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling getPluginBySubgroups");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
        'includeDeprecated': includeDeprecated
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Plugin];
      return this.apiClient.callApi(
        '/api/v1/{tenant}/plugins/groups/subgroups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPluginDocumentation operation.
     * @callback module:api/PluginsApi~getPluginDocumentationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DocumentationWithSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get plugin documentation
     * @param {String} cls The plugin full class name
     * @param {Boolean} all Include all the properties
     * @param {String} tenant 
     * @param {module:api/PluginsApi~getPluginDocumentationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DocumentationWithSchema}
     */
    getPluginDocumentation(cls, all, tenant, callback) {
      let postBody = null;
      // verify the required parameter 'cls' is set
      if (cls === undefined || cls === null) {
        throw new Error("Missing the required parameter 'cls' when calling getPluginDocumentation");
      }
      // verify the required parameter 'all' is set
      if (all === undefined || all === null) {
        throw new Error("Missing the required parameter 'all' when calling getPluginDocumentation");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling getPluginDocumentation");
      }

      let pathParams = {
        'cls': cls,
        'tenant': tenant
      };
      let queryParams = {
        'all': all
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DocumentationWithSchema;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/plugins/{cls}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPluginDocumentationFromVersion operation.
     * @callback module:api/PluginsApi~getPluginDocumentationFromVersionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DocumentationWithSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get plugin documentation
     * @param {String} cls The plugin type
     * @param {String} version The plugin version
     * @param {Boolean} all Include all the properties
     * @param {String} tenant 
     * @param {module:api/PluginsApi~getPluginDocumentationFromVersionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DocumentationWithSchema}
     */
    getPluginDocumentationFromVersion(cls, version, all, tenant, callback) {
      let postBody = null;
      // verify the required parameter 'cls' is set
      if (cls === undefined || cls === null) {
        throw new Error("Missing the required parameter 'cls' when calling getPluginDocumentationFromVersion");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling getPluginDocumentationFromVersion");
      }
      // verify the required parameter 'all' is set
      if (all === undefined || all === null) {
        throw new Error("Missing the required parameter 'all' when calling getPluginDocumentationFromVersion");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling getPluginDocumentationFromVersion");
      }

      let pathParams = {
        'cls': cls,
        'version': version,
        'tenant': tenant
      };
      let queryParams = {
        'all': all
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DocumentationWithSchema;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/plugins/{cls}/versions/{version}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPluginGroupIcons operation.
     * @callback module:api/PluginsApi~getPluginGroupIconsCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, module:model/{String: PluginIcon}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get plugins icons
     * @param {String} tenant 
     * @param {module:api/PluginsApi~getPluginGroupIconsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, module:model/{String: PluginIcon}>}
     */
    getPluginGroupIcons(tenant, callback) {
      let postBody = null;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling getPluginGroupIcons");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': PluginIcon};
      return this.apiClient.callApi(
        '/api/v1/{tenant}/plugins/icons/groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPluginIcons operation.
     * @callback module:api/PluginsApi~getPluginIconsCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, module:model/{String: PluginIcon}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get plugins icons
     * @param {String} tenant 
     * @param {module:api/PluginsApi~getPluginIconsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, module:model/{String: PluginIcon}>}
     */
    getPluginIcons(tenant, callback) {
      let postBody = null;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling getPluginIcons");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': PluginIcon};
      return this.apiClient.callApi(
        '/api/v1/{tenant}/plugins/icons', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPluginVersions operation.
     * @callback module:api/PluginsApi~getPluginVersionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PluginControllerApiPluginVersions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all versions for a plugin
     * @param {String} cls The plugin type
     * @param {String} tenant 
     * @param {module:api/PluginsApi~getPluginVersionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PluginControllerApiPluginVersions}
     */
    getPluginVersions(cls, tenant, callback) {
      let postBody = null;
      // verify the required parameter 'cls' is set
      if (cls === undefined || cls === null) {
        throw new Error("Missing the required parameter 'cls' when calling getPluginVersions");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling getPluginVersions");
      }

      let pathParams = {
        'cls': cls,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PluginControllerApiPluginVersions;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/plugins/{cls}/versions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSchemaFromInputType operation.
     * @callback module:api/PluginsApi~getSchemaFromInputTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DocumentationWithSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get json schemas for an input type
     * The schema will be output as [http://json-schema.org/draft-07/schema](Json Schema Draft 7)
     * @param {module:model/Type} type The schema needed
     * @param {String} tenant 
     * @param {module:api/PluginsApi~getSchemaFromInputTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DocumentationWithSchema}
     */
    getSchemaFromInputType(type, tenant, callback) {
      let postBody = null;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling getSchemaFromInputType");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling getSchemaFromInputType");
      }

      let pathParams = {
        'type': type,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DocumentationWithSchema;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/plugins/inputs/{type}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSchemasFromType operation.
     * @callback module:api/PluginsApi~getSchemasFromTypeCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: Object}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all json schemas for a type
     * The schema will be output as [http://json-schema.org/draft-07/schema](Json Schema Draft 7)
     * @param {module:model/SchemaType} type The schema needed
     * @param {Boolean} arrayOf If schema should be an array of requested type
     * @param {String} tenant 
     * @param {module:api/PluginsApi~getSchemasFromTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: Object}>}
     */
    getSchemasFromType(type, arrayOf, tenant, callback) {
      let postBody = null;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling getSchemasFromType");
      }
      // verify the required parameter 'arrayOf' is set
      if (arrayOf === undefined || arrayOf === null) {
        throw new Error("Missing the required parameter 'arrayOf' when calling getSchemasFromType");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling getSchemasFromType");
      }

      let pathParams = {
        'type': type,
        'tenant': tenant
      };
      let queryParams = {
        'arrayOf': arrayOf
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': Object};
      return this.apiClient.callApi(
        '/api/v1/{tenant}/plugins/schemas/{type}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVersionedPluginDetails operation.
     * @callback module:api/PluginsApi~getVersionedPluginDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClusterControllerApiPluginVersions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get details about a Kestra's plugin artifact.
     * @param {String} groupId 
     * @param {String} artifactId 
     * @param {module:api/PluginsApi~getVersionedPluginDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClusterControllerApiPluginVersions}
     */
    getVersionedPluginDetails(groupId, artifactId, callback) {
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling getVersionedPluginDetails");
      }
      // verify the required parameter 'artifactId' is set
      if (artifactId === undefined || artifactId === null) {
        throw new Error("Missing the required parameter 'artifactId' when calling getVersionedPluginDetails");
      }

      let pathParams = {
        'groupId': groupId,
        'artifactId': artifactId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ClusterControllerApiPluginVersions;
      return this.apiClient.callApi(
        '/api/v1/cluster/versioned-plugins/{groupId}/{artifactId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVersionedPluginDetailsFromVersion operation.
     * @callback module:api/PluginsApi~getVersionedPluginDetailsFromVersionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClusterControllerApiPluginVersionDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get details about a specific Kestra's plugin artifact version.
     * @param {String} groupId 
     * @param {String} artifactId 
     * @param {String} version 
     * @param {module:api/PluginsApi~getVersionedPluginDetailsFromVersionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClusterControllerApiPluginVersionDetails}
     */
    getVersionedPluginDetailsFromVersion(groupId, artifactId, version, callback) {
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling getVersionedPluginDetailsFromVersion");
      }
      // verify the required parameter 'artifactId' is set
      if (artifactId === undefined || artifactId === null) {
        throw new Error("Missing the required parameter 'artifactId' when calling getVersionedPluginDetailsFromVersion");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling getVersionedPluginDetailsFromVersion");
      }

      let pathParams = {
        'groupId': groupId,
        'artifactId': artifactId,
        'version': version
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ClusterControllerApiPluginVersionDetails;
      return this.apiClient.callApi(
        '/api/v1/cluster/versioned-plugins/{groupId}/{artifactId}/{version}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the installVersionedPlugins operation.
     * @callback module:api/PluginsApi~installVersionedPluginsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClusterControllerApiPluginArtifactListPluginArtifact} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Install a specific Kestra's plugin artifact
     * @param {module:model/ClusterControllerApiPluginListRequest} clusterControllerApiPluginListRequest List of plugins
     * @param {module:api/PluginsApi~installVersionedPluginsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClusterControllerApiPluginArtifactListPluginArtifact}
     */
    installVersionedPlugins(clusterControllerApiPluginListRequest, callback) {
      let postBody = clusterControllerApiPluginListRequest;
      // verify the required parameter 'clusterControllerApiPluginListRequest' is set
      if (clusterControllerApiPluginListRequest === undefined || clusterControllerApiPluginListRequest === null) {
        throw new Error("Missing the required parameter 'clusterControllerApiPluginListRequest' when calling installVersionedPlugins");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ClusterControllerApiPluginArtifactListPluginArtifact;
      return this.apiClient.callApi(
        '/api/v1/cluster/versioned-plugins/install', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAvailableVersionedPlugins operation.
     * @callback module:api/PluginsApi~listAvailableVersionedPluginsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the list of available Kestra's plugin artifact.
     * @param {module:api/PluginsApi~listAvailableVersionedPluginsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    listAvailableVersionedPlugins(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/cluster/versioned-plugins/available', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listPlugins operation.
     * @callback module:api/PluginsApi~listPluginsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Plugin>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of plugins
     * @param {String} tenant 
     * @param {module:api/PluginsApi~listPluginsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Plugin>}
     */
    listPlugins(tenant, callback) {
      let postBody = null;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling listPlugins");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Plugin];
      return this.apiClient.callApi(
        '/api/v1/{tenant}/plugins', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listVersionedPlugin operation.
     * @callback module:api/PluginsApi~listVersionedPluginCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedResultsClusterControllerApiPluginArtifact} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the list of installed Kestra's plugin artifact.
     * @param {Number} page The current page
     * @param {Number} size The current page size
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [sort] The sort of current page
     * @param {String} [q] The query
     * @param {module:api/PluginsApi~listVersionedPluginCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedResultsClusterControllerApiPluginArtifact}
     */
    listVersionedPlugin(page, size, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling listVersionedPlugin");
      }
      // verify the required parameter 'size' is set
      if (size === undefined || size === null) {
        throw new Error("Missing the required parameter 'size' when calling listVersionedPlugin");
      }

      let pathParams = {
      };
      let queryParams = {
        'page': page,
        'size': size,
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagedResultsClusterControllerApiPluginArtifact;
      return this.apiClient.callApi(
        '/api/v1/cluster/versioned-plugins', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resolveVersionedPlugins operation.
     * @callback module:api/PluginsApi~resolveVersionedPluginsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClusterControllerApiPluginArtifactListPluginResolutionResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resolve a specific Kestra's plugin artifact
     * @param {module:model/ClusterControllerApiPluginListRequest} clusterControllerApiPluginListRequest List of plugins
     * @param {module:api/PluginsApi~resolveVersionedPluginsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClusterControllerApiPluginArtifactListPluginResolutionResult}
     */
    resolveVersionedPlugins(clusterControllerApiPluginListRequest, callback) {
      let postBody = clusterControllerApiPluginListRequest;
      // verify the required parameter 'clusterControllerApiPluginListRequest' is set
      if (clusterControllerApiPluginListRequest === undefined || clusterControllerApiPluginListRequest === null) {
        throw new Error("Missing the required parameter 'clusterControllerApiPluginListRequest' when calling resolveVersionedPlugins");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ClusterControllerApiPluginArtifactListPluginResolutionResult;
      return this.apiClient.callApi(
        '/api/v1/cluster/versioned-plugins/resolve', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uninstallVersionedPlugins operation.
     * @callback module:api/PluginsApi~uninstallVersionedPluginsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClusterControllerApiPluginArtifactListPluginArtifact} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Uninstall Kestra's plugin artifacts
     * @param {module:model/ClusterControllerApiPluginListRequest} clusterControllerApiPluginListRequest List of plugins
     * @param {module:api/PluginsApi~uninstallVersionedPluginsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClusterControllerApiPluginArtifactListPluginArtifact}
     */
    uninstallVersionedPlugins(clusterControllerApiPluginListRequest, callback) {
      let postBody = clusterControllerApiPluginListRequest;
      // verify the required parameter 'clusterControllerApiPluginListRequest' is set
      if (clusterControllerApiPluginListRequest === undefined || clusterControllerApiPluginListRequest === null) {
        throw new Error("Missing the required parameter 'clusterControllerApiPluginListRequest' when calling uninstallVersionedPlugins");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ClusterControllerApiPluginArtifactListPluginArtifact;
      return this.apiClient.callApi(
        '/api/v1/cluster/versioned-plugins/uninstall', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadVersionedPlugins operation.
     * @callback module:api/PluginsApi~uploadVersionedPluginsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PluginArtifact} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload a Kestra's plugin artifact
     * @param {Object} opts Optional parameters
     * @param {File} [file] 
     * @param {module:api/PluginsApi~uploadVersionedPluginsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PluginArtifact}
     */
    uploadVersionedPlugins(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': opts['file']
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = PluginArtifact;
      return this.apiClient.callApi(
        '/api/v1/cluster/versioned-plugins/upload', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
