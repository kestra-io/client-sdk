/**
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiAutocomplete from '../model/ApiAutocomplete';
import ApiSecretListResponse from '../model/ApiSecretListResponse';
import ApiSecretMeta from '../model/ApiSecretMeta';
import ApiSecretMetaEE from '../model/ApiSecretMetaEE';
import ApiSecretValue from '../model/ApiSecretValue';
import Namespace from '../model/Namespace';
import PagedResultsNamespace from '../model/PagedResultsNamespace';
import PluginDefault from '../model/PluginDefault';
import QueryFilter from '../model/QueryFilter';

/**
* Namespaces service.
* @module api/NamespacesApi
* @version v1.0.5
*/
export default class NamespacesApi {

    /**
    * Constructs a new NamespacesApi. 
    * @alias module:api/NamespacesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * List namespaces for autocomplete
     * Returns a list of namespaces for use in autocomplete fields, optionally allowing to filter by query and ids. Used especially for binding creation.
     * @param {String} tenant 
     * @param {module:model/ApiAutocomplete} apiAutocomplete 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<String>} and HTTP response
     */
    autocompleteNamespacesWithHttpInfo(tenant, apiAutocomplete) {
      let postBody = apiAutocomplete;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling autocompleteNamespaces");
      }
      // verify the required parameter 'apiAutocomplete' is set
      if (apiAutocomplete === undefined || apiAutocomplete === null) {
        throw new Error("Missing the required parameter 'apiAutocomplete' when calling autocompleteNamespaces");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/api/v1/{tenant}/namespaces/autocomplete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List namespaces for autocomplete
     * Returns a list of namespaces for use in autocomplete fields, optionally allowing to filter by query and ids. Used especially for binding creation.
     * @param {String} tenant 
     * @param {module:model/ApiAutocomplete} apiAutocomplete 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<String>}
     */
    autocompleteNamespaces(tenant, apiAutocomplete) {
      return this.autocompleteNamespacesWithHttpInfo(tenant, apiAutocomplete)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a namespace
     * @param {String} tenant 
     * @param {module:model/Namespace} namespace The namespace
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Namespace} and HTTP response
     */
    createNamespaceWithHttpInfo(tenant, namespace) {
      let postBody = namespace;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling createNamespace");
      }
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling createNamespace");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Namespace;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/namespaces', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a namespace
     * @param {String} tenant 
     * @param {module:model/Namespace} namespace The namespace
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Namespace}
     */
    createNamespace(tenant, namespace) {
      return this.createNamespaceWithHttpInfo(tenant, namespace)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a namespace
     * @param {String} id The namespace id
     * @param {String} tenant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteNamespaceWithHttpInfo(id, tenant) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteNamespace");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling deleteNamespace");
      }

      let pathParams = {
        'id': id,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/namespaces/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a namespace
     * @param {String} id The namespace id
     * @param {String} tenant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteNamespace(id, tenant) {
      return this.deleteNamespaceWithHttpInfo(id, tenant)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a secret for a namespace
     * @param {String} namespace The namespace id
     * @param {String} key The secret key
     * @param {String} tenant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteSecretWithHttpInfo(namespace, key, tenant) {
      let postBody = null;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling deleteSecret");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteSecret");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling deleteSecret");
      }

      let pathParams = {
        'namespace': namespace,
        'key': key,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/namespaces/{namespace}/secrets/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a secret for a namespace
     * @param {String} namespace The namespace id
     * @param {String} key The secret key
     * @param {String} tenant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteSecret(namespace, key, tenant) {
      return this.deleteSecretWithHttpInfo(namespace, key, tenant)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List inherited secrets
     * @param {String} namespace The namespace id
     * @param {String} tenant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: [String]}>} and HTTP response
     */
    getInheritedSecretsWithHttpInfo(namespace, tenant) {
      let postBody = null;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling getInheritedSecrets");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling getInheritedSecrets");
      }

      let pathParams = {
        'namespace': namespace,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': ['String']};
      return this.apiClient.callApi(
        '/api/v1/{tenant}/namespaces/{namespace}/inherited-secrets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List inherited secrets
     * @param {String} namespace The namespace id
     * @param {String} tenant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: [String]}>}
     */
    getInheritedSecrets(namespace, tenant) {
      return this.getInheritedSecretsWithHttpInfo(namespace, tenant)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a namespace
     * @param {String} id The namespace id
     * @param {String} tenant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Namespace} and HTTP response
     */
    getNamespaceWithHttpInfo(id, tenant) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getNamespace");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling getNamespace");
      }

      let pathParams = {
        'id': id,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Namespace;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/namespaces/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get a namespace
     * @param {String} id The namespace id
     * @param {String} tenant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Namespace}
     */
    getNamespace(id, tenant) {
      return this.getNamespaceWithHttpInfo(id, tenant)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List inherited plugin defaults
     * @param {String} id The namespace id
     * @param {String} tenant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/PluginDefault>} and HTTP response
     */
    inheritedPluginDefaultsWithHttpInfo(id, tenant) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling inheritedPluginDefaults");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling inheritedPluginDefaults");
      }

      let pathParams = {
        'id': id,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PluginDefault];
      return this.apiClient.callApi(
        '/api/v1/{tenant}/namespaces/{id}/inherited-plugindefaults', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List inherited plugin defaults
     * @param {String} id The namespace id
     * @param {String} tenant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/PluginDefault>}
     */
    inheritedPluginDefaults(id, tenant) {
      return this.inheritedPluginDefaultsWithHttpInfo(id, tenant)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List inherited variables
     * @param {String} id The namespace id
     * @param {String} tenant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: Object}>} and HTTP response
     */
    inheritedVariablesWithHttpInfo(id, tenant) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling inheritedVariables");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling inheritedVariables");
      }

      let pathParams = {
        'id': id,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': Object};
      return this.apiClient.callApi(
        '/api/v1/{tenant}/namespaces/{id}/inherited-variables', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List inherited variables
     * @param {String} id The namespace id
     * @param {String} tenant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: Object}>}
     */
    inheritedVariables(id, tenant) {
      return this.inheritedVariablesWithHttpInfo(id, tenant)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get secrets for a namespace
     * @param {String} namespace The namespace id
     * @param {Number} page The current page
     * @param {Number} size The current page size
     * @param {Array.<module:model/QueryFilter>} filters Filters
     * @param {String} tenant 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [sort] The sort of current page
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiSecretListResponse} and HTTP response
     */
    listNamespaceSecretsWithHttpInfo(namespace, page, size, filters, tenant, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling listNamespaceSecrets");
      }
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling listNamespaceSecrets");
      }
      // verify the required parameter 'size' is set
      if (size === undefined || size === null) {
        throw new Error("Missing the required parameter 'size' when calling listNamespaceSecrets");
      }
      // verify the required parameter 'filters' is set
      if (filters === undefined || filters === null) {
        throw new Error("Missing the required parameter 'filters' when calling listNamespaceSecrets");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling listNamespaceSecrets");
      }

      let pathParams = {
        'namespace': namespace,
        'tenant': tenant
      };
      let queryParams = {
        'page': page,
        'size': size,
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        'filters': this.apiClient.buildCollectionParam(filters, 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiSecretListResponse;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/namespaces/{namespace}/secrets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get secrets for a namespace
     * @param {String} namespace The namespace id
     * @param {Number} page The current page
     * @param {Number} size The current page size
     * @param {Array.<module:model/QueryFilter>} filters Filters
     * @param {String} tenant 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.sort The sort of current page
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiSecretListResponse}
     */
    listNamespaceSecrets(namespace, page, size, filters, tenant, opts) {
      return this.listNamespaceSecretsWithHttpInfo(namespace, page, size, filters, tenant, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Patch a secret metadata for a namespace
     * @param {String} namespace The namespace id
     * @param {String} key The secret key
     * @param {String} tenant 
     * @param {module:model/ApiSecretMetaEE} apiSecretMetaEE 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ApiSecretMeta>} and HTTP response
     */
    patchSecretWithHttpInfo(namespace, key, tenant, apiSecretMetaEE) {
      let postBody = apiSecretMetaEE;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling patchSecret");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling patchSecret");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling patchSecret");
      }
      // verify the required parameter 'apiSecretMetaEE' is set
      if (apiSecretMetaEE === undefined || apiSecretMetaEE === null) {
        throw new Error("Missing the required parameter 'apiSecretMetaEE' when calling patchSecret");
      }

      let pathParams = {
        'namespace': namespace,
        'key': key,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [ApiSecretMeta];
      return this.apiClient.callApi(
        '/api/v1/{tenant}/namespaces/{namespace}/secrets/{key}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Patch a secret metadata for a namespace
     * @param {String} namespace The namespace id
     * @param {String} key The secret key
     * @param {String} tenant 
     * @param {module:model/ApiSecretMetaEE} apiSecretMetaEE 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ApiSecretMeta>}
     */
    patchSecret(namespace, key, tenant, apiSecretMetaEE) {
      return this.patchSecretWithHttpInfo(namespace, key, tenant, apiSecretMetaEE)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update secrets for a namespace
     * @param {String} namespace The namespace id
     * @param {String} tenant 
     * @param {module:model/ApiSecretValue} apiSecretValue 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ApiSecretMeta>} and HTTP response
     */
    putSecretsWithHttpInfo(namespace, tenant, apiSecretValue) {
      let postBody = apiSecretValue;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling putSecrets");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling putSecrets");
      }
      // verify the required parameter 'apiSecretValue' is set
      if (apiSecretValue === undefined || apiSecretValue === null) {
        throw new Error("Missing the required parameter 'apiSecretValue' when calling putSecrets");
      }

      let pathParams = {
        'namespace': namespace,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [ApiSecretMeta];
      return this.apiClient.callApi(
        '/api/v1/{tenant}/namespaces/{namespace}/secrets', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update secrets for a namespace
     * @param {String} namespace The namespace id
     * @param {String} tenant 
     * @param {module:model/ApiSecretValue} apiSecretValue 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ApiSecretMeta>}
     */
    putSecrets(namespace, tenant, apiSecretValue) {
      return this.putSecretsWithHttpInfo(namespace, tenant, apiSecretValue)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Search for namespaces
     * @param {Number} page The current page
     * @param {Number} size The current page size
     * @param {Boolean} existing Return only existing namespace
     * @param {String} tenant 
     * @param {Object} opts Optional parameters
     * @param {String} [q] A string filter
     * @param {Array.<String>} [sort] The sort of current page
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PagedResultsNamespace} and HTTP response
     */
    searchNamespacesWithHttpInfo(page, size, existing, tenant, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling searchNamespaces");
      }
      // verify the required parameter 'size' is set
      if (size === undefined || size === null) {
        throw new Error("Missing the required parameter 'size' when calling searchNamespaces");
      }
      // verify the required parameter 'existing' is set
      if (existing === undefined || existing === null) {
        throw new Error("Missing the required parameter 'existing' when calling searchNamespaces");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling searchNamespaces");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
        'q': opts['q'],
        'page': page,
        'size': size,
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        'existing': existing
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagedResultsNamespace;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/namespaces/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Search for namespaces
     * @param {Number} page The current page
     * @param {Number} size The current page size
     * @param {Boolean} existing Return only existing namespace
     * @param {String} tenant 
     * @param {Object} opts Optional parameters
     * @param {String} opts.q A string filter
     * @param {Array.<String>} opts.sort The sort of current page
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PagedResultsNamespace}
     */
    searchNamespaces(page, size, existing, tenant, opts) {
      return this.searchNamespacesWithHttpInfo(page, size, existing, tenant, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a namespace
     * @param {String} id The namespace id
     * @param {String} tenant 
     * @param {module:model/Namespace} namespace The namespace
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Namespace} and HTTP response
     */
    updateNamespaceWithHttpInfo(id, tenant, namespace) {
      let postBody = namespace;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateNamespace");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling updateNamespace");
      }
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling updateNamespace");
      }

      let pathParams = {
        'id': id,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Namespace;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/namespaces/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update a namespace
     * @param {String} id The namespace id
     * @param {String} tenant 
     * @param {module:model/Namespace} namespace The namespace
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Namespace}
     */
    updateNamespace(id, tenant, namespace) {
      return this.updateNamespaceWithHttpInfo(id, tenant, namespace)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
