/**
 * Kestra EE
 * All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Dashboard from '../model/Dashboard';
import DashboardControllerPreviewRequest from '../model/DashboardControllerPreviewRequest';
import GlobalFilter from '../model/GlobalFilter';
import PagedResultsDashboard from '../model/PagedResultsDashboard';
import PagedResultsMapStringObject from '../model/PagedResultsMapStringObject';
import ValidateConstraintViolation from '../model/ValidateConstraintViolation';

/**
* Dashboards service.
* @module api/DashboardsApi
* @version v1
*/
export default class DashboardsApi {

    /**
    * Constructs a new DashboardsApi. 
    * @alias module:api/DashboardsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create a dashboard from yaml source
     * @param {String} tenant 
     * @param {String} body The dashboard definition as YAML
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Dashboard} and HTTP response
     */
    createDashboardWithHttpInfo(tenant, body) {
      let postBody = body;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling createDashboard");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createDashboard");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/x-yaml'];
      let accepts = ['application/json'];
      let returnType = Dashboard;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/dashboards', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a dashboard from yaml source
     * @param {String} tenant 
     * @param {String} body The dashboard definition as YAML
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Dashboard}
     */
    createDashboard(tenant, body) {
      return this.createDashboardWithHttpInfo(tenant, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a dashboard
     * @param {String} id The dashboard id
     * @param {String} tenant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteDashboardWithHttpInfo(id, tenant) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteDashboard");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling deleteDashboard");
      }

      let pathParams = {
        'id': id,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/dashboards/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a dashboard
     * @param {String} id The dashboard id
     * @param {String} tenant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteDashboard(id, tenant) {
      return this.deleteDashboardWithHttpInfo(id, tenant)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a dashboard
     * @param {String} id The dashboard id
     * @param {String} tenant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Dashboard} and HTTP response
     */
    getDashboardWithHttpInfo(id, tenant) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDashboard");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling getDashboard");
      }

      let pathParams = {
        'id': id,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Dashboard;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/dashboards/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get a dashboard
     * @param {String} id The dashboard id
     * @param {String} tenant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Dashboard}
     */
    getDashboard(id, tenant) {
      return this.getDashboardWithHttpInfo(id, tenant)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Generate a dashboard chart data
     * @param {String} id The dashboard id
     * @param {String} chartId The chart id
     * @param {String} tenant 
     * @param {module:model/GlobalFilter} globalFilter The filters to apply, some can override chart definition like labels & namespace
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PagedResultsMapStringObject} and HTTP response
     */
    getDashboardChartDataWithHttpInfo(id, chartId, tenant, globalFilter) {
      let postBody = globalFilter;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDashboardChartData");
      }
      // verify the required parameter 'chartId' is set
      if (chartId === undefined || chartId === null) {
        throw new Error("Missing the required parameter 'chartId' when calling getDashboardChartData");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling getDashboardChartData");
      }
      // verify the required parameter 'globalFilter' is set
      if (globalFilter === undefined || globalFilter === null) {
        throw new Error("Missing the required parameter 'globalFilter' when calling getDashboardChartData");
      }

      let pathParams = {
        'id': id,
        'chartId': chartId,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PagedResultsMapStringObject;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/dashboards/{id}/charts/{chartId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Generate a dashboard chart data
     * @param {String} id The dashboard id
     * @param {String} chartId The chart id
     * @param {String} tenant 
     * @param {module:model/GlobalFilter} globalFilter The filters to apply, some can override chart definition like labels & namespace
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PagedResultsMapStringObject}
     */
    getDashboardChartData(id, chartId, tenant, globalFilter) {
      return this.getDashboardChartDataWithHttpInfo(id, chartId, tenant, globalFilter)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Preview a chart data
     * @param {String} tenant 
     * @param {module:model/DashboardControllerPreviewRequest} dashboardControllerPreviewRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PagedResultsMapStringObject} and HTTP response
     */
    previewChartWithHttpInfo(tenant, dashboardControllerPreviewRequest) {
      let postBody = dashboardControllerPreviewRequest;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling previewChart");
      }
      // verify the required parameter 'dashboardControllerPreviewRequest' is set
      if (dashboardControllerPreviewRequest === undefined || dashboardControllerPreviewRequest === null) {
        throw new Error("Missing the required parameter 'dashboardControllerPreviewRequest' when calling previewChart");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PagedResultsMapStringObject;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/dashboards/charts/preview', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Preview a chart data
     * @param {String} tenant 
     * @param {module:model/DashboardControllerPreviewRequest} dashboardControllerPreviewRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PagedResultsMapStringObject}
     */
    previewChart(tenant, dashboardControllerPreviewRequest) {
      return this.previewChartWithHttpInfo(tenant, dashboardControllerPreviewRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Search for dashboards
     * @param {Number} page The current page
     * @param {Number} size The current page size
     * @param {String} tenant 
     * @param {Object} opts Optional parameters
     * @param {String} [q] The filter query
     * @param {Array.<String>} [sort] The sort of current page
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PagedResultsDashboard} and HTTP response
     */
    searchDashboardsWithHttpInfo(page, size, tenant, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling searchDashboards");
      }
      // verify the required parameter 'size' is set
      if (size === undefined || size === null) {
        throw new Error("Missing the required parameter 'size' when calling searchDashboards");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling searchDashboards");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
        'page': page,
        'size': size,
        'q': opts['q'],
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagedResultsDashboard;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/dashboards', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Search for dashboards
     * @param {Number} page The current page
     * @param {Number} size The current page size
     * @param {String} tenant 
     * @param {Object} opts Optional parameters
     * @param {String} opts.q The filter query
     * @param {Array.<String>} opts.sort The sort of current page
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PagedResultsDashboard}
     */
    searchDashboards(page, size, tenant, opts) {
      return this.searchDashboardsWithHttpInfo(page, size, tenant, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a dashboard
     * @param {String} id The dashboard id
     * @param {String} tenant 
     * @param {String} body The dashboard definition as YAML
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Dashboard} and HTTP response
     */
    updateDashboardWithHttpInfo(id, tenant, body) {
      let postBody = body;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateDashboard");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling updateDashboard");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateDashboard");
      }

      let pathParams = {
        'id': id,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/x-yaml'];
      let accepts = ['application/json'];
      let returnType = Dashboard;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/dashboards/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update a dashboard
     * @param {String} id The dashboard id
     * @param {String} tenant 
     * @param {String} body The dashboard definition as YAML
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Dashboard}
     */
    updateDashboard(id, tenant, body) {
      return this.updateDashboardWithHttpInfo(id, tenant, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Validate a chart from yaml source
     * @param {String} tenant 
     * @param {String} body The chart definition as YAML
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ValidateConstraintViolation} and HTTP response
     */
    validateChartWithHttpInfo(tenant, body) {
      let postBody = body;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling validateChart");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling validateChart");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/x-yaml'];
      let accepts = ['application/json'];
      let returnType = ValidateConstraintViolation;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/dashboards/validate/chart', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Validate a chart from yaml source
     * @param {String} tenant 
     * @param {String} body The chart definition as YAML
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ValidateConstraintViolation}
     */
    validateChart(tenant, body) {
      return this.validateChartWithHttpInfo(tenant, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Validate dashboard from yaml source
     * @param {String} tenant 
     * @param {String} body The dashboard definition as YAML
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ValidateConstraintViolation} and HTTP response
     */
    validateDashboardWithHttpInfo(tenant, body) {
      let postBody = body;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling validateDashboard");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling validateDashboard");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/x-yaml'];
      let accepts = ['application/json'];
      let returnType = ValidateConstraintViolation;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/dashboards/validate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Validate dashboard from yaml source
     * @param {String} tenant 
     * @param {String} body The dashboard definition as YAML
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ValidateConstraintViolation}
     */
    validateDashboard(tenant, body) {
      return this.validateDashboardWithHttpInfo(tenant, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
