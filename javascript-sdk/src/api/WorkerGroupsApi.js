/**
 * Kestra EE
 * All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ClusterControllerApiCreateOrUpdateWorkerGroupRequest from '../model/ClusterControllerApiCreateOrUpdateWorkerGroupRequest';
import ClusterControllerApiWorkerGroup from '../model/ClusterControllerApiWorkerGroup';
import ClusterControllerApiWorkerGroupDetails from '../model/ClusterControllerApiWorkerGroupDetails';
import ClusterControllerApiWorkerGroupList from '../model/ClusterControllerApiWorkerGroupList';

/**
* WorkerGroups service.
* @module api/WorkerGroupsApi
* @version v1
*/
export default class WorkerGroupsApi {

    /**
    * Constructs a new WorkerGroupsApi. 
    * @alias module:api/WorkerGroupsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create a new worker group.
     * @param {module:model/ClusterControllerApiCreateOrUpdateWorkerGroupRequest} clusterControllerApiCreateOrUpdateWorkerGroupRequest The worker group definition
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ClusterControllerApiWorkerGroup} and HTTP response
     */
    createWorkerGroupWithHttpInfo(clusterControllerApiCreateOrUpdateWorkerGroupRequest) {
      let postBody = clusterControllerApiCreateOrUpdateWorkerGroupRequest;
      // verify the required parameter 'clusterControllerApiCreateOrUpdateWorkerGroupRequest' is set
      if (clusterControllerApiCreateOrUpdateWorkerGroupRequest === undefined || clusterControllerApiCreateOrUpdateWorkerGroupRequest === null) {
        throw new Error("Missing the required parameter 'clusterControllerApiCreateOrUpdateWorkerGroupRequest' when calling createWorkerGroup");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ClusterControllerApiWorkerGroup;
      return this.apiClient.callApi(
        '/api/v1/cluster/workergroups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a new worker group.
     * @param {module:model/ClusterControllerApiCreateOrUpdateWorkerGroupRequest} clusterControllerApiCreateOrUpdateWorkerGroupRequest The worker group definition
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ClusterControllerApiWorkerGroup}
     */
    createWorkerGroup(clusterControllerApiCreateOrUpdateWorkerGroupRequest) {
      return this.createWorkerGroupWithHttpInfo(clusterControllerApiCreateOrUpdateWorkerGroupRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete an existing worker group.
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    deleteWorkerGroupByIdWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteWorkerGroupById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/cluster/workergroups/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete an existing worker group.
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    deleteWorkerGroupById(id) {
      return this.deleteWorkerGroupByIdWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get details about a worker group.
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ClusterControllerApiWorkerGroupDetails} and HTTP response
     */
    getWorkerGroupByIdWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getWorkerGroupById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ClusterControllerApiWorkerGroupDetails;
      return this.apiClient.callApi(
        '/api/v1/cluster/workergroups/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get details about a worker group.
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ClusterControllerApiWorkerGroupDetails}
     */
    getWorkerGroupById(id) {
      return this.getWorkerGroupByIdWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List all Worker Groups
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ClusterControllerApiWorkerGroupList} and HTTP response
     */
    listWorkerGroupsWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ClusterControllerApiWorkerGroupList;
      return this.apiClient.callApi(
        '/api/v1/cluster/workergroups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List all Worker Groups
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ClusterControllerApiWorkerGroupList}
     */
    listWorkerGroups() {
      return this.listWorkerGroupsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an existing worker group.
     * @param {String} id 
     * @param {module:model/ClusterControllerApiCreateOrUpdateWorkerGroupRequest} clusterControllerApiCreateOrUpdateWorkerGroupRequest The worker group definition
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ClusterControllerApiWorkerGroup} and HTTP response
     */
    updateWorkerGroupByIdWithHttpInfo(id, clusterControllerApiCreateOrUpdateWorkerGroupRequest) {
      let postBody = clusterControllerApiCreateOrUpdateWorkerGroupRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateWorkerGroupById");
      }
      // verify the required parameter 'clusterControllerApiCreateOrUpdateWorkerGroupRequest' is set
      if (clusterControllerApiCreateOrUpdateWorkerGroupRequest === undefined || clusterControllerApiCreateOrUpdateWorkerGroupRequest === null) {
        throw new Error("Missing the required parameter 'clusterControllerApiCreateOrUpdateWorkerGroupRequest' when calling updateWorkerGroupById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ClusterControllerApiWorkerGroup;
      return this.apiClient.callApi(
        '/api/v1/cluster/workergroups/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update an existing worker group.
     * @param {String} id 
     * @param {module:model/ClusterControllerApiCreateOrUpdateWorkerGroupRequest} clusterControllerApiCreateOrUpdateWorkerGroupRequest The worker group definition
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ClusterControllerApiWorkerGroup}
     */
    updateWorkerGroupById(id, clusterControllerApiCreateOrUpdateWorkerGroupRequest) {
      return this.updateWorkerGroupByIdWithHttpInfo(id, clusterControllerApiCreateOrUpdateWorkerGroupRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
