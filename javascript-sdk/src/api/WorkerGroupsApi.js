/**
 * Kestra EE
 * All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ClusterControllerApiCreateOrUpdateWorkerGroupRequest from '../model/ClusterControllerApiCreateOrUpdateWorkerGroupRequest';
import ClusterControllerApiWorkerGroup from '../model/ClusterControllerApiWorkerGroup';
import ClusterControllerApiWorkerGroupDetails from '../model/ClusterControllerApiWorkerGroupDetails';
import ClusterControllerApiWorkerGroupList from '../model/ClusterControllerApiWorkerGroupList';

/**
* WorkerGroups service.
* @module api/WorkerGroupsApi
* @version v1
*/
export default class WorkerGroupsApi {

    /**
    * Constructs a new WorkerGroupsApi. 
    * @alias module:api/WorkerGroupsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createWorkerGroup operation.
     * @callback module:api/WorkerGroupsApi~createWorkerGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClusterControllerApiWorkerGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new worker group.
     * @param {module:model/ClusterControllerApiCreateOrUpdateWorkerGroupRequest} clusterControllerApiCreateOrUpdateWorkerGroupRequest The worker group definition
     * @param {module:api/WorkerGroupsApi~createWorkerGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClusterControllerApiWorkerGroup}
     */
    createWorkerGroup(clusterControllerApiCreateOrUpdateWorkerGroupRequest, callback) {
      let postBody = clusterControllerApiCreateOrUpdateWorkerGroupRequest;
      // verify the required parameter 'clusterControllerApiCreateOrUpdateWorkerGroupRequest' is set
      if (clusterControllerApiCreateOrUpdateWorkerGroupRequest === undefined || clusterControllerApiCreateOrUpdateWorkerGroupRequest === null) {
        throw new Error("Missing the required parameter 'clusterControllerApiCreateOrUpdateWorkerGroupRequest' when calling createWorkerGroup");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ClusterControllerApiWorkerGroup;
      return this.apiClient.callApi(
        '/api/v1/cluster/workergroups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteWorkerGroupById operation.
     * @callback module:api/WorkerGroupsApi~deleteWorkerGroupByIdCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an existing worker group.
     * @param {String} id 
     * @param {module:api/WorkerGroupsApi~deleteWorkerGroupByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteWorkerGroupById(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteWorkerGroupById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/cluster/workergroups/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWorkerGroupById operation.
     * @callback module:api/WorkerGroupsApi~getWorkerGroupByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClusterControllerApiWorkerGroupDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get details about a worker group.
     * @param {String} id 
     * @param {module:api/WorkerGroupsApi~getWorkerGroupByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClusterControllerApiWorkerGroupDetails}
     */
    getWorkerGroupById(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getWorkerGroupById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ClusterControllerApiWorkerGroupDetails;
      return this.apiClient.callApi(
        '/api/v1/cluster/workergroups/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listWorkerGroups operation.
     * @callback module:api/WorkerGroupsApi~listWorkerGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClusterControllerApiWorkerGroupList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all Worker Groups
     * @param {module:api/WorkerGroupsApi~listWorkerGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClusterControllerApiWorkerGroupList}
     */
    listWorkerGroups(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ClusterControllerApiWorkerGroupList;
      return this.apiClient.callApi(
        '/api/v1/cluster/workergroups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateWorkerGroupById operation.
     * @callback module:api/WorkerGroupsApi~updateWorkerGroupByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClusterControllerApiWorkerGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing worker group.
     * @param {String} id 
     * @param {module:model/ClusterControllerApiCreateOrUpdateWorkerGroupRequest} clusterControllerApiCreateOrUpdateWorkerGroupRequest The worker group definition
     * @param {module:api/WorkerGroupsApi~updateWorkerGroupByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClusterControllerApiWorkerGroup}
     */
    updateWorkerGroupById(id, clusterControllerApiCreateOrUpdateWorkerGroupRequest, callback) {
      let postBody = clusterControllerApiCreateOrUpdateWorkerGroupRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateWorkerGroupById");
      }
      // verify the required parameter 'clusterControllerApiCreateOrUpdateWorkerGroupRequest' is set
      if (clusterControllerApiCreateOrUpdateWorkerGroupRequest === undefined || clusterControllerApiCreateOrUpdateWorkerGroupRequest === null) {
        throw new Error("Missing the required parameter 'clusterControllerApiCreateOrUpdateWorkerGroupRequest' when calling updateWorkerGroupById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ClusterControllerApiWorkerGroup;
      return this.apiClient.callApi(
        '/api/v1/cluster/workergroups/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
