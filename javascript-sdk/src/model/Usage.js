/**
 * Kestra EE
 * All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ConfigurationUsage from './ConfigurationUsage';
import ExecutionUsage from './ExecutionUsage';
import FlowUsage from './FlowUsage';
import HostUsage from './HostUsage';
import PluginMetric from './PluginMetric';
import PluginUsage from './PluginUsage';
import ServerType from './ServerType';
import ServiceUsage from './ServiceUsage';

/**
 * The Usage model module.
 * @module model/Usage
 * @version v1
 */
class Usage {
    /**
     * Constructs a new <code>Usage</code>.
     * @alias module:model/Usage
     * @param uuid {String} 
     * @param startUuid {String} 
     * @param instanceUuid {String} 
     * @param serverType {module:model/ServerType} 
     * @param version {String} 
     * @param zoneId {String} 
     * @param startTime {Date} 
     */
    constructor(uuid, startUuid, instanceUuid, serverType, version, zoneId, startTime) { 
        
        Usage.initialize(this, uuid, startUuid, instanceUuid, serverType, version, zoneId, startTime);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, uuid, startUuid, instanceUuid, serverType, version, zoneId, startTime) { 
        obj['uuid'] = uuid;
        obj['startUuid'] = startUuid;
        obj['instanceUuid'] = instanceUuid;
        obj['serverType'] = serverType;
        obj['version'] = version;
        obj['zoneId'] = zoneId;
        obj['startTime'] = startTime;
    }

    /**
     * Constructs a <code>Usage</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Usage} obj Optional instance to populate.
     * @return {module:model/Usage} The populated <code>Usage</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Usage();

            if (data.hasOwnProperty('uuid')) {
                obj['uuid'] = ApiClient.convertToType(data['uuid'], 'String');
            }
            if (data.hasOwnProperty('startUuid')) {
                obj['startUuid'] = ApiClient.convertToType(data['startUuid'], 'String');
            }
            if (data.hasOwnProperty('instanceUuid')) {
                obj['instanceUuid'] = ApiClient.convertToType(data['instanceUuid'], 'String');
            }
            if (data.hasOwnProperty('serverType')) {
                obj['serverType'] = ServerType.constructFromObject(data['serverType']);
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
            if (data.hasOwnProperty('zoneId')) {
                obj['zoneId'] = ApiClient.convertToType(data['zoneId'], 'String');
            }
            if (data.hasOwnProperty('uri')) {
                obj['uri'] = ApiClient.convertToType(data['uri'], 'String');
            }
            if (data.hasOwnProperty('environments')) {
                obj['environments'] = ApiClient.convertToType(data['environments'], ['String']);
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'Date');
            }
            if (data.hasOwnProperty('host')) {
                obj['host'] = HostUsage.constructFromObject(data['host']);
            }
            if (data.hasOwnProperty('configurations')) {
                obj['configurations'] = ConfigurationUsage.constructFromObject(data['configurations']);
            }
            if (data.hasOwnProperty('plugins')) {
                obj['plugins'] = ApiClient.convertToType(data['plugins'], [PluginUsage]);
            }
            if (data.hasOwnProperty('flows')) {
                obj['flows'] = FlowUsage.constructFromObject(data['flows']);
            }
            if (data.hasOwnProperty('executions')) {
                obj['executions'] = ExecutionUsage.constructFromObject(data['executions']);
            }
            if (data.hasOwnProperty('services')) {
                obj['services'] = ApiClient.convertToType(data['services'], ServiceUsage);
            }
            if (data.hasOwnProperty('pluginMetrics')) {
                obj['pluginMetrics'] = ApiClient.convertToType(data['pluginMetrics'], [PluginMetric]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Usage</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Usage</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Usage.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['uuid'] && !(typeof data['uuid'] === 'string' || data['uuid'] instanceof String)) {
            throw new Error("Expected the field `uuid` to be a primitive type in the JSON string but got " + data['uuid']);
        }
        // ensure the json data is a string
        if (data['startUuid'] && !(typeof data['startUuid'] === 'string' || data['startUuid'] instanceof String)) {
            throw new Error("Expected the field `startUuid` to be a primitive type in the JSON string but got " + data['startUuid']);
        }
        // ensure the json data is a string
        if (data['instanceUuid'] && !(typeof data['instanceUuid'] === 'string' || data['instanceUuid'] instanceof String)) {
            throw new Error("Expected the field `instanceUuid` to be a primitive type in the JSON string but got " + data['instanceUuid']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }
        // ensure the json data is a string
        if (data['zoneId'] && !(typeof data['zoneId'] === 'string' || data['zoneId'] instanceof String)) {
            throw new Error("Expected the field `zoneId` to be a primitive type in the JSON string but got " + data['zoneId']);
        }
        // ensure the json data is a string
        if (data['uri'] && !(typeof data['uri'] === 'string' || data['uri'] instanceof String)) {
            throw new Error("Expected the field `uri` to be a primitive type in the JSON string but got " + data['uri']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['environments'])) {
            throw new Error("Expected the field `environments` to be an array in the JSON data but got " + data['environments']);
        }
        // validate the optional field `host`
        if (data['host']) { // data not null
          HostUsage.validateJSON(data['host']);
        }
        // validate the optional field `configurations`
        if (data['configurations']) { // data not null
          ConfigurationUsage.validateJSON(data['configurations']);
        }
        if (data['plugins']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['plugins'])) {
                throw new Error("Expected the field `plugins` to be an array in the JSON data but got " + data['plugins']);
            }
            // validate the optional field `plugins` (array)
            for (const item of data['plugins']) {
                PluginUsage.validateJSON(item);
            };
        }
        // validate the optional field `flows`
        if (data['flows']) { // data not null
          FlowUsage.validateJSON(data['flows']);
        }
        // validate the optional field `executions`
        if (data['executions']) { // data not null
          ExecutionUsage.validateJSON(data['executions']);
        }
        // validate the optional field `services`
        if (data['services']) { // data not null
          ServiceUsage.validateJSON(data['services']);
        }
        if (data['pluginMetrics']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['pluginMetrics'])) {
                throw new Error("Expected the field `pluginMetrics` to be an array in the JSON data but got " + data['pluginMetrics']);
            }
            // validate the optional field `pluginMetrics` (array)
            for (const item of data['pluginMetrics']) {
                PluginMetric.validateJSON(item);
            };
        }

        return true;
    }


}

Usage.RequiredProperties = ["uuid", "startUuid", "instanceUuid", "serverType", "version", "zoneId", "startTime"];

/**
 * @member {String} uuid
 */
Usage.prototype['uuid'] = undefined;

/**
 * @member {String} startUuid
 */
Usage.prototype['startUuid'] = undefined;

/**
 * @member {String} instanceUuid
 */
Usage.prototype['instanceUuid'] = undefined;

/**
 * @member {module:model/ServerType} serverType
 */
Usage.prototype['serverType'] = undefined;

/**
 * @member {String} version
 */
Usage.prototype['version'] = undefined;

/**
 * @member {String} zoneId
 */
Usage.prototype['zoneId'] = undefined;

/**
 * @member {String} uri
 */
Usage.prototype['uri'] = undefined;

/**
 * @member {Array.<String>} environments
 */
Usage.prototype['environments'] = undefined;

/**
 * @member {Date} startTime
 */
Usage.prototype['startTime'] = undefined;

/**
 * @member {module:model/HostUsage} host
 */
Usage.prototype['host'] = undefined;

/**
 * @member {module:model/ConfigurationUsage} configurations
 */
Usage.prototype['configurations'] = undefined;

/**
 * @member {Array.<module:model/PluginUsage>} plugins
 */
Usage.prototype['plugins'] = undefined;

/**
 * @member {module:model/FlowUsage} flows
 */
Usage.prototype['flows'] = undefined;

/**
 * @member {module:model/ExecutionUsage} executions
 */
Usage.prototype['executions'] = undefined;

/**
 * @member {module:model/ServiceUsage} services
 */
Usage.prototype['services'] = undefined;

/**
 * @member {Array.<module:model/PluginMetric>} pluginMetrics
 */
Usage.prototype['pluginMetrics'] = undefined;






export default Usage;

