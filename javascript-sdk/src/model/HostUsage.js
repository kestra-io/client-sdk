/**
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import HostUsageHardware from './HostUsageHardware';
import HostUsageJvm from './HostUsageJvm';
import HostUsageOs from './HostUsageOs';

/**
 * The HostUsage model module.
 * @module model/HostUsage
 * @version v0.0.4
 */
class HostUsage {
    /**
     * Constructs a new <code>HostUsage</code>.
     * @alias module:model/HostUsage
     */
    constructor() { 
        
        HostUsage.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>HostUsage</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HostUsage} obj Optional instance to populate.
     * @return {module:model/HostUsage} The populated <code>HostUsage</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HostUsage();

            if (data.hasOwnProperty('uuid')) {
                obj['uuid'] = ApiClient.convertToType(data['uuid'], 'String');
            }
            if (data.hasOwnProperty('hardware')) {
                obj['hardware'] = HostUsageHardware.constructFromObject(data['hardware']);
            }
            if (data.hasOwnProperty('os')) {
                obj['os'] = HostUsageOs.constructFromObject(data['os']);
            }
            if (data.hasOwnProperty('jvm')) {
                obj['jvm'] = HostUsageJvm.constructFromObject(data['jvm']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HostUsage</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HostUsage</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['uuid'] && !(typeof data['uuid'] === 'string' || data['uuid'] instanceof String)) {
            throw new Error("Expected the field `uuid` to be a primitive type in the JSON string but got " + data['uuid']);
        }
        // validate the optional field `hardware`
        if (data['hardware']) { // data not null
          HostUsageHardware.validateJSON(data['hardware']);
        }
        // validate the optional field `os`
        if (data['os']) { // data not null
          HostUsageOs.validateJSON(data['os']);
        }
        // validate the optional field `jvm`
        if (data['jvm']) { // data not null
          HostUsageJvm.validateJSON(data['jvm']);
        }

        return true;
    }


}



/**
 * @member {String} uuid
 */
HostUsage.prototype['uuid'] = undefined;

/**
 * @member {module:model/HostUsageHardware} hardware
 */
HostUsage.prototype['hardware'] = undefined;

/**
 * @member {module:model/HostUsageOs} os
 */
HostUsage.prototype['os'] = undefined;

/**
 * @member {module:model/HostUsageJvm} jvm
 */
HostUsage.prototype['jvm'] = undefined;






export default HostUsage;

