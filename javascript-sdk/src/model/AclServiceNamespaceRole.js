/**
 * Kestra EE
 * All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Role from './Role';

/**
 * The AclServiceNamespaceRole model module.
 * @module model/AclServiceNamespaceRole
 * @version v1
 */
class AclServiceNamespaceRole {
    /**
     * Constructs a new <code>AclServiceNamespaceRole</code>.
     * @alias module:model/AclServiceNamespaceRole
     */
    constructor() { 
        
        AclServiceNamespaceRole.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AclServiceNamespaceRole</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AclServiceNamespaceRole} obj Optional instance to populate.
     * @return {module:model/AclServiceNamespaceRole} The populated <code>AclServiceNamespaceRole</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AclServiceNamespaceRole();

            if (data.hasOwnProperty('role')) {
                obj['role'] = Role.constructFromObject(data['role']);
            }
            if (data.hasOwnProperty('namespaceId')) {
                obj['namespaceId'] = ApiClient.convertToType(data['namespaceId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AclServiceNamespaceRole</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AclServiceNamespaceRole</code>.
     */
    static validateJSON(data) {
        // validate the optional field `role`
        if (data['role']) { // data not null
          Role.validateJSON(data['role']);
        }
        // ensure the json data is a string
        if (data['namespaceId'] && !(typeof data['namespaceId'] === 'string' || data['namespaceId'] instanceof String)) {
            throw new Error("Expected the field `namespaceId` to be a primitive type in the JSON string but got " + data['namespaceId']);
        }

        return true;
    }


}



/**
 * @member {module:model/Role} role
 */
AclServiceNamespaceRole.prototype['role'] = undefined;

/**
 * @member {String} namespaceId
 */
AclServiceNamespaceRole.prototype['namespaceId'] = undefined;






export default AclServiceNamespaceRole;

