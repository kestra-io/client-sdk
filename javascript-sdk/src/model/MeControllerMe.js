/**
 * Kestra EE
 * All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AclServiceNamespaceRole from './AclServiceNamespaceRole';
import ApiTenant from './ApiTenant';
import ApiUser from './ApiUser';

/**
 * The MeControllerMe model module.
 * @module model/MeControllerMe
 * @version v1
 */
class MeControllerMe {
    /**
     * Constructs a new <code>MeControllerMe</code>.
     * @alias module:model/MeControllerMe
     */
    constructor() { 
        
        MeControllerMe.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MeControllerMe</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MeControllerMe} obj Optional instance to populate.
     * @return {module:model/MeControllerMe} The populated <code>MeControllerMe</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MeControllerMe();

            if (data.hasOwnProperty('user')) {
                obj['user'] = ApiUser.constructFromObject(data['user']);
            }
            if (data.hasOwnProperty('roles')) {
                obj['roles'] = ApiClient.convertToType(data['roles'], [AclServiceNamespaceRole]);
            }
            if (data.hasOwnProperty('tenants')) {
                obj['tenants'] = ApiClient.convertToType(data['tenants'], [ApiTenant]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MeControllerMe</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MeControllerMe</code>.
     */
    static validateJSON(data) {
        // validate the optional field `user`
        if (data['user']) { // data not null
          ApiUser.validateJSON(data['user']);
        }
        if (data['roles']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['roles'])) {
                throw new Error("Expected the field `roles` to be an array in the JSON data but got " + data['roles']);
            }
            // validate the optional field `roles` (array)
            for (const item of data['roles']) {
                AclServiceNamespaceRole.validateJSON(item);
            };
        }
        if (data['tenants']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tenants'])) {
                throw new Error("Expected the field `tenants` to be an array in the JSON data but got " + data['tenants']);
            }
            // validate the optional field `tenants` (array)
            for (const item of data['tenants']) {
                ApiTenant.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {module:model/ApiUser} user
 */
MeControllerMe.prototype['user'] = undefined;

/**
 * @member {Array.<module:model/AclServiceNamespaceRole>} roles
 */
MeControllerMe.prototype['roles'] = undefined;

/**
 * @member {Array.<module:model/ApiTenant>} tenants
 */
MeControllerMe.prototype['tenants'] = undefined;






export default MeControllerMe;

