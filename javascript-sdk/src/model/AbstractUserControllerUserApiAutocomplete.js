/**
 * Kestra EE
 * All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ApiAutocomplete from './ApiAutocomplete';

/**
 * The AbstractUserControllerUserApiAutocomplete model module.
 * @module model/AbstractUserControllerUserApiAutocomplete
 * @version v1
 */
class AbstractUserControllerUserApiAutocomplete {
    /**
     * Constructs a new <code>AbstractUserControllerUserApiAutocomplete</code>.
     * @alias module:model/AbstractUserControllerUserApiAutocomplete
     * @implements module:model/ApiAutocomplete
     */
    constructor() { 
        ApiAutocomplete.initialize(this);
        AbstractUserControllerUserApiAutocomplete.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AbstractUserControllerUserApiAutocomplete</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AbstractUserControllerUserApiAutocomplete} obj Optional instance to populate.
     * @return {module:model/AbstractUserControllerUserApiAutocomplete} The populated <code>AbstractUserControllerUserApiAutocomplete</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AbstractUserControllerUserApiAutocomplete();
            ApiAutocomplete.constructFromObject(data, obj);

            if (data.hasOwnProperty('q')) {
                obj['q'] = ApiClient.convertToType(data['q'], 'String');
            }
            if (data.hasOwnProperty('ids')) {
                obj['ids'] = ApiClient.convertToType(data['ids'], ['String']);
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AbstractUserControllerUserApiAutocomplete</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AbstractUserControllerUserApiAutocomplete</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['q'] && !(typeof data['q'] === 'string' || data['q'] instanceof String)) {
            throw new Error("Expected the field `q` to be a primitive type in the JSON string but got " + data['q']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['ids'])) {
            throw new Error("Expected the field `ids` to be an array in the JSON data but got " + data['ids']);
        }
        // ensure the json data is a string
        if (data['username'] && !(typeof data['username'] === 'string' || data['username'] instanceof String)) {
            throw new Error("Expected the field `username` to be a primitive type in the JSON string but got " + data['username']);
        }

        return true;
    }


}



/**
 * @member {String} q
 */
AbstractUserControllerUserApiAutocomplete.prototype['q'] = undefined;

/**
 * @member {Array.<String>} ids
 */
AbstractUserControllerUserApiAutocomplete.prototype['ids'] = undefined;

/**
 * @member {String} username
 */
AbstractUserControllerUserApiAutocomplete.prototype['username'] = undefined;


// Implement ApiAutocomplete interface:
/**
 * @member {String} q
 */
ApiAutocomplete.prototype['q'] = undefined;
/**
 * @member {Array.<String>} ids
 */
ApiAutocomplete.prototype['ids'] = undefined;




export default AbstractUserControllerUserApiAutocomplete;

