/**
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ApiToken model module.
 * @module model/ApiToken
 * @version v1.0.5
 */
class ApiToken {
    /**
     * Constructs a new <code>ApiToken</code>.
     * @alias module:model/ApiToken
     */
    constructor() { 
        
        ApiToken.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ApiToken</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ApiToken} obj Optional instance to populate.
     * @return {module:model/ApiToken} The populated <code>ApiToken</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ApiToken();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('prefix')) {
                obj['prefix'] = ApiClient.convertToType(data['prefix'], 'String');
            }
            if (data.hasOwnProperty('iat')) {
                obj['iat'] = ApiClient.convertToType(data['iat'], 'Date');
            }
            if (data.hasOwnProperty('exp')) {
                obj['exp'] = ApiClient.convertToType(data['exp'], 'Date');
            }
            if (data.hasOwnProperty('lastUsed')) {
                obj['lastUsed'] = ApiClient.convertToType(data['lastUsed'], 'Date');
            }
            if (data.hasOwnProperty('extended')) {
                obj['extended'] = ApiClient.convertToType(data['extended'], 'Boolean');
            }
            if (data.hasOwnProperty('expired')) {
                obj['expired'] = ApiClient.convertToType(data['expired'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ApiToken</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ApiToken</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['prefix'] && !(typeof data['prefix'] === 'string' || data['prefix'] instanceof String)) {
            throw new Error("Expected the field `prefix` to be a primitive type in the JSON string but got " + data['prefix']);
        }

        return true;
    }


}



/**
 * @member {String} id
 */
ApiToken.prototype['id'] = undefined;

/**
 * @member {String} name
 */
ApiToken.prototype['name'] = undefined;

/**
 * @member {String} description
 */
ApiToken.prototype['description'] = undefined;

/**
 * @member {String} prefix
 */
ApiToken.prototype['prefix'] = undefined;

/**
 * @member {Date} iat
 */
ApiToken.prototype['iat'] = undefined;

/**
 * @member {Date} exp
 */
ApiToken.prototype['exp'] = undefined;

/**
 * @member {Date} lastUsed
 */
ApiToken.prototype['lastUsed'] = undefined;

/**
 * @member {Boolean} extended
 */
ApiToken.prototype['extended'] = undefined;

/**
 * @member {Boolean} expired
 */
ApiToken.prototype['expired'] = undefined;






export default ApiToken;

