/**
 * Kestra EE
 * All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RolePermissions model module.
 * @module model/RolePermissions
 * @version v1
 */
class RolePermissions {
    /**
     * Constructs a new <code>RolePermissions</code>.
     * @alias module:model/RolePermissions
     */
    constructor() { 
        
        RolePermissions.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RolePermissions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RolePermissions} obj Optional instance to populate.
     * @return {module:model/RolePermissions} The populated <code>RolePermissions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RolePermissions();

            if (data.hasOwnProperty('FLOW')) {
                obj['FLOW'] = ApiClient.convertToType(data['FLOW'], ['String']);
            }
            if (data.hasOwnProperty('BLUEPRINT')) {
                obj['BLUEPRINT'] = ApiClient.convertToType(data['BLUEPRINT'], ['String']);
            }
            if (data.hasOwnProperty('TEMPLATE')) {
                obj['TEMPLATE'] = ApiClient.convertToType(data['TEMPLATE'], ['String']);
            }
            if (data.hasOwnProperty('NAMESPACE')) {
                obj['NAMESPACE'] = ApiClient.convertToType(data['NAMESPACE'], ['String']);
            }
            if (data.hasOwnProperty('EXECUTION')) {
                obj['EXECUTION'] = ApiClient.convertToType(data['EXECUTION'], ['String']);
            }
            if (data.hasOwnProperty('USER')) {
                obj['USER'] = ApiClient.convertToType(data['USER'], ['String']);
            }
            if (data.hasOwnProperty('GROUP')) {
                obj['GROUP'] = ApiClient.convertToType(data['GROUP'], ['String']);
            }
            if (data.hasOwnProperty('ROLE')) {
                obj['ROLE'] = ApiClient.convertToType(data['ROLE'], ['String']);
            }
            if (data.hasOwnProperty('BINDING')) {
                obj['BINDING'] = ApiClient.convertToType(data['BINDING'], ['String']);
            }
            if (data.hasOwnProperty('AUDITLOG')) {
                obj['AUDITLOG'] = ApiClient.convertToType(data['AUDITLOG'], ['String']);
            }
            if (data.hasOwnProperty('SECRET')) {
                obj['SECRET'] = ApiClient.convertToType(data['SECRET'], ['String']);
            }
            if (data.hasOwnProperty('KVSTORE')) {
                obj['KVSTORE'] = ApiClient.convertToType(data['KVSTORE'], ['String']);
            }
            if (data.hasOwnProperty('IMPERSONATE')) {
                obj['IMPERSONATE'] = ApiClient.convertToType(data['IMPERSONATE'], ['String']);
            }
            if (data.hasOwnProperty('SETTING')) {
                obj['SETTING'] = ApiClient.convertToType(data['SETTING'], ['String']);
            }
            if (data.hasOwnProperty('INFRASTRUCTURE')) {
                obj['INFRASTRUCTURE'] = ApiClient.convertToType(data['INFRASTRUCTURE'], ['String']);
            }
            if (data.hasOwnProperty('APP')) {
                obj['APP'] = ApiClient.convertToType(data['APP'], ['String']);
            }
            if (data.hasOwnProperty('APPEXECUTION')) {
                obj['APPEXECUTION'] = ApiClient.convertToType(data['APPEXECUTION'], ['String']);
            }
            if (data.hasOwnProperty('TEST')) {
                obj['TEST'] = ApiClient.convertToType(data['TEST'], ['String']);
            }
            if (data.hasOwnProperty('ME')) {
                obj['ME'] = ApiClient.convertToType(data['ME'], ['String']);
            }
            if (data.hasOwnProperty('APITOKEN')) {
                obj['APITOKEN'] = ApiClient.convertToType(data['APITOKEN'], ['String']);
            }
            if (data.hasOwnProperty('DASHBOARD')) {
                obj['DASHBOARD'] = ApiClient.convertToType(data['DASHBOARD'], ['String']);
            }
            if (data.hasOwnProperty('TENANT')) {
                obj['TENANT'] = ApiClient.convertToType(data['TENANT'], ['String']);
            }
            if (data.hasOwnProperty('UNKNOWN')) {
                obj['UNKNOWN'] = ApiClient.convertToType(data['UNKNOWN'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RolePermissions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RolePermissions</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['FLOW'])) {
            throw new Error("Expected the field `FLOW` to be an array in the JSON data but got " + data['FLOW']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['BLUEPRINT'])) {
            throw new Error("Expected the field `BLUEPRINT` to be an array in the JSON data but got " + data['BLUEPRINT']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['TEMPLATE'])) {
            throw new Error("Expected the field `TEMPLATE` to be an array in the JSON data but got " + data['TEMPLATE']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['NAMESPACE'])) {
            throw new Error("Expected the field `NAMESPACE` to be an array in the JSON data but got " + data['NAMESPACE']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['EXECUTION'])) {
            throw new Error("Expected the field `EXECUTION` to be an array in the JSON data but got " + data['EXECUTION']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['USER'])) {
            throw new Error("Expected the field `USER` to be an array in the JSON data but got " + data['USER']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['GROUP'])) {
            throw new Error("Expected the field `GROUP` to be an array in the JSON data but got " + data['GROUP']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['ROLE'])) {
            throw new Error("Expected the field `ROLE` to be an array in the JSON data but got " + data['ROLE']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['BINDING'])) {
            throw new Error("Expected the field `BINDING` to be an array in the JSON data but got " + data['BINDING']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['AUDITLOG'])) {
            throw new Error("Expected the field `AUDITLOG` to be an array in the JSON data but got " + data['AUDITLOG']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['SECRET'])) {
            throw new Error("Expected the field `SECRET` to be an array in the JSON data but got " + data['SECRET']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['KVSTORE'])) {
            throw new Error("Expected the field `KVSTORE` to be an array in the JSON data but got " + data['KVSTORE']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['IMPERSONATE'])) {
            throw new Error("Expected the field `IMPERSONATE` to be an array in the JSON data but got " + data['IMPERSONATE']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['SETTING'])) {
            throw new Error("Expected the field `SETTING` to be an array in the JSON data but got " + data['SETTING']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['INFRASTRUCTURE'])) {
            throw new Error("Expected the field `INFRASTRUCTURE` to be an array in the JSON data but got " + data['INFRASTRUCTURE']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['APP'])) {
            throw new Error("Expected the field `APP` to be an array in the JSON data but got " + data['APP']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['APPEXECUTION'])) {
            throw new Error("Expected the field `APPEXECUTION` to be an array in the JSON data but got " + data['APPEXECUTION']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['TEST'])) {
            throw new Error("Expected the field `TEST` to be an array in the JSON data but got " + data['TEST']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['ME'])) {
            throw new Error("Expected the field `ME` to be an array in the JSON data but got " + data['ME']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['APITOKEN'])) {
            throw new Error("Expected the field `APITOKEN` to be an array in the JSON data but got " + data['APITOKEN']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['DASHBOARD'])) {
            throw new Error("Expected the field `DASHBOARD` to be an array in the JSON data but got " + data['DASHBOARD']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['TENANT'])) {
            throw new Error("Expected the field `TENANT` to be an array in the JSON data but got " + data['TENANT']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['UNKNOWN'])) {
            throw new Error("Expected the field `UNKNOWN` to be an array in the JSON data but got " + data['UNKNOWN']);
        }

        return true;
    }


}



/**
 * @member {Array.<String>} FLOW
 */
RolePermissions.prototype['FLOW'] = undefined;

/**
 * @member {Array.<String>} BLUEPRINT
 */
RolePermissions.prototype['BLUEPRINT'] = undefined;

/**
 * @member {Array.<String>} TEMPLATE
 */
RolePermissions.prototype['TEMPLATE'] = undefined;

/**
 * @member {Array.<String>} NAMESPACE
 */
RolePermissions.prototype['NAMESPACE'] = undefined;

/**
 * @member {Array.<String>} EXECUTION
 */
RolePermissions.prototype['EXECUTION'] = undefined;

/**
 * @member {Array.<String>} USER
 */
RolePermissions.prototype['USER'] = undefined;

/**
 * @member {Array.<String>} GROUP
 */
RolePermissions.prototype['GROUP'] = undefined;

/**
 * @member {Array.<String>} ROLE
 */
RolePermissions.prototype['ROLE'] = undefined;

/**
 * @member {Array.<String>} BINDING
 */
RolePermissions.prototype['BINDING'] = undefined;

/**
 * @member {Array.<String>} AUDITLOG
 */
RolePermissions.prototype['AUDITLOG'] = undefined;

/**
 * @member {Array.<String>} SECRET
 */
RolePermissions.prototype['SECRET'] = undefined;

/**
 * @member {Array.<String>} KVSTORE
 */
RolePermissions.prototype['KVSTORE'] = undefined;

/**
 * @member {Array.<String>} IMPERSONATE
 */
RolePermissions.prototype['IMPERSONATE'] = undefined;

/**
 * @member {Array.<String>} SETTING
 */
RolePermissions.prototype['SETTING'] = undefined;

/**
 * @member {Array.<String>} INFRASTRUCTURE
 */
RolePermissions.prototype['INFRASTRUCTURE'] = undefined;

/**
 * @member {Array.<String>} APP
 */
RolePermissions.prototype['APP'] = undefined;

/**
 * @member {Array.<String>} APPEXECUTION
 */
RolePermissions.prototype['APPEXECUTION'] = undefined;

/**
 * @member {Array.<String>} TEST
 */
RolePermissions.prototype['TEST'] = undefined;

/**
 * @member {Array.<String>} ME
 */
RolePermissions.prototype['ME'] = undefined;

/**
 * @member {Array.<String>} APITOKEN
 */
RolePermissions.prototype['APITOKEN'] = undefined;

/**
 * @member {Array.<String>} DASHBOARD
 */
RolePermissions.prototype['DASHBOARD'] = undefined;

/**
 * @member {Array.<String>} TENANT
 */
RolePermissions.prototype['TENANT'] = undefined;

/**
 * @member {Array.<String>} UNKNOWN
 */
RolePermissions.prototype['UNKNOWN'] = undefined;






export default RolePermissions;

