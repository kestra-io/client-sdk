/**
 * Kestra EE
 * All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ClusterControllerApiServerInstance from './ClusterControllerApiServerInstance';
import ServiceServiceState from './ServiceServiceState';
import ServiceType from './ServiceType';

/**
 * The ClusterControllerApiServiceInstance model module.
 * @module model/ClusterControllerApiServiceInstance
 * @version v1
 */
class ClusterControllerApiServiceInstance {
    /**
     * Constructs a new <code>ClusterControllerApiServiceInstance</code>.
     * @alias module:model/ClusterControllerApiServiceInstance
     */
    constructor() { 
        
        ClusterControllerApiServiceInstance.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ClusterControllerApiServiceInstance</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ClusterControllerApiServiceInstance} obj Optional instance to populate.
     * @return {module:model/ClusterControllerApiServiceInstance} The populated <code>ClusterControllerApiServiceInstance</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ClusterControllerApiServiceInstance();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ServiceType.constructFromObject(data['type']);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ServiceServiceState.constructFromObject(data['state']);
            }
            if (data.hasOwnProperty('server')) {
                obj['server'] = ClusterControllerApiServerInstance.constructFromObject(data['server']);
            }
            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Date');
            }
            if (data.hasOwnProperty('updatedAt')) {
                obj['updatedAt'] = ApiClient.convertToType(data['updatedAt'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ClusterControllerApiServiceInstance</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ClusterControllerApiServiceInstance</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `server`
        if (data['server']) { // data not null
          ClusterControllerApiServerInstance.validateJSON(data['server']);
        }

        return true;
    }


}



/**
 * @member {String} id
 */
ClusterControllerApiServiceInstance.prototype['id'] = undefined;

/**
 * @member {module:model/ServiceType} type
 */
ClusterControllerApiServiceInstance.prototype['type'] = undefined;

/**
 * @member {module:model/ServiceServiceState} state
 */
ClusterControllerApiServiceInstance.prototype['state'] = undefined;

/**
 * @member {module:model/ClusterControllerApiServerInstance} server
 */
ClusterControllerApiServiceInstance.prototype['server'] = undefined;

/**
 * @member {Date} createdAt
 */
ClusterControllerApiServiceInstance.prototype['createdAt'] = undefined;

/**
 * @member {Date} updatedAt
 */
ClusterControllerApiServiceInstance.prototype['updatedAt'] = undefined;






export default ClusterControllerApiServiceInstance;

