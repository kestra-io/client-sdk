/**
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PropertyString model module.
 * @module model/PropertyString
 * @version v1.0.5
 */
class PropertyString {
    /**
     * Constructs a new <code>PropertyString</code>.
     * @alias module:model/PropertyString
     * @param {(module:model/Object|module:model/String)} instance The actual instance to initialize PropertyString.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            this.actualInstance = instance;
            match++;
        } catch(err) {
            // json data failed to deserialize into Object
            errorMessages.push("Failed to construct Object: " + err)
        }

        try {
            // validate string
            if (!(typeof instance === 'string')) {
                throw new Error("Invalid value. Must be string. Input: " + JSON.stringify(instance));
            }
            this.actualInstance = instance;
            match++;
        } catch(err) {
            // json data failed to deserialize into String
            errorMessages.push("Failed to construct String: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `PropertyString` with oneOf schemas Object, String. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `PropertyString` with oneOf schemas Object, String. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>PropertyString</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PropertyString} obj Optional instance to populate.
     * @return {module:model/PropertyString} The populated <code>PropertyString</code> instance.
     */
    static constructFromObject(data, obj) {
        return new PropertyString(data);
    }

    /**
     * Gets the actual instance, which can be <code>Object</code>, <code>String</code>.
     * @return {(module:model/Object|module:model/String)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>Object</code>, <code>String</code>.
     * @param {(module:model/Object|module:model/String)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = PropertyString.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of PropertyString from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/PropertyString} An instance of PropertyString.
     */
    static fromJSON = function(json_string){
        return PropertyString.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * @member {String} expression
 */
PropertyString.prototype['expression'] = undefined;

/**
 * @member {String} value
 */
PropertyString.prototype['value'] = undefined;


PropertyString.OneOf = ["Object", "String"];

export default PropertyString;

