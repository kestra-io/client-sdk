/**
 * Kestra EE
 * All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Group from './Group';
import IdentityProvider from './IdentityProvider';

/**
 * The AbstractGroupControllerGroupWithMembers model module.
 * @module model/AbstractGroupControllerGroupWithMembers
 * @version v1
 */
class AbstractGroupControllerGroupWithMembers {
    /**
     * Constructs a new <code>AbstractGroupControllerGroupWithMembers</code>.
     * @alias module:model/AbstractGroupControllerGroupWithMembers
     * @implements module:model/Group
     * @param name {String} 
     * @param deleted {Boolean} 
     */
    constructor(name, deleted) { 
        Group.initialize(this, name, deleted);
        AbstractGroupControllerGroupWithMembers.initialize(this, name, deleted);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, deleted) { 
        obj['name'] = name;
        obj['deleted'] = deleted;
    }

    /**
     * Constructs a <code>AbstractGroupControllerGroupWithMembers</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AbstractGroupControllerGroupWithMembers} obj Optional instance to populate.
     * @return {module:model/AbstractGroupControllerGroupWithMembers} The populated <code>AbstractGroupControllerGroupWithMembers</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AbstractGroupControllerGroupWithMembers();
            Group.constructFromObject(data, obj);

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('deleted')) {
                obj['deleted'] = ApiClient.convertToType(data['deleted'], 'Boolean');
            }
            if (data.hasOwnProperty('provider')) {
                obj['provider'] = IdentityProvider.constructFromObject(data['provider']);
            }
            if (data.hasOwnProperty('membersId')) {
                obj['membersId'] = ApiClient.convertToType(data['membersId'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AbstractGroupControllerGroupWithMembers</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AbstractGroupControllerGroupWithMembers</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AbstractGroupControllerGroupWithMembers.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `provider`
        if (data['provider']) { // data not null
          IdentityProvider.validateJSON(data['provider']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['membersId'])) {
            throw new Error("Expected the field `membersId` to be an array in the JSON data but got " + data['membersId']);
        }

        return true;
    }


}

AbstractGroupControllerGroupWithMembers.RequiredProperties = ["name", "deleted"];

/**
 * @member {String} id
 */
AbstractGroupControllerGroupWithMembers.prototype['id'] = undefined;

/**
 * @member {String} name
 */
AbstractGroupControllerGroupWithMembers.prototype['name'] = undefined;

/**
 * @member {String} description
 */
AbstractGroupControllerGroupWithMembers.prototype['description'] = undefined;

/**
 * @member {Boolean} deleted
 */
AbstractGroupControllerGroupWithMembers.prototype['deleted'] = undefined;

/**
 * @member {module:model/IdentityProvider} provider
 */
AbstractGroupControllerGroupWithMembers.prototype['provider'] = undefined;

/**
 * @member {Array.<String>} membersId
 */
AbstractGroupControllerGroupWithMembers.prototype['membersId'] = undefined;


// Implement Group interface:
/**
 * @member {String} id
 */
Group.prototype['id'] = undefined;
/**
 * @member {String} name
 */
Group.prototype['name'] = undefined;
/**
 * @member {String} description
 */
Group.prototype['description'] = undefined;
/**
 * @member {Boolean} deleted
 */
Group.prototype['deleted'] = undefined;
/**
 * @member {module:model/IdentityProvider} provider
 */
Group.prototype['provider'] = undefined;




export default AbstractGroupControllerGroupWithMembers;

