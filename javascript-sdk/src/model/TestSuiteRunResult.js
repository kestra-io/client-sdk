/**
 * Kestra EE
 * All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TestState from './TestState';
import UnitTestResult from './UnitTestResult';

/**
 * The TestSuiteRunResult model module.
 * @module model/TestSuiteRunResult
 * @version v1
 */
class TestSuiteRunResult {
    /**
     * Constructs a new <code>TestSuiteRunResult</code>.
     * @alias module:model/TestSuiteRunResult
     */
    constructor() { 
        
        TestSuiteRunResult.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TestSuiteRunResult</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TestSuiteRunResult} obj Optional instance to populate.
     * @return {module:model/TestSuiteRunResult} The populated <code>TestSuiteRunResult</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TestSuiteRunResult();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('testSuiteId')) {
                obj['testSuiteId'] = ApiClient.convertToType(data['testSuiteId'], 'String');
            }
            if (data.hasOwnProperty('namespace')) {
                obj['namespace'] = ApiClient.convertToType(data['namespace'], 'String');
            }
            if (data.hasOwnProperty('flowId')) {
                obj['flowId'] = ApiClient.convertToType(data['flowId'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = TestState.constructFromObject(data['state']);
            }
            if (data.hasOwnProperty('results')) {
                obj['results'] = ApiClient.convertToType(data['results'], [UnitTestResult]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TestSuiteRunResult</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TestSuiteRunResult</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['testSuiteId'] && !(typeof data['testSuiteId'] === 'string' || data['testSuiteId'] instanceof String)) {
            throw new Error("Expected the field `testSuiteId` to be a primitive type in the JSON string but got " + data['testSuiteId']);
        }
        // ensure the json data is a string
        if (data['namespace'] && !(typeof data['namespace'] === 'string' || data['namespace'] instanceof String)) {
            throw new Error("Expected the field `namespace` to be a primitive type in the JSON string but got " + data['namespace']);
        }
        // ensure the json data is a string
        if (data['flowId'] && !(typeof data['flowId'] === 'string' || data['flowId'] instanceof String)) {
            throw new Error("Expected the field `flowId` to be a primitive type in the JSON string but got " + data['flowId']);
        }
        if (data['results']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['results'])) {
                throw new Error("Expected the field `results` to be an array in the JSON data but got " + data['results']);
            }
            // validate the optional field `results` (array)
            for (const item of data['results']) {
                UnitTestResult.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {String} id
 */
TestSuiteRunResult.prototype['id'] = undefined;

/**
 * @member {String} testSuiteId
 */
TestSuiteRunResult.prototype['testSuiteId'] = undefined;

/**
 * @member {String} namespace
 */
TestSuiteRunResult.prototype['namespace'] = undefined;

/**
 * @member {String} flowId
 */
TestSuiteRunResult.prototype['flowId'] = undefined;

/**
 * @member {module:model/TestState} state
 */
TestSuiteRunResult.prototype['state'] = undefined;

/**
 * @member {Array.<module:model/UnitTestResult>} results
 */
TestSuiteRunResult.prototype['results'] = undefined;






export default TestSuiteRunResult;

