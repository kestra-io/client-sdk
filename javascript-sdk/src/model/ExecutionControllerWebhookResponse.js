/**
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ExecutionTrigger from './ExecutionTrigger';
import Label from './Label';
import State from './State';

/**
 * The ExecutionControllerWebhookResponse model module.
 * @module model/ExecutionControllerWebhookResponse
 * @version v1.0.4
 */
class ExecutionControllerWebhookResponse {
    /**
     * Constructs a new <code>ExecutionControllerWebhookResponse</code>.
     * @alias module:model/ExecutionControllerWebhookResponse
     */
    constructor() { 
        
        ExecutionControllerWebhookResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ExecutionControllerWebhookResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ExecutionControllerWebhookResponse} obj Optional instance to populate.
     * @return {module:model/ExecutionControllerWebhookResponse} The populated <code>ExecutionControllerWebhookResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ExecutionControllerWebhookResponse();

            if (data.hasOwnProperty('tenantId')) {
                obj['tenantId'] = ApiClient.convertToType(data['tenantId'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('namespace')) {
                obj['namespace'] = ApiClient.convertToType(data['namespace'], 'String');
            }
            if (data.hasOwnProperty('flowId')) {
                obj['flowId'] = ApiClient.convertToType(data['flowId'], 'String');
            }
            if (data.hasOwnProperty('flowRevision')) {
                obj['flowRevision'] = ApiClient.convertToType(data['flowRevision'], 'Number');
            }
            if (data.hasOwnProperty('trigger')) {
                obj['trigger'] = ExecutionTrigger.constructFromObject(data['trigger']);
            }
            if (data.hasOwnProperty('outputs')) {
                obj['outputs'] = ApiClient.convertToType(data['outputs'], {'String': Object});
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], [Label]);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = State.constructFromObject(data['state']);
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ExecutionControllerWebhookResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ExecutionControllerWebhookResponse</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['tenantId'] && !(typeof data['tenantId'] === 'string' || data['tenantId'] instanceof String)) {
            throw new Error("Expected the field `tenantId` to be a primitive type in the JSON string but got " + data['tenantId']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['namespace'] && !(typeof data['namespace'] === 'string' || data['namespace'] instanceof String)) {
            throw new Error("Expected the field `namespace` to be a primitive type in the JSON string but got " + data['namespace']);
        }
        // ensure the json data is a string
        if (data['flowId'] && !(typeof data['flowId'] === 'string' || data['flowId'] instanceof String)) {
            throw new Error("Expected the field `flowId` to be a primitive type in the JSON string but got " + data['flowId']);
        }
        // validate the optional field `trigger`
        if (data['trigger']) { // data not null
          ExecutionTrigger.validateJSON(data['trigger']);
        }
        if (data['labels']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['labels'])) {
                throw new Error("Expected the field `labels` to be an array in the JSON data but got " + data['labels']);
            }
            // validate the optional field `labels` (array)
            for (const item of data['labels']) {
                Label.validateJSON(item);
            };
        }
        // validate the optional field `state`
        if (data['state']) { // data not null
          State.validateJSON(data['state']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}



/**
 * @member {String} tenantId
 */
ExecutionControllerWebhookResponse.prototype['tenantId'] = undefined;

/**
 * @member {String} id
 */
ExecutionControllerWebhookResponse.prototype['id'] = undefined;

/**
 * @member {String} namespace
 */
ExecutionControllerWebhookResponse.prototype['namespace'] = undefined;

/**
 * @member {String} flowId
 */
ExecutionControllerWebhookResponse.prototype['flowId'] = undefined;

/**
 * @member {Number} flowRevision
 */
ExecutionControllerWebhookResponse.prototype['flowRevision'] = undefined;

/**
 * @member {module:model/ExecutionTrigger} trigger
 */
ExecutionControllerWebhookResponse.prototype['trigger'] = undefined;

/**
 * @member {Object.<String, Object>} outputs
 */
ExecutionControllerWebhookResponse.prototype['outputs'] = undefined;

/**
 * @member {Array.<module:model/Label>} labels
 */
ExecutionControllerWebhookResponse.prototype['labels'] = undefined;

/**
 * @member {module:model/State} state
 */
ExecutionControllerWebhookResponse.prototype['state'] = undefined;

/**
 * @member {String} url
 */
ExecutionControllerWebhookResponse.prototype['url'] = undefined;






export default ExecutionControllerWebhookResponse;

