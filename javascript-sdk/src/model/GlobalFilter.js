/**
 * Kestra EE
 * All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import QueryFilter from './QueryFilter';

/**
 * The GlobalFilter model module.
 * @module model/GlobalFilter
 * @version v1
 */
class GlobalFilter {
    /**
     * Constructs a new <code>GlobalFilter</code>.
     * @alias module:model/GlobalFilter
     */
    constructor() { 
        
        GlobalFilter.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GlobalFilter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GlobalFilter} obj Optional instance to populate.
     * @return {module:model/GlobalFilter} The populated <code>GlobalFilter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GlobalFilter();

            if (data.hasOwnProperty('startDate')) {
                obj['startDate'] = ApiClient.convertToType(data['startDate'], 'Date');
            }
            if (data.hasOwnProperty('endDate')) {
                obj['endDate'] = ApiClient.convertToType(data['endDate'], 'Date');
            }
            if (data.hasOwnProperty('pageSize')) {
                obj['pageSize'] = ApiClient.convertToType(data['pageSize'], 'Number');
            }
            if (data.hasOwnProperty('pageNumber')) {
                obj['pageNumber'] = ApiClient.convertToType(data['pageNumber'], 'Number');
            }
            if (data.hasOwnProperty('namespace')) {
                obj['namespace'] = ApiClient.convertToType(data['namespace'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('filters')) {
                obj['filters'] = ApiClient.convertToType(data['filters'], [QueryFilter]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GlobalFilter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GlobalFilter</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['namespace'] && !(typeof data['namespace'] === 'string' || data['namespace'] instanceof String)) {
            throw new Error("Expected the field `namespace` to be a primitive type in the JSON string but got " + data['namespace']);
        }
        if (data['filters']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['filters'])) {
                throw new Error("Expected the field `filters` to be an array in the JSON data but got " + data['filters']);
            }
            // validate the optional field `filters` (array)
            for (const item of data['filters']) {
                QueryFilter.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {Date} startDate
 */
GlobalFilter.prototype['startDate'] = undefined;

/**
 * @member {Date} endDate
 */
GlobalFilter.prototype['endDate'] = undefined;

/**
 * @member {Number} pageSize
 */
GlobalFilter.prototype['pageSize'] = undefined;

/**
 * @member {Number} pageNumber
 */
GlobalFilter.prototype['pageNumber'] = undefined;

/**
 * @member {String} namespace
 */
GlobalFilter.prototype['namespace'] = undefined;

/**
 * @member {Object.<String, String>} labels
 */
GlobalFilter.prototype['labels'] = undefined;

/**
 * @member {Array.<module:model/QueryFilter>} filters
 */
GlobalFilter.prototype['filters'] = undefined;






export default GlobalFilter;

