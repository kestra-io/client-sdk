{{>licenseInfo}}
package {{package}};

// Custom imports for injected code
import java.io.IOException;
import java.io.InputStreamReader;
import java.nio.charset.StandardCharsets;
import reactor.core.publisher.Flux;
import java.io.BufferedReader;

import com.fasterxml.jackson.core.type.TypeReference;

import {{invokerPackage}}.ApiException;
import {{invokerPackage}}.ApiClient;
import {{invokerPackage}}.BaseApi;
import {{invokerPackage}}.Configuration;
{{#models.0}}
import {{modelPackage}}.*;
{{/models.0}}
import {{invokerPackage}}.Pair;

{{#imports}}import {{import}};
{{/imports}}


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

{{#useBeanValidation}}
import {{javaxPackage}}.validation.constraints.*;
import {{javaxPackage}}.validation.Valid;

{{/useBeanValidation}}
{{>generatedAnnotation}}
{{#operations}}
public class {{classname}} extends BaseApi {

  public {{classname}}() {
    super(Configuration.getDefaultApiClient());
  }

  public {{classname}}(ApiClient apiClient) {
    super(apiClient);
  }

  {{#operation}}
  {{^vendorExtensions.x-sdk-customization.x-skipped}}
  /**
   * {{summary}}
   * {{notes}}
   {{#allParams}}
   * @param {{paramName}} {{description}}{{#required}} (required){{/required}}{{^required}} (optional{{^isContainer}}{{#defaultValue}}, default to {{.}}{{/defaultValue}}{{/isContainer}}){{/required}}
   {{/allParams}}
   {{#returnType}}
   * @return {{returnType}}
   {{/returnType}}
   * @throws ApiException if fails to make API call
   {{#isDeprecated}}
   * @deprecated
   {{/isDeprecated}}
   {{#externalDocs}}
   * {{description}}
   * @see <a href="{{url}}">{{summary}} Documentation</a>
   {{/externalDocs}}
   */
  {{#isDeprecated}}
  @Deprecated
  {{/isDeprecated}}
  public {{#returnType}}{{{returnType}}} {{/returnType}}{{^returnType}}void {{/returnType}}{{operationId}}({{#allParams}}{{>nullable_var_annotations}} {{{dataType}}} {{paramName}}{{^-last}}, {{/-last}}{{/allParams}}) throws ApiException {
    {{#returnType}}return {{/returnType}}this.{{operationId}}({{#allParams}}{{paramName}}, {{/allParams}}Collections.emptyMap(), null);
  }

  public {{#returnType}}{{{returnType}}} {{/returnType}}{{^returnType}}void {{/returnType}}{{operationId}}({{#allParams}}{{>nullable_var_annotations}} {{{dataType}}} {{paramName}}{{^-last}}, {{/-last}}{{/allParams}}, HashMap<String, Object> formDatas)  throws ApiException {
  {{#returnType}}return {{/returnType}}this.{{operationId}}({{#allParams}}{{paramName}}, {{/allParams}}Collections.emptyMap(), formDatas);
  }

  /**
   * {{summary}}
   * {{notes}}
   {{#allParams}}
   * @param {{paramName}} {{description}}{{#required}} (required){{/required}}{{^required}} (optional{{^isContainer}}{{#defaultValue}}, default to {{.}}{{/defaultValue}}{{/isContainer}}){{/required}}
   {{/allParams}}
   * @param additionalHeaders additionalHeaders for this call
   {{#returnType}}
   * @return {{returnType}}
   {{/returnType}}
   * @throws ApiException if fails to make API call
   {{#isDeprecated}}
   * @deprecated
   {{/isDeprecated}}
   {{#externalDocs}}
   * {{description}}
   * @see <a href="{{url}}">{{summary}} Documentation</a>
   {{/externalDocs}}
   */
  {{#isDeprecated}}
  @Deprecated
  {{/isDeprecated}}
  public {{#returnType}}{{{returnType}}} {{/returnType}}{{^returnType}}void {{/returnType}}{{operationId}}({{#allParams}}{{>nullable_var_annotations}} {{{dataType}}} {{paramName}}, {{/allParams}}Map<String, String> additionalHeaders, HashMap<String, Object> formDatas) throws ApiException {
    Object localVarPostBody = {{#bodyParam}}{{paramName}}{{/bodyParam}}{{^bodyParam}}null{{/bodyParam}};
    {{#allParams}}{{#required}}
    // verify the required parameter '{{paramName}}' is set
    if ({{paramName}} == null) {
      throw new ApiException(400, "Missing the required parameter '{{paramName}}' when calling {{operationId}}");
    }
    {{/required}}{{/allParams}}
    // create path and map variables
    String localVarPath = "{{{path}}}"{{#pathParams}}
      .replaceAll("\\{" + "{{baseName}}" + "\\}", apiClient.escapeString(apiClient.parameterToString({{{paramName}}}))){{/pathParams}};

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = formDatas != null ? new HashMap<String, Object>(formDatas) : new HashMap<String, Object>();

    {{#queryParams}}
        {{#isDeepObject}}
    localVarQueryParameterBaseName = "{{{baseName}}}";
          {{#isArray}}
    for (int i=0; i < {{paramName}}.size(); i++) {
      localVarQueryStringJoiner.add({{paramName}}.get(i).toUrlQueryString(String.format("{{baseName}}[%d]", i)));
    }
          {{/isArray}}
          {{^isArray}}
    localVarQueryStringJoiner.add({{paramName}}.toUrlQueryString("{{baseName}}"));
          {{/isArray}}
        {{/isDeepObject}}
        {{^isDeepObject}}
            {{#isExplode}}
                {{#hasVars}}
                    {{#vars}}
                        {{#isArray}}
    localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "{{baseName}}", {{paramName}}.{{getter}}()));
                        {{/isArray}}
                        {{^isArray}}
    localVarQueryParams.addAll(apiClient.parameterToPair("{{baseName}}", {{paramName}}.{{getter}}()));
                        {{/isArray}}
                    {{/vars}}
                {{/hasVars}}
                {{^hasVars}}
                {{#isModel}}
    localVarQueryStringJoiner.add({{paramName}}.toUrlQueryString());
                {{/isModel}}
                {{^isModel}}
    {{#collectionFormat}}localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("{{{collectionFormat}}}", {{/collectionFormat}}{{^collectionFormat}}localVarQueryParams.addAll(apiClient.parameterToPair({{/collectionFormat}}"{{baseName}}", {{paramName}}));
                {{/isModel}}
                {{/hasVars}}
            {{/isExplode}}
            {{^isExplode}}
    {{#collectionFormat}}localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("{{{collectionFormat}}}", {{/collectionFormat}}{{^collectionFormat}}localVarQueryParams.addAll(apiClient.parameterToPair({{/collectionFormat}}"{{baseName}}", {{paramName}}));
            {{/isExplode}}
        {{/isDeepObject}}
    {{/queryParams}}
    {{#headerParams}}if ({{paramName}} != null)
      localVarHeaderParams.put("{{baseName}}", apiClient.parameterToString({{paramName}}));
    {{/headerParams}}

    localVarHeaderParams.putAll(additionalHeaders);

    {{#cookieParams}}if ({{paramName}} != null)
      localVarCookieParams.put("{{baseName}}", apiClient.parameterToString({{paramName}}));
    {{/cookieParams}}

    {{#formParams}}if ({{paramName}} != null)
      localVarFormParams.put("{{baseName}}", {{paramName}});
    {{/formParams}}

    final String[] localVarAccepts = {
      {{#produces}}"{{{mediaType}}}"{{^-last}}, {{/-last}}{{/produces}}
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      {{#consumes}}"{{{mediaType}}}"{{^-last}}, {{/-last}}{{/consumes}}
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { {{#authMethods}}"{{name}}"{{^-last}}, {{/-last}}{{/authMethods}} };

    {{#returnType}}
    TypeReference<{{{returnType}}}> localVarReturnType = new TypeReference<{{{returnType}}}>() {};
    return apiClient.invokeAPI(
    {{/returnType}}
    {{^returnType}}
    apiClient.invokeAPI(
    {{/returnType}}
        localVarPath,
        "{{httpMethod}}",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        {{#returnType}}localVarReturnType{{/returnType}}{{^returnType}}null{{/returnType}}
    );
  }

  {{#-last}}
  @Override
  public <T> T invokeAPI(String url, String method, Object request, TypeReference<T> returnType, Map<String, String> additionalHeaders) throws ApiException {
    String localVarPath = url.replace(apiClient.getBaseURL(), "");
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarHeaderParams.putAll(additionalHeaders);

    final String[] localVarAccepts = {
      {{#produces}}"{{{mediaType}}}"{{^-last}}, {{/-last}}{{/produces}}
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      {{#consumes}}"{{{mediaType}}}"{{^-last}}, {{/-last}}{{/consumes}}
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { {{#authMethods}}"{{name}}"{{^-last}}, {{/-last}}{{/authMethods}} };

    return apiClient.invokeAPI(
      localVarPath,
        method,
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        request,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        returnType
    );
  }
  {{/-last}}

  {{/vendorExtensions.x-sdk-customization.x-skipped}}


  {{#vendorExtensions.x-sdk-customization.x-replace-follow-execution}}
  public Flux<Execution> followExecution(@javax.annotation.Nonnull String executionId, @javax.annotation.Nonnull String tenant) throws ApiException {
    return Flux.create(sink -> {
      org.apache.hc.client5.http.impl.classic.CloseableHttpResponse response = null;
      BufferedReader reader = null;

      try {
        response = _followExecutions(executionId, tenant, Collections.emptyMap());
        java.io.InputStream is = response.getEntity().getContent();
        reader = new BufferedReader(new InputStreamReader(is, StandardCharsets.UTF_8));

        String line;
        StringBuilder dataBuffer = new StringBuilder();

        while (!sink.isCancelled() && (line = reader.readLine()) != null) {
          if (line.isEmpty()) {
            if (dataBuffer.length() > 0) {
              String data = dataBuffer.toString();
              dataBuffer.setLength(0);

              try {
                Execution ev = apiClient.getObjectMapper().readValue(data, Execution.class);
                sink.next(ev);
              } catch (Exception e) {
                sink.error(new ApiException(e));
                return;
              }
            }
            continue;
          }

          if (line.startsWith("data:")) {
            String payload = line.substring(5);
            if (payload.startsWith(" ")) payload = payload.substring(1);
            dataBuffer.append(payload).append('\n');
          }
        }

        if (dataBuffer.length() > 0) {
          String data = dataBuffer.toString();
          try {
            Execution ev = apiClient.getObjectMapper().readValue(data, Execution.class);
            sink.next(ev);
          } catch (Exception e) {
            sink.error(new ApiException(e));
            return;
          }
        }

        sink.complete();

      } catch (IOException e) {
        if (!sink.isCancelled()) {
          System.err.println("Stream connection closed or error occurred: " + e.getMessage());
          sink.error(new ApiException(e));
        }
      } catch (ApiException e) {
        sink.error(e);
      } finally {
        try {
          if (reader != null) reader.close();
          if (response != null) response.close();
        } catch (IOException cleanupException) {
          System.err.println("Error during stream cleanup: " + cleanupException.getMessage());
        }
      }
    });
  }

  private org.apache.hc.client5.http.impl.classic.CloseableHttpResponse _followExecutions(@javax.annotation.Nonnull String executionId, @javax.annotation.Nonnull String tenant, Map<String, String> additionalHeaders) throws ApiException {
    if (executionId == null) {
      throw new ApiException(400, "Missing the required parameter 'executionId' when calling _followExecutions");
    }
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling _followExecutions");
    }

    String localVarPath = "/api/v1/{tenant}/executions/{executionId}/follow"
            .replaceAll("\\{" + "executionId" + "\\}", apiClient.escapeString(apiClient.parameterToString(executionId)))
            .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    List<Pair> localVarQueryParams = new ArrayList<>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    Map<String, String> localVarHeaderParams = new HashMap<>();
    Map<String, String> localVarCookieParams = new HashMap<>();

    if (additionalHeaders != null) {
      localVarHeaderParams.putAll(additionalHeaders);
    }

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    return apiClient.openEventStream(
            localVarPath,
            localVarQueryParams,
            localVarCollectionQueryParams,
            localVarQueryStringJoiner.toString(),
            localVarHeaderParams,
            localVarCookieParams,
            localVarAuthNames
    );
  }
  {{/vendorExtensions.x-sdk-customization.x-replace-follow-execution}}


  {{#vendorExtensions.x-sdk-customization.x-replace-follow-dependencies-execution}}
  public Flux<Execution> followDependenciesExecution(@javax.annotation.Nonnull String executionId, @javax.annotation.Nonnull String tenant, boolean destinationOnly, boolean expandAll) throws ApiException {
    return Flux.create(sink -> {
      org.apache.hc.client5.http.impl.classic.CloseableHttpResponse response = null;
      BufferedReader reader = null;

      try {
        response = _followDependenciesExecutions(executionId, tenant, Collections.emptyMap(), destinationOnly, expandAll);
        java.io.InputStream is = response.getEntity().getContent();
        reader = new BufferedReader(new InputStreamReader(is, StandardCharsets.UTF_8));

        String line;
        StringBuilder dataBuffer = new StringBuilder();

        while (!sink.isCancelled() && (line = reader.readLine()) != null) {
          if (line.isEmpty()) {
            if (dataBuffer.length() > 0) {
              String data = dataBuffer.toString();
              dataBuffer.setLength(0);

              try {
                Execution ev = apiClient.getObjectMapper().readValue(data, Execution.class);
                sink.next(ev);
              } catch (Exception e) {
                sink.error(new ApiException(e));
                return;
              }
            }
            continue;
          }

          if (line.startsWith("data:")) {
            String payload = line.substring(5);
            if (payload.startsWith(" ")) payload = payload.substring(1);
            dataBuffer.append(payload).append('\n');
          }
        }

        if (dataBuffer.length() > 0) {
          String data = dataBuffer.toString();
          try {
            Execution ev = apiClient.getObjectMapper().readValue(data, Execution.class);
            sink.next(ev);
          } catch (Exception e) {
            sink.error(new ApiException(e));
            return;
          }
        }

        sink.complete();

      } catch (IOException e) {
        if (!sink.isCancelled()) {
          System.err.println("Stream connection closed or error occurred: " + e.getMessage());
          sink.error(new ApiException(e));
        }
      } catch (ApiException e) {
        sink.error(e);
      } finally {
        try {
          if (reader != null) reader.close();
          if (response != null) response.close();
        } catch (IOException cleanupException) {
          System.err.println("Error during stream cleanup: " + cleanupException.getMessage());
        }
      }
    });
  }

  private org.apache.hc.client5.http.impl.classic.CloseableHttpResponse _followDependenciesExecutions(@javax.annotation.Nonnull String executionId, @javax.annotation.Nonnull String tenant, Map<String, String> additionalHeaders, boolean destinationOnly, boolean expandAll) throws ApiException {
    if (executionId == null) {
      throw new ApiException(400, "Missing the required parameter 'executionId' when calling _followDependenciesExecutions");
    }
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling _followDependenciesExecutions");
    }

    String localVarPath = "/api/v1/{tenant}/executions/{executionId}/follow-dependencies"
            .replaceAll("\\{" + "executionId" + "\\}", apiClient.escapeString(apiClient.parameterToString(executionId)))
            .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    List<Pair> localVarQueryParams = new ArrayList<>();
    if (destinationOnly != false) {
      localVarQueryParams.addAll(apiClient.parameterToPair("destinationOnly", destinationOnly));
    }
    if (expandAll != false) {
      localVarQueryParams.addAll(apiClient.parameterToPair("expandAll", expandAll));
    }
    List<Pair> localVarCollectionQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    Map<String, String> localVarHeaderParams = new HashMap<>();
    Map<String, String> localVarCookieParams = new HashMap<>();

    if (additionalHeaders != null) {
      localVarHeaderParams.putAll(additionalHeaders);
    }

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    return apiClient.openEventStream(
            localVarPath,
            localVarQueryParams,
            localVarCollectionQueryParams,
            localVarQueryStringJoiner.toString(),
            localVarHeaderParams,
            localVarCookieParams,
            localVarAuthNames
    );
  }
  {{/vendorExtensions.x-sdk-customization.x-replace-follow-dependencies-execution}}
  {{/operation}}
}
{{/operations}}
