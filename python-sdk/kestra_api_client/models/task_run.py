# coding: utf-8

"""
    Kestra EE

    All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from kestra_api_client.models.state import State
from kestra_api_client.models.task_run_attempt import TaskRunAttempt
from typing import Optional, Set
from typing_extensions import Self

class TaskRun(BaseModel):
    """
    TaskRun
    """ # noqa: E501
    items: Optional[StrictStr] = None
    id: StrictStr
    execution_id: StrictStr = Field(alias="executionId")
    namespace: StrictStr
    flow_id: StrictStr = Field(alias="flowId")
    task_id: StrictStr = Field(alias="taskId")
    parent_task_run_id: Optional[StrictStr] = Field(default=None, alias="parentTaskRunId")
    value: Optional[StrictStr] = None
    attempts: Optional[List[TaskRunAttempt]] = None
    outputs: Optional[Dict[str, Dict[str, Any]]] = None
    state: State
    iteration: Optional[StrictInt] = None
    dynamic: Optional[StrictBool] = None
    __properties: ClassVar[List[str]] = ["items", "id", "executionId", "namespace", "flowId", "taskId", "parentTaskRunId", "value", "attempts", "outputs", "state", "iteration", "dynamic"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TaskRun from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in attempts (list)
        _items = []
        if self.attempts:
            for _item_attempts in self.attempts:
                if _item_attempts:
                    _items.append(_item_attempts.to_dict())
            _dict['attempts'] = _items
        # override the default output from pydantic by calling `to_dict()` of state
        if self.state:
            _dict['state'] = self.state.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TaskRun from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "items": obj.get("items"),
            "id": obj.get("id"),
            "executionId": obj.get("executionId"),
            "namespace": obj.get("namespace"),
            "flowId": obj.get("flowId"),
            "taskId": obj.get("taskId"),
            "parentTaskRunId": obj.get("parentTaskRunId"),
            "value": obj.get("value"),
            "attempts": [TaskRunAttempt.from_dict(_item) for _item in obj["attempts"]] if obj.get("attempts") is not None else None,
            "outputs": obj.get("outputs"),
            "state": State.from_dict(obj["state"]) if obj.get("state") is not None else None,
            "iteration": obj.get("iteration"),
            "dynamic": obj.get("dynamic")
        })
        return _obj


