# coding: utf-8

"""
    Kestra EE

    All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from kestra_api_client.models.attribute_reference import AttributeReference
from kestra_api_client.models.filter import Filter
from kestra_api_client.models.page_request import PageRequest
from kestra_api_client.models.sort_order import SortOrder
from kestra_api_client.models.sort_request import SortRequest
from typing import Optional, Set
from typing_extensions import Self

class SearchRequest(BaseModel):
    """
    SearchRequest
    """ # noqa: E501
    schemas: Optional[Annotated[List[StrictStr], Field(min_length=1)]] = None
    page_request: Optional[PageRequest] = Field(default=None, alias="pageRequest")
    sort_request: Optional[SortRequest] = Field(default=None, alias="sortRequest")
    attributes: Optional[List[AttributeReference]] = None
    excluded_attributes: Optional[List[AttributeReference]] = Field(default=None, alias="excludedAttributes")
    filter: Optional[Filter] = None
    sort_by: Optional[AttributeReference] = Field(default=None, alias="sortBy")
    sort_order: Optional[SortOrder] = Field(default=None, alias="sortOrder")
    start_index: Optional[StrictInt] = Field(default=None, alias="startIndex")
    count: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["schemas", "pageRequest", "sortRequest", "attributes", "excludedAttributes", "filter", "sortBy", "sortOrder", "startIndex", "count"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SearchRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of page_request
        if self.page_request:
            _dict['pageRequest'] = self.page_request.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sort_request
        if self.sort_request:
            _dict['sortRequest'] = self.sort_request.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in attributes (list)
        _items = []
        if self.attributes:
            for _item_attributes in self.attributes:
                if _item_attributes:
                    _items.append(_item_attributes.to_dict())
            _dict['attributes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in excluded_attributes (list)
        _items = []
        if self.excluded_attributes:
            for _item_excluded_attributes in self.excluded_attributes:
                if _item_excluded_attributes:
                    _items.append(_item_excluded_attributes.to_dict())
            _dict['excludedAttributes'] = _items
        # override the default output from pydantic by calling `to_dict()` of filter
        if self.filter:
            _dict['filter'] = self.filter.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sort_by
        if self.sort_by:
            _dict['sortBy'] = self.sort_by.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SearchRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "schemas": obj.get("schemas"),
            "pageRequest": PageRequest.from_dict(obj["pageRequest"]) if obj.get("pageRequest") is not None else None,
            "sortRequest": SortRequest.from_dict(obj["sortRequest"]) if obj.get("sortRequest") is not None else None,
            "attributes": [AttributeReference.from_dict(_item) for _item in obj["attributes"]] if obj.get("attributes") is not None else None,
            "excludedAttributes": [AttributeReference.from_dict(_item) for _item in obj["excludedAttributes"]] if obj.get("excludedAttributes") is not None else None,
            "filter": Filter.from_dict(obj["filter"]) if obj.get("filter") is not None else None,
            "sortBy": AttributeReference.from_dict(obj["sortBy"]) if obj.get("sortBy") is not None else None,
            "sortOrder": obj.get("sortOrder"),
            "startIndex": obj.get("startIndex"),
            "count": obj.get("count")
        })
        return _obj


