# coding: utf-8

"""
    Kestra EE

    All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from kestra_api_client.models.execution_kind import ExecutionKind
from typing import Optional, Set
from typing_extensions import Self

class MetricEntry(BaseModel):
    """
    MetricEntry
    """ # noqa: E501
    namespace: StrictStr
    flow_id: StrictStr = Field(alias="flowId")
    task_id: Optional[StrictStr] = Field(default=None, alias="taskId")
    execution_id: Optional[StrictStr] = Field(default=None, alias="executionId")
    task_run_id: Optional[StrictStr] = Field(default=None, alias="taskRunId")
    type: StrictStr
    name: StrictStr
    value: Union[StrictFloat, StrictInt]
    timestamp: datetime
    tags: Optional[Dict[str, StrictStr]] = None
    deleted: StrictBool
    execution_kind: Optional[ExecutionKind] = Field(default=None, alias="executionKind")
    __properties: ClassVar[List[str]] = ["namespace", "flowId", "taskId", "executionId", "taskRunId", "type", "name", "value", "timestamp", "tags", "deleted", "executionKind"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MetricEntry from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if task_id (nullable) is None
        # and model_fields_set contains the field
        if self.task_id is None and "task_id" in self.model_fields_set:
            _dict['taskId'] = None

        # set to None if execution_id (nullable) is None
        # and model_fields_set contains the field
        if self.execution_id is None and "execution_id" in self.model_fields_set:
            _dict['executionId'] = None

        # set to None if task_run_id (nullable) is None
        # and model_fields_set contains the field
        if self.task_run_id is None and "task_run_id" in self.model_fields_set:
            _dict['taskRunId'] = None

        # set to None if tags (nullable) is None
        # and model_fields_set contains the field
        if self.tags is None and "tags" in self.model_fields_set:
            _dict['tags'] = None

        # set to None if execution_kind (nullable) is None
        # and model_fields_set contains the field
        if self.execution_kind is None and "execution_kind" in self.model_fields_set:
            _dict['executionKind'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MetricEntry from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "namespace": obj.get("namespace"),
            "flowId": obj.get("flowId"),
            "taskId": obj.get("taskId"),
            "executionId": obj.get("executionId"),
            "taskRunId": obj.get("taskRunId"),
            "type": obj.get("type"),
            "name": obj.get("name"),
            "value": obj.get("value"),
            "timestamp": obj.get("timestamp"),
            "tags": obj.get("tags"),
            "deleted": obj.get("deleted"),
            "executionKind": obj.get("executionKind")
        })
        return _obj


