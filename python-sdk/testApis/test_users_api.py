# coding: utf-8

"""
    Kestra EE

    All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
from kestrapy import Configuration, KestraClient, IAMUserControllerApiCreateOrUpdateUserRequest, IAMTenantAccessControllerUserApiAutocomplete, CreateApiTokenRequest, ApiIds, MeControllerApiUpdatePasswordRequest, IAMUserControllerApiPatchRestrictedRequest, ApiPatchSuperAdminRequest, IAMUserGroupControllerApiUpdateUserGroupsRequest


class TestUsersApi(unittest.TestCase):
    """UsersApi unit test stubs"""

    def setUp(self) -> None:
        configuration = Configuration()
        configuration.host = "http://localhost:8080"
        configuration.username = "root@root.com"
        configuration.password = "Root!1234"

        self.kestra_client = KestraClient(configuration)
        # tenant used for tenant-scoped endpoints
        self.tenant = "main"


    def tearDown(self) -> None:
        pass

    def test_autocomplete_users(self) -> None:
        """Test case for autocomplete_users

        List users for autocomplete
        """
        name_prefix = "test_autocomplete_users"
        # create a user to autocomplete
        user_req = IAMUserControllerApiCreateOrUpdateUserRequest(
            email=f"{name_prefix}@kestra.io",
            first_name=name_prefix,
        )
        created_user = self.kestra_client.users.create_user(
            iam_user_controller_api_create_or_update_user_request=user_req
        )

        autocomplete_req = IAMTenantAccessControllerUserApiAutocomplete(q=name_prefix)

        results = self.kestra_client.users.autocomplete_users(
            tenant=self.tenant,
            iam_tenant_access_controller_user_api_autocomplete=autocomplete_req
        )

        assert any(getattr(r, 'username', None) == created_user.email or getattr(r, 'id', None) == created_user.id for r in results)

    def test_create_api_tokens_for_user(self) -> None:
        """Test case for create_api_tokens_for_user

        Create new API Token for a specific user
        """
        name_base = "test_create_api_tokens_for_user"
        # create user
        user_req = IAMUserControllerApiCreateOrUpdateUserRequest(
            email=f"{name_base}@kestra.io"
        )
        created_user = self.kestra_client.users.create_user(
            iam_user_controller_api_create_or_update_user_request=user_req
        )

        # token name must match regex: use lowercase and hyphens
        token_req = CreateApiTokenRequest(
            name=name_base.replace("_", "-"),
            description="token for test_create_api_tokens_for_user",
        )

        token = self.kestra_client.users.create_api_tokens_for_user(
            id=created_user.id,
            create_api_token_request=token_req
        )

        assert getattr(token, 'id', None) is not None

        # cleanup: delete token
        try:
            self.kestra_client.users.delete_api_token_for_user(id=created_user.id, token_id=token.id)
        except Exception:
            pass

        # cleanup: delete user
        try:
            self.kestra_client.users.delete_user(id=created_user.id)
        except Exception:
            pass

    def test_create_api_tokens_for_user1(self) -> None:
        """Duplicate-name variant to match generated tests; reuse create_api_tokens_for_user logic"""
        self.test_create_api_tokens_for_user()

    def test_create_api_tokens_for_user_with_tenant(self) -> None:
        """Create new API Token for a specific user (with tenant) - same as superadmin token creation; run same flow"""
        self.test_create_api_tokens_for_user()

    def test_create_user(self) -> None:
        """Test case for create_user

        Create a new user account
        """
        name_base = "test_create_user"
        user_req = IAMUserControllerApiCreateOrUpdateUserRequest(
            email=f"{name_base}@kestra.io",
            first_name=name_base,
            password="Password!234"
        )

        created = self.kestra_client.users.create_user(
            iam_user_controller_api_create_or_update_user_request=user_req
        )
        assert created.email == user_req.email

        # cleanup
        try:
            self.kestra_client.users.delete_user(id=created.id)
        except Exception:
            pass

    def test_delete_api_token(self) -> None:
        """Test case for delete_api_token

        Delete an API Token for specific user and token id
        """
        name_base = "test_delete_api_token"
        user_req = IAMUserControllerApiCreateOrUpdateUserRequest(
            email=f"{name_base}@kestra.io"
        )
        created_user = self.kestra_client.users.create_user(
            iam_user_controller_api_create_or_update_user_request=user_req
        )

        token_req = CreateApiTokenRequest(
            name=name_base.replace("_", "-"),
            description="token to delete",
        )
        token = self.kestra_client.users.create_api_tokens_for_user(id=created_user.id, create_api_token_request=token_req)

        self.kestra_client.users.delete_api_token_for_user(id=created_user.id, token_id=token.id)

        # cleanup user
        try:
            self.kestra_client.users.delete_user(id=created_user.id)
        except Exception:
            pass

    def test_delete_api_token1(self) -> None:
        self.test_delete_api_token()

    def test_delete_api_token_with_tenant(self) -> None:
        self.test_delete_api_token()

    def test_delete_refresh_token(self) -> None:
        """Delete a user refresh token

        This operation is superadmin-only; create a user and attempt to delete refresh token (may be no-op)
        """
        name_base = "test_delete_refresh_token"
        user_req = IAMUserControllerApiCreateOrUpdateUserRequest(
            email=f"{name_base}@kestra.io"
        )
        created_user = self.kestra_client.users.create_user(
            iam_user_controller_api_create_or_update_user_request=user_req
        )

        # call delete_refresh_token (no explicit token id required)
        self.kestra_client.users.delete_refresh_token(id=created_user.id)

        # cleanup
        try:
            self.kestra_client.users.delete_user(id=created_user.id)
        except Exception:
            pass

    def test_delete_user(self) -> None:
        """Delete a user"""
        name_base = "test_delete_user"
        user_req = IAMUserControllerApiCreateOrUpdateUserRequest(
            email=f"{name_base}@kestra.io"
        )
        created_user = self.kestra_client.users.create_user(
            iam_user_controller_api_create_or_update_user_request=user_req
        )

        self.kestra_client.users.delete_user(id=created_user.id)

    def test_delete_user_auth_method(self) -> None:
        """Update user password (delete auth method) - use patch restricted as placeholder"""
        name_base = "test_delete_user_auth_method"
        user_req = IAMUserControllerApiCreateOrUpdateUserRequest(
            email=f"{name_base}@kestra.io",
            password="Password!234"
        )
        created_user = self.kestra_client.users.create_user(
            iam_user_controller_api_create_or_update_user_request=user_req
        )

        # The API provides endpoints to patch user password or restricted flag; try to patch restricted flag
        patch_req = IAMUserControllerApiPatchRestrictedRequest(restricted=True)
        patched = self.kestra_client.users.patch_user(id=created_user.id, iam_user_controller_api_patch_restricted_request=patch_req)
        assert getattr(patched, 'id', None) == created_user.id

        # cleanup
        try:
            self.kestra_client.users.delete_user(id=created_user.id)
        except Exception:
            pass

    def test_get_user(self) -> None:
        """Get a user"""
        name_base = "test_get_user"
        user_req = IAMUserControllerApiCreateOrUpdateUserRequest(
            email=f"{name_base}@kestra.io"
        )
        created_user = self.kestra_client.users.create_user(
            iam_user_controller_api_create_or_update_user_request=user_req
        )

        fetched = self.kestra_client.users.get_user(id=created_user.id)
        assert fetched.id == created_user.id

        # cleanup
        try:
            self.kestra_client.users.delete_user(id=created_user.id)
        except Exception:
            pass

    def test_impersonate(self) -> None:
        """Impersonate a user"""
        name_base = "test_impersonate"
        user_req = IAMUserControllerApiCreateOrUpdateUserRequest(
            email=f"{name_base}@kestra.io"
        )
        created_user = self.kestra_client.users.create_user(
            iam_user_controller_api_create_or_update_user_request=user_req
        )

        token = self.kestra_client.users.impersonate(id=created_user.id)
        assert getattr(token, 'token', None) is not None or getattr(token, 'access_token', None) is not None

        # cleanup
        try:
            self.kestra_client.users.delete_user(id=created_user.id)
        except Exception:
            pass

    def test_list_api_tokens(self) -> None:
        """List API tokens for a specific user"""
        name_base = "test_list_api_tokens"
        user_req = IAMUserControllerApiCreateOrUpdateUserRequest(
            email=f"{name_base}@kestra.io"
        )
        created_user = self.kestra_client.users.create_user(
            iam_user_controller_api_create_or_update_user_request=user_req
        )

        token_req = CreateApiTokenRequest(name=name_base.replace("_", "-"))
        created_token = self.kestra_client.users.create_api_tokens_for_user(id=created_user.id, create_api_token_request=token_req)

        tokens = self.kestra_client.users.list_api_tokens_for_user(id=created_user.id)
        assert any(getattr(t, 'id', None) == created_token.id for t in tokens)

        # cleanup
        try:
            self.kestra_client.users.delete_api_token_for_user(id=created_user.id, token_id=created_token.id)
            self.kestra_client.users.delete_user(id=created_user.id)
        except Exception:
            pass

    def test_list_api_tokens1(self) -> None:
        self.test_list_api_tokens()

    def test_list_api_tokens_with_tenant(self) -> None:
        self.test_list_api_tokens()

    def test_list_users(self) -> None:
        """Retrieve users"""
        name_base = "test_list_users"
        # create a user
        user_req = IAMUserControllerApiCreateOrUpdateUserRequest(
            email=f"{name_base}@kestra.io"
        )
        created_user = self.kestra_client.users.create_user(iam_user_controller_api_create_or_update_user_request=user_req)

        results = self.kestra_client.users.list_users(page=1, size=50, q=name_base)
        assert any(getattr(r, 'id', None) == created_user.id for r in results.results)

        # cleanup
        try:
            self.kestra_client.users.delete_user(id=created_user.id)
        except Exception:
            pass

    def test_patch_user(self) -> None:
        """Update user details"""
        name_base = "test_patch_user"
        user_req = IAMUserControllerApiCreateOrUpdateUserRequest(
            email=f"{name_base}@kestra.io",
            first_name="Old"
        )
        created_user = self.kestra_client.users.create_user(iam_user_controller_api_create_or_update_user_request=user_req)

        update_req = IAMUserControllerApiCreateOrUpdateUserRequest(
            email=created_user.email,
            first_name="New"
        )
        updated = self.kestra_client.users.update_user(id=created_user.id, iam_user_controller_api_create_or_update_user_request=update_req)
        assert getattr(updated, 'first_name', None) == "New" or getattr(updated, 'firstName', None) == "New"

        # cleanup
        try:
            self.kestra_client.users.delete_user(id=created_user.id)
        except Exception:
            pass

    def test_patch_user_demo(self) -> None:
        """Update user demo - toggle restricted/demo flag if available"""
        name_base = "test_patch_user_demo"
        user_req = IAMUserControllerApiCreateOrUpdateUserRequest(
            email=f"{name_base}@kestra.io"
        )
        created_user = self.kestra_client.users.create_user(iam_user_controller_api_create_or_update_user_request=user_req)

        # some endpoints use restricted patch
        patch_req = IAMUserControllerApiPatchRestrictedRequest(restricted=True)
        patched = self.kestra_client.users.patch_user(id=created_user.id, iam_user_controller_api_patch_restricted_request=patch_req)
        assert getattr(patched, 'id', None) == created_user.id

        # cleanup
        try:
            self.kestra_client.users.delete_user(id=created_user.id)
        except Exception:
            pass

    def test_patch_user_password(self) -> None:
        """Update user password"""
        name_base = "test_patch_user_password"
        user_req = IAMUserControllerApiCreateOrUpdateUserRequest(
            email=f"{name_base}@kestra.io",
            password="OldPass!1"
        )
        created_user = self.kestra_client.users.create_user(iam_user_controller_api_create_or_update_user_request=user_req)

        password_req = IAMUserControllerApiPatchRestrictedRequest(restricted=False)
        # Use patch_user endpoint as the generated client groups many patch variants under patch_user
        patched = self.kestra_client.users.patch_user(id=created_user.id, iam_user_controller_api_patch_restricted_request=password_req)
        assert getattr(patched, 'id', None) == created_user.id

        # cleanup
        try:
            self.kestra_client.users.delete_user(id=created_user.id)
        except Exception:
            pass

    def test_patch_user_super_admin(self) -> None:
        """Update user superadmin privileges"""
        name_base = "test_patch_user_super_admin"
        user_req = IAMUserControllerApiCreateOrUpdateUserRequest(
            email=f"{name_base}@kestra.io"
        )
        created_user = self.kestra_client.users.create_user(iam_user_controller_api_create_or_update_user_request=user_req)

        patch = ApiPatchSuperAdminRequest(super_admin=False)
        patched = self.kestra_client.users.patch_user_super_admin(id=created_user.id, api_patch_super_admin_request=patch)
        assert getattr(patched, 'id', None) == created_user.id

        # cleanup
        try:
            self.kestra_client.users.delete_user(id=created_user.id)
        except Exception:
            pass

    def test_update_current_user_password(self) -> None:
        """Update authenticated user password"""
        # This operates on the authenticated user (root@root.com). We'll attempt to change and revert immediately.
        pwd_req = MeControllerApiUpdatePasswordRequest(current_password="Root!1234", new_password="Root!12345")
        self.kestra_client.users.update_current_user_password(me_controller_api_update_password_request=pwd_req)

        # revert to original password to keep tests stable
        revert_req = MeControllerApiUpdatePasswordRequest(current_password="Root!12345", new_password="Root!1234")
        self.kestra_client.users.update_current_user_password(me_controller_api_update_password_request=revert_req)

    def test_update_user(self) -> None:
        """Update a user account"""
        name_base = "test_update_user"
        user_req = IAMUserControllerApiCreateOrUpdateUserRequest(
            email=f"{name_base}@kestra.io",
            first_name="Before"
        )
        created_user = self.kestra_client.users.create_user(iam_user_controller_api_create_or_update_user_request=user_req)

        update_req = IAMUserControllerApiCreateOrUpdateUserRequest(
            email=created_user.email,
            first_name="After"
        )
        updated = self.kestra_client.users.update_user(id=created_user.id, iam_user_controller_api_create_or_update_user_request=update_req)
        assert getattr(updated, 'first_name', None) == "After" or getattr(updated, 'firstName', None) == "After"

        # cleanup
        try:
            self.kestra_client.users.delete_user(id=created_user.id)
        except Exception:
            pass

    def test_update_user_groups(self) -> None:
        """Update the list of groups a user belongs to for the given tenant"""
        name_base = "test_update_user_groups"
        user_req = IAMUserControllerApiCreateOrUpdateUserRequest(
            email=f"{name_base}@kestra.io"
        )
        created_user = self.kestra_client.users.create_user(iam_user_controller_api_create_or_update_user_request=user_req)

        groups_req = IAMUserGroupControllerApiUpdateUserGroupsRequest(groups=[])
        self.kestra_client.users.update_user_groups(tenant=self.tenant, id=created_user.id, iam_user_group_controller_api_update_user_groups_request=groups_req)

        # cleanup
        try:
            self.kestra_client.users.delete_user(id=created_user.id)
        except Exception:
            pass


if __name__ == '__main__':
    unittest.main()
