# python
# coding: utf-8

"""
    Kestra EE

    All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from kestrapy import Configuration, KestraClient
from typing import Optional
import uuid
from kestrapy import QueryFilter, QueryFilterField, QueryFilterOp


class TestExecutionsApi(unittest.TestCase):
    """ExecutionsApi unit test stubs"""

    def setUp(self) -> None:
        configuration = Configuration()
        configuration.host = "http://localhost:8080"
        configuration.username = "root@root.com"
        configuration.password = "Root!1234"

        self.kestra_client = KestraClient(configuration)
        self.tenant = "main"

    def tearDown(self) -> None:
        pass

    def create_flow(self, flow_id: Optional[str] = None, namespace: str = "test.executions") -> str:
        """Helper to create a simple flow from a YAML source and return its id."""
        if flow_id is None:
            flow_id = f"{self._testMethodName}"

        body = f"""id: {flow_id}
namespace: {namespace}

tasks:
  - id: hello
    type: io.kestra.plugin.core.flow.Sleep
    duration: PT1S
"""
        created = self.kestra_client.flows.create_flow(tenant=self.tenant, body=body)
        return getattr(created, 'id', flow_id)

    def test_create_execution(self) -> None:
        """Test case for create_execution

        Create a new execution for a flow
        """
        namespace = f"test_create_execution_ns"
        flow_id = f"{self._testMethodName}_flow"
        self.create_flow(flow_id=flow_id, namespace=namespace)

        # call SDK with expected parameter names: id and wait
        resp = self.kestra_client.executions.create_execution(namespace=namespace, id=flow_id, wait=False, tenant=self.tenant)
        assert resp is not None
        exec_id = getattr(resp, 'id', None)
        assert exec_id is not None

    def test_delete_execution(self) -> None:
        """Test case for delete_execution

        Delete an execution
        """
        namespace = f"test_delete_execution_ns"
        flow_id = f"{self._testMethodName}_flow"
        self.create_flow(flow_id=flow_id, namespace=namespace)

        created = self.kestra_client.executions.create_execution(namespace=namespace, id=flow_id, wait=False, tenant=self.tenant)
        exec_id = getattr(created, 'id', None)
        assert exec_id is not None

        self.kestra_client.executions.delete_execution(execution_id=exec_id, tenant=self.tenant)

        with self.assertRaises(Exception):
            self.kestra_client.executions.get_execution(id=exec_id, tenant=self.tenant)

    def test_delete_executions_by_ids(self) -> None:
        """Test case for delete_executions_by_ids

        Delete a list of executions
        """
        namespace = f"test_delete_executions_by_ids_ns"
        f1 = f"{self._testMethodName}_1"
        f2 = f"{self._testMethodName}_2"
        self.create_flow(flow_id=f1, namespace=namespace)
        self.create_flow(flow_id=f2, namespace=namespace)

        c1 = self.kestra_client.executions.create_execution(namespace=namespace, id=f1, wait=False, tenant=self.tenant)
        c2 = self.kestra_client.executions.create_execution(namespace=namespace, id=f2, wait=False, tenant=self.tenant)
        id1 = getattr(c1, 'id', None)
        id2 = getattr(c2, 'id', None)
        assert id1 is not None
        assert id2 is not None

        resp = self.kestra_client.executions.delete_executions_by_ids(tenant=self.tenant, request_body=[id1, id2], include_non_terminated=True)
        assert resp is not None

        with self.assertRaises(Exception):
            self.kestra_client.executions.get_execution(id=id1, tenant=self.tenant)
        with self.assertRaises(Exception):
            self.kestra_client.executions.get_execution(id=id2, tenant=self.tenant)

    def test_delete_executions_by_query(self) -> None:
        """Test case for delete_executions_by_query

        Delete executions filter by query parameters
        """
        base = f"{self._testMethodName}"
        namespace = f"test_delete_executions_by_query_ns"
        flow_id = f"{base}_flow"
        self.create_flow(flow_id=flow_id, namespace=namespace)

        created = self.kestra_client.executions.create_execution(namespace=namespace, id=flow_id, wait=False, tenant=self.tenant)
        exec_id = getattr(created, 'id', None)
        assert exec_id is not None

        qf = QueryFilter(field=QueryFilterField.NAMESPACE, operation=QueryFilterOp.CONTAINS, value={"value": namespace})
        resp = self.kestra_client.executions.delete_executions_by_query(tenant=self.tenant, filters=[qf], include_non_terminated=True)
        assert resp is not None

        with self.assertRaises(Exception):
            self.kestra_client.executions.get_execution(id=exec_id, tenant=self.tenant)

    def test_download_file_from_execution(self) -> None:
        """Test case for download_file_from_execution

        Download file for an execution
        """
        pass

    def test_eval_task_run_expression(self) -> None:
        """Test case for eval_task_run_expression

        Evaluate a variable expression for this taskrun
        """
        pass

    def test_follow_dependencies_executions(self) -> None:
        """Test case for follow_dependencies_executions

        Follow all execution dependencies executions
        """
        pass

    def test_follow_execution(self) -> None:
        """Test case for follow_execution

        Follow an execution
        """
        pass

    def test_force_run_by_ids(self) -> None:
        """Test case for force_run_by_ids

        Force run a list of executions
        """
        pass

    def test_force_run_execution(self) -> None:
        """Test case for force_run_execution

        Force run an execution
        """
        pass

    def test_force_run_executions_by_query(self) -> None:
        """Test case for force_run_executions_by_query

        Force run executions filter by query parameters
        """
        pass

    def test_get_execution(self) -> None:
        """Test case for get_execution

        Get an execution
        """
        pass

    def test_get_execution_flow_graph(self) -> None:
        """Test case for get_execution_flow_graph

        Generate a graph for an execution
        """
        pass

    def test_get_file_metadatas_from_execution(self) -> None:
        """Test case for get_file_metadatas_from_execution

        Get file meta information for an execution
        """
        pass

    def test_get_flow_from_execution(self) -> None:
        """Test case for get_flow_from_execution

        Get flow information's for an execution
        """
        pass

    def test_get_flow_from_execution_by_id(self) -> None:
        """Test case for get_flow_from_execution_by_id

        Get flow information's for an execution
        """
        pass

    def test_get_latest_executions(self) -> None:
        """Test case for get_latest_executions

        Get the latest execution for given flows
        """
        pass

    def test_kill_execution(self) -> None:
        """Test case for kill_execution

        Kill an execution
        """
        pass

    def test_kill_executions_by_ids(self) -> None:
        """Test case for kill_executions_by_ids

        Kill a list of executions
        """
        pass

    def test_kill_executions_by_query(self) -> None:
        """Test case for kill_executions_by_query

        Kill executions filter by query parameters
        """
        pass

    def test_list_executable_distinct_namespaces(self) -> None:
        """Test case for list_executable_distinct_namespaces

        Get all namespaces that have executable flows
        """
        pass

    def test_list_flow_executions_by_namespace(self) -> None:
        """Test case for list_flow_executions_by_namespace

        Get all flow ids for a namespace. Data returned are FlowForExecution containing minimal information about a Flow for when you are allowed to executing but not reading.
        """
        pass

    def test_pause_execution(self) -> None:
        """Test case for pause_execution

        Pause a running execution.
        """
        pass

    def test_pause_executions_by_ids(self) -> None:
        """Test case for pause_executions_by_ids

        Pause a list of running executions
        """
        pass

    def test_pause_executions_by_query(self) -> None:
        """Test case for pause_executions_by_query

        Pause executions filter by query parameters
        """
        pass

    def test_preview_file_from_execution(self) -> None:
        """Test case for preview_file_from_execution

        Get file preview for an execution
        """
        pass

    def test_replay_execution(self) -> None:
        """Test case for replay_execution

        Create a new execution from an old one and start it from a specified task run id
        """
        pass

    def test_replay_execution_withinputs(self) -> None:
        """Test case for replay_execution_withinputs

        Create a new execution from an old one and start it from a specified task run id
        """
        pass

    def test_replay_executions_by_ids(self) -> None:
        """Test case for replay_executions_by_ids

        Create new executions from old ones. Keep the flow revision
        """
        pass

    def test_replay_executions_by_query(self) -> None:
        """Test case for replay_executions_by_query

        Create new executions from old ones filter by query parameters. Keep the flow revision
        """
        pass

    def test_restart_execution(self) -> None:
        """Test case for restart_execution

        Restart a new execution from an old one
        """
        pass

    def test_restart_executions_by_ids(self) -> None:
        """Test case for restart_executions_by_ids

        Restart a list of executions
        """
        pass

    def test_restart_executions_by_query(self) -> None:
        """Test case for restart_executions_by_query

        Restart executions filter by query parameters.
        """
        pass

    def test_resume_execution(self) -> None:
        """Test case for resume_execution

        Resume a paused execution.
        """
        pass

    def test_resume_execution_from_breakpoint(self) -> None:
        """Test case for resume_execution_from_breakpoint

        Resume an execution from a breakpoint (in the 'BREAKPOINT' state).
        """
        pass

    def test_resume_executions_by_ids(self) -> None:
        """Test case for resume_executions_by_ids

        Resume a list of paused executions
        """
        pass

    def test_resume_executions_by_query(self) -> None:
        """Test case for resume_executions_by_query

        Resume executions filter by query parameters
        """
        pass

    def test_search_executions(self) -> None:
        """Test case for search_executions

        Search for executions
        """
        pass

    def test_search_executions_by_flow_id(self) -> None:
        """Test case for search_executions_by_flow_id

        Search for executions for a flow
        """
        pass

    def test_search_task_run(self) -> None:
        """Test case for search_task_run

        Search for taskruns, only available with the Elasticsearch repository
        """
        pass

    def test_set_labels_on_terminated_execution(self) -> None:
        """Test case for set_labels_on_terminated_execution

        Add or update labels of a terminated execution
        """
        pass

    def test_set_labels_on_terminated_executions_by_ids(self) -> None:
        """Test case for set_labels_on_terminated_executions_by_ids

        Set labels on a list of executions
        """
        pass

    def test_set_labels_on_terminated_executions_by_query(self) -> None:
        """Test case for set_labels_on_terminated_executions_by_query

        Set label on executions filter by query parameters.
        """
        pass

    def test_trigger_execution(self) -> None:
        """Test case for trigger_execution

        Trigger a new execution for a flow
        """
        pass

    def test_trigger_execution_by_get_webhook(self) -> None:
        """Test case for trigger_execution_by_get_webhook

        Trigger a new execution by GET webhook trigger
        """
        pass

    def test_trigger_execution_by_post_webhook(self) -> None:
        """Test case for trigger_execution_by_post_webhook

        Trigger a new execution by POST webhook trigger
        """
        pass

    def test_trigger_execution_by_put_webhook(self) -> None:
        """Test case for trigger_execution_by_put_webhook

        Trigger a new execution by PUT webhook trigger
        """
        pass

    def test_unqueue_execution(self) -> None:
        """Test case for unqueue_execution

        Unqueue an execution
        """
        pass

    def test_unqueue_executions_by_ids(self) -> None:
        """Test case for unqueue_executions_by_ids

        Unqueue a list of executions
        """
        pass

    def test_unqueue_executions_by_query(self) -> None:
        """Test case for unqueue_executions_by_query

        Unqueue executions filter by query parameters
        """
        pass

    def test_update_execution_status(self) -> None:
        """Test case for update_execution_status

        Change the state of an execution
        """
        pass

    def test_update_executions_status_by_ids(self) -> None:
        """Test case for update_executions_status_by_ids

        Change executions state by id
        """
        pass

    def test_update_executions_status_by_query(self) -> None:
        """Test case for update_executions_status_by_query

        Change executions state by query parameters
        """
        pass

    def test_update_task_run_state(self) -> None:
        """Test case for update_task_run_state

        Change state for a taskrun in an execution
        """
        pass

    def test_validate_new_execution_inputs(self) -> None:
        """Test case for validate_new_execution_inputs

        Validate the creation of a new execution for a flow
        """
        pass

    def test_validate_resume_execution_inputs(self) -> None:
        """Test case for validate_resume_execution_inputs

        Validate inputs to resume a paused execution.
        """
        pass


if __name__ == '__main__':
    unittest.main()
