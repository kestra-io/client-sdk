# coding: utf-8

"""
    Kestra EE

    All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
from kestrapy import Configuration, KestraClient, IAMGroupControllerApiCreateGroupRequest


class TestGroupsApi(unittest.TestCase):
    """GroupsApi unit test stubs"""

    def setUp(self) -> None:
        configuration = Configuration()
        configuration.host = "http://localhost:9902"
        configuration.username = "root@root.com"
        configuration.password = "Root!1234"

        self.kestra_client = KestraClient(configuration)
        self.tenant = "main"

    def tearDown(self) -> None:
        pass

    def test_add_user_to_group(self) -> None:
        """Test case for add_user_to_group

        Add a user to a group
        """
        pass

    def test_autocomplete_groups(self) -> None:
        """Test case for autocomplete_groups

        List groups for autocomplete
        """
        pass

    def test_create_group(self) -> None:
        """Test case for create_group

        Create a group
        """
        group = IAMGroupControllerApiCreateGroupRequest(
            name="test_create_group",
            description="An example group"
        )

        created = self.kestra_client.groups.create_group(
            tenant=self.tenant,
            iam_group_controller_api_create_group_request=group
        )
        assert created.name == group.name

    def test_delete_group(self) -> None:
        group = IAMGroupControllerApiCreateGroupRequest(
            name="test_delete_group",
            description="An example group"
        )

        created = self.kestra_client.groups.create_group(
            tenant=self.tenant,
            iam_group_controller_api_create_group_request=group
        )

        self.kestra_client.groups.delete_group(
            tenant=self.tenant,
            id=created.id
        )

    def test_delete_user_from_group(self) -> None:
        """Test case for delete_user_from_group

        Remove a user from a group
        """
        group = IAMGroupControllerApiCreateGroupRequest(
            name="test_create_group",
            description="An example group"
        )

        created = self.kestra_client.groups.create_group(
            tenant=self.tenant,
            iam_group_controller_api_create_group_request=group
        )

    def test_get_group(self) -> None:
        """Test case for get_group

        Retrieve a group
        """
        group = IAMGroupControllerApiCreateGroupRequest(
            name="test_get_group",
            description="An example group"
        )

        created = self.kestra_client.groups.create_group(
            tenant=self.tenant,
            iam_group_controller_api_create_group_request=group
        )

        fetched = self.kestra_client.groups.get_group(
            tenant=self.tenant,
            id=created.id
        )

        assert fetched.id == created.id

    def test_list_group_ids(self) -> None:
        """Test case for list_group_ids

        List groups by ids
        """
        group = IAMGroupControllerApiCreateGroupRequest(
            name="test_list_group_ids",
            description="An example group"
        )

        created = self.kestra_client.groups.create_group(
            tenant=self.tenant,
            iam_group_controller_api_create_group_request=group
        )

        fetched = self.kestra_client.groups.list_group_ids(
            tenant=self.tenant,
            api_ids=[created.id]
        )

    def test_search_group_members(self) -> None:
        """Test case for search_group_members

        Search for users in a group
        """
        pass

    def test_search_groups(self) -> None:
        """Test case for search_groups

        Search for groups
        """
        pass

    def test_set_user_membership_for_group(self) -> None:
        """Test case for set_user_membership_for_group

        Update a user's membership type in a group
        """
        pass

    def test_update_group(self) -> None:
        """Test case for update_group

        Update a group
        """
        pass


if __name__ == '__main__':
    unittest.main()
