# coding: utf-8

"""
    Kestra EE

    All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from kestrapy.api.users_api import UsersApi


class TestUsersApi(unittest.TestCase):
    """UsersApi unit test stubs"""

    def setUp(self) -> None:
        self.api = UsersApi()

    def tearDown(self) -> None:
        pass

    def test_autocomplete_users(self) -> None:
        """Test case for autocomplete_users

        List users for autocomplete
        """
        pass

    def test_create_api_tokens_for_user(self) -> None:
        """Test case for create_api_tokens_for_user

        Create new API Token for a specific user
        """
        pass

    def test_create_api_tokens_for_user1(self) -> None:
        """Test case for create_api_tokens_for_user1

        Create new API Token for a specific user
        """
        pass

    def test_create_api_tokens_for_user_with_tenant(self) -> None:
        """Test case for create_api_tokens_for_user_with_tenant

        Create new API Token for a specific user
        """
        pass

    def test_create_user(self) -> None:
        """Test case for create_user

        Create a new user account
        """
        pass

    def test_delete_api_token(self) -> None:
        """Test case for delete_api_token

        Delete an API Token for specific user and token id
        """
        pass

    def test_delete_api_token1(self) -> None:
        """Test case for delete_api_token1

        Delete an API Token for specific user and token id
        """
        pass

    def test_delete_api_token_with_tenant(self) -> None:
        """Test case for delete_api_token_with_tenant

        Delete an API Token for specific user and token id
        """
        pass

    def test_delete_refresh_token(self) -> None:
        """Test case for delete_refresh_token

        Delete a user refresh token
        """
        pass

    def test_delete_user(self) -> None:
        """Test case for delete_user

        Delete a user
        """
        pass

    def test_delete_user_auth_method(self) -> None:
        """Test case for delete_user_auth_method

        Update user password
        """
        pass

    def test_get_user(self) -> None:
        """Test case for get_user

        Get a user
        """
        pass

    def test_impersonate(self) -> None:
        """Test case for impersonate

        Impersonate a user
        """
        pass

    def test_list_api_tokens(self) -> None:
        """Test case for list_api_tokens

        List API tokens for a specific user
        """
        pass

    def test_list_api_tokens1(self) -> None:
        """Test case for list_api_tokens1

        List API tokens for a specific user
        """
        pass

    def test_list_api_tokens_with_tenant(self) -> None:
        """Test case for list_api_tokens_with_tenant

        List API tokens for a specific user
        """
        pass

    def test_list_users(self) -> None:
        """Test case for list_users

        Retrieve users
        """
        pass

    def test_patch_user(self) -> None:
        """Test case for patch_user

        Update user details
        """
        pass

    def test_patch_user_demo(self) -> None:
        """Test case for patch_user_demo

        Update user demo
        """
        pass

    def test_patch_user_password(self) -> None:
        """Test case for patch_user_password

        Update user password
        """
        pass

    def test_patch_user_super_admin(self) -> None:
        """Test case for patch_user_super_admin

        Update user superadmin privileges
        """
        pass

    def test_update_current_user_password(self) -> None:
        """Test case for update_current_user_password

        Update authenticated user password
        """
        pass

    def test_update_user(self) -> None:
        """Test case for update_user

        Update a user account
        """
        pass

    def test_update_user_groups(self) -> None:
        """Test case for update_user_groups

        Update the list of groups a user belongs to for the given tenant
        """
        pass


if __name__ == '__main__':
    unittest.main()
