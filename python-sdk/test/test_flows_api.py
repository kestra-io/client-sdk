# coding: utf-8

"""
    Kestra EE

    All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from kestrapy.api.flows_api import FlowsApi


class TestFlowsApi(unittest.TestCase):
    """FlowsApi unit test stubs"""

    def setUp(self) -> None:
        self.api = FlowsApi()

    def tearDown(self) -> None:
        pass

    def test_bulk_import_apps(self) -> None:
        """Test case for bulk_import_apps

            Import apps as a ZIP archive of yaml sources or a multi-objects YAML file.     When sending a Yaml that contains one or more apps, a list of index is returned.     When sending a ZIP archive, a list of files that couldn't be imported is returned. 
        """
        pass

    def test_bulk_update_flows(self) -> None:
        """Test case for bulk_update_flows

        Update from multiples yaml sources
        """
        pass

    def test_create_flow(self) -> None:
        """Test case for create_flow

        Create a flow from yaml source
        """
        pass

    def test_delete_flow(self) -> None:
        """Test case for delete_flow

        Delete a flow
        """
        pass

    def test_delete_flows_by_ids(self) -> None:
        """Test case for delete_flows_by_ids

        Delete flows by their IDs.
        """
        pass

    def test_delete_flows_by_query(self) -> None:
        """Test case for delete_flows_by_query

        Delete flows returned by the query parameters.
        """
        pass

    def test_disable_flows_by_ids(self) -> None:
        """Test case for disable_flows_by_ids

        Disable flows by their IDs.
        """
        pass

    def test_disable_flows_by_query(self) -> None:
        """Test case for disable_flows_by_query

        Disable flows returned by the query parameters.
        """
        pass

    def test_enable_flows_by_ids(self) -> None:
        """Test case for enable_flows_by_ids

        Enable flows by their IDs.
        """
        pass

    def test_enable_flows_by_query(self) -> None:
        """Test case for enable_flows_by_query

        Enable flows returned by the query parameters.
        """
        pass

    def test_export_flows_by_ids(self) -> None:
        """Test case for export_flows_by_ids

        Export flows as a ZIP archive of yaml sources.
        """
        pass

    def test_export_flows_by_query(self) -> None:
        """Test case for export_flows_by_query

        Export flows as a ZIP archive of yaml sources.
        """
        pass

    def test_generate_flow_graph(self) -> None:
        """Test case for generate_flow_graph

        Generate a graph for a flow
        """
        pass

    def test_generate_flow_graph_from_source(self) -> None:
        """Test case for generate_flow_graph_from_source

        Generate a graph for a flow source
        """
        pass

    def test_get_flow(self) -> None:
        """Test case for get_flow

        Get a flow
        """
        pass

    def test_get_flow_dependencies(self) -> None:
        """Test case for get_flow_dependencies

        Get flow dependencies
        """
        pass

    def test_get_flow_dependencies_from_namespace(self) -> None:
        """Test case for get_flow_dependencies_from_namespace

        Retrieve flow dependencies
        """
        pass

    def test_get_task_from_flow(self) -> None:
        """Test case for get_task_from_flow

        Get a flow task
        """
        pass

    def test_import_flows(self) -> None:
        """Test case for import_flows

            Import flows as a ZIP archive of yaml sources or a multi-objects YAML file.     When sending a Yaml that contains one or more flows, a list of index is returned.     When sending a ZIP archive, a list of files that couldn't be imported is returned. 
        """
        pass

    def test_list_distinct_namespaces(self) -> None:
        """Test case for list_distinct_namespaces

        List all distinct namespaces
        """
        pass

    def test_list_flow_revisions(self) -> None:
        """Test case for list_flow_revisions

        Get revisions for a flow
        """
        pass

    def test_list_flows_by_namespace(self) -> None:
        """Test case for list_flows_by_namespace

        Retrieve all flows from a given namespace
        """
        pass

    def test_search_flows(self) -> None:
        """Test case for search_flows

        Search for flows
        """
        pass

    def test_search_flows_by_source_code(self) -> None:
        """Test case for search_flows_by_source_code

        Search for flows source code
        """
        pass

    def test_update_flow(self) -> None:
        """Test case for update_flow

        Update a flow
        """
        pass

    def test_update_flows_in_namespace_from_json(self) -> None:
        """Test case for update_flows_in_namespace_from_json

        Update a complete namespace from json object
        """
        pass

    def test_update_task(self) -> None:
        """Test case for update_task

        Update a single task on a flow
        """
        pass

    def test_validate_flows(self) -> None:
        """Test case for validate_flows

        Validate a list of flows
        """
        pass

    def test_validate_task(self) -> None:
        """Test case for validate_task

        Validate a task
        """
        pass

    def test_validate_trigger(self) -> None:
        """Test case for validate_trigger

        Validate trigger
        """
        pass


if __name__ == '__main__':
    unittest.main()
