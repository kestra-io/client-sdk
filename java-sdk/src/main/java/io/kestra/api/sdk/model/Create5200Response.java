/*
 * Kestra EE
 * All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kestra.api.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.kestra.api.sdk.model.AbstractTrigger;
import io.kestra.api.sdk.model.Concurrency;
import io.kestra.api.sdk.model.Flow;
import io.kestra.api.sdk.model.FlowWithSource;
import io.kestra.api.sdk.model.InputObject;
import io.kestra.api.sdk.model.Listener;
import io.kestra.api.sdk.model.Output;
import io.kestra.api.sdk.model.PluginDefault;
import io.kestra.api.sdk.model.SLA;
import io.kestra.api.sdk.model.Task;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * Create5200Response
 */
@JsonPropertyOrder({
  Create5200Response.JSON_PROPERTY_ID,
  Create5200Response.JSON_PROPERTY_NAMESPACE,
  Create5200Response.JSON_PROPERTY_REVISION,
  Create5200Response.JSON_PROPERTY_INPUTS,
  Create5200Response.JSON_PROPERTY_DISABLED,
  Create5200Response.JSON_PROPERTY_DELETED,
  Create5200Response.JSON_PROPERTY_FINALLY,
  Create5200Response.JSON_PROPERTY_TASK_DEFAULTS,
  Create5200Response.JSON_PROPERTY_DESCRIPTION,
  Create5200Response.JSON_PROPERTY_LABELS,
  Create5200Response.JSON_PROPERTY_VARIABLES,
  Create5200Response.JSON_PROPERTY_TASKS,
  Create5200Response.JSON_PROPERTY_ERRORS,
  Create5200Response.JSON_PROPERTY_LISTENERS,
  Create5200Response.JSON_PROPERTY_AFTER_EXECUTION,
  Create5200Response.JSON_PROPERTY_TRIGGERS,
  Create5200Response.JSON_PROPERTY_PLUGIN_DEFAULTS,
  Create5200Response.JSON_PROPERTY_CONCURRENCY,
  Create5200Response.JSON_PROPERTY_OUTPUTS,
  Create5200Response.JSON_PROPERTY_RETRY,
  Create5200Response.JSON_PROPERTY_SLA,
  Create5200Response.JSON_PROPERTY_SOURCE
})
@JsonTypeName("create_5_200_response")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-04T08:59:39.449091531Z[Etc/UTC]", comments = "Generator version: 7.13.0-SNAPSHOT")
public class Create5200Response {
  public static final String JSON_PROPERTY_ID = "id";
  @javax.annotation.Nonnull
  private String id;

  public static final String JSON_PROPERTY_NAMESPACE = "namespace";
  @javax.annotation.Nonnull
  private String namespace;

  public static final String JSON_PROPERTY_REVISION = "revision";
  @javax.annotation.Nullable
  private Integer revision;

  public static final String JSON_PROPERTY_INPUTS = "inputs";
  @javax.annotation.Nullable
  private List<InputObject> inputs = new ArrayList<>();

  public static final String JSON_PROPERTY_DISABLED = "disabled";
  @javax.annotation.Nonnull
  private Boolean disabled;

  public static final String JSON_PROPERTY_DELETED = "deleted";
  @javax.annotation.Nonnull
  private Boolean deleted;

  public static final String JSON_PROPERTY_FINALLY = "finally";
  @javax.annotation.Nullable
  private List<Task> _finally = new ArrayList<>();

  public static final String JSON_PROPERTY_TASK_DEFAULTS = "taskDefaults";
  @javax.annotation.Nullable
  private List<PluginDefault> taskDefaults = new ArrayList<>();

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  @javax.annotation.Nullable
  private String description;

  public static final String JSON_PROPERTY_LABELS = "labels";
  @javax.annotation.Nullable
  private Object labels;

  public static final String JSON_PROPERTY_VARIABLES = "variables";
  @javax.annotation.Nullable
  private Map<String, Object> variables = new HashMap<>();

  public static final String JSON_PROPERTY_TASKS = "tasks";
  @javax.annotation.Nonnull
  private List<Task> tasks = new ArrayList<>();

  public static final String JSON_PROPERTY_ERRORS = "errors";
  @javax.annotation.Nullable
  private List<Task> errors = new ArrayList<>();

  public static final String JSON_PROPERTY_LISTENERS = "listeners";
  @javax.annotation.Nullable
  private List<Listener> listeners = new ArrayList<>();

  public static final String JSON_PROPERTY_AFTER_EXECUTION = "afterExecution";
  @javax.annotation.Nullable
  private List<Task> afterExecution = new ArrayList<>();

  public static final String JSON_PROPERTY_TRIGGERS = "triggers";
  @javax.annotation.Nullable
  private List<AbstractTrigger> triggers = new ArrayList<>();

  public static final String JSON_PROPERTY_PLUGIN_DEFAULTS = "pluginDefaults";
  @javax.annotation.Nullable
  private List<PluginDefault> pluginDefaults = new ArrayList<>();

  public static final String JSON_PROPERTY_CONCURRENCY = "concurrency";
  @javax.annotation.Nullable
  private Concurrency concurrency;

  public static final String JSON_PROPERTY_OUTPUTS = "outputs";
  @javax.annotation.Nullable
  private List<Output> outputs = new ArrayList<>();

  public static final String JSON_PROPERTY_RETRY = "retry";
  @javax.annotation.Nullable
  private Object retry;

  public static final String JSON_PROPERTY_SLA = "sla";
  @javax.annotation.Nullable
  private List<SLA> sla = new ArrayList<>();

  public static final String JSON_PROPERTY_SOURCE = "source";
  @javax.annotation.Nullable
  private String source;

  public Create5200Response() {
  }

  public Create5200Response id(@javax.annotation.Nonnull String id) {
    
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(@javax.annotation.Nonnull String id) {
    this.id = id;
  }

  public Create5200Response namespace(@javax.annotation.Nonnull String namespace) {
    
    this.namespace = namespace;
    return this;
  }

  /**
   * Get namespace
   * @return namespace
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NAMESPACE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getNamespace() {
    return namespace;
  }


  @JsonProperty(JSON_PROPERTY_NAMESPACE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setNamespace(@javax.annotation.Nonnull String namespace) {
    this.namespace = namespace;
  }

  public Create5200Response revision(@javax.annotation.Nullable Integer revision) {
    
    this.revision = revision;
    return this;
  }

  /**
   * Get revision
   * minimum: 1
   * @return revision
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REVISION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getRevision() {
    return revision;
  }


  @JsonProperty(JSON_PROPERTY_REVISION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRevision(@javax.annotation.Nullable Integer revision) {
    this.revision = revision;
  }

  public Create5200Response inputs(@javax.annotation.Nullable List<InputObject> inputs) {
    
    this.inputs = inputs;
    return this;
  }

  public Create5200Response addInputsItem(InputObject inputsItem) {
    if (this.inputs == null) {
      this.inputs = new ArrayList<>();
    }
    this.inputs.add(inputsItem);
    return this;
  }

  /**
   * Get inputs
   * @return inputs
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INPUTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<InputObject> getInputs() {
    return inputs;
  }


  @JsonProperty(JSON_PROPERTY_INPUTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInputs(@javax.annotation.Nullable List<InputObject> inputs) {
    this.inputs = inputs;
  }

  public Create5200Response disabled(@javax.annotation.Nonnull Boolean disabled) {
    
    this.disabled = disabled;
    return this;
  }

  /**
   * Get disabled
   * @return disabled
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DISABLED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getDisabled() {
    return disabled;
  }


  @JsonProperty(JSON_PROPERTY_DISABLED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDisabled(@javax.annotation.Nonnull Boolean disabled) {
    this.disabled = disabled;
  }

  public Create5200Response deleted(@javax.annotation.Nonnull Boolean deleted) {
    
    this.deleted = deleted;
    return this;
  }

  /**
   * Get deleted
   * @return deleted
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DELETED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getDeleted() {
    return deleted;
  }


  @JsonProperty(JSON_PROPERTY_DELETED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDeleted(@javax.annotation.Nonnull Boolean deleted) {
    this.deleted = deleted;
  }

  public Create5200Response _finally(@javax.annotation.Nullable List<Task> _finally) {
    
    this._finally = _finally;
    return this;
  }

  public Create5200Response addFinallyItem(Task _finallyItem) {
    if (this._finally == null) {
      this._finally = new ArrayList<>();
    }
    this._finally.add(_finallyItem);
    return this;
  }

  /**
   * Get _finally
   * @return _finally
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FINALLY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Task> getFinally() {
    return _finally;
  }


  @JsonProperty(JSON_PROPERTY_FINALLY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFinally(@javax.annotation.Nullable List<Task> _finally) {
    this._finally = _finally;
  }

  public Create5200Response taskDefaults(@javax.annotation.Nullable List<PluginDefault> taskDefaults) {
    
    this.taskDefaults = taskDefaults;
    return this;
  }

  public Create5200Response addTaskDefaultsItem(PluginDefault taskDefaultsItem) {
    if (this.taskDefaults == null) {
      this.taskDefaults = new ArrayList<>();
    }
    this.taskDefaults.add(taskDefaultsItem);
    return this;
  }

  /**
   * Get taskDefaults
   * @return taskDefaults
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TASK_DEFAULTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<PluginDefault> getTaskDefaults() {
    return taskDefaults;
  }


  @JsonProperty(JSON_PROPERTY_TASK_DEFAULTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTaskDefaults(@javax.annotation.Nullable List<PluginDefault> taskDefaults) {
    this.taskDefaults = taskDefaults;
  }

  public Create5200Response description(@javax.annotation.Nullable String description) {
    
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }

  public Create5200Response labels(@javax.annotation.Nullable Object labels) {
    
    this.labels = labels;
    return this;
  }

  /**
   * Get labels
   * @return labels
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LABELS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Object getLabels() {
    return labels;
  }


  @JsonProperty(JSON_PROPERTY_LABELS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLabels(@javax.annotation.Nullable Object labels) {
    this.labels = labels;
  }

  public Create5200Response variables(@javax.annotation.Nullable Map<String, Object> variables) {
    
    this.variables = variables;
    return this;
  }

  public Create5200Response putVariablesItem(String key, Object variablesItem) {
    if (this.variables == null) {
      this.variables = new HashMap<>();
    }
    this.variables.put(key, variablesItem);
    return this;
  }

  /**
   * Get variables
   * @return variables
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VARIABLES)
  @JsonInclude(content = JsonInclude.Include.ALWAYS, value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, Object> getVariables() {
    return variables;
  }


  @JsonProperty(JSON_PROPERTY_VARIABLES)
  @JsonInclude(content = JsonInclude.Include.ALWAYS, value = JsonInclude.Include.USE_DEFAULTS)
  public void setVariables(@javax.annotation.Nullable Map<String, Object> variables) {
    this.variables = variables;
  }

  public Create5200Response tasks(@javax.annotation.Nonnull List<Task> tasks) {
    
    this.tasks = tasks;
    return this;
  }

  public Create5200Response addTasksItem(Task tasksItem) {
    if (this.tasks == null) {
      this.tasks = new ArrayList<>();
    }
    this.tasks.add(tasksItem);
    return this;
  }

  /**
   * Get tasks
   * @return tasks
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TASKS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<Task> getTasks() {
    return tasks;
  }


  @JsonProperty(JSON_PROPERTY_TASKS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTasks(@javax.annotation.Nonnull List<Task> tasks) {
    this.tasks = tasks;
  }

  public Create5200Response errors(@javax.annotation.Nullable List<Task> errors) {
    
    this.errors = errors;
    return this;
  }

  public Create5200Response addErrorsItem(Task errorsItem) {
    if (this.errors == null) {
      this.errors = new ArrayList<>();
    }
    this.errors.add(errorsItem);
    return this;
  }

  /**
   * Get errors
   * @return errors
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ERRORS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Task> getErrors() {
    return errors;
  }


  @JsonProperty(JSON_PROPERTY_ERRORS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setErrors(@javax.annotation.Nullable List<Task> errors) {
    this.errors = errors;
  }

  public Create5200Response listeners(@javax.annotation.Nullable List<Listener> listeners) {
    
    this.listeners = listeners;
    return this;
  }

  public Create5200Response addListenersItem(Listener listenersItem) {
    if (this.listeners == null) {
      this.listeners = new ArrayList<>();
    }
    this.listeners.add(listenersItem);
    return this;
  }

  /**
   * Get listeners
   * @return listeners
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LISTENERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Listener> getListeners() {
    return listeners;
  }


  @JsonProperty(JSON_PROPERTY_LISTENERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setListeners(@javax.annotation.Nullable List<Listener> listeners) {
    this.listeners = listeners;
  }

  public Create5200Response afterExecution(@javax.annotation.Nullable List<Task> afterExecution) {
    
    this.afterExecution = afterExecution;
    return this;
  }

  public Create5200Response addAfterExecutionItem(Task afterExecutionItem) {
    if (this.afterExecution == null) {
      this.afterExecution = new ArrayList<>();
    }
    this.afterExecution.add(afterExecutionItem);
    return this;
  }

  /**
   * Get afterExecution
   * @return afterExecution
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AFTER_EXECUTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Task> getAfterExecution() {
    return afterExecution;
  }


  @JsonProperty(JSON_PROPERTY_AFTER_EXECUTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAfterExecution(@javax.annotation.Nullable List<Task> afterExecution) {
    this.afterExecution = afterExecution;
  }

  public Create5200Response triggers(@javax.annotation.Nullable List<AbstractTrigger> triggers) {
    
    this.triggers = triggers;
    return this;
  }

  public Create5200Response addTriggersItem(AbstractTrigger triggersItem) {
    if (this.triggers == null) {
      this.triggers = new ArrayList<>();
    }
    this.triggers.add(triggersItem);
    return this;
  }

  /**
   * Get triggers
   * @return triggers
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TRIGGERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<AbstractTrigger> getTriggers() {
    return triggers;
  }


  @JsonProperty(JSON_PROPERTY_TRIGGERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTriggers(@javax.annotation.Nullable List<AbstractTrigger> triggers) {
    this.triggers = triggers;
  }

  public Create5200Response pluginDefaults(@javax.annotation.Nullable List<PluginDefault> pluginDefaults) {
    
    this.pluginDefaults = pluginDefaults;
    return this;
  }

  public Create5200Response addPluginDefaultsItem(PluginDefault pluginDefaultsItem) {
    if (this.pluginDefaults == null) {
      this.pluginDefaults = new ArrayList<>();
    }
    this.pluginDefaults.add(pluginDefaultsItem);
    return this;
  }

  /**
   * Get pluginDefaults
   * @return pluginDefaults
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PLUGIN_DEFAULTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<PluginDefault> getPluginDefaults() {
    return pluginDefaults;
  }


  @JsonProperty(JSON_PROPERTY_PLUGIN_DEFAULTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPluginDefaults(@javax.annotation.Nullable List<PluginDefault> pluginDefaults) {
    this.pluginDefaults = pluginDefaults;
  }

  public Create5200Response concurrency(@javax.annotation.Nullable Concurrency concurrency) {
    
    this.concurrency = concurrency;
    return this;
  }

  /**
   * Get concurrency
   * @return concurrency
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONCURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Concurrency getConcurrency() {
    return concurrency;
  }


  @JsonProperty(JSON_PROPERTY_CONCURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConcurrency(@javax.annotation.Nullable Concurrency concurrency) {
    this.concurrency = concurrency;
  }

  public Create5200Response outputs(@javax.annotation.Nullable List<Output> outputs) {
    
    this.outputs = outputs;
    return this;
  }

  public Create5200Response addOutputsItem(Output outputsItem) {
    if (this.outputs == null) {
      this.outputs = new ArrayList<>();
    }
    this.outputs.add(outputsItem);
    return this;
  }

  /**
   * Output values make information about the execution of your Flow available and expose for other Kestra flows to use. Output values are similar to return values in programming languages.
   * @return outputs
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OUTPUTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Output> getOutputs() {
    return outputs;
  }


  @JsonProperty(JSON_PROPERTY_OUTPUTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOutputs(@javax.annotation.Nullable List<Output> outputs) {
    this.outputs = outputs;
  }

  public Create5200Response retry(@javax.annotation.Nullable Object retry) {
    
    this.retry = retry;
    return this;
  }

  /**
   * Get retry
   * @return retry
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RETRY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Object getRetry() {
    return retry;
  }


  @JsonProperty(JSON_PROPERTY_RETRY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRetry(@javax.annotation.Nullable Object retry) {
    this.retry = retry;
  }

  public Create5200Response sla(@javax.annotation.Nullable List<SLA> sla) {
    
    this.sla = sla;
    return this;
  }

  public Create5200Response addSlaItem(SLA slaItem) {
    if (this.sla == null) {
      this.sla = new ArrayList<>();
    }
    this.sla.add(slaItem);
    return this;
  }

  /**
   * Get sla
   * @return sla
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SLA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<SLA> getSla() {
    return sla;
  }


  @JsonProperty(JSON_PROPERTY_SLA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSla(@javax.annotation.Nullable List<SLA> sla) {
    this.sla = sla;
  }

  public Create5200Response source(@javax.annotation.Nullable String source) {
    
    this.source = source;
    return this;
  }

  /**
   * Get source
   * @return source
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SOURCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSource() {
    return source;
  }


  @JsonProperty(JSON_PROPERTY_SOURCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSource(@javax.annotation.Nullable String source) {
    this.source = source;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Create5200Response create5200Response = (Create5200Response) o;
    return Objects.equals(this.id, create5200Response.id) &&
        Objects.equals(this.namespace, create5200Response.namespace) &&
        Objects.equals(this.revision, create5200Response.revision) &&
        Objects.equals(this.inputs, create5200Response.inputs) &&
        Objects.equals(this.disabled, create5200Response.disabled) &&
        Objects.equals(this.deleted, create5200Response.deleted) &&
        Objects.equals(this._finally, create5200Response._finally) &&
        Objects.equals(this.taskDefaults, create5200Response.taskDefaults) &&
        Objects.equals(this.description, create5200Response.description) &&
        Objects.equals(this.labels, create5200Response.labels) &&
        Objects.equals(this.variables, create5200Response.variables) &&
        Objects.equals(this.tasks, create5200Response.tasks) &&
        Objects.equals(this.errors, create5200Response.errors) &&
        Objects.equals(this.listeners, create5200Response.listeners) &&
        Objects.equals(this.afterExecution, create5200Response.afterExecution) &&
        Objects.equals(this.triggers, create5200Response.triggers) &&
        Objects.equals(this.pluginDefaults, create5200Response.pluginDefaults) &&
        Objects.equals(this.concurrency, create5200Response.concurrency) &&
        Objects.equals(this.outputs, create5200Response.outputs) &&
        Objects.equals(this.retry, create5200Response.retry) &&
        Objects.equals(this.sla, create5200Response.sla) &&
        Objects.equals(this.source, create5200Response.source);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, namespace, revision, inputs, disabled, deleted, _finally, taskDefaults, description, labels, variables, tasks, errors, listeners, afterExecution, triggers, pluginDefaults, concurrency, outputs, retry, sla, source);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Create5200Response {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    namespace: ").append(toIndentedString(namespace)).append("\n");
    sb.append("    revision: ").append(toIndentedString(revision)).append("\n");
    sb.append("    inputs: ").append(toIndentedString(inputs)).append("\n");
    sb.append("    disabled: ").append(toIndentedString(disabled)).append("\n");
    sb.append("    deleted: ").append(toIndentedString(deleted)).append("\n");
    sb.append("    _finally: ").append(toIndentedString(_finally)).append("\n");
    sb.append("    taskDefaults: ").append(toIndentedString(taskDefaults)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    variables: ").append(toIndentedString(variables)).append("\n");
    sb.append("    tasks: ").append(toIndentedString(tasks)).append("\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("    listeners: ").append(toIndentedString(listeners)).append("\n");
    sb.append("    afterExecution: ").append(toIndentedString(afterExecution)).append("\n");
    sb.append("    triggers: ").append(toIndentedString(triggers)).append("\n");
    sb.append("    pluginDefaults: ").append(toIndentedString(pluginDefaults)).append("\n");
    sb.append("    concurrency: ").append(toIndentedString(concurrency)).append("\n");
    sb.append("    outputs: ").append(toIndentedString(outputs)).append("\n");
    sb.append("    retry: ").append(toIndentedString(retry)).append("\n");
    sb.append("    sla: ").append(toIndentedString(sla)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `id` to the URL query string
    if (getId() != null) {
      try {
        joiner.add(String.format("%sid%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `namespace` to the URL query string
    if (getNamespace() != null) {
      try {
        joiner.add(String.format("%snamespace%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getNamespace()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `revision` to the URL query string
    if (getRevision() != null) {
      try {
        joiner.add(String.format("%srevision%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getRevision()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `inputs` to the URL query string
    if (getInputs() != null) {
      for (int i = 0; i < getInputs().size(); i++) {
        if (getInputs().get(i) != null) {
          joiner.add(getInputs().get(i).toUrlQueryString(String.format("%sinputs%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `disabled` to the URL query string
    if (getDisabled() != null) {
      try {
        joiner.add(String.format("%sdisabled%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDisabled()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `deleted` to the URL query string
    if (getDeleted() != null) {
      try {
        joiner.add(String.format("%sdeleted%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDeleted()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `finally` to the URL query string
    if (getFinally() != null) {
      for (int i = 0; i < getFinally().size(); i++) {
        if (getFinally().get(i) != null) {
          joiner.add(getFinally().get(i).toUrlQueryString(String.format("%sfinally%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `taskDefaults` to the URL query string
    if (getTaskDefaults() != null) {
      for (int i = 0; i < getTaskDefaults().size(); i++) {
        if (getTaskDefaults().get(i) != null) {
          joiner.add(getTaskDefaults().get(i).toUrlQueryString(String.format("%staskDefaults%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `description` to the URL query string
    if (getDescription() != null) {
      try {
        joiner.add(String.format("%sdescription%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDescription()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `labels` to the URL query string
    if (getLabels() != null) {
      try {
        joiner.add(String.format("%slabels%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getLabels()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `variables` to the URL query string
    if (getVariables() != null) {
      for (String _key : getVariables().keySet()) {
        try {
          joiner.add(String.format("%svariables%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix),
              getVariables().get(_key), URLEncoder.encode(String.valueOf(getVariables().get(_key)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    // add `tasks` to the URL query string
    if (getTasks() != null) {
      for (int i = 0; i < getTasks().size(); i++) {
        if (getTasks().get(i) != null) {
          joiner.add(getTasks().get(i).toUrlQueryString(String.format("%stasks%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `errors` to the URL query string
    if (getErrors() != null) {
      for (int i = 0; i < getErrors().size(); i++) {
        if (getErrors().get(i) != null) {
          joiner.add(getErrors().get(i).toUrlQueryString(String.format("%serrors%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `listeners` to the URL query string
    if (getListeners() != null) {
      for (int i = 0; i < getListeners().size(); i++) {
        if (getListeners().get(i) != null) {
          joiner.add(getListeners().get(i).toUrlQueryString(String.format("%slisteners%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `afterExecution` to the URL query string
    if (getAfterExecution() != null) {
      for (int i = 0; i < getAfterExecution().size(); i++) {
        if (getAfterExecution().get(i) != null) {
          joiner.add(getAfterExecution().get(i).toUrlQueryString(String.format("%safterExecution%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `triggers` to the URL query string
    if (getTriggers() != null) {
      for (int i = 0; i < getTriggers().size(); i++) {
        if (getTriggers().get(i) != null) {
          joiner.add(getTriggers().get(i).toUrlQueryString(String.format("%striggers%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `pluginDefaults` to the URL query string
    if (getPluginDefaults() != null) {
      for (int i = 0; i < getPluginDefaults().size(); i++) {
        if (getPluginDefaults().get(i) != null) {
          joiner.add(getPluginDefaults().get(i).toUrlQueryString(String.format("%spluginDefaults%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `concurrency` to the URL query string
    if (getConcurrency() != null) {
      joiner.add(getConcurrency().toUrlQueryString(prefix + "concurrency" + suffix));
    }

    // add `outputs` to the URL query string
    if (getOutputs() != null) {
      for (int i = 0; i < getOutputs().size(); i++) {
        if (getOutputs().get(i) != null) {
          joiner.add(getOutputs().get(i).toUrlQueryString(String.format("%soutputs%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `retry` to the URL query string
    if (getRetry() != null) {
      try {
        joiner.add(String.format("%sretry%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getRetry()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `sla` to the URL query string
    if (getSla() != null) {
      for (int i = 0; i < getSla().size(); i++) {
        if (getSla().get(i) != null) {
          joiner.add(getSla().get(i).toUrlQueryString(String.format("%ssla%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `source` to the URL query string
    if (getSource() != null) {
      try {
        joiner.add(String.format("%ssource%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSource()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

