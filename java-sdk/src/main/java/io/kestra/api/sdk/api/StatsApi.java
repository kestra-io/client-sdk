/*
 * Kestra EE
 * All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package io.kestra.api.sdk.api;

import com.fasterxml.jackson.core.type.TypeReference;

import io.kestra.api.sdk.internal.ApiException;
import io.kestra.api.sdk.internal.ApiClient;
import io.kestra.api.sdk.internal.BaseApi;
import io.kestra.api.sdk.internal.Configuration;
import io.kestra.api.sdk.internal.Pair;

import io.kestra.api.sdk.model.DailyExecutionStatistics;
import io.kestra.api.sdk.model.Execution;
import io.kestra.api.sdk.model.ExecutionCountStatistics;
import io.kestra.api.sdk.model.LogStatistics;
import io.kestra.api.sdk.model.StatsControllerByFlowStatisticRequest;
import io.kestra.api.sdk.model.StatsControllerByNamespaceStatisticRequest;
import io.kestra.api.sdk.model.StatsControllerLastExecutionsRequest;
import io.kestra.api.sdk.model.StatsControllerLogStatisticRequest;
import io.kestra.api.sdk.model.StatsControllerStatisticRequest;
import io.kestra.api.sdk.model.StatsControllerSummaryRequest;
import io.kestra.api.sdk.model.SummaryStatistics;


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-09T14:00:04.441521653Z[Etc/UTC]", comments = "Generator version: 7.13.0-SNAPSHOT")
public class StatsApi extends BaseApi {

  public StatsApi() {
    super(Configuration.getDefaultApiClient());
  }

  public StatsApi(ApiClient apiClient) {
    super(apiClient);
  }

  /**
   * Get daily statistics for executions group by namespaces and flows
   * 
   * @param statsControllerByFlowStatisticRequest  (required)
   * @return Map&lt;String, Map&lt;String, List&lt;DailyExecutionStatistics&gt;&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public Map<String, Map<String, List<DailyExecutionStatistics>>> dailyGroupByFlowStatistics(@javax.annotation.Nonnull StatsControllerByFlowStatisticRequest statsControllerByFlowStatisticRequest) throws ApiException {
    return this.dailyGroupByFlowStatistics(statsControllerByFlowStatisticRequest, Collections.emptyMap());
  }


  /**
   * Get daily statistics for executions group by namespaces and flows
   * 
   * @param statsControllerByFlowStatisticRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Map&lt;String, Map&lt;String, List&lt;DailyExecutionStatistics&gt;&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public Map<String, Map<String, List<DailyExecutionStatistics>>> dailyGroupByFlowStatistics(@javax.annotation.Nonnull StatsControllerByFlowStatisticRequest statsControllerByFlowStatisticRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = statsControllerByFlowStatisticRequest;
    
    // verify the required parameter 'statsControllerByFlowStatisticRequest' is set
    if (statsControllerByFlowStatisticRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'statsControllerByFlowStatisticRequest' when calling dailyGroupByFlowStatistics");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/stats/executions/daily/group-by-flow";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Map<String, Map<String, List<DailyExecutionStatistics>>>> localVarReturnType = new TypeReference<Map<String, Map<String, List<DailyExecutionStatistics>>>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get daily statistics for executions group by namespaces and flows
   * 
   * @param tenant  (required)
   * @param statsControllerByFlowStatisticRequest  (required)
   * @return Map&lt;String, Map&lt;String, List&lt;DailyExecutionStatistics&gt;&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public Map<String, Map<String, List<DailyExecutionStatistics>>> dailyGroupByFlowStatisticsWithTenant(@javax.annotation.Nonnull String tenant, @javax.annotation.Nonnull StatsControllerByFlowStatisticRequest statsControllerByFlowStatisticRequest) throws ApiException {
    return this.dailyGroupByFlowStatisticsWithTenant(tenant, statsControllerByFlowStatisticRequest, Collections.emptyMap());
  }


  /**
   * Get daily statistics for executions group by namespaces and flows
   * 
   * @param tenant  (required)
   * @param statsControllerByFlowStatisticRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Map&lt;String, Map&lt;String, List&lt;DailyExecutionStatistics&gt;&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public Map<String, Map<String, List<DailyExecutionStatistics>>> dailyGroupByFlowStatisticsWithTenant(@javax.annotation.Nonnull String tenant, @javax.annotation.Nonnull StatsControllerByFlowStatisticRequest statsControllerByFlowStatisticRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = statsControllerByFlowStatisticRequest;
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling dailyGroupByFlowStatisticsWithTenant");
    }
    
    // verify the required parameter 'statsControllerByFlowStatisticRequest' is set
    if (statsControllerByFlowStatisticRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'statsControllerByFlowStatisticRequest' when calling dailyGroupByFlowStatisticsWithTenant");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/stats/executions/daily/group-by-flow"
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Map<String, Map<String, List<DailyExecutionStatistics>>>> localVarReturnType = new TypeReference<Map<String, Map<String, List<DailyExecutionStatistics>>>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get daily statistics for executions
   * 
   * @param statsControllerStatisticRequest  (required)
   * @return List&lt;DailyExecutionStatistics&gt;
   * @throws ApiException if fails to make API call
   */
  public List<DailyExecutionStatistics> dailyStatistics(@javax.annotation.Nonnull StatsControllerStatisticRequest statsControllerStatisticRequest) throws ApiException {
    return this.dailyStatistics(statsControllerStatisticRequest, Collections.emptyMap());
  }


  /**
   * Get daily statistics for executions
   * 
   * @param statsControllerStatisticRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return List&lt;DailyExecutionStatistics&gt;
   * @throws ApiException if fails to make API call
   */
  public List<DailyExecutionStatistics> dailyStatistics(@javax.annotation.Nonnull StatsControllerStatisticRequest statsControllerStatisticRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = statsControllerStatisticRequest;
    
    // verify the required parameter 'statsControllerStatisticRequest' is set
    if (statsControllerStatisticRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'statsControllerStatisticRequest' when calling dailyStatistics");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/stats/executions/daily";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<List<DailyExecutionStatistics>> localVarReturnType = new TypeReference<List<DailyExecutionStatistics>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get daily statistics for executions grouped by namespace
   * 
   * @param statsControllerByNamespaceStatisticRequest  (required)
   * @return Map&lt;String, ExecutionCountStatistics&gt;
   * @throws ApiException if fails to make API call
   */
  public Map<String, ExecutionCountStatistics> dailyStatisticsGroupByNamespace(@javax.annotation.Nonnull StatsControllerByNamespaceStatisticRequest statsControllerByNamespaceStatisticRequest) throws ApiException {
    return this.dailyStatisticsGroupByNamespace(statsControllerByNamespaceStatisticRequest, Collections.emptyMap());
  }


  /**
   * Get daily statistics for executions grouped by namespace
   * 
   * @param statsControllerByNamespaceStatisticRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Map&lt;String, ExecutionCountStatistics&gt;
   * @throws ApiException if fails to make API call
   */
  public Map<String, ExecutionCountStatistics> dailyStatisticsGroupByNamespace(@javax.annotation.Nonnull StatsControllerByNamespaceStatisticRequest statsControllerByNamespaceStatisticRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = statsControllerByNamespaceStatisticRequest;
    
    // verify the required parameter 'statsControllerByNamespaceStatisticRequest' is set
    if (statsControllerByNamespaceStatisticRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'statsControllerByNamespaceStatisticRequest' when calling dailyStatisticsGroupByNamespace");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/stats/executions/daily/group-by-namespace";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Map<String, ExecutionCountStatistics>> localVarReturnType = new TypeReference<Map<String, ExecutionCountStatistics>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get daily statistics for executions grouped by namespace
   * 
   * @param tenant  (required)
   * @param statsControllerByNamespaceStatisticRequest  (required)
   * @return Map&lt;String, ExecutionCountStatistics&gt;
   * @throws ApiException if fails to make API call
   */
  public Map<String, ExecutionCountStatistics> dailyStatisticsGroupByNamespaceWithTenant(@javax.annotation.Nonnull String tenant, @javax.annotation.Nonnull StatsControllerByNamespaceStatisticRequest statsControllerByNamespaceStatisticRequest) throws ApiException {
    return this.dailyStatisticsGroupByNamespaceWithTenant(tenant, statsControllerByNamespaceStatisticRequest, Collections.emptyMap());
  }


  /**
   * Get daily statistics for executions grouped by namespace
   * 
   * @param tenant  (required)
   * @param statsControllerByNamespaceStatisticRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Map&lt;String, ExecutionCountStatistics&gt;
   * @throws ApiException if fails to make API call
   */
  public Map<String, ExecutionCountStatistics> dailyStatisticsGroupByNamespaceWithTenant(@javax.annotation.Nonnull String tenant, @javax.annotation.Nonnull StatsControllerByNamespaceStatisticRequest statsControllerByNamespaceStatisticRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = statsControllerByNamespaceStatisticRequest;
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling dailyStatisticsGroupByNamespaceWithTenant");
    }
    
    // verify the required parameter 'statsControllerByNamespaceStatisticRequest' is set
    if (statsControllerByNamespaceStatisticRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'statsControllerByNamespaceStatisticRequest' when calling dailyStatisticsGroupByNamespaceWithTenant");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/stats/executions/daily/group-by-namespace"
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Map<String, ExecutionCountStatistics>> localVarReturnType = new TypeReference<Map<String, ExecutionCountStatistics>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get daily statistics for executions
   * 
   * @param tenant  (required)
   * @param statsControllerStatisticRequest  (required)
   * @return List&lt;DailyExecutionStatistics&gt;
   * @throws ApiException if fails to make API call
   */
  public List<DailyExecutionStatistics> dailyStatisticsWithTenant(@javax.annotation.Nonnull String tenant, @javax.annotation.Nonnull StatsControllerStatisticRequest statsControllerStatisticRequest) throws ApiException {
    return this.dailyStatisticsWithTenant(tenant, statsControllerStatisticRequest, Collections.emptyMap());
  }


  /**
   * Get daily statistics for executions
   * 
   * @param tenant  (required)
   * @param statsControllerStatisticRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return List&lt;DailyExecutionStatistics&gt;
   * @throws ApiException if fails to make API call
   */
  public List<DailyExecutionStatistics> dailyStatisticsWithTenant(@javax.annotation.Nonnull String tenant, @javax.annotation.Nonnull StatsControllerStatisticRequest statsControllerStatisticRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = statsControllerStatisticRequest;
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling dailyStatisticsWithTenant");
    }
    
    // verify the required parameter 'statsControllerStatisticRequest' is set
    if (statsControllerStatisticRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'statsControllerStatisticRequest' when calling dailyStatisticsWithTenant");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/stats/executions/daily"
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<List<DailyExecutionStatistics>> localVarReturnType = new TypeReference<List<DailyExecutionStatistics>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get latest execution by flows
   * 
   * @param statsControllerLastExecutionsRequest  (required)
   * @return List&lt;Execution&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Execution> lastExecutions(@javax.annotation.Nonnull StatsControllerLastExecutionsRequest statsControllerLastExecutionsRequest) throws ApiException {
    return this.lastExecutions(statsControllerLastExecutionsRequest, Collections.emptyMap());
  }


  /**
   * Get latest execution by flows
   * 
   * @param statsControllerLastExecutionsRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return List&lt;Execution&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Execution> lastExecutions(@javax.annotation.Nonnull StatsControllerLastExecutionsRequest statsControllerLastExecutionsRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = statsControllerLastExecutionsRequest;
    
    // verify the required parameter 'statsControllerLastExecutionsRequest' is set
    if (statsControllerLastExecutionsRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'statsControllerLastExecutionsRequest' when calling lastExecutions");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/stats/executions/latest/group-by-flow";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<List<Execution>> localVarReturnType = new TypeReference<List<Execution>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get latest execution by flows
   * 
   * @param tenant  (required)
   * @param statsControllerLastExecutionsRequest  (required)
   * @return List&lt;Execution&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Execution> lastExecutionsWithTenant(@javax.annotation.Nonnull String tenant, @javax.annotation.Nonnull StatsControllerLastExecutionsRequest statsControllerLastExecutionsRequest) throws ApiException {
    return this.lastExecutionsWithTenant(tenant, statsControllerLastExecutionsRequest, Collections.emptyMap());
  }


  /**
   * Get latest execution by flows
   * 
   * @param tenant  (required)
   * @param statsControllerLastExecutionsRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return List&lt;Execution&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Execution> lastExecutionsWithTenant(@javax.annotation.Nonnull String tenant, @javax.annotation.Nonnull StatsControllerLastExecutionsRequest statsControllerLastExecutionsRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = statsControllerLastExecutionsRequest;
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling lastExecutionsWithTenant");
    }
    
    // verify the required parameter 'statsControllerLastExecutionsRequest' is set
    if (statsControllerLastExecutionsRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'statsControllerLastExecutionsRequest' when calling lastExecutionsWithTenant");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/stats/executions/latest/group-by-flow"
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<List<Execution>> localVarReturnType = new TypeReference<List<Execution>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get daily statistics for logs
   * 
   * @param statsControllerLogStatisticRequest  (required)
   * @return List&lt;LogStatistics&gt;
   * @throws ApiException if fails to make API call
   */
  public List<LogStatistics> logsDailyStatistics(@javax.annotation.Nonnull StatsControllerLogStatisticRequest statsControllerLogStatisticRequest) throws ApiException {
    return this.logsDailyStatistics(statsControllerLogStatisticRequest, Collections.emptyMap());
  }


  /**
   * Get daily statistics for logs
   * 
   * @param statsControllerLogStatisticRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return List&lt;LogStatistics&gt;
   * @throws ApiException if fails to make API call
   */
  public List<LogStatistics> logsDailyStatistics(@javax.annotation.Nonnull StatsControllerLogStatisticRequest statsControllerLogStatisticRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = statsControllerLogStatisticRequest;
    
    // verify the required parameter 'statsControllerLogStatisticRequest' is set
    if (statsControllerLogStatisticRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'statsControllerLogStatisticRequest' when calling logsDailyStatistics");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/stats/logs/daily";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<List<LogStatistics>> localVarReturnType = new TypeReference<List<LogStatistics>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get daily statistics for logs
   * 
   * @param tenant  (required)
   * @param statsControllerLogStatisticRequest  (required)
   * @return List&lt;LogStatistics&gt;
   * @throws ApiException if fails to make API call
   */
  public List<LogStatistics> logsDailyStatisticsWithTenant(@javax.annotation.Nonnull String tenant, @javax.annotation.Nonnull StatsControllerLogStatisticRequest statsControllerLogStatisticRequest) throws ApiException {
    return this.logsDailyStatisticsWithTenant(tenant, statsControllerLogStatisticRequest, Collections.emptyMap());
  }


  /**
   * Get daily statistics for logs
   * 
   * @param tenant  (required)
   * @param statsControllerLogStatisticRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return List&lt;LogStatistics&gt;
   * @throws ApiException if fails to make API call
   */
  public List<LogStatistics> logsDailyStatisticsWithTenant(@javax.annotation.Nonnull String tenant, @javax.annotation.Nonnull StatsControllerLogStatisticRequest statsControllerLogStatisticRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = statsControllerLogStatisticRequest;
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling logsDailyStatisticsWithTenant");
    }
    
    // verify the required parameter 'statsControllerLogStatisticRequest' is set
    if (statsControllerLogStatisticRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'statsControllerLogStatisticRequest' when calling logsDailyStatisticsWithTenant");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/stats/logs/daily"
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<List<LogStatistics>> localVarReturnType = new TypeReference<List<LogStatistics>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get summary statistics
   * 
   * @param statsControllerSummaryRequest  (required)
   * @return SummaryStatistics
   * @throws ApiException if fails to make API call
   */
  public SummaryStatistics summary(@javax.annotation.Nonnull StatsControllerSummaryRequest statsControllerSummaryRequest) throws ApiException {
    return this.summary(statsControllerSummaryRequest, Collections.emptyMap());
  }


  /**
   * Get summary statistics
   * 
   * @param statsControllerSummaryRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return SummaryStatistics
   * @throws ApiException if fails to make API call
   */
  public SummaryStatistics summary(@javax.annotation.Nonnull StatsControllerSummaryRequest statsControllerSummaryRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = statsControllerSummaryRequest;
    
    // verify the required parameter 'statsControllerSummaryRequest' is set
    if (statsControllerSummaryRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'statsControllerSummaryRequest' when calling summary");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/stats/summary";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<SummaryStatistics> localVarReturnType = new TypeReference<SummaryStatistics>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get summary statistics
   * 
   * @param tenant  (required)
   * @param statsControllerSummaryRequest  (required)
   * @return SummaryStatistics
   * @throws ApiException if fails to make API call
   */
  public SummaryStatistics summaryWithTenant(@javax.annotation.Nonnull String tenant, @javax.annotation.Nonnull StatsControllerSummaryRequest statsControllerSummaryRequest) throws ApiException {
    return this.summaryWithTenant(tenant, statsControllerSummaryRequest, Collections.emptyMap());
  }


  /**
   * Get summary statistics
   * 
   * @param tenant  (required)
   * @param statsControllerSummaryRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return SummaryStatistics
   * @throws ApiException if fails to make API call
   */
  public SummaryStatistics summaryWithTenant(@javax.annotation.Nonnull String tenant, @javax.annotation.Nonnull StatsControllerSummaryRequest statsControllerSummaryRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = statsControllerSummaryRequest;
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling summaryWithTenant");
    }
    
    // verify the required parameter 'statsControllerSummaryRequest' is set
    if (statsControllerSummaryRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'statsControllerSummaryRequest' when calling summaryWithTenant");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/stats/summary"
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<SummaryStatistics> localVarReturnType = new TypeReference<SummaryStatistics>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get daily statistics for taskRuns
   * 
   * @param statsControllerStatisticRequest  (required)
   * @return List&lt;DailyExecutionStatistics&gt;
   * @throws ApiException if fails to make API call
   */
  public List<DailyExecutionStatistics> taskRunsDailyStatistics(@javax.annotation.Nonnull StatsControllerStatisticRequest statsControllerStatisticRequest) throws ApiException {
    return this.taskRunsDailyStatistics(statsControllerStatisticRequest, Collections.emptyMap());
  }


  /**
   * Get daily statistics for taskRuns
   * 
   * @param statsControllerStatisticRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return List&lt;DailyExecutionStatistics&gt;
   * @throws ApiException if fails to make API call
   */
  public List<DailyExecutionStatistics> taskRunsDailyStatistics(@javax.annotation.Nonnull StatsControllerStatisticRequest statsControllerStatisticRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = statsControllerStatisticRequest;
    
    // verify the required parameter 'statsControllerStatisticRequest' is set
    if (statsControllerStatisticRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'statsControllerStatisticRequest' when calling taskRunsDailyStatistics");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/stats/taskruns/daily";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<List<DailyExecutionStatistics>> localVarReturnType = new TypeReference<List<DailyExecutionStatistics>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get daily statistics for taskRuns
   * 
   * @param tenant  (required)
   * @param statsControllerStatisticRequest  (required)
   * @return List&lt;DailyExecutionStatistics&gt;
   * @throws ApiException if fails to make API call
   */
  public List<DailyExecutionStatistics> taskRunsDailyStatisticsWithTenant(@javax.annotation.Nonnull String tenant, @javax.annotation.Nonnull StatsControllerStatisticRequest statsControllerStatisticRequest) throws ApiException {
    return this.taskRunsDailyStatisticsWithTenant(tenant, statsControllerStatisticRequest, Collections.emptyMap());
  }


  /**
   * Get daily statistics for taskRuns
   * 
   * @param tenant  (required)
   * @param statsControllerStatisticRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return List&lt;DailyExecutionStatistics&gt;
   * @throws ApiException if fails to make API call
   */
  public List<DailyExecutionStatistics> taskRunsDailyStatisticsWithTenant(@javax.annotation.Nonnull String tenant, @javax.annotation.Nonnull StatsControllerStatisticRequest statsControllerStatisticRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = statsControllerStatisticRequest;
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling taskRunsDailyStatisticsWithTenant");
    }
    
    // verify the required parameter 'statsControllerStatisticRequest' is set
    if (statsControllerStatisticRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'statsControllerStatisticRequest' when calling taskRunsDailyStatisticsWithTenant");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/stats/taskruns/daily"
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<List<DailyExecutionStatistics>> localVarReturnType = new TypeReference<List<DailyExecutionStatistics>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  @Override
  public <T> T invokeAPI(String url, String method, Object request, TypeReference<T> returnType, Map<String, String> additionalHeaders) throws ApiException {
    String localVarPath = url.replace(apiClient.getBaseURL(), "");
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarHeaderParams.putAll(additionalHeaders);

    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    return apiClient.invokeAPI(
      localVarPath,
        method,
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        request,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        returnType
    );
  }
}
