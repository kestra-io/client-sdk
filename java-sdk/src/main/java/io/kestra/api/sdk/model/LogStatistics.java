/*
 * Kestra EE
 * All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kestra.api.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.kestra.api.sdk.model.LogStatisticsCounts;
import java.time.OffsetDateTime;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * LogStatistics
 */
@JsonPropertyOrder({
  LogStatistics.JSON_PROPERTY_TIMESTAMP,
  LogStatistics.JSON_PROPERTY_COUNTS,
  LogStatistics.JSON_PROPERTY_GROUP_BY
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-09T14:00:04.441521653Z[Etc/UTC]", comments = "Generator version: 7.13.0-SNAPSHOT")
public class LogStatistics {
  public static final String JSON_PROPERTY_TIMESTAMP = "timestamp";
  @javax.annotation.Nonnull
  private OffsetDateTime timestamp;

  public static final String JSON_PROPERTY_COUNTS = "counts";
  @javax.annotation.Nonnull
  private LogStatisticsCounts counts;

  public static final String JSON_PROPERTY_GROUP_BY = "groupBy";
  @javax.annotation.Nonnull
  private String groupBy;

  public LogStatistics() {
  }

  public LogStatistics timestamp(@javax.annotation.Nonnull OffsetDateTime timestamp) {
    
    this.timestamp = timestamp;
    return this;
  }

  /**
   * Get timestamp
   * @return timestamp
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TIMESTAMP)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public OffsetDateTime getTimestamp() {
    return timestamp;
  }


  @JsonProperty(JSON_PROPERTY_TIMESTAMP)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTimestamp(@javax.annotation.Nonnull OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }

  public LogStatistics counts(@javax.annotation.Nonnull LogStatisticsCounts counts) {
    
    this.counts = counts;
    return this;
  }

  /**
   * Get counts
   * @return counts
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_COUNTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public LogStatisticsCounts getCounts() {
    return counts;
  }


  @JsonProperty(JSON_PROPERTY_COUNTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCounts(@javax.annotation.Nonnull LogStatisticsCounts counts) {
    this.counts = counts;
  }

  public LogStatistics groupBy(@javax.annotation.Nonnull String groupBy) {
    
    this.groupBy = groupBy;
    return this;
  }

  /**
   * Get groupBy
   * @return groupBy
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_GROUP_BY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getGroupBy() {
    return groupBy;
  }


  @JsonProperty(JSON_PROPERTY_GROUP_BY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setGroupBy(@javax.annotation.Nonnull String groupBy) {
    this.groupBy = groupBy;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LogStatistics logStatistics = (LogStatistics) o;
    return Objects.equals(this.timestamp, logStatistics.timestamp) &&
        Objects.equals(this.counts, logStatistics.counts) &&
        Objects.equals(this.groupBy, logStatistics.groupBy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(timestamp, counts, groupBy);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LogStatistics {\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    counts: ").append(toIndentedString(counts)).append("\n");
    sb.append("    groupBy: ").append(toIndentedString(groupBy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `timestamp` to the URL query string
    if (getTimestamp() != null) {
      try {
        joiner.add(String.format("%stimestamp%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTimestamp()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `counts` to the URL query string
    if (getCounts() != null) {
      joiner.add(getCounts().toUrlQueryString(prefix + "counts" + suffix));
    }

    // add `groupBy` to the URL query string
    if (getGroupBy() != null) {
      try {
        joiner.add(String.format("%sgroupBy%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getGroupBy()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

