/*
 * Kestra EE
 * All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kestra.api.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.kestra.api.sdk.model.FlowScope;
import io.kestra.api.sdk.model.StateType;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * StatsControllerStatisticRequest
 */
@JsonPropertyOrder({
  StatsControllerStatisticRequest.JSON_PROPERTY_Q,
  StatsControllerStatisticRequest.JSON_PROPERTY_SCOPE,
  StatsControllerStatisticRequest.JSON_PROPERTY_NAMESPACE,
  StatsControllerStatisticRequest.JSON_PROPERTY_FLOW_ID,
  StatsControllerStatisticRequest.JSON_PROPERTY_START_DATE,
  StatsControllerStatisticRequest.JSON_PROPERTY_END_DATE,
  StatsControllerStatisticRequest.JSON_PROPERTY_STATE
})
@JsonTypeName("StatsController.StatisticRequest")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-31T15:48:45.246126227Z[Etc/UTC]", comments = "Generator version: 7.11.0-SNAPSHOT")
public class StatsControllerStatisticRequest {
  public static final String JSON_PROPERTY_Q = "q";
  @javax.annotation.Nullable
  private JsonNullable<String> q = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_SCOPE = "scope";
  @javax.annotation.Nullable
  private JsonNullable<List<FlowScope>> scope = JsonNullable.<List<FlowScope>>undefined();

  public static final String JSON_PROPERTY_NAMESPACE = "namespace";
  @javax.annotation.Nullable
  private JsonNullable<String> namespace = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_FLOW_ID = "flowId";
  @javax.annotation.Nullable
  private JsonNullable<String> flowId = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_START_DATE = "startDate";
  @javax.annotation.Nullable
  private JsonNullable<OffsetDateTime> startDate = JsonNullable.<OffsetDateTime>undefined();

  public static final String JSON_PROPERTY_END_DATE = "endDate";
  @javax.annotation.Nullable
  private JsonNullable<OffsetDateTime> endDate = JsonNullable.<OffsetDateTime>undefined();

  public static final String JSON_PROPERTY_STATE = "state";
  @javax.annotation.Nullable
  private JsonNullable<List<StateType>> state = JsonNullable.<List<StateType>>undefined();

  public StatsControllerStatisticRequest() {
  }

  public StatsControllerStatisticRequest q(@javax.annotation.Nullable String q) {
    this.q = JsonNullable.<String>of(q);
    
    return this;
  }

  /**
   * Get q
   * @return q
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public String getQ() {
        return q.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_Q)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getQ_JsonNullable() {
    return q;
  }
  
  @JsonProperty(JSON_PROPERTY_Q)
  public void setQ_JsonNullable(JsonNullable<String> q) {
    this.q = q;
  }

  public void setQ(@javax.annotation.Nullable String q) {
    this.q = JsonNullable.<String>of(q);
  }

  public StatsControllerStatisticRequest scope(@javax.annotation.Nullable List<FlowScope> scope) {
    this.scope = JsonNullable.<List<FlowScope>>of(scope);
    
    return this;
  }

  public StatsControllerStatisticRequest addScopeItem(FlowScope scopeItem) {
    if (this.scope == null || !this.scope.isPresent()) {
      this.scope = JsonNullable.<List<FlowScope>>of(new ArrayList<>());
    }
    try {
      this.scope.get().add(scopeItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

  /**
   * Get scope
   * @return scope
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public List<FlowScope> getScope() {
        return scope.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_SCOPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<List<FlowScope>> getScope_JsonNullable() {
    return scope;
  }
  
  @JsonProperty(JSON_PROPERTY_SCOPE)
  public void setScope_JsonNullable(JsonNullable<List<FlowScope>> scope) {
    this.scope = scope;
  }

  public void setScope(@javax.annotation.Nullable List<FlowScope> scope) {
    this.scope = JsonNullable.<List<FlowScope>>of(scope);
  }

  public StatsControllerStatisticRequest namespace(@javax.annotation.Nullable String namespace) {
    this.namespace = JsonNullable.<String>of(namespace);
    
    return this;
  }

  /**
   * Get namespace
   * @return namespace
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public String getNamespace() {
        return namespace.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_NAMESPACE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getNamespace_JsonNullable() {
    return namespace;
  }
  
  @JsonProperty(JSON_PROPERTY_NAMESPACE)
  public void setNamespace_JsonNullable(JsonNullable<String> namespace) {
    this.namespace = namespace;
  }

  public void setNamespace(@javax.annotation.Nullable String namespace) {
    this.namespace = JsonNullable.<String>of(namespace);
  }

  public StatsControllerStatisticRequest flowId(@javax.annotation.Nullable String flowId) {
    this.flowId = JsonNullable.<String>of(flowId);
    
    return this;
  }

  /**
   * Get flowId
   * @return flowId
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public String getFlowId() {
        return flowId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_FLOW_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getFlowId_JsonNullable() {
    return flowId;
  }
  
  @JsonProperty(JSON_PROPERTY_FLOW_ID)
  public void setFlowId_JsonNullable(JsonNullable<String> flowId) {
    this.flowId = flowId;
  }

  public void setFlowId(@javax.annotation.Nullable String flowId) {
    this.flowId = JsonNullable.<String>of(flowId);
  }

  public StatsControllerStatisticRequest startDate(@javax.annotation.Nullable OffsetDateTime startDate) {
    this.startDate = JsonNullable.<OffsetDateTime>of(startDate);
    
    return this;
  }

  /**
   * Get startDate
   * @return startDate
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public OffsetDateTime getStartDate() {
        return startDate.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_START_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<OffsetDateTime> getStartDate_JsonNullable() {
    return startDate;
  }
  
  @JsonProperty(JSON_PROPERTY_START_DATE)
  public void setStartDate_JsonNullable(JsonNullable<OffsetDateTime> startDate) {
    this.startDate = startDate;
  }

  public void setStartDate(@javax.annotation.Nullable OffsetDateTime startDate) {
    this.startDate = JsonNullable.<OffsetDateTime>of(startDate);
  }

  public StatsControllerStatisticRequest endDate(@javax.annotation.Nullable OffsetDateTime endDate) {
    this.endDate = JsonNullable.<OffsetDateTime>of(endDate);
    
    return this;
  }

  /**
   * Get endDate
   * @return endDate
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public OffsetDateTime getEndDate() {
        return endDate.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_END_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<OffsetDateTime> getEndDate_JsonNullable() {
    return endDate;
  }
  
  @JsonProperty(JSON_PROPERTY_END_DATE)
  public void setEndDate_JsonNullable(JsonNullable<OffsetDateTime> endDate) {
    this.endDate = endDate;
  }

  public void setEndDate(@javax.annotation.Nullable OffsetDateTime endDate) {
    this.endDate = JsonNullable.<OffsetDateTime>of(endDate);
  }

  public StatsControllerStatisticRequest state(@javax.annotation.Nullable List<StateType> state) {
    this.state = JsonNullable.<List<StateType>>of(state);
    
    return this;
  }

  public StatsControllerStatisticRequest addStateItem(StateType stateItem) {
    if (this.state == null || !this.state.isPresent()) {
      this.state = JsonNullable.<List<StateType>>of(new ArrayList<>());
    }
    try {
      this.state.get().add(stateItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public List<StateType> getState() {
        return state.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<List<StateType>> getState_JsonNullable() {
    return state;
  }
  
  @JsonProperty(JSON_PROPERTY_STATE)
  public void setState_JsonNullable(JsonNullable<List<StateType>> state) {
    this.state = state;
  }

  public void setState(@javax.annotation.Nullable List<StateType> state) {
    this.state = JsonNullable.<List<StateType>>of(state);
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StatsControllerStatisticRequest statsControllerStatisticRequest = (StatsControllerStatisticRequest) o;
    return equalsNullable(this.q, statsControllerStatisticRequest.q) &&
        equalsNullable(this.scope, statsControllerStatisticRequest.scope) &&
        equalsNullable(this.namespace, statsControllerStatisticRequest.namespace) &&
        equalsNullable(this.flowId, statsControllerStatisticRequest.flowId) &&
        equalsNullable(this.startDate, statsControllerStatisticRequest.startDate) &&
        equalsNullable(this.endDate, statsControllerStatisticRequest.endDate) &&
        equalsNullable(this.state, statsControllerStatisticRequest.state);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(q), hashCodeNullable(scope), hashCodeNullable(namespace), hashCodeNullable(flowId), hashCodeNullable(startDate), hashCodeNullable(endDate), hashCodeNullable(state));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StatsControllerStatisticRequest {\n");
    sb.append("    q: ").append(toIndentedString(q)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    namespace: ").append(toIndentedString(namespace)).append("\n");
    sb.append("    flowId: ").append(toIndentedString(flowId)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `q` to the URL query string
    if (getQ() != null) {
      try {
        joiner.add(String.format("%sq%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getQ()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `scope` to the URL query string
    if (getScope() != null) {
      for (int i = 0; i < getScope().size(); i++) {
        if (getScope().get(i) != null) {
          try {
            joiner.add(String.format("%sscope%s%s=%s", prefix, suffix,
                "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
                URLEncoder.encode(String.valueOf(getScope().get(i)), "UTF-8").replaceAll("\\+", "%20")));
          } catch (UnsupportedEncodingException e) {
            // Should never happen, UTF-8 is always supported
            throw new RuntimeException(e);
          }
        }
      }
    }

    // add `namespace` to the URL query string
    if (getNamespace() != null) {
      try {
        joiner.add(String.format("%snamespace%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getNamespace()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `flowId` to the URL query string
    if (getFlowId() != null) {
      try {
        joiner.add(String.format("%sflowId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getFlowId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `startDate` to the URL query string
    if (getStartDate() != null) {
      try {
        joiner.add(String.format("%sstartDate%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getStartDate()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `endDate` to the URL query string
    if (getEndDate() != null) {
      try {
        joiner.add(String.format("%sendDate%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getEndDate()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `state` to the URL query string
    if (getState() != null) {
      for (int i = 0; i < getState().size(); i++) {
        if (getState().get(i) != null) {
          try {
            joiner.add(String.format("%sstate%s%s=%s", prefix, suffix,
                "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
                URLEncoder.encode(String.valueOf(getState().get(i)), "UTF-8").replaceAll("\\+", "%20")));
          } catch (UnsupportedEncodingException e) {
            // Should never happen, UTF-8 is always supported
            throw new RuntimeException(e);
          }
        }
      }
    }

    return joiner.toString();
  }

}

