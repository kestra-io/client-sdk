/*
 * Kestra EE
 * All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kestra.api.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * LogStatisticsCounts
 */
@JsonPropertyOrder({
  LogStatisticsCounts.JSON_PROPERTY_E_R_R_O_R,
  LogStatisticsCounts.JSON_PROPERTY_W_A_R_N,
  LogStatisticsCounts.JSON_PROPERTY_I_N_F_O,
  LogStatisticsCounts.JSON_PROPERTY_D_E_B_U_G,
  LogStatisticsCounts.JSON_PROPERTY_T_R_A_C_E
})
@JsonTypeName("LogStatistics_counts")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-31T15:48:45.246126227Z[Etc/UTC]", comments = "Generator version: 7.11.0-SNAPSHOT")
public class LogStatisticsCounts {
  public static final String JSON_PROPERTY_E_R_R_O_R = "ERROR";
  @javax.annotation.Nullable
  private Long ERROR;

  public static final String JSON_PROPERTY_W_A_R_N = "WARN";
  @javax.annotation.Nullable
  private Long WARN;

  public static final String JSON_PROPERTY_I_N_F_O = "INFO";
  @javax.annotation.Nullable
  private Long INFO;

  public static final String JSON_PROPERTY_D_E_B_U_G = "DEBUG";
  @javax.annotation.Nullable
  private Long DEBUG;

  public static final String JSON_PROPERTY_T_R_A_C_E = "TRACE";
  @javax.annotation.Nullable
  private Long TRACE;

  public LogStatisticsCounts() {
  }

  public LogStatisticsCounts ERROR(@javax.annotation.Nullable Long ERROR) {
    
    this.ERROR = ERROR;
    return this;
  }

  /**
   * Get ERROR
   * @return ERROR
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_E_R_R_O_R)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getERROR() {
    return ERROR;
  }


  @JsonProperty(JSON_PROPERTY_E_R_R_O_R)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setERROR(@javax.annotation.Nullable Long ERROR) {
    this.ERROR = ERROR;
  }

  public LogStatisticsCounts WARN(@javax.annotation.Nullable Long WARN) {
    
    this.WARN = WARN;
    return this;
  }

  /**
   * Get WARN
   * @return WARN
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_W_A_R_N)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getWARN() {
    return WARN;
  }


  @JsonProperty(JSON_PROPERTY_W_A_R_N)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWARN(@javax.annotation.Nullable Long WARN) {
    this.WARN = WARN;
  }

  public LogStatisticsCounts INFO(@javax.annotation.Nullable Long INFO) {
    
    this.INFO = INFO;
    return this;
  }

  /**
   * Get INFO
   * @return INFO
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_I_N_F_O)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getINFO() {
    return INFO;
  }


  @JsonProperty(JSON_PROPERTY_I_N_F_O)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setINFO(@javax.annotation.Nullable Long INFO) {
    this.INFO = INFO;
  }

  public LogStatisticsCounts DEBUG(@javax.annotation.Nullable Long DEBUG) {
    
    this.DEBUG = DEBUG;
    return this;
  }

  /**
   * Get DEBUG
   * @return DEBUG
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_D_E_B_U_G)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getDEBUG() {
    return DEBUG;
  }


  @JsonProperty(JSON_PROPERTY_D_E_B_U_G)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDEBUG(@javax.annotation.Nullable Long DEBUG) {
    this.DEBUG = DEBUG;
  }

  public LogStatisticsCounts TRACE(@javax.annotation.Nullable Long TRACE) {
    
    this.TRACE = TRACE;
    return this;
  }

  /**
   * Get TRACE
   * @return TRACE
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_T_R_A_C_E)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getTRACE() {
    return TRACE;
  }


  @JsonProperty(JSON_PROPERTY_T_R_A_C_E)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTRACE(@javax.annotation.Nullable Long TRACE) {
    this.TRACE = TRACE;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LogStatisticsCounts logStatisticsCounts = (LogStatisticsCounts) o;
    return Objects.equals(this.ERROR, logStatisticsCounts.ERROR) &&
        Objects.equals(this.WARN, logStatisticsCounts.WARN) &&
        Objects.equals(this.INFO, logStatisticsCounts.INFO) &&
        Objects.equals(this.DEBUG, logStatisticsCounts.DEBUG) &&
        Objects.equals(this.TRACE, logStatisticsCounts.TRACE);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ERROR, WARN, INFO, DEBUG, TRACE);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LogStatisticsCounts {\n");
    sb.append("    ERROR: ").append(toIndentedString(ERROR)).append("\n");
    sb.append("    WARN: ").append(toIndentedString(WARN)).append("\n");
    sb.append("    INFO: ").append(toIndentedString(INFO)).append("\n");
    sb.append("    DEBUG: ").append(toIndentedString(DEBUG)).append("\n");
    sb.append("    TRACE: ").append(toIndentedString(TRACE)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `ERROR` to the URL query string
    if (getERROR() != null) {
      try {
        joiner.add(String.format("%sERROR%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getERROR()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `WARN` to the URL query string
    if (getWARN() != null) {
      try {
        joiner.add(String.format("%sWARN%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getWARN()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `INFO` to the URL query string
    if (getINFO() != null) {
      try {
        joiner.add(String.format("%sINFO%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getINFO()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `DEBUG` to the URL query string
    if (getDEBUG() != null) {
      try {
        joiner.add(String.format("%sDEBUG%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDEBUG()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `TRACE` to the URL query string
    if (getTRACE() != null) {
      try {
        joiner.add(String.format("%sTRACE%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTRACE()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

