/*
 * Kestra EE
 * All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package io.kestra.api.sdk.api;

import com.fasterxml.jackson.core.type.TypeReference;

import io.kestra.api.sdk.internal.ApiException;
import io.kestra.api.sdk.internal.ApiClient;
import io.kestra.api.sdk.internal.BaseApi;
import io.kestra.api.sdk.internal.Configuration;
import io.kestra.api.sdk.internal.Pair;

import io.kestra.api.sdk.model.ClusterControllerApiCreateOrUpdateWorkerGroupRequest;
import io.kestra.api.sdk.model.ClusterControllerApiWorkerGroup;
import io.kestra.api.sdk.model.ClusterControllerApiWorkerGroupDetails;
import io.kestra.api.sdk.model.ClusterControllerApiWorkerGroupList;


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-31T15:48:45.246126227Z[Etc/UTC]", comments = "Generator version: 7.11.0-SNAPSHOT")
public class WorkerGroupsApi extends BaseApi {

  public WorkerGroupsApi() {
    super(Configuration.getDefaultApiClient());
  }

  public WorkerGroupsApi(ApiClient apiClient) {
    super(apiClient);
  }

  /**
   * Create a new worker group.
   * 
   * @param clusterControllerApiCreateOrUpdateWorkerGroupRequest  (required)
   * @return ClusterControllerApiWorkerGroup
   * @throws ApiException if fails to make API call
   */
  public ClusterControllerApiWorkerGroup createWorkerGroup(ClusterControllerApiCreateOrUpdateWorkerGroupRequest clusterControllerApiCreateOrUpdateWorkerGroupRequest) throws ApiException {
    return this.createWorkerGroup(clusterControllerApiCreateOrUpdateWorkerGroupRequest, Collections.emptyMap());
  }


  /**
   * Create a new worker group.
   * 
   * @param clusterControllerApiCreateOrUpdateWorkerGroupRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return ClusterControllerApiWorkerGroup
   * @throws ApiException if fails to make API call
   */
  public ClusterControllerApiWorkerGroup createWorkerGroup(ClusterControllerApiCreateOrUpdateWorkerGroupRequest clusterControllerApiCreateOrUpdateWorkerGroupRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = clusterControllerApiCreateOrUpdateWorkerGroupRequest;
    
    // verify the required parameter 'clusterControllerApiCreateOrUpdateWorkerGroupRequest' is set
    if (clusterControllerApiCreateOrUpdateWorkerGroupRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'clusterControllerApiCreateOrUpdateWorkerGroupRequest' when calling createWorkerGroup");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/cluster/workergroups";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<ClusterControllerApiWorkerGroup> localVarReturnType = new TypeReference<ClusterControllerApiWorkerGroup>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Create a new worker group.
   * 
   * @param tenant  (required)
   * @param clusterControllerApiCreateOrUpdateWorkerGroupRequest  (required)
   * @return ClusterControllerApiWorkerGroup
   * @throws ApiException if fails to make API call
   */
  public ClusterControllerApiWorkerGroup createWorkerGroup1(String tenant, ClusterControllerApiCreateOrUpdateWorkerGroupRequest clusterControllerApiCreateOrUpdateWorkerGroupRequest) throws ApiException {
    return this.createWorkerGroup1(tenant, clusterControllerApiCreateOrUpdateWorkerGroupRequest, Collections.emptyMap());
  }


  /**
   * Create a new worker group.
   * 
   * @param tenant  (required)
   * @param clusterControllerApiCreateOrUpdateWorkerGroupRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return ClusterControllerApiWorkerGroup
   * @throws ApiException if fails to make API call
   */
  public ClusterControllerApiWorkerGroup createWorkerGroup1(String tenant, ClusterControllerApiCreateOrUpdateWorkerGroupRequest clusterControllerApiCreateOrUpdateWorkerGroupRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = clusterControllerApiCreateOrUpdateWorkerGroupRequest;
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling createWorkerGroup1");
    }
    
    // verify the required parameter 'clusterControllerApiCreateOrUpdateWorkerGroupRequest' is set
    if (clusterControllerApiCreateOrUpdateWorkerGroupRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'clusterControllerApiCreateOrUpdateWorkerGroupRequest' when calling createWorkerGroup1");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/cluster/workergroups"
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<ClusterControllerApiWorkerGroup> localVarReturnType = new TypeReference<ClusterControllerApiWorkerGroup>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Delete an existing worker group.
   * 
   * @param id  (required)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object deleteWorkerGroupById(String id) throws ApiException {
    return this.deleteWorkerGroupById(id, Collections.emptyMap());
  }


  /**
   * Delete an existing worker group.
   * 
   * @param id  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object deleteWorkerGroupById(String id, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteWorkerGroupById");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/cluster/workergroups/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Delete an existing worker group.
   * 
   * @param id  (required)
   * @param tenant  (required)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object deleteWorkerGroupById1(String id, String tenant) throws ApiException {
    return this.deleteWorkerGroupById1(id, tenant, Collections.emptyMap());
  }


  /**
   * Delete an existing worker group.
   * 
   * @param id  (required)
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object deleteWorkerGroupById1(String id, String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteWorkerGroupById1");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling deleteWorkerGroupById1");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/cluster/workergroups/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get details about a worker group.
   * 
   * @param id  (required)
   * @return ClusterControllerApiWorkerGroupDetails
   * @throws ApiException if fails to make API call
   */
  public ClusterControllerApiWorkerGroupDetails getWorkerGroupById(String id) throws ApiException {
    return this.getWorkerGroupById(id, Collections.emptyMap());
  }


  /**
   * Get details about a worker group.
   * 
   * @param id  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return ClusterControllerApiWorkerGroupDetails
   * @throws ApiException if fails to make API call
   */
  public ClusterControllerApiWorkerGroupDetails getWorkerGroupById(String id, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getWorkerGroupById");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/cluster/workergroups/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<ClusterControllerApiWorkerGroupDetails> localVarReturnType = new TypeReference<ClusterControllerApiWorkerGroupDetails>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get details about a worker group.
   * 
   * @param id  (required)
   * @param tenant  (required)
   * @return ClusterControllerApiWorkerGroupDetails
   * @throws ApiException if fails to make API call
   */
  public ClusterControllerApiWorkerGroupDetails getWorkerGroupById1(String id, String tenant) throws ApiException {
    return this.getWorkerGroupById1(id, tenant, Collections.emptyMap());
  }


  /**
   * Get details about a worker group.
   * 
   * @param id  (required)
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return ClusterControllerApiWorkerGroupDetails
   * @throws ApiException if fails to make API call
   */
  public ClusterControllerApiWorkerGroupDetails getWorkerGroupById1(String id, String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getWorkerGroupById1");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling getWorkerGroupById1");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/cluster/workergroups/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<ClusterControllerApiWorkerGroupDetails> localVarReturnType = new TypeReference<ClusterControllerApiWorkerGroupDetails>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * List all Worker Groups
   * 
   * @return ClusterControllerApiWorkerGroupList
   * @throws ApiException if fails to make API call
   */
  public ClusterControllerApiWorkerGroupList listWorkerGroups() throws ApiException {
    return this.listWorkerGroups(Collections.emptyMap());
  }


  /**
   * List all Worker Groups
   * 
   * @param additionalHeaders additionalHeaders for this call
   * @return ClusterControllerApiWorkerGroupList
   * @throws ApiException if fails to make API call
   */
  public ClusterControllerApiWorkerGroupList listWorkerGroups(Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/api/v1/cluster/workergroups";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<ClusterControllerApiWorkerGroupList> localVarReturnType = new TypeReference<ClusterControllerApiWorkerGroupList>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * List all Worker Groups
   * 
   * @param tenant  (required)
   * @return ClusterControllerApiWorkerGroupList
   * @throws ApiException if fails to make API call
   */
  public ClusterControllerApiWorkerGroupList listWorkerGroups1(String tenant) throws ApiException {
    return this.listWorkerGroups1(tenant, Collections.emptyMap());
  }


  /**
   * List all Worker Groups
   * 
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return ClusterControllerApiWorkerGroupList
   * @throws ApiException if fails to make API call
   */
  public ClusterControllerApiWorkerGroupList listWorkerGroups1(String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling listWorkerGroups1");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/cluster/workergroups"
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<ClusterControllerApiWorkerGroupList> localVarReturnType = new TypeReference<ClusterControllerApiWorkerGroupList>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Update an existing worker group.
   * 
   * @param id  (required)
   * @param clusterControllerApiCreateOrUpdateWorkerGroupRequest  (required)
   * @return ClusterControllerApiWorkerGroup
   * @throws ApiException if fails to make API call
   */
  public ClusterControllerApiWorkerGroup updateWorkerGroupById(String id, ClusterControllerApiCreateOrUpdateWorkerGroupRequest clusterControllerApiCreateOrUpdateWorkerGroupRequest) throws ApiException {
    return this.updateWorkerGroupById(id, clusterControllerApiCreateOrUpdateWorkerGroupRequest, Collections.emptyMap());
  }


  /**
   * Update an existing worker group.
   * 
   * @param id  (required)
   * @param clusterControllerApiCreateOrUpdateWorkerGroupRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return ClusterControllerApiWorkerGroup
   * @throws ApiException if fails to make API call
   */
  public ClusterControllerApiWorkerGroup updateWorkerGroupById(String id, ClusterControllerApiCreateOrUpdateWorkerGroupRequest clusterControllerApiCreateOrUpdateWorkerGroupRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = clusterControllerApiCreateOrUpdateWorkerGroupRequest;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling updateWorkerGroupById");
    }
    
    // verify the required parameter 'clusterControllerApiCreateOrUpdateWorkerGroupRequest' is set
    if (clusterControllerApiCreateOrUpdateWorkerGroupRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'clusterControllerApiCreateOrUpdateWorkerGroupRequest' when calling updateWorkerGroupById");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/cluster/workergroups/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<ClusterControllerApiWorkerGroup> localVarReturnType = new TypeReference<ClusterControllerApiWorkerGroup>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "PUT",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Update an existing worker group.
   * 
   * @param id  (required)
   * @param tenant  (required)
   * @param clusterControllerApiCreateOrUpdateWorkerGroupRequest  (required)
   * @return ClusterControllerApiWorkerGroup
   * @throws ApiException if fails to make API call
   */
  public ClusterControllerApiWorkerGroup updateWorkerGroupById1(String id, String tenant, ClusterControllerApiCreateOrUpdateWorkerGroupRequest clusterControllerApiCreateOrUpdateWorkerGroupRequest) throws ApiException {
    return this.updateWorkerGroupById1(id, tenant, clusterControllerApiCreateOrUpdateWorkerGroupRequest, Collections.emptyMap());
  }


  /**
   * Update an existing worker group.
   * 
   * @param id  (required)
   * @param tenant  (required)
   * @param clusterControllerApiCreateOrUpdateWorkerGroupRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return ClusterControllerApiWorkerGroup
   * @throws ApiException if fails to make API call
   */
  public ClusterControllerApiWorkerGroup updateWorkerGroupById1(String id, String tenant, ClusterControllerApiCreateOrUpdateWorkerGroupRequest clusterControllerApiCreateOrUpdateWorkerGroupRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = clusterControllerApiCreateOrUpdateWorkerGroupRequest;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling updateWorkerGroupById1");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling updateWorkerGroupById1");
    }
    
    // verify the required parameter 'clusterControllerApiCreateOrUpdateWorkerGroupRequest' is set
    if (clusterControllerApiCreateOrUpdateWorkerGroupRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'clusterControllerApiCreateOrUpdateWorkerGroupRequest' when calling updateWorkerGroupById1");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/cluster/workergroups/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<ClusterControllerApiWorkerGroup> localVarReturnType = new TypeReference<ClusterControllerApiWorkerGroup>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "PUT",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  @Override
  public <T> T invokeAPI(String url, String method, Object request, TypeReference<T> returnType, Map<String, String> additionalHeaders) throws ApiException {
    String localVarPath = url.replace(apiClient.getBaseURL(), "");
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarHeaderParams.putAll(additionalHeaders);

    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    return apiClient.invokeAPI(
      localVarPath,
        method,
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        request,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        returnType
    );
  }
}
