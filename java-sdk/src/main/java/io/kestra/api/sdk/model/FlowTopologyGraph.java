/*
 * Kestra EE
 * All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kestra.api.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.kestra.api.sdk.model.FlowNode;
import io.kestra.api.sdk.model.FlowTopologyGraphEdge;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * FlowTopologyGraph
 */
@JsonPropertyOrder({
  FlowTopologyGraph.JSON_PROPERTY_NODES,
  FlowTopologyGraph.JSON_PROPERTY_EDGES
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-31T15:48:45.246126227Z[Etc/UTC]", comments = "Generator version: 7.11.0-SNAPSHOT")
public class FlowTopologyGraph {
  public static final String JSON_PROPERTY_NODES = "nodes";
  @javax.annotation.Nonnull
  private List<FlowNode> nodes = new ArrayList<>();

  public static final String JSON_PROPERTY_EDGES = "edges";
  @javax.annotation.Nonnull
  private List<FlowTopologyGraphEdge> edges = new ArrayList<>();

  public FlowTopologyGraph() {
  }

  public FlowTopologyGraph nodes(@javax.annotation.Nonnull List<FlowNode> nodes) {
    
    this.nodes = nodes;
    return this;
  }

  public FlowTopologyGraph addNodesItem(FlowNode nodesItem) {
    if (this.nodes == null) {
      this.nodes = new ArrayList<>();
    }
    this.nodes.add(nodesItem);
    return this;
  }

  /**
   * Get nodes
   * @return nodes
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NODES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<FlowNode> getNodes() {
    return nodes;
  }


  @JsonProperty(JSON_PROPERTY_NODES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setNodes(@javax.annotation.Nonnull List<FlowNode> nodes) {
    this.nodes = nodes;
  }

  public FlowTopologyGraph edges(@javax.annotation.Nonnull List<FlowTopologyGraphEdge> edges) {
    
    this.edges = edges;
    return this;
  }

  public FlowTopologyGraph addEdgesItem(FlowTopologyGraphEdge edgesItem) {
    if (this.edges == null) {
      this.edges = new ArrayList<>();
    }
    this.edges.add(edgesItem);
    return this;
  }

  /**
   * Get edges
   * @return edges
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_EDGES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<FlowTopologyGraphEdge> getEdges() {
    return edges;
  }


  @JsonProperty(JSON_PROPERTY_EDGES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEdges(@javax.annotation.Nonnull List<FlowTopologyGraphEdge> edges) {
    this.edges = edges;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FlowTopologyGraph flowTopologyGraph = (FlowTopologyGraph) o;
    return Objects.equals(this.nodes, flowTopologyGraph.nodes) &&
        Objects.equals(this.edges, flowTopologyGraph.edges);
  }

  @Override
  public int hashCode() {
    return Objects.hash(nodes, edges);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FlowTopologyGraph {\n");
    sb.append("    nodes: ").append(toIndentedString(nodes)).append("\n");
    sb.append("    edges: ").append(toIndentedString(edges)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `nodes` to the URL query string
    if (getNodes() != null) {
      for (int i = 0; i < getNodes().size(); i++) {
        if (getNodes().get(i) != null) {
          joiner.add(getNodes().get(i).toUrlQueryString(String.format("%snodes%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `edges` to the URL query string
    if (getEdges() != null) {
      for (int i = 0; i < getEdges().size(); i++) {
        if (getEdges().get(i) != null) {
          joiner.add(getEdges().get(i).toUrlQueryString(String.format("%sedges%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    return joiner.toString();
  }

}

