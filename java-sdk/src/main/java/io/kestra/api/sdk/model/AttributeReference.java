/*
 * Kestra EE
 * All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kestra.api.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * AttributeReference
 */
@JsonPropertyOrder({
  AttributeReference.JSON_PROPERTY_FULL_ATTRIBUTE_NAME,
  AttributeReference.JSON_PROPERTY_FULLY_QUALIFIED_ATTRIBUTE_NAME,
  AttributeReference.JSON_PROPERTY_ATTRIBUTE_BASE,
  AttributeReference.JSON_PROPERTY_URN,
  AttributeReference.JSON_PROPERTY_ATTRIBUTE_NAME,
  AttributeReference.JSON_PROPERTY_SUB_ATTRIBUTE_NAME
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-05T07:35:23.657005690Z[Etc/UTC]", comments = "Generator version: 7.14.0-SNAPSHOT")
public class AttributeReference {
  public static final String JSON_PROPERTY_FULL_ATTRIBUTE_NAME = "fullAttributeName";
  @javax.annotation.Nullable
  private String fullAttributeName;

  public static final String JSON_PROPERTY_FULLY_QUALIFIED_ATTRIBUTE_NAME = "fullyQualifiedAttributeName";
  @javax.annotation.Nullable
  private String fullyQualifiedAttributeName;

  public static final String JSON_PROPERTY_ATTRIBUTE_BASE = "attributeBase";
  @javax.annotation.Nullable
  private String attributeBase;

  public static final String JSON_PROPERTY_URN = "urn";
  @javax.annotation.Nullable
  private String urn;

  public static final String JSON_PROPERTY_ATTRIBUTE_NAME = "attributeName";
  @javax.annotation.Nullable
  private String attributeName;

  public static final String JSON_PROPERTY_SUB_ATTRIBUTE_NAME = "subAttributeName";
  @javax.annotation.Nullable
  private String subAttributeName;

  public AttributeReference() {
  }

  public AttributeReference fullAttributeName(@javax.annotation.Nullable String fullAttributeName) {
    
    this.fullAttributeName = fullAttributeName;
    return this;
  }

  /**
   * Get fullAttributeName
   * @return fullAttributeName
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FULL_ATTRIBUTE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFullAttributeName() {
    return fullAttributeName;
  }


  @JsonProperty(JSON_PROPERTY_FULL_ATTRIBUTE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFullAttributeName(@javax.annotation.Nullable String fullAttributeName) {
    this.fullAttributeName = fullAttributeName;
  }

  public AttributeReference fullyQualifiedAttributeName(@javax.annotation.Nullable String fullyQualifiedAttributeName) {
    
    this.fullyQualifiedAttributeName = fullyQualifiedAttributeName;
    return this;
  }

  /**
   * Get fullyQualifiedAttributeName
   * @return fullyQualifiedAttributeName
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FULLY_QUALIFIED_ATTRIBUTE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFullyQualifiedAttributeName() {
    return fullyQualifiedAttributeName;
  }


  @JsonProperty(JSON_PROPERTY_FULLY_QUALIFIED_ATTRIBUTE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFullyQualifiedAttributeName(@javax.annotation.Nullable String fullyQualifiedAttributeName) {
    this.fullyQualifiedAttributeName = fullyQualifiedAttributeName;
  }

  public AttributeReference attributeBase(@javax.annotation.Nullable String attributeBase) {
    
    this.attributeBase = attributeBase;
    return this;
  }

  /**
   * Get attributeBase
   * @return attributeBase
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ATTRIBUTE_BASE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAttributeBase() {
    return attributeBase;
  }


  @JsonProperty(JSON_PROPERTY_ATTRIBUTE_BASE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAttributeBase(@javax.annotation.Nullable String attributeBase) {
    this.attributeBase = attributeBase;
  }

  public AttributeReference urn(@javax.annotation.Nullable String urn) {
    
    this.urn = urn;
    return this;
  }

  /**
   * Get urn
   * @return urn
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_URN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUrn() {
    return urn;
  }


  @JsonProperty(JSON_PROPERTY_URN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUrn(@javax.annotation.Nullable String urn) {
    this.urn = urn;
  }

  public AttributeReference attributeName(@javax.annotation.Nullable String attributeName) {
    
    this.attributeName = attributeName;
    return this;
  }

  /**
   * Get attributeName
   * @return attributeName
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ATTRIBUTE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAttributeName() {
    return attributeName;
  }


  @JsonProperty(JSON_PROPERTY_ATTRIBUTE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAttributeName(@javax.annotation.Nullable String attributeName) {
    this.attributeName = attributeName;
  }

  public AttributeReference subAttributeName(@javax.annotation.Nullable String subAttributeName) {
    
    this.subAttributeName = subAttributeName;
    return this;
  }

  /**
   * Get subAttributeName
   * @return subAttributeName
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SUB_ATTRIBUTE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSubAttributeName() {
    return subAttributeName;
  }


  @JsonProperty(JSON_PROPERTY_SUB_ATTRIBUTE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSubAttributeName(@javax.annotation.Nullable String subAttributeName) {
    this.subAttributeName = subAttributeName;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AttributeReference attributeReference = (AttributeReference) o;
    return Objects.equals(this.fullAttributeName, attributeReference.fullAttributeName) &&
        Objects.equals(this.fullyQualifiedAttributeName, attributeReference.fullyQualifiedAttributeName) &&
        Objects.equals(this.attributeBase, attributeReference.attributeBase) &&
        Objects.equals(this.urn, attributeReference.urn) &&
        Objects.equals(this.attributeName, attributeReference.attributeName) &&
        Objects.equals(this.subAttributeName, attributeReference.subAttributeName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fullAttributeName, fullyQualifiedAttributeName, attributeBase, urn, attributeName, subAttributeName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AttributeReference {\n");
    sb.append("    fullAttributeName: ").append(toIndentedString(fullAttributeName)).append("\n");
    sb.append("    fullyQualifiedAttributeName: ").append(toIndentedString(fullyQualifiedAttributeName)).append("\n");
    sb.append("    attributeBase: ").append(toIndentedString(attributeBase)).append("\n");
    sb.append("    urn: ").append(toIndentedString(urn)).append("\n");
    sb.append("    attributeName: ").append(toIndentedString(attributeName)).append("\n");
    sb.append("    subAttributeName: ").append(toIndentedString(subAttributeName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `fullAttributeName` to the URL query string
    if (getFullAttributeName() != null) {
      try {
        joiner.add(String.format("%sfullAttributeName%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getFullAttributeName()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `fullyQualifiedAttributeName` to the URL query string
    if (getFullyQualifiedAttributeName() != null) {
      try {
        joiner.add(String.format("%sfullyQualifiedAttributeName%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getFullyQualifiedAttributeName()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `attributeBase` to the URL query string
    if (getAttributeBase() != null) {
      try {
        joiner.add(String.format("%sattributeBase%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getAttributeBase()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `urn` to the URL query string
    if (getUrn() != null) {
      try {
        joiner.add(String.format("%surn%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUrn()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `attributeName` to the URL query string
    if (getAttributeName() != null) {
      try {
        joiner.add(String.format("%sattributeName%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getAttributeName()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `subAttributeName` to the URL query string
    if (getSubAttributeName() != null) {
      try {
        joiner.add(String.format("%ssubAttributeName%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSubAttributeName()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

