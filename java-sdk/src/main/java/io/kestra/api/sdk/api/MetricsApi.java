/*
 * Kestra EE
 * All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package io.kestra.api.sdk.api;

import com.fasterxml.jackson.core.type.TypeReference;

import io.kestra.api.sdk.internal.ApiException;
import io.kestra.api.sdk.internal.ApiClient;
import io.kestra.api.sdk.internal.BaseApi;
import io.kestra.api.sdk.internal.Configuration;
import io.kestra.api.sdk.internal.Pair;

import io.kestra.api.sdk.model.MetricAggregations;
import java.time.OffsetDateTime;
import io.kestra.api.sdk.model.PagedResultsMetricEntry;


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-31T15:48:45.246126227Z[Etc/UTC]", comments = "Generator version: 7.11.0-SNAPSHOT")
public class MetricsApi extends BaseApi {

  public MetricsApi() {
    super(Configuration.getDefaultApiClient());
  }

  public MetricsApi(ApiClient apiClient) {
    super(apiClient);
  }

  /**
   * Get metrics aggregations for a specific flow
   * 
   * @param namespace The namespace (required)
   * @param flowId The flow Id (required)
   * @param metric The metric name (required)
   * @param aggregation The type of aggregation: avg, sum, min or max (required)
   * @param startDate The start datetime, default to now - 30 days (optional)
   * @param endDate The end datetime, default to now (optional)
   * @return MetricAggregations
   * @throws ApiException if fails to make API call
   */
  public MetricAggregations aggregateByFlowId(String namespace, String flowId, String metric, String aggregation, OffsetDateTime startDate, OffsetDateTime endDate) throws ApiException {
    return this.aggregateByFlowId(namespace, flowId, metric, aggregation, startDate, endDate, Collections.emptyMap());
  }


  /**
   * Get metrics aggregations for a specific flow
   * 
   * @param namespace The namespace (required)
   * @param flowId The flow Id (required)
   * @param metric The metric name (required)
   * @param aggregation The type of aggregation: avg, sum, min or max (required)
   * @param startDate The start datetime, default to now - 30 days (optional)
   * @param endDate The end datetime, default to now (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return MetricAggregations
   * @throws ApiException if fails to make API call
   */
  public MetricAggregations aggregateByFlowId(String namespace, String flowId, String metric, String aggregation, OffsetDateTime startDate, OffsetDateTime endDate, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'namespace' is set
    if (namespace == null) {
      throw new ApiException(400, "Missing the required parameter 'namespace' when calling aggregateByFlowId");
    }
    
    // verify the required parameter 'flowId' is set
    if (flowId == null) {
      throw new ApiException(400, "Missing the required parameter 'flowId' when calling aggregateByFlowId");
    }
    
    // verify the required parameter 'metric' is set
    if (metric == null) {
      throw new ApiException(400, "Missing the required parameter 'metric' when calling aggregateByFlowId");
    }
    
    // verify the required parameter 'aggregation' is set
    if (aggregation == null) {
      throw new ApiException(400, "Missing the required parameter 'aggregation' when calling aggregateByFlowId");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/metrics/aggregates/{namespace}/{flowId}/{metric}"
      .replaceAll("\\{" + "namespace" + "\\}", apiClient.escapeString(apiClient.parameterToString(namespace)))
      .replaceAll("\\{" + "flowId" + "\\}", apiClient.escapeString(apiClient.parameterToString(flowId)))
      .replaceAll("\\{" + "metric" + "\\}", apiClient.escapeString(apiClient.parameterToString(metric)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("startDate", startDate));
    localVarQueryParams.addAll(apiClient.parameterToPair("endDate", endDate));
    localVarQueryParams.addAll(apiClient.parameterToPair("aggregation", aggregation));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<MetricAggregations> localVarReturnType = new TypeReference<MetricAggregations>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get metrics aggregations for a specific flow
   * 
   * @param namespace The namespace (required)
   * @param flowId The flow Id (required)
   * @param metric The metric name (required)
   * @param aggregation The type of aggregation: avg, sum, min or max (required)
   * @param tenant  (required)
   * @param startDate The start datetime, default to now - 30 days (optional)
   * @param endDate The end datetime, default to now (optional)
   * @return MetricAggregations
   * @throws ApiException if fails to make API call
   */
  public MetricAggregations aggregateByFlowId1(String namespace, String flowId, String metric, String aggregation, String tenant, OffsetDateTime startDate, OffsetDateTime endDate) throws ApiException {
    return this.aggregateByFlowId1(namespace, flowId, metric, aggregation, tenant, startDate, endDate, Collections.emptyMap());
  }


  /**
   * Get metrics aggregations for a specific flow
   * 
   * @param namespace The namespace (required)
   * @param flowId The flow Id (required)
   * @param metric The metric name (required)
   * @param aggregation The type of aggregation: avg, sum, min or max (required)
   * @param tenant  (required)
   * @param startDate The start datetime, default to now - 30 days (optional)
   * @param endDate The end datetime, default to now (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return MetricAggregations
   * @throws ApiException if fails to make API call
   */
  public MetricAggregations aggregateByFlowId1(String namespace, String flowId, String metric, String aggregation, String tenant, OffsetDateTime startDate, OffsetDateTime endDate, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'namespace' is set
    if (namespace == null) {
      throw new ApiException(400, "Missing the required parameter 'namespace' when calling aggregateByFlowId1");
    }
    
    // verify the required parameter 'flowId' is set
    if (flowId == null) {
      throw new ApiException(400, "Missing the required parameter 'flowId' when calling aggregateByFlowId1");
    }
    
    // verify the required parameter 'metric' is set
    if (metric == null) {
      throw new ApiException(400, "Missing the required parameter 'metric' when calling aggregateByFlowId1");
    }
    
    // verify the required parameter 'aggregation' is set
    if (aggregation == null) {
      throw new ApiException(400, "Missing the required parameter 'aggregation' when calling aggregateByFlowId1");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling aggregateByFlowId1");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/metrics/aggregates/{namespace}/{flowId}/{metric}"
      .replaceAll("\\{" + "namespace" + "\\}", apiClient.escapeString(apiClient.parameterToString(namespace)))
      .replaceAll("\\{" + "flowId" + "\\}", apiClient.escapeString(apiClient.parameterToString(flowId)))
      .replaceAll("\\{" + "metric" + "\\}", apiClient.escapeString(apiClient.parameterToString(metric)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("startDate", startDate));
    localVarQueryParams.addAll(apiClient.parameterToPair("endDate", endDate));
    localVarQueryParams.addAll(apiClient.parameterToPair("aggregation", aggregation));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<MetricAggregations> localVarReturnType = new TypeReference<MetricAggregations>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get metrics aggregations for a specific flow
   * 
   * @param namespace The namespace (required)
   * @param flowId The flow Id (required)
   * @param taskId The task Id (required)
   * @param metric The metric name (required)
   * @param aggregation The type of aggregation: avg, sum, min or max (required)
   * @param startDate The start datetime, default to now - 30 days (optional)
   * @param endDate The end datetime, default to now (optional)
   * @return MetricAggregations
   * @throws ApiException if fails to make API call
   */
  public MetricAggregations aggregateByFlowIdAndTaskId(String namespace, String flowId, String taskId, String metric, String aggregation, OffsetDateTime startDate, OffsetDateTime endDate) throws ApiException {
    return this.aggregateByFlowIdAndTaskId(namespace, flowId, taskId, metric, aggregation, startDate, endDate, Collections.emptyMap());
  }


  /**
   * Get metrics aggregations for a specific flow
   * 
   * @param namespace The namespace (required)
   * @param flowId The flow Id (required)
   * @param taskId The task Id (required)
   * @param metric The metric name (required)
   * @param aggregation The type of aggregation: avg, sum, min or max (required)
   * @param startDate The start datetime, default to now - 30 days (optional)
   * @param endDate The end datetime, default to now (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return MetricAggregations
   * @throws ApiException if fails to make API call
   */
  public MetricAggregations aggregateByFlowIdAndTaskId(String namespace, String flowId, String taskId, String metric, String aggregation, OffsetDateTime startDate, OffsetDateTime endDate, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'namespace' is set
    if (namespace == null) {
      throw new ApiException(400, "Missing the required parameter 'namespace' when calling aggregateByFlowIdAndTaskId");
    }
    
    // verify the required parameter 'flowId' is set
    if (flowId == null) {
      throw new ApiException(400, "Missing the required parameter 'flowId' when calling aggregateByFlowIdAndTaskId");
    }
    
    // verify the required parameter 'taskId' is set
    if (taskId == null) {
      throw new ApiException(400, "Missing the required parameter 'taskId' when calling aggregateByFlowIdAndTaskId");
    }
    
    // verify the required parameter 'metric' is set
    if (metric == null) {
      throw new ApiException(400, "Missing the required parameter 'metric' when calling aggregateByFlowIdAndTaskId");
    }
    
    // verify the required parameter 'aggregation' is set
    if (aggregation == null) {
      throw new ApiException(400, "Missing the required parameter 'aggregation' when calling aggregateByFlowIdAndTaskId");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/metrics/aggregates/{namespace}/{flowId}/{taskId}/{metric}"
      .replaceAll("\\{" + "namespace" + "\\}", apiClient.escapeString(apiClient.parameterToString(namespace)))
      .replaceAll("\\{" + "flowId" + "\\}", apiClient.escapeString(apiClient.parameterToString(flowId)))
      .replaceAll("\\{" + "taskId" + "\\}", apiClient.escapeString(apiClient.parameterToString(taskId)))
      .replaceAll("\\{" + "metric" + "\\}", apiClient.escapeString(apiClient.parameterToString(metric)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("startDate", startDate));
    localVarQueryParams.addAll(apiClient.parameterToPair("endDate", endDate));
    localVarQueryParams.addAll(apiClient.parameterToPair("aggregation", aggregation));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<MetricAggregations> localVarReturnType = new TypeReference<MetricAggregations>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get metrics aggregations for a specific flow
   * 
   * @param namespace The namespace (required)
   * @param flowId The flow Id (required)
   * @param taskId The task Id (required)
   * @param metric The metric name (required)
   * @param aggregation The type of aggregation: avg, sum, min or max (required)
   * @param tenant  (required)
   * @param startDate The start datetime, default to now - 30 days (optional)
   * @param endDate The end datetime, default to now (optional)
   * @return MetricAggregations
   * @throws ApiException if fails to make API call
   */
  public MetricAggregations aggregateByFlowIdAndTaskId1(String namespace, String flowId, String taskId, String metric, String aggregation, String tenant, OffsetDateTime startDate, OffsetDateTime endDate) throws ApiException {
    return this.aggregateByFlowIdAndTaskId1(namespace, flowId, taskId, metric, aggregation, tenant, startDate, endDate, Collections.emptyMap());
  }


  /**
   * Get metrics aggregations for a specific flow
   * 
   * @param namespace The namespace (required)
   * @param flowId The flow Id (required)
   * @param taskId The task Id (required)
   * @param metric The metric name (required)
   * @param aggregation The type of aggregation: avg, sum, min or max (required)
   * @param tenant  (required)
   * @param startDate The start datetime, default to now - 30 days (optional)
   * @param endDate The end datetime, default to now (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return MetricAggregations
   * @throws ApiException if fails to make API call
   */
  public MetricAggregations aggregateByFlowIdAndTaskId1(String namespace, String flowId, String taskId, String metric, String aggregation, String tenant, OffsetDateTime startDate, OffsetDateTime endDate, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'namespace' is set
    if (namespace == null) {
      throw new ApiException(400, "Missing the required parameter 'namespace' when calling aggregateByFlowIdAndTaskId1");
    }
    
    // verify the required parameter 'flowId' is set
    if (flowId == null) {
      throw new ApiException(400, "Missing the required parameter 'flowId' when calling aggregateByFlowIdAndTaskId1");
    }
    
    // verify the required parameter 'taskId' is set
    if (taskId == null) {
      throw new ApiException(400, "Missing the required parameter 'taskId' when calling aggregateByFlowIdAndTaskId1");
    }
    
    // verify the required parameter 'metric' is set
    if (metric == null) {
      throw new ApiException(400, "Missing the required parameter 'metric' when calling aggregateByFlowIdAndTaskId1");
    }
    
    // verify the required parameter 'aggregation' is set
    if (aggregation == null) {
      throw new ApiException(400, "Missing the required parameter 'aggregation' when calling aggregateByFlowIdAndTaskId1");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling aggregateByFlowIdAndTaskId1");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/metrics/aggregates/{namespace}/{flowId}/{taskId}/{metric}"
      .replaceAll("\\{" + "namespace" + "\\}", apiClient.escapeString(apiClient.parameterToString(namespace)))
      .replaceAll("\\{" + "flowId" + "\\}", apiClient.escapeString(apiClient.parameterToString(flowId)))
      .replaceAll("\\{" + "taskId" + "\\}", apiClient.escapeString(apiClient.parameterToString(taskId)))
      .replaceAll("\\{" + "metric" + "\\}", apiClient.escapeString(apiClient.parameterToString(metric)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("startDate", startDate));
    localVarQueryParams.addAll(apiClient.parameterToPair("endDate", endDate));
    localVarQueryParams.addAll(apiClient.parameterToPair("aggregation", aggregation));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<MetricAggregations> localVarReturnType = new TypeReference<MetricAggregations>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get metrics for a specific execution
   * 
   * @param page The current page (required)
   * @param size The current page size (required)
   * @param executionId The execution id (required)
   * @param sort The sort of current page (optional)
   * @param taskRunId The taskrun id (optional)
   * @param taskId The task id (optional)
   * @return PagedResultsMetricEntry
   * @throws ApiException if fails to make API call
   */
  public PagedResultsMetricEntry findByExecution1(Integer page, Integer size, String executionId, List<String> sort, String taskRunId, String taskId) throws ApiException {
    return this.findByExecution1(page, size, executionId, sort, taskRunId, taskId, Collections.emptyMap());
  }


  /**
   * Get metrics for a specific execution
   * 
   * @param page The current page (required)
   * @param size The current page size (required)
   * @param executionId The execution id (required)
   * @param sort The sort of current page (optional)
   * @param taskRunId The taskrun id (optional)
   * @param taskId The task id (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return PagedResultsMetricEntry
   * @throws ApiException if fails to make API call
   */
  public PagedResultsMetricEntry findByExecution1(Integer page, Integer size, String executionId, List<String> sort, String taskRunId, String taskId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'page' is set
    if (page == null) {
      throw new ApiException(400, "Missing the required parameter 'page' when calling findByExecution1");
    }
    
    // verify the required parameter 'size' is set
    if (size == null) {
      throw new ApiException(400, "Missing the required parameter 'size' when calling findByExecution1");
    }
    
    // verify the required parameter 'executionId' is set
    if (executionId == null) {
      throw new ApiException(400, "Missing the required parameter 'executionId' when calling findByExecution1");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/metrics/{executionId}"
      .replaceAll("\\{" + "executionId" + "\\}", apiClient.escapeString(apiClient.parameterToString(executionId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
    localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sort", sort));
    localVarQueryParams.addAll(apiClient.parameterToPair("taskRunId", taskRunId));
    localVarQueryParams.addAll(apiClient.parameterToPair("taskId", taskId));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<PagedResultsMetricEntry> localVarReturnType = new TypeReference<PagedResultsMetricEntry>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get metrics for a specific execution
   * 
   * @param page The current page (required)
   * @param size The current page size (required)
   * @param executionId The execution id (required)
   * @param tenant  (required)
   * @param sort The sort of current page (optional)
   * @param taskRunId The taskrun id (optional)
   * @param taskId The task id (optional)
   * @return PagedResultsMetricEntry
   * @throws ApiException if fails to make API call
   */
  public PagedResultsMetricEntry findByExecution3(Integer page, Integer size, String executionId, String tenant, List<String> sort, String taskRunId, String taskId) throws ApiException {
    return this.findByExecution3(page, size, executionId, tenant, sort, taskRunId, taskId, Collections.emptyMap());
  }


  /**
   * Get metrics for a specific execution
   * 
   * @param page The current page (required)
   * @param size The current page size (required)
   * @param executionId The execution id (required)
   * @param tenant  (required)
   * @param sort The sort of current page (optional)
   * @param taskRunId The taskrun id (optional)
   * @param taskId The task id (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return PagedResultsMetricEntry
   * @throws ApiException if fails to make API call
   */
  public PagedResultsMetricEntry findByExecution3(Integer page, Integer size, String executionId, String tenant, List<String> sort, String taskRunId, String taskId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'page' is set
    if (page == null) {
      throw new ApiException(400, "Missing the required parameter 'page' when calling findByExecution3");
    }
    
    // verify the required parameter 'size' is set
    if (size == null) {
      throw new ApiException(400, "Missing the required parameter 'size' when calling findByExecution3");
    }
    
    // verify the required parameter 'executionId' is set
    if (executionId == null) {
      throw new ApiException(400, "Missing the required parameter 'executionId' when calling findByExecution3");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling findByExecution3");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/metrics/{executionId}"
      .replaceAll("\\{" + "executionId" + "\\}", apiClient.escapeString(apiClient.parameterToString(executionId)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
    localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sort", sort));
    localVarQueryParams.addAll(apiClient.parameterToPair("taskRunId", taskRunId));
    localVarQueryParams.addAll(apiClient.parameterToPair("taskId", taskId));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<PagedResultsMetricEntry> localVarReturnType = new TypeReference<PagedResultsMetricEntry>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get metrics names for a specific flow
   * 
   * @param namespace The namespace (required)
   * @param flowId The flow Id (required)
   * @return List&lt;String&gt;
   * @throws ApiException if fails to make API call
   */
  public List<String> flowMetrics(String namespace, String flowId) throws ApiException {
    return this.flowMetrics(namespace, flowId, Collections.emptyMap());
  }


  /**
   * Get metrics names for a specific flow
   * 
   * @param namespace The namespace (required)
   * @param flowId The flow Id (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return List&lt;String&gt;
   * @throws ApiException if fails to make API call
   */
  public List<String> flowMetrics(String namespace, String flowId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'namespace' is set
    if (namespace == null) {
      throw new ApiException(400, "Missing the required parameter 'namespace' when calling flowMetrics");
    }
    
    // verify the required parameter 'flowId' is set
    if (flowId == null) {
      throw new ApiException(400, "Missing the required parameter 'flowId' when calling flowMetrics");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/metrics/names/{namespace}/{flowId}"
      .replaceAll("\\{" + "namespace" + "\\}", apiClient.escapeString(apiClient.parameterToString(namespace)))
      .replaceAll("\\{" + "flowId" + "\\}", apiClient.escapeString(apiClient.parameterToString(flowId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<List<String>> localVarReturnType = new TypeReference<List<String>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get metrics names for a specific flow
   * 
   * @param namespace The namespace (required)
   * @param flowId The flow Id (required)
   * @param tenant  (required)
   * @return List&lt;String&gt;
   * @throws ApiException if fails to make API call
   */
  public List<String> flowMetrics1(String namespace, String flowId, String tenant) throws ApiException {
    return this.flowMetrics1(namespace, flowId, tenant, Collections.emptyMap());
  }


  /**
   * Get metrics names for a specific flow
   * 
   * @param namespace The namespace (required)
   * @param flowId The flow Id (required)
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return List&lt;String&gt;
   * @throws ApiException if fails to make API call
   */
  public List<String> flowMetrics1(String namespace, String flowId, String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'namespace' is set
    if (namespace == null) {
      throw new ApiException(400, "Missing the required parameter 'namespace' when calling flowMetrics1");
    }
    
    // verify the required parameter 'flowId' is set
    if (flowId == null) {
      throw new ApiException(400, "Missing the required parameter 'flowId' when calling flowMetrics1");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling flowMetrics1");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/metrics/names/{namespace}/{flowId}"
      .replaceAll("\\{" + "namespace" + "\\}", apiClient.escapeString(apiClient.parameterToString(namespace)))
      .replaceAll("\\{" + "flowId" + "\\}", apiClient.escapeString(apiClient.parameterToString(flowId)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<List<String>> localVarReturnType = new TypeReference<List<String>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get metrics names for a specific task in a flow
   * 
   * @param namespace The namespace (required)
   * @param flowId The flow Id (required)
   * @param taskId The flow Id (required)
   * @return List&lt;String&gt;
   * @throws ApiException if fails to make API call
   */
  public List<String> taskMetrics(String namespace, String flowId, String taskId) throws ApiException {
    return this.taskMetrics(namespace, flowId, taskId, Collections.emptyMap());
  }


  /**
   * Get metrics names for a specific task in a flow
   * 
   * @param namespace The namespace (required)
   * @param flowId The flow Id (required)
   * @param taskId The flow Id (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return List&lt;String&gt;
   * @throws ApiException if fails to make API call
   */
  public List<String> taskMetrics(String namespace, String flowId, String taskId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'namespace' is set
    if (namespace == null) {
      throw new ApiException(400, "Missing the required parameter 'namespace' when calling taskMetrics");
    }
    
    // verify the required parameter 'flowId' is set
    if (flowId == null) {
      throw new ApiException(400, "Missing the required parameter 'flowId' when calling taskMetrics");
    }
    
    // verify the required parameter 'taskId' is set
    if (taskId == null) {
      throw new ApiException(400, "Missing the required parameter 'taskId' when calling taskMetrics");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/metrics/names/{namespace}/{flowId}/{taskId}"
      .replaceAll("\\{" + "namespace" + "\\}", apiClient.escapeString(apiClient.parameterToString(namespace)))
      .replaceAll("\\{" + "flowId" + "\\}", apiClient.escapeString(apiClient.parameterToString(flowId)))
      .replaceAll("\\{" + "taskId" + "\\}", apiClient.escapeString(apiClient.parameterToString(taskId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<List<String>> localVarReturnType = new TypeReference<List<String>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get metrics names for a specific task in a flow
   * 
   * @param namespace The namespace (required)
   * @param flowId The flow Id (required)
   * @param taskId The flow Id (required)
   * @param tenant  (required)
   * @return List&lt;String&gt;
   * @throws ApiException if fails to make API call
   */
  public List<String> taskMetrics1(String namespace, String flowId, String taskId, String tenant) throws ApiException {
    return this.taskMetrics1(namespace, flowId, taskId, tenant, Collections.emptyMap());
  }


  /**
   * Get metrics names for a specific task in a flow
   * 
   * @param namespace The namespace (required)
   * @param flowId The flow Id (required)
   * @param taskId The flow Id (required)
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return List&lt;String&gt;
   * @throws ApiException if fails to make API call
   */
  public List<String> taskMetrics1(String namespace, String flowId, String taskId, String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'namespace' is set
    if (namespace == null) {
      throw new ApiException(400, "Missing the required parameter 'namespace' when calling taskMetrics1");
    }
    
    // verify the required parameter 'flowId' is set
    if (flowId == null) {
      throw new ApiException(400, "Missing the required parameter 'flowId' when calling taskMetrics1");
    }
    
    // verify the required parameter 'taskId' is set
    if (taskId == null) {
      throw new ApiException(400, "Missing the required parameter 'taskId' when calling taskMetrics1");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling taskMetrics1");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/metrics/names/{namespace}/{flowId}/{taskId}"
      .replaceAll("\\{" + "namespace" + "\\}", apiClient.escapeString(apiClient.parameterToString(namespace)))
      .replaceAll("\\{" + "flowId" + "\\}", apiClient.escapeString(apiClient.parameterToString(flowId)))
      .replaceAll("\\{" + "taskId" + "\\}", apiClient.escapeString(apiClient.parameterToString(taskId)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<List<String>> localVarReturnType = new TypeReference<List<String>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get tasks id that have metrics for a specific flow, include deleted or renamed tasks
   * 
   * @param namespace The namespace (required)
   * @param flowId The flow Id (required)
   * @return List&lt;String&gt;
   * @throws ApiException if fails to make API call
   */
  public List<String> tasks(String namespace, String flowId) throws ApiException {
    return this.tasks(namespace, flowId, Collections.emptyMap());
  }


  /**
   * Get tasks id that have metrics for a specific flow, include deleted or renamed tasks
   * 
   * @param namespace The namespace (required)
   * @param flowId The flow Id (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return List&lt;String&gt;
   * @throws ApiException if fails to make API call
   */
  public List<String> tasks(String namespace, String flowId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'namespace' is set
    if (namespace == null) {
      throw new ApiException(400, "Missing the required parameter 'namespace' when calling tasks");
    }
    
    // verify the required parameter 'flowId' is set
    if (flowId == null) {
      throw new ApiException(400, "Missing the required parameter 'flowId' when calling tasks");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/metrics/tasks/{namespace}/{flowId}"
      .replaceAll("\\{" + "namespace" + "\\}", apiClient.escapeString(apiClient.parameterToString(namespace)))
      .replaceAll("\\{" + "flowId" + "\\}", apiClient.escapeString(apiClient.parameterToString(flowId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<List<String>> localVarReturnType = new TypeReference<List<String>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get tasks id that have metrics for a specific flow, include deleted or renamed tasks
   * 
   * @param namespace The namespace (required)
   * @param flowId The flow Id (required)
   * @param tenant  (required)
   * @return List&lt;String&gt;
   * @throws ApiException if fails to make API call
   */
  public List<String> tasks1(String namespace, String flowId, String tenant) throws ApiException {
    return this.tasks1(namespace, flowId, tenant, Collections.emptyMap());
  }


  /**
   * Get tasks id that have metrics for a specific flow, include deleted or renamed tasks
   * 
   * @param namespace The namespace (required)
   * @param flowId The flow Id (required)
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return List&lt;String&gt;
   * @throws ApiException if fails to make API call
   */
  public List<String> tasks1(String namespace, String flowId, String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'namespace' is set
    if (namespace == null) {
      throw new ApiException(400, "Missing the required parameter 'namespace' when calling tasks1");
    }
    
    // verify the required parameter 'flowId' is set
    if (flowId == null) {
      throw new ApiException(400, "Missing the required parameter 'flowId' when calling tasks1");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling tasks1");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/metrics/tasks/{namespace}/{flowId}"
      .replaceAll("\\{" + "namespace" + "\\}", apiClient.escapeString(apiClient.parameterToString(namespace)))
      .replaceAll("\\{" + "flowId" + "\\}", apiClient.escapeString(apiClient.parameterToString(flowId)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<List<String>> localVarReturnType = new TypeReference<List<String>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  @Override
  public <T> T invokeAPI(String url, String method, Object request, TypeReference<T> returnType, Map<String, String> additionalHeaders) throws ApiException {
    String localVarPath = url.replace(apiClient.getBaseURL(), "");
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarHeaderParams.putAll(additionalHeaders);

    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    return apiClient.invokeAPI(
      localVarPath,
        method,
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        request,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        returnType
    );
  }
}
