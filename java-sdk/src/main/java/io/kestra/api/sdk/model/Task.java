/*
 * Kestra EE
 * All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kestra.api.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.kestra.api.sdk.model.Level;
import io.kestra.api.sdk.model.PropertyDuration;
import io.kestra.api.sdk.model.WorkerGroup;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * Task
 */
@JsonPropertyOrder({
  Task.JSON_PROPERTY_ID,
  Task.JSON_PROPERTY_TYPE,
  Task.JSON_PROPERTY_VERSION,
  Task.JSON_PROPERTY_DESCRIPTION,
  Task.JSON_PROPERTY_RETRY,
  Task.JSON_PROPERTY_TIMEOUT,
  Task.JSON_PROPERTY_DISABLED,
  Task.JSON_PROPERTY_WORKER_GROUP,
  Task.JSON_PROPERTY_LOG_LEVEL,
  Task.JSON_PROPERTY_ALLOW_FAILURE,
  Task.JSON_PROPERTY_LOG_TO_FILE,
  Task.JSON_PROPERTY_RUN_IF,
  Task.JSON_PROPERTY_ALLOW_WARNING
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-05T07:35:23.657005690Z[Etc/UTC]", comments = "Generator version: 7.14.0-SNAPSHOT")
public class Task {
  public static final String JSON_PROPERTY_ID = "id";
  @javax.annotation.Nonnull
  private String id;

  public static final String JSON_PROPERTY_TYPE = "type";
  @javax.annotation.Nonnull
  private String type;

  public static final String JSON_PROPERTY_VERSION = "version";
  @javax.annotation.Nullable
  private String version;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  @javax.annotation.Nullable
  private String description;

  public static final String JSON_PROPERTY_RETRY = "retry";
  @javax.annotation.Nullable
  private Object retry;

  public static final String JSON_PROPERTY_TIMEOUT = "timeout";
  @javax.annotation.Nullable
  private PropertyDuration timeout;

  public static final String JSON_PROPERTY_DISABLED = "disabled";
  @javax.annotation.Nullable
  private Boolean disabled;

  public static final String JSON_PROPERTY_WORKER_GROUP = "workerGroup";
  @javax.annotation.Nullable
  private WorkerGroup workerGroup;

  public static final String JSON_PROPERTY_LOG_LEVEL = "logLevel";
  @javax.annotation.Nullable
  private Level logLevel;

  public static final String JSON_PROPERTY_ALLOW_FAILURE = "allowFailure";
  @javax.annotation.Nullable
  private Boolean allowFailure;

  public static final String JSON_PROPERTY_LOG_TO_FILE = "logToFile";
  @javax.annotation.Nullable
  private Boolean logToFile;

  public static final String JSON_PROPERTY_RUN_IF = "runIf";
  @javax.annotation.Nullable
  private String runIf;

  public static final String JSON_PROPERTY_ALLOW_WARNING = "allowWarning";
  @javax.annotation.Nullable
  private Boolean allowWarning;

  public Task() {
  }

  public Task id(@javax.annotation.Nonnull String id) {
    
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(@javax.annotation.Nonnull String id) {
    this.id = id;
  }

  public Task type(@javax.annotation.Nonnull String type) {
    
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setType(@javax.annotation.Nonnull String type) {
    this.type = type;
  }

  public Task version(@javax.annotation.Nullable String version) {
    
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getVersion() {
    return version;
  }


  @JsonProperty(JSON_PROPERTY_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVersion(@javax.annotation.Nullable String version) {
    this.version = version;
  }

  public Task description(@javax.annotation.Nullable String description) {
    
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }

  public Task retry(@javax.annotation.Nullable Object retry) {
    
    this.retry = retry;
    return this;
  }

  /**
   * Get retry
   * @return retry
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RETRY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Object getRetry() {
    return retry;
  }


  @JsonProperty(JSON_PROPERTY_RETRY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRetry(@javax.annotation.Nullable Object retry) {
    this.retry = retry;
  }

  public Task timeout(@javax.annotation.Nullable PropertyDuration timeout) {
    
    this.timeout = timeout;
    return this;
  }

  /**
   * Get timeout
   * @return timeout
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TIMEOUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PropertyDuration getTimeout() {
    return timeout;
  }


  @JsonProperty(JSON_PROPERTY_TIMEOUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTimeout(@javax.annotation.Nullable PropertyDuration timeout) {
    this.timeout = timeout;
  }

  public Task disabled(@javax.annotation.Nullable Boolean disabled) {
    
    this.disabled = disabled;
    return this;
  }

  /**
   * Get disabled
   * @return disabled
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DISABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getDisabled() {
    return disabled;
  }


  @JsonProperty(JSON_PROPERTY_DISABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDisabled(@javax.annotation.Nullable Boolean disabled) {
    this.disabled = disabled;
  }

  public Task workerGroup(@javax.annotation.Nullable WorkerGroup workerGroup) {
    
    this.workerGroup = workerGroup;
    return this;
  }

  /**
   * Get workerGroup
   * @return workerGroup
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_WORKER_GROUP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public WorkerGroup getWorkerGroup() {
    return workerGroup;
  }


  @JsonProperty(JSON_PROPERTY_WORKER_GROUP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWorkerGroup(@javax.annotation.Nullable WorkerGroup workerGroup) {
    this.workerGroup = workerGroup;
  }

  public Task logLevel(@javax.annotation.Nullable Level logLevel) {
    
    this.logLevel = logLevel;
    return this;
  }

  /**
   * Get logLevel
   * @return logLevel
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LOG_LEVEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Level getLogLevel() {
    return logLevel;
  }


  @JsonProperty(JSON_PROPERTY_LOG_LEVEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLogLevel(@javax.annotation.Nullable Level logLevel) {
    this.logLevel = logLevel;
  }

  public Task allowFailure(@javax.annotation.Nullable Boolean allowFailure) {
    
    this.allowFailure = allowFailure;
    return this;
  }

  /**
   * Get allowFailure
   * @return allowFailure
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ALLOW_FAILURE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getAllowFailure() {
    return allowFailure;
  }


  @JsonProperty(JSON_PROPERTY_ALLOW_FAILURE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAllowFailure(@javax.annotation.Nullable Boolean allowFailure) {
    this.allowFailure = allowFailure;
  }

  public Task logToFile(@javax.annotation.Nullable Boolean logToFile) {
    
    this.logToFile = logToFile;
    return this;
  }

  /**
   * Get logToFile
   * @return logToFile
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LOG_TO_FILE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getLogToFile() {
    return logToFile;
  }


  @JsonProperty(JSON_PROPERTY_LOG_TO_FILE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLogToFile(@javax.annotation.Nullable Boolean logToFile) {
    this.logToFile = logToFile;
  }

  public Task runIf(@javax.annotation.Nullable String runIf) {
    
    this.runIf = runIf;
    return this;
  }

  /**
   * Get runIf
   * @return runIf
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RUN_IF)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getRunIf() {
    return runIf;
  }


  @JsonProperty(JSON_PROPERTY_RUN_IF)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRunIf(@javax.annotation.Nullable String runIf) {
    this.runIf = runIf;
  }

  public Task allowWarning(@javax.annotation.Nullable Boolean allowWarning) {
    
    this.allowWarning = allowWarning;
    return this;
  }

  /**
   * Get allowWarning
   * @return allowWarning
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ALLOW_WARNING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getAllowWarning() {
    return allowWarning;
  }


  @JsonProperty(JSON_PROPERTY_ALLOW_WARNING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAllowWarning(@javax.annotation.Nullable Boolean allowWarning) {
    this.allowWarning = allowWarning;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Task task = (Task) o;
    return Objects.equals(this.id, task.id) &&
        Objects.equals(this.type, task.type) &&
        Objects.equals(this.version, task.version) &&
        Objects.equals(this.description, task.description) &&
        Objects.equals(this.retry, task.retry) &&
        Objects.equals(this.timeout, task.timeout) &&
        Objects.equals(this.disabled, task.disabled) &&
        Objects.equals(this.workerGroup, task.workerGroup) &&
        Objects.equals(this.logLevel, task.logLevel) &&
        Objects.equals(this.allowFailure, task.allowFailure) &&
        Objects.equals(this.logToFile, task.logToFile) &&
        Objects.equals(this.runIf, task.runIf) &&
        Objects.equals(this.allowWarning, task.allowWarning);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, type, version, description, retry, timeout, disabled, workerGroup, logLevel, allowFailure, logToFile, runIf, allowWarning);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Task {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    retry: ").append(toIndentedString(retry)).append("\n");
    sb.append("    timeout: ").append(toIndentedString(timeout)).append("\n");
    sb.append("    disabled: ").append(toIndentedString(disabled)).append("\n");
    sb.append("    workerGroup: ").append(toIndentedString(workerGroup)).append("\n");
    sb.append("    logLevel: ").append(toIndentedString(logLevel)).append("\n");
    sb.append("    allowFailure: ").append(toIndentedString(allowFailure)).append("\n");
    sb.append("    logToFile: ").append(toIndentedString(logToFile)).append("\n");
    sb.append("    runIf: ").append(toIndentedString(runIf)).append("\n");
    sb.append("    allowWarning: ").append(toIndentedString(allowWarning)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `id` to the URL query string
    if (getId() != null) {
      try {
        joiner.add(String.format("%sid%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `type` to the URL query string
    if (getType() != null) {
      try {
        joiner.add(String.format("%stype%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getType()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `version` to the URL query string
    if (getVersion() != null) {
      try {
        joiner.add(String.format("%sversion%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getVersion()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `description` to the URL query string
    if (getDescription() != null) {
      try {
        joiner.add(String.format("%sdescription%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDescription()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `retry` to the URL query string
    if (getRetry() != null) {
      try {
        joiner.add(String.format("%sretry%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getRetry()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `timeout` to the URL query string
    if (getTimeout() != null) {
      joiner.add(getTimeout().toUrlQueryString(prefix + "timeout" + suffix));
    }

    // add `disabled` to the URL query string
    if (getDisabled() != null) {
      try {
        joiner.add(String.format("%sdisabled%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDisabled()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `workerGroup` to the URL query string
    if (getWorkerGroup() != null) {
      joiner.add(getWorkerGroup().toUrlQueryString(prefix + "workerGroup" + suffix));
    }

    // add `logLevel` to the URL query string
    if (getLogLevel() != null) {
      try {
        joiner.add(String.format("%slogLevel%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getLogLevel()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `allowFailure` to the URL query string
    if (getAllowFailure() != null) {
      try {
        joiner.add(String.format("%sallowFailure%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getAllowFailure()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `logToFile` to the URL query string
    if (getLogToFile() != null) {
      try {
        joiner.add(String.format("%slogToFile%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getLogToFile()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `runIf` to the URL query string
    if (getRunIf() != null) {
      try {
        joiner.add(String.format("%srunIf%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getRunIf()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `allowWarning` to the URL query string
    if (getAllowWarning() != null) {
      try {
        joiner.add(String.format("%sallowWarning%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getAllowWarning()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

