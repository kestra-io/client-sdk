/*
 * Kestra EE
 * All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package io.kestra.api.sdk.api;

import com.fasterxml.jackson.core.type.TypeReference;

import io.kestra.api.sdk.internal.ApiException;
import io.kestra.api.sdk.internal.ApiClient;
import io.kestra.api.sdk.internal.BaseApi;
import io.kestra.api.sdk.internal.Configuration;
import io.kestra.api.sdk.internal.Pair;

import io.kestra.api.sdk.model.Invitation;
import io.kestra.api.sdk.model.InvitationInvitationStatus;
import io.kestra.api.sdk.model.PagedResultsInvitation;


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-31T15:48:45.246126227Z[Etc/UTC]", comments = "Generator version: 7.11.0-SNAPSHOT")
public class InvitationsApi extends BaseApi {

  public InvitationsApi() {
    super(Configuration.getDefaultApiClient());
  }

  public InvitationsApi(ApiClient apiClient) {
    super(apiClient);
  }

  /**
   * Create an invitation
   * 
   * @param invitation  (required)
   * @return Invitation
   * @throws ApiException if fails to make API call
   */
  public Invitation create17(Invitation invitation) throws ApiException {
    return this.create17(invitation, Collections.emptyMap());
  }


  /**
   * Create an invitation
   * 
   * @param invitation  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Invitation
   * @throws ApiException if fails to make API call
   */
  public Invitation create17(Invitation invitation, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = invitation;
    
    // verify the required parameter 'invitation' is set
    if (invitation == null) {
      throw new ApiException(400, "Missing the required parameter 'invitation' when calling create17");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/tenants/invitations";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Invitation> localVarReturnType = new TypeReference<Invitation>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Create an invitation
   * 
   * @param ressourceTenant  (required)
   * @param invitation  (required)
   * @return Invitation
   * @throws ApiException if fails to make API call
   */
  public Invitation create22(String ressourceTenant, Invitation invitation) throws ApiException {
    return this.create22(ressourceTenant, invitation, Collections.emptyMap());
  }


  /**
   * Create an invitation
   * 
   * @param ressourceTenant  (required)
   * @param invitation  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Invitation
   * @throws ApiException if fails to make API call
   */
  public Invitation create22(String ressourceTenant, Invitation invitation, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = invitation;
    
    // verify the required parameter 'ressourceTenant' is set
    if (ressourceTenant == null) {
      throw new ApiException(400, "Missing the required parameter 'ressourceTenant' when calling create22");
    }
    
    // verify the required parameter 'invitation' is set
    if (invitation == null) {
      throw new ApiException(400, "Missing the required parameter 'invitation' when calling create22");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/tenants/{ressourceTenant}/invitations"
      .replaceAll("\\{" + "ressourceTenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(ressourceTenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Invitation> localVarReturnType = new TypeReference<Invitation>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Create an invitation
   * 
   * @param tenant  (required)
   * @param invitation  (required)
   * @return Invitation
   * @throws ApiException if fails to make API call
   */
  public Invitation create34(String tenant, Invitation invitation) throws ApiException {
    return this.create34(tenant, invitation, Collections.emptyMap());
  }


  /**
   * Create an invitation
   * 
   * @param tenant  (required)
   * @param invitation  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Invitation
   * @throws ApiException if fails to make API call
   */
  public Invitation create34(String tenant, Invitation invitation, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = invitation;
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling create34");
    }
    
    // verify the required parameter 'invitation' is set
    if (invitation == null) {
      throw new ApiException(400, "Missing the required parameter 'invitation' when calling create34");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/invitations"
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Invitation> localVarReturnType = new TypeReference<Invitation>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Create an invitation
   * 
   * @param tenant  (required)
   * @param invitation  (required)
   * @return Invitation
   * @throws ApiException if fails to make API call
   */
  public Invitation create42(String tenant, Invitation invitation) throws ApiException {
    return this.create42(tenant, invitation, Collections.emptyMap());
  }


  /**
   * Create an invitation
   * 
   * @param tenant  (required)
   * @param invitation  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Invitation
   * @throws ApiException if fails to make API call
   */
  public Invitation create42(String tenant, Invitation invitation, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = invitation;
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling create42");
    }
    
    // verify the required parameter 'invitation' is set
    if (invitation == null) {
      throw new ApiException(400, "Missing the required parameter 'invitation' when calling create42");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/tenants/invitations"
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Invitation> localVarReturnType = new TypeReference<Invitation>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Create an invitation
   * 
   * @param ressourceTenant  (required)
   * @param tenant  (required)
   * @param invitation  (required)
   * @return Invitation
   * @throws ApiException if fails to make API call
   */
  public Invitation create47(String ressourceTenant, String tenant, Invitation invitation) throws ApiException {
    return this.create47(ressourceTenant, tenant, invitation, Collections.emptyMap());
  }


  /**
   * Create an invitation
   * 
   * @param ressourceTenant  (required)
   * @param tenant  (required)
   * @param invitation  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Invitation
   * @throws ApiException if fails to make API call
   */
  public Invitation create47(String ressourceTenant, String tenant, Invitation invitation, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = invitation;
    
    // verify the required parameter 'ressourceTenant' is set
    if (ressourceTenant == null) {
      throw new ApiException(400, "Missing the required parameter 'ressourceTenant' when calling create47");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling create47");
    }
    
    // verify the required parameter 'invitation' is set
    if (invitation == null) {
      throw new ApiException(400, "Missing the required parameter 'invitation' when calling create47");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/tenants/{ressourceTenant}/invitations"
      .replaceAll("\\{" + "ressourceTenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(ressourceTenant)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Invitation> localVarReturnType = new TypeReference<Invitation>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Create an invitation
   * 
   * @param invitation  (required)
   * @return Invitation
   * @throws ApiException if fails to make API call
   */
  public Invitation create9(Invitation invitation) throws ApiException {
    return this.create9(invitation, Collections.emptyMap());
  }


  /**
   * Create an invitation
   * 
   * @param invitation  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Invitation
   * @throws ApiException if fails to make API call
   */
  public Invitation create9(Invitation invitation, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = invitation;
    
    // verify the required parameter 'invitation' is set
    if (invitation == null) {
      throw new ApiException(400, "Missing the required parameter 'invitation' when calling create9");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/invitations";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Invitation> localVarReturnType = new TypeReference<Invitation>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Delete an invitation
   * 
   * @param id The id of the invitation (required)
   * @throws ApiException if fails to make API call
   */
  public void delete19(String id) throws ApiException {
    this.delete19(id, Collections.emptyMap());
  }


  /**
   * Delete an invitation
   * 
   * @param id The id of the invitation (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void delete19(String id, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling delete19");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/tenants/invitations/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Delete an invitation
   * 
   * @param id The id of the invitation (required)
   * @param ressourceTenant  (required)
   * @throws ApiException if fails to make API call
   */
  public void delete25(String id, String ressourceTenant) throws ApiException {
    this.delete25(id, ressourceTenant, Collections.emptyMap());
  }


  /**
   * Delete an invitation
   * 
   * @param id The id of the invitation (required)
   * @param ressourceTenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void delete25(String id, String ressourceTenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling delete25");
    }
    
    // verify the required parameter 'ressourceTenant' is set
    if (ressourceTenant == null) {
      throw new ApiException(400, "Missing the required parameter 'ressourceTenant' when calling delete25");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/tenants/{ressourceTenant}/invitations/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "ressourceTenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(ressourceTenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Delete an invitation
   * 
   * @param id The id of the invitation (required)
   * @param tenant  (required)
   * @throws ApiException if fails to make API call
   */
  public void delete37(String id, String tenant) throws ApiException {
    this.delete37(id, tenant, Collections.emptyMap());
  }


  /**
   * Delete an invitation
   * 
   * @param id The id of the invitation (required)
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void delete37(String id, String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling delete37");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling delete37");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/invitations/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Delete an invitation
   * 
   * @param id The id of the invitation (required)
   * @param tenant  (required)
   * @throws ApiException if fails to make API call
   */
  public void delete47(String id, String tenant) throws ApiException {
    this.delete47(id, tenant, Collections.emptyMap());
  }


  /**
   * Delete an invitation
   * 
   * @param id The id of the invitation (required)
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void delete47(String id, String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling delete47");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling delete47");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/tenants/invitations/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Delete an invitation
   * 
   * @param id The id of the invitation (required)
   * @param ressourceTenant  (required)
   * @param tenant  (required)
   * @throws ApiException if fails to make API call
   */
  public void delete53(String id, String ressourceTenant, String tenant) throws ApiException {
    this.delete53(id, ressourceTenant, tenant, Collections.emptyMap());
  }


  /**
   * Delete an invitation
   * 
   * @param id The id of the invitation (required)
   * @param ressourceTenant  (required)
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void delete53(String id, String ressourceTenant, String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling delete53");
    }
    
    // verify the required parameter 'ressourceTenant' is set
    if (ressourceTenant == null) {
      throw new ApiException(400, "Missing the required parameter 'ressourceTenant' when calling delete53");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling delete53");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/tenants/{ressourceTenant}/invitations/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "ressourceTenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(ressourceTenant)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Delete an invitation
   * 
   * @param id The id of the invitation (required)
   * @throws ApiException if fails to make API call
   */
  public void delete9(String id) throws ApiException {
    this.delete9(id, Collections.emptyMap());
  }


  /**
   * Delete an invitation
   * 
   * @param id The id of the invitation (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void delete9(String id, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling delete9");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/invitations/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Search for invitations
   * 
   * @param page The current page (required)
   * @param size The current page size (required)
   * @param email The email address of the invited (optional)
   * @param status The current status of the invitations (optional)
   * @param sort The sort of current page (optional)
   * @return PagedResultsInvitation
   * @throws ApiException if fails to make API call
   */
  public PagedResultsInvitation find16(Integer page, Integer size, String email, InvitationInvitationStatus status, List<String> sort) throws ApiException {
    return this.find16(page, size, email, status, sort, Collections.emptyMap());
  }


  /**
   * Search for invitations
   * 
   * @param page The current page (required)
   * @param size The current page size (required)
   * @param email The email address of the invited (optional)
   * @param status The current status of the invitations (optional)
   * @param sort The sort of current page (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return PagedResultsInvitation
   * @throws ApiException if fails to make API call
   */
  public PagedResultsInvitation find16(Integer page, Integer size, String email, InvitationInvitationStatus status, List<String> sort, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'page' is set
    if (page == null) {
      throw new ApiException(400, "Missing the required parameter 'page' when calling find16");
    }
    
    // verify the required parameter 'size' is set
    if (size == null) {
      throw new ApiException(400, "Missing the required parameter 'size' when calling find16");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/tenants/invitations/search";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("email", email));
    localVarQueryParams.addAll(apiClient.parameterToPair("status", status));
    localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
    localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sort", sort));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<PagedResultsInvitation> localVarReturnType = new TypeReference<PagedResultsInvitation>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Search for invitations
   * 
   * @param page The current page (required)
   * @param size The current page size (required)
   * @param ressourceTenant  (required)
   * @param email The email address of the invited (optional)
   * @param status The current status of the invitations (optional)
   * @param sort The sort of current page (optional)
   * @return PagedResultsInvitation
   * @throws ApiException if fails to make API call
   */
  public PagedResultsInvitation find22(Integer page, Integer size, String ressourceTenant, String email, InvitationInvitationStatus status, List<String> sort) throws ApiException {
    return this.find22(page, size, ressourceTenant, email, status, sort, Collections.emptyMap());
  }


  /**
   * Search for invitations
   * 
   * @param page The current page (required)
   * @param size The current page size (required)
   * @param ressourceTenant  (required)
   * @param email The email address of the invited (optional)
   * @param status The current status of the invitations (optional)
   * @param sort The sort of current page (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return PagedResultsInvitation
   * @throws ApiException if fails to make API call
   */
  public PagedResultsInvitation find22(Integer page, Integer size, String ressourceTenant, String email, InvitationInvitationStatus status, List<String> sort, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'page' is set
    if (page == null) {
      throw new ApiException(400, "Missing the required parameter 'page' when calling find22");
    }
    
    // verify the required parameter 'size' is set
    if (size == null) {
      throw new ApiException(400, "Missing the required parameter 'size' when calling find22");
    }
    
    // verify the required parameter 'ressourceTenant' is set
    if (ressourceTenant == null) {
      throw new ApiException(400, "Missing the required parameter 'ressourceTenant' when calling find22");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/tenants/{ressourceTenant}/invitations/search"
      .replaceAll("\\{" + "ressourceTenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(ressourceTenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("email", email));
    localVarQueryParams.addAll(apiClient.parameterToPair("status", status));
    localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
    localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sort", sort));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<PagedResultsInvitation> localVarReturnType = new TypeReference<PagedResultsInvitation>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Search for invitations
   * 
   * @param page The current page (required)
   * @param size The current page size (required)
   * @param tenant  (required)
   * @param email The email address of the invited (optional)
   * @param status The current status of the invitations (optional)
   * @param sort The sort of current page (optional)
   * @return PagedResultsInvitation
   * @throws ApiException if fails to make API call
   */
  public PagedResultsInvitation find35(Integer page, Integer size, String tenant, String email, InvitationInvitationStatus status, List<String> sort) throws ApiException {
    return this.find35(page, size, tenant, email, status, sort, Collections.emptyMap());
  }


  /**
   * Search for invitations
   * 
   * @param page The current page (required)
   * @param size The current page size (required)
   * @param tenant  (required)
   * @param email The email address of the invited (optional)
   * @param status The current status of the invitations (optional)
   * @param sort The sort of current page (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return PagedResultsInvitation
   * @throws ApiException if fails to make API call
   */
  public PagedResultsInvitation find35(Integer page, Integer size, String tenant, String email, InvitationInvitationStatus status, List<String> sort, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'page' is set
    if (page == null) {
      throw new ApiException(400, "Missing the required parameter 'page' when calling find35");
    }
    
    // verify the required parameter 'size' is set
    if (size == null) {
      throw new ApiException(400, "Missing the required parameter 'size' when calling find35");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling find35");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/invitations/search"
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("email", email));
    localVarQueryParams.addAll(apiClient.parameterToPair("status", status));
    localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
    localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sort", sort));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<PagedResultsInvitation> localVarReturnType = new TypeReference<PagedResultsInvitation>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Search for invitations
   * 
   * @param page The current page (required)
   * @param size The current page size (required)
   * @param tenant  (required)
   * @param email The email address of the invited (optional)
   * @param status The current status of the invitations (optional)
   * @param sort The sort of current page (optional)
   * @return PagedResultsInvitation
   * @throws ApiException if fails to make API call
   */
  public PagedResultsInvitation find42(Integer page, Integer size, String tenant, String email, InvitationInvitationStatus status, List<String> sort) throws ApiException {
    return this.find42(page, size, tenant, email, status, sort, Collections.emptyMap());
  }


  /**
   * Search for invitations
   * 
   * @param page The current page (required)
   * @param size The current page size (required)
   * @param tenant  (required)
   * @param email The email address of the invited (optional)
   * @param status The current status of the invitations (optional)
   * @param sort The sort of current page (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return PagedResultsInvitation
   * @throws ApiException if fails to make API call
   */
  public PagedResultsInvitation find42(Integer page, Integer size, String tenant, String email, InvitationInvitationStatus status, List<String> sort, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'page' is set
    if (page == null) {
      throw new ApiException(400, "Missing the required parameter 'page' when calling find42");
    }
    
    // verify the required parameter 'size' is set
    if (size == null) {
      throw new ApiException(400, "Missing the required parameter 'size' when calling find42");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling find42");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/tenants/invitations/search"
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("email", email));
    localVarQueryParams.addAll(apiClient.parameterToPair("status", status));
    localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
    localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sort", sort));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<PagedResultsInvitation> localVarReturnType = new TypeReference<PagedResultsInvitation>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Search for invitations
   * 
   * @param page The current page (required)
   * @param size The current page size (required)
   * @param ressourceTenant  (required)
   * @param tenant  (required)
   * @param email The email address of the invited (optional)
   * @param status The current status of the invitations (optional)
   * @param sort The sort of current page (optional)
   * @return PagedResultsInvitation
   * @throws ApiException if fails to make API call
   */
  public PagedResultsInvitation find48(Integer page, Integer size, String ressourceTenant, String tenant, String email, InvitationInvitationStatus status, List<String> sort) throws ApiException {
    return this.find48(page, size, ressourceTenant, tenant, email, status, sort, Collections.emptyMap());
  }


  /**
   * Search for invitations
   * 
   * @param page The current page (required)
   * @param size The current page size (required)
   * @param ressourceTenant  (required)
   * @param tenant  (required)
   * @param email The email address of the invited (optional)
   * @param status The current status of the invitations (optional)
   * @param sort The sort of current page (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return PagedResultsInvitation
   * @throws ApiException if fails to make API call
   */
  public PagedResultsInvitation find48(Integer page, Integer size, String ressourceTenant, String tenant, String email, InvitationInvitationStatus status, List<String> sort, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'page' is set
    if (page == null) {
      throw new ApiException(400, "Missing the required parameter 'page' when calling find48");
    }
    
    // verify the required parameter 'size' is set
    if (size == null) {
      throw new ApiException(400, "Missing the required parameter 'size' when calling find48");
    }
    
    // verify the required parameter 'ressourceTenant' is set
    if (ressourceTenant == null) {
      throw new ApiException(400, "Missing the required parameter 'ressourceTenant' when calling find48");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling find48");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/tenants/{ressourceTenant}/invitations/search"
      .replaceAll("\\{" + "ressourceTenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(ressourceTenant)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("email", email));
    localVarQueryParams.addAll(apiClient.parameterToPair("status", status));
    localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
    localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sort", sort));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<PagedResultsInvitation> localVarReturnType = new TypeReference<PagedResultsInvitation>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Search for invitations
   * 
   * @param page The current page (required)
   * @param size The current page size (required)
   * @param email The email address of the invited (optional)
   * @param status The current status of the invitations (optional)
   * @param sort The sort of current page (optional)
   * @return PagedResultsInvitation
   * @throws ApiException if fails to make API call
   */
  public PagedResultsInvitation find9(Integer page, Integer size, String email, InvitationInvitationStatus status, List<String> sort) throws ApiException {
    return this.find9(page, size, email, status, sort, Collections.emptyMap());
  }


  /**
   * Search for invitations
   * 
   * @param page The current page (required)
   * @param size The current page size (required)
   * @param email The email address of the invited (optional)
   * @param status The current status of the invitations (optional)
   * @param sort The sort of current page (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return PagedResultsInvitation
   * @throws ApiException if fails to make API call
   */
  public PagedResultsInvitation find9(Integer page, Integer size, String email, InvitationInvitationStatus status, List<String> sort, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'page' is set
    if (page == null) {
      throw new ApiException(400, "Missing the required parameter 'page' when calling find9");
    }
    
    // verify the required parameter 'size' is set
    if (size == null) {
      throw new ApiException(400, "Missing the required parameter 'size' when calling find9");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/invitations/search";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("email", email));
    localVarQueryParams.addAll(apiClient.parameterToPair("status", status));
    localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
    localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sort", sort));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<PagedResultsInvitation> localVarReturnType = new TypeReference<PagedResultsInvitation>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get all invitations for a given email
   * 
   * @param email The email address of the invited (required)
   * @return List&lt;Invitation&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Invitation> findByEmail(String email) throws ApiException {
    return this.findByEmail(email, Collections.emptyMap());
  }


  /**
   * Get all invitations for a given email
   * 
   * @param email The email address of the invited (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return List&lt;Invitation&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Invitation> findByEmail(String email, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'email' is set
    if (email == null) {
      throw new ApiException(400, "Missing the required parameter 'email' when calling findByEmail");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/invitations/email/{email}"
      .replaceAll("\\{" + "email" + "\\}", apiClient.escapeString(apiClient.parameterToString(email)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<List<Invitation>> localVarReturnType = new TypeReference<List<Invitation>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get all invitations for a given email
   * 
   * @param email The email address of the invited (required)
   * @return List&lt;Invitation&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Invitation> findByEmail1(String email) throws ApiException {
    return this.findByEmail1(email, Collections.emptyMap());
  }


  /**
   * Get all invitations for a given email
   * 
   * @param email The email address of the invited (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return List&lt;Invitation&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Invitation> findByEmail1(String email, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'email' is set
    if (email == null) {
      throw new ApiException(400, "Missing the required parameter 'email' when calling findByEmail1");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/tenants/invitations/email/{email}"
      .replaceAll("\\{" + "email" + "\\}", apiClient.escapeString(apiClient.parameterToString(email)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<List<Invitation>> localVarReturnType = new TypeReference<List<Invitation>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get all invitations for a given email
   * 
   * @param email The email address of the invited (required)
   * @param ressourceTenant  (required)
   * @return List&lt;Invitation&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Invitation> findByEmail2(String email, String ressourceTenant) throws ApiException {
    return this.findByEmail2(email, ressourceTenant, Collections.emptyMap());
  }


  /**
   * Get all invitations for a given email
   * 
   * @param email The email address of the invited (required)
   * @param ressourceTenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return List&lt;Invitation&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Invitation> findByEmail2(String email, String ressourceTenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'email' is set
    if (email == null) {
      throw new ApiException(400, "Missing the required parameter 'email' when calling findByEmail2");
    }
    
    // verify the required parameter 'ressourceTenant' is set
    if (ressourceTenant == null) {
      throw new ApiException(400, "Missing the required parameter 'ressourceTenant' when calling findByEmail2");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/tenants/{ressourceTenant}/invitations/email/{email}"
      .replaceAll("\\{" + "email" + "\\}", apiClient.escapeString(apiClient.parameterToString(email)))
      .replaceAll("\\{" + "ressourceTenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(ressourceTenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<List<Invitation>> localVarReturnType = new TypeReference<List<Invitation>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get all invitations for a given email
   * 
   * @param email The email address of the invited (required)
   * @param tenant  (required)
   * @return List&lt;Invitation&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Invitation> findByEmail3(String email, String tenant) throws ApiException {
    return this.findByEmail3(email, tenant, Collections.emptyMap());
  }


  /**
   * Get all invitations for a given email
   * 
   * @param email The email address of the invited (required)
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return List&lt;Invitation&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Invitation> findByEmail3(String email, String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'email' is set
    if (email == null) {
      throw new ApiException(400, "Missing the required parameter 'email' when calling findByEmail3");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling findByEmail3");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/invitations/email/{email}"
      .replaceAll("\\{" + "email" + "\\}", apiClient.escapeString(apiClient.parameterToString(email)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<List<Invitation>> localVarReturnType = new TypeReference<List<Invitation>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get all invitations for a given email
   * 
   * @param email The email address of the invited (required)
   * @param tenant  (required)
   * @return List&lt;Invitation&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Invitation> findByEmail4(String email, String tenant) throws ApiException {
    return this.findByEmail4(email, tenant, Collections.emptyMap());
  }


  /**
   * Get all invitations for a given email
   * 
   * @param email The email address of the invited (required)
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return List&lt;Invitation&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Invitation> findByEmail4(String email, String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'email' is set
    if (email == null) {
      throw new ApiException(400, "Missing the required parameter 'email' when calling findByEmail4");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling findByEmail4");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/tenants/invitations/email/{email}"
      .replaceAll("\\{" + "email" + "\\}", apiClient.escapeString(apiClient.parameterToString(email)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<List<Invitation>> localVarReturnType = new TypeReference<List<Invitation>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get all invitations for a given email
   * 
   * @param email The email address of the invited (required)
   * @param ressourceTenant  (required)
   * @param tenant  (required)
   * @return List&lt;Invitation&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Invitation> findByEmail5(String email, String ressourceTenant, String tenant) throws ApiException {
    return this.findByEmail5(email, ressourceTenant, tenant, Collections.emptyMap());
  }


  /**
   * Get all invitations for a given email
   * 
   * @param email The email address of the invited (required)
   * @param ressourceTenant  (required)
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return List&lt;Invitation&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Invitation> findByEmail5(String email, String ressourceTenant, String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'email' is set
    if (email == null) {
      throw new ApiException(400, "Missing the required parameter 'email' when calling findByEmail5");
    }
    
    // verify the required parameter 'ressourceTenant' is set
    if (ressourceTenant == null) {
      throw new ApiException(400, "Missing the required parameter 'ressourceTenant' when calling findByEmail5");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling findByEmail5");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/tenants/{ressourceTenant}/invitations/email/{email}"
      .replaceAll("\\{" + "email" + "\\}", apiClient.escapeString(apiClient.parameterToString(email)))
      .replaceAll("\\{" + "ressourceTenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(ressourceTenant)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<List<Invitation>> localVarReturnType = new TypeReference<List<Invitation>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get all invitations for a given email
   * 
   * @return List&lt;Invitation&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Invitation> findByEmailAllTenant() throws ApiException {
    return this.findByEmailAllTenant(Collections.emptyMap());
  }


  /**
   * Get all invitations for a given email
   * 
   * @param additionalHeaders additionalHeaders for this call
   * @return List&lt;Invitation&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Invitation> findByEmailAllTenant(Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/api/v1/me/invitations";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<List<Invitation>> localVarReturnType = new TypeReference<List<Invitation>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get all invitations for a given email
   * 
   * @param tenant  (required)
   * @return List&lt;Invitation&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Invitation> findByEmailAllTenant1(String tenant) throws ApiException {
    return this.findByEmailAllTenant1(tenant, Collections.emptyMap());
  }


  /**
   * Get all invitations for a given email
   * 
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return List&lt;Invitation&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Invitation> findByEmailAllTenant1(String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling findByEmailAllTenant1");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/me/invitations"
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<List<Invitation>> localVarReturnType = new TypeReference<List<Invitation>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Delete an invitation
   * 
   * @param id The id of the invitation (required)
   * @param tenant  (required)
   * @return Invitation
   * @throws ApiException if fails to make API call
   */
  public Invitation get11(String id, String tenant) throws ApiException {
    return this.get11(id, tenant, Collections.emptyMap());
  }


  /**
   * Delete an invitation
   * 
   * @param id The id of the invitation (required)
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Invitation
   * @throws ApiException if fails to make API call
   */
  public Invitation get11(String id, String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling get11");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling get11");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/invitations/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Invitation> localVarReturnType = new TypeReference<Invitation>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Delete an invitation
   * 
   * @param id The id of the invitation (required)
   * @param tenant  (required)
   * @return Invitation
   * @throws ApiException if fails to make API call
   */
  public Invitation get13(String id, String tenant) throws ApiException {
    return this.get13(id, tenant, Collections.emptyMap());
  }


  /**
   * Delete an invitation
   * 
   * @param id The id of the invitation (required)
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Invitation
   * @throws ApiException if fails to make API call
   */
  public Invitation get13(String id, String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling get13");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling get13");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/tenants/invitations/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Invitation> localVarReturnType = new TypeReference<Invitation>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Delete an invitation
   * 
   * @param id The id of the invitation (required)
   * @param ressourceTenant  (required)
   * @param tenant  (required)
   * @return Invitation
   * @throws ApiException if fails to make API call
   */
  public Invitation get15(String id, String ressourceTenant, String tenant) throws ApiException {
    return this.get15(id, ressourceTenant, tenant, Collections.emptyMap());
  }


  /**
   * Delete an invitation
   * 
   * @param id The id of the invitation (required)
   * @param ressourceTenant  (required)
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Invitation
   * @throws ApiException if fails to make API call
   */
  public Invitation get15(String id, String ressourceTenant, String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling get15");
    }
    
    // verify the required parameter 'ressourceTenant' is set
    if (ressourceTenant == null) {
      throw new ApiException(400, "Missing the required parameter 'ressourceTenant' when calling get15");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling get15");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/tenants/{ressourceTenant}/invitations/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "ressourceTenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(ressourceTenant)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Invitation> localVarReturnType = new TypeReference<Invitation>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Delete an invitation
   * 
   * @param id The id of the invitation (required)
   * @return Invitation
   * @throws ApiException if fails to make API call
   */
  public Invitation get3(String id) throws ApiException {
    return this.get3(id, Collections.emptyMap());
  }


  /**
   * Delete an invitation
   * 
   * @param id The id of the invitation (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Invitation
   * @throws ApiException if fails to make API call
   */
  public Invitation get3(String id, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling get3");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/invitations/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Invitation> localVarReturnType = new TypeReference<Invitation>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Delete an invitation
   * 
   * @param id The id of the invitation (required)
   * @return Invitation
   * @throws ApiException if fails to make API call
   */
  public Invitation get5(String id) throws ApiException {
    return this.get5(id, Collections.emptyMap());
  }


  /**
   * Delete an invitation
   * 
   * @param id The id of the invitation (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Invitation
   * @throws ApiException if fails to make API call
   */
  public Invitation get5(String id, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling get5");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/tenants/invitations/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Invitation> localVarReturnType = new TypeReference<Invitation>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Delete an invitation
   * 
   * @param id The id of the invitation (required)
   * @param ressourceTenant  (required)
   * @return Invitation
   * @throws ApiException if fails to make API call
   */
  public Invitation get7(String id, String ressourceTenant) throws ApiException {
    return this.get7(id, ressourceTenant, Collections.emptyMap());
  }


  /**
   * Delete an invitation
   * 
   * @param id The id of the invitation (required)
   * @param ressourceTenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Invitation
   * @throws ApiException if fails to make API call
   */
  public Invitation get7(String id, String ressourceTenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling get7");
    }
    
    // verify the required parameter 'ressourceTenant' is set
    if (ressourceTenant == null) {
      throw new ApiException(400, "Missing the required parameter 'ressourceTenant' when calling get7");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/tenants/{ressourceTenant}/invitations/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "ressourceTenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(ressourceTenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Invitation> localVarReturnType = new TypeReference<Invitation>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  @Override
  public <T> T invokeAPI(String url, String method, Object request, TypeReference<T> returnType, Map<String, String> additionalHeaders) throws ApiException {
    String localVarPath = url.replace(apiClient.getBaseURL(), "");
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarHeaderParams.putAll(additionalHeaders);

    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    return apiClient.invokeAPI(
      localVarPath,
        method,
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        request,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        returnType
    );
  }
}
