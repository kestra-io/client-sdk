/*
 * Kestra EE
 * All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kestra.api.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.kestra.api.sdk.model.AbstractGraph;
import io.kestra.api.sdk.model.FlowGraphCluster;
import io.kestra.api.sdk.model.FlowGraphEdge;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * FlowGraph
 */
@JsonPropertyOrder({
  FlowGraph.JSON_PROPERTY_NODES,
  FlowGraph.JSON_PROPERTY_EDGES,
  FlowGraph.JSON_PROPERTY_CLUSTERS,
  FlowGraph.JSON_PROPERTY_FLOWABLES
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-05T07:35:23.657005690Z[Etc/UTC]", comments = "Generator version: 7.14.0-SNAPSHOT")
public class FlowGraph {
  public static final String JSON_PROPERTY_NODES = "nodes";
  @javax.annotation.Nonnull
  private List<AbstractGraph> nodes = new ArrayList<>();

  public static final String JSON_PROPERTY_EDGES = "edges";
  @javax.annotation.Nonnull
  private List<FlowGraphEdge> edges = new ArrayList<>();

  public static final String JSON_PROPERTY_CLUSTERS = "clusters";
  @javax.annotation.Nonnull
  private List<FlowGraphCluster> clusters = new ArrayList<>();

  public static final String JSON_PROPERTY_FLOWABLES = "flowables";
  @javax.annotation.Nonnull
  private List<String> flowables = new ArrayList<>();

  public FlowGraph() {
  }

  public FlowGraph nodes(@javax.annotation.Nonnull List<AbstractGraph> nodes) {
    
    this.nodes = nodes;
    return this;
  }

  public FlowGraph addNodesItem(AbstractGraph nodesItem) {
    if (this.nodes == null) {
      this.nodes = new ArrayList<>();
    }
    this.nodes.add(nodesItem);
    return this;
  }

  /**
   * Get nodes
   * @return nodes
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NODES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<AbstractGraph> getNodes() {
    return nodes;
  }


  @JsonProperty(JSON_PROPERTY_NODES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setNodes(@javax.annotation.Nonnull List<AbstractGraph> nodes) {
    this.nodes = nodes;
  }

  public FlowGraph edges(@javax.annotation.Nonnull List<FlowGraphEdge> edges) {
    
    this.edges = edges;
    return this;
  }

  public FlowGraph addEdgesItem(FlowGraphEdge edgesItem) {
    if (this.edges == null) {
      this.edges = new ArrayList<>();
    }
    this.edges.add(edgesItem);
    return this;
  }

  /**
   * Get edges
   * @return edges
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_EDGES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<FlowGraphEdge> getEdges() {
    return edges;
  }


  @JsonProperty(JSON_PROPERTY_EDGES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEdges(@javax.annotation.Nonnull List<FlowGraphEdge> edges) {
    this.edges = edges;
  }

  public FlowGraph clusters(@javax.annotation.Nonnull List<FlowGraphCluster> clusters) {
    
    this.clusters = clusters;
    return this;
  }

  public FlowGraph addClustersItem(FlowGraphCluster clustersItem) {
    if (this.clusters == null) {
      this.clusters = new ArrayList<>();
    }
    this.clusters.add(clustersItem);
    return this;
  }

  /**
   * Get clusters
   * @return clusters
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CLUSTERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<FlowGraphCluster> getClusters() {
    return clusters;
  }


  @JsonProperty(JSON_PROPERTY_CLUSTERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setClusters(@javax.annotation.Nonnull List<FlowGraphCluster> clusters) {
    this.clusters = clusters;
  }

  public FlowGraph flowables(@javax.annotation.Nonnull List<String> flowables) {
    
    this.flowables = flowables;
    return this;
  }

  public FlowGraph addFlowablesItem(String flowablesItem) {
    if (this.flowables == null) {
      this.flowables = new ArrayList<>();
    }
    this.flowables.add(flowablesItem);
    return this;
  }

  /**
   * Get flowables
   * @return flowables
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_FLOWABLES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<String> getFlowables() {
    return flowables;
  }


  @JsonProperty(JSON_PROPERTY_FLOWABLES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFlowables(@javax.annotation.Nonnull List<String> flowables) {
    this.flowables = flowables;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FlowGraph flowGraph = (FlowGraph) o;
    return Objects.equals(this.nodes, flowGraph.nodes) &&
        Objects.equals(this.edges, flowGraph.edges) &&
        Objects.equals(this.clusters, flowGraph.clusters) &&
        Objects.equals(this.flowables, flowGraph.flowables);
  }

  @Override
  public int hashCode() {
    return Objects.hash(nodes, edges, clusters, flowables);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FlowGraph {\n");
    sb.append("    nodes: ").append(toIndentedString(nodes)).append("\n");
    sb.append("    edges: ").append(toIndentedString(edges)).append("\n");
    sb.append("    clusters: ").append(toIndentedString(clusters)).append("\n");
    sb.append("    flowables: ").append(toIndentedString(flowables)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `nodes` to the URL query string
    if (getNodes() != null) {
      for (int i = 0; i < getNodes().size(); i++) {
        if (getNodes().get(i) != null) {
          joiner.add(getNodes().get(i).toUrlQueryString(String.format("%snodes%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `edges` to the URL query string
    if (getEdges() != null) {
      for (int i = 0; i < getEdges().size(); i++) {
        if (getEdges().get(i) != null) {
          joiner.add(getEdges().get(i).toUrlQueryString(String.format("%sedges%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `clusters` to the URL query string
    if (getClusters() != null) {
      for (int i = 0; i < getClusters().size(); i++) {
        if (getClusters().get(i) != null) {
          joiner.add(getClusters().get(i).toUrlQueryString(String.format("%sclusters%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `flowables` to the URL query string
    if (getFlowables() != null) {
      for (int i = 0; i < getFlowables().size(); i++) {
        try {
          joiner.add(String.format("%sflowables%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(String.valueOf(getFlowables().get(i)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    return joiner.toString();
  }

}

