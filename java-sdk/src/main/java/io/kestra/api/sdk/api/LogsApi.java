/*
 * Kestra EE
 * All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package io.kestra.api.sdk.api;

import com.fasterxml.jackson.core.type.TypeReference;

import io.kestra.api.sdk.internal.ApiException;
import io.kestra.api.sdk.internal.ApiClient;
import io.kestra.api.sdk.internal.BaseApi;
import io.kestra.api.sdk.internal.Configuration;
import io.kestra.api.sdk.internal.Pair;

import io.kestra.api.sdk.model.EventLogEntry;
import java.io.File;
import io.kestra.api.sdk.model.Level;
import io.kestra.api.sdk.model.LogEntry;
import java.time.OffsetDateTime;
import io.kestra.api.sdk.model.PagedResultsLogEntry;


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-31T15:48:45.246126227Z[Etc/UTC]", comments = "Generator version: 7.11.0-SNAPSHOT")
public class LogsApi extends BaseApi {

  public LogsApi() {
    super(Configuration.getDefaultApiClient());
  }

  public LogsApi(ApiClient apiClient) {
    super(apiClient);
  }

  /**
   * Delete logs for a specific execution, taskrun or task
   * 
   * @param executionId The execution id (required)
   * @param minLevel The min log level filter (optional)
   * @param taskRunId The taskrun id (optional)
   * @param taskId The task id (optional)
   * @param attempt The attempt number (optional)
   * @throws ApiException if fails to make API call
   */
  public void delete10(String executionId, Level minLevel, String taskRunId, String taskId, Integer attempt) throws ApiException {
    this.delete10(executionId, minLevel, taskRunId, taskId, attempt, Collections.emptyMap());
  }


  /**
   * Delete logs for a specific execution, taskrun or task
   * 
   * @param executionId The execution id (required)
   * @param minLevel The min log level filter (optional)
   * @param taskRunId The taskrun id (optional)
   * @param taskId The task id (optional)
   * @param attempt The attempt number (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void delete10(String executionId, Level minLevel, String taskRunId, String taskId, Integer attempt, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'executionId' is set
    if (executionId == null) {
      throw new ApiException(400, "Missing the required parameter 'executionId' when calling delete10");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/logs/{executionId}"
      .replaceAll("\\{" + "executionId" + "\\}", apiClient.escapeString(apiClient.parameterToString(executionId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("minLevel", minLevel));
    localVarQueryParams.addAll(apiClient.parameterToPair("taskRunId", taskRunId));
    localVarQueryParams.addAll(apiClient.parameterToPair("taskId", taskId));
    localVarQueryParams.addAll(apiClient.parameterToPair("attempt", attempt));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Delete logs for a specific execution, taskrun or task
   * 
   * @param executionId The execution id (required)
   * @param tenant  (required)
   * @param minLevel The min log level filter (optional)
   * @param taskRunId The taskrun id (optional)
   * @param taskId The task id (optional)
   * @param attempt The attempt number (optional)
   * @throws ApiException if fails to make API call
   */
  public void delete38(String executionId, String tenant, Level minLevel, String taskRunId, String taskId, Integer attempt) throws ApiException {
    this.delete38(executionId, tenant, minLevel, taskRunId, taskId, attempt, Collections.emptyMap());
  }


  /**
   * Delete logs for a specific execution, taskrun or task
   * 
   * @param executionId The execution id (required)
   * @param tenant  (required)
   * @param minLevel The min log level filter (optional)
   * @param taskRunId The taskrun id (optional)
   * @param taskId The task id (optional)
   * @param attempt The attempt number (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void delete38(String executionId, String tenant, Level minLevel, String taskRunId, String taskId, Integer attempt, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'executionId' is set
    if (executionId == null) {
      throw new ApiException(400, "Missing the required parameter 'executionId' when calling delete38");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling delete38");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/logs/{executionId}"
      .replaceAll("\\{" + "executionId" + "\\}", apiClient.escapeString(apiClient.parameterToString(executionId)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("minLevel", minLevel));
    localVarQueryParams.addAll(apiClient.parameterToPair("taskRunId", taskRunId));
    localVarQueryParams.addAll(apiClient.parameterToPair("taskId", taskId));
    localVarQueryParams.addAll(apiClient.parameterToPair("attempt", attempt));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Delete logs for a specific execution, taskrun or task
   * 
   * @param namespace The namespace (required)
   * @param flowId The flow identifier (required)
   * @param triggerId The trigger id (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteFromFlow(String namespace, String flowId, String triggerId) throws ApiException {
    this.deleteFromFlow(namespace, flowId, triggerId, Collections.emptyMap());
  }


  /**
   * Delete logs for a specific execution, taskrun or task
   * 
   * @param namespace The namespace (required)
   * @param flowId The flow identifier (required)
   * @param triggerId The trigger id (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void deleteFromFlow(String namespace, String flowId, String triggerId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'namespace' is set
    if (namespace == null) {
      throw new ApiException(400, "Missing the required parameter 'namespace' when calling deleteFromFlow");
    }
    
    // verify the required parameter 'flowId' is set
    if (flowId == null) {
      throw new ApiException(400, "Missing the required parameter 'flowId' when calling deleteFromFlow");
    }
    
    // verify the required parameter 'triggerId' is set
    if (triggerId == null) {
      throw new ApiException(400, "Missing the required parameter 'triggerId' when calling deleteFromFlow");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/logs/{namespace}/{flowId}"
      .replaceAll("\\{" + "namespace" + "\\}", apiClient.escapeString(apiClient.parameterToString(namespace)))
      .replaceAll("\\{" + "flowId" + "\\}", apiClient.escapeString(apiClient.parameterToString(flowId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("triggerId", triggerId));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Delete logs for a specific execution, taskrun or task
   * 
   * @param namespace The namespace (required)
   * @param flowId The flow identifier (required)
   * @param triggerId The trigger id (required)
   * @param tenant  (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteFromFlow1(String namespace, String flowId, String triggerId, String tenant) throws ApiException {
    this.deleteFromFlow1(namespace, flowId, triggerId, tenant, Collections.emptyMap());
  }


  /**
   * Delete logs for a specific execution, taskrun or task
   * 
   * @param namespace The namespace (required)
   * @param flowId The flow identifier (required)
   * @param triggerId The trigger id (required)
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void deleteFromFlow1(String namespace, String flowId, String triggerId, String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'namespace' is set
    if (namespace == null) {
      throw new ApiException(400, "Missing the required parameter 'namespace' when calling deleteFromFlow1");
    }
    
    // verify the required parameter 'flowId' is set
    if (flowId == null) {
      throw new ApiException(400, "Missing the required parameter 'flowId' when calling deleteFromFlow1");
    }
    
    // verify the required parameter 'triggerId' is set
    if (triggerId == null) {
      throw new ApiException(400, "Missing the required parameter 'triggerId' when calling deleteFromFlow1");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling deleteFromFlow1");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/logs/{namespace}/{flowId}"
      .replaceAll("\\{" + "namespace" + "\\}", apiClient.escapeString(apiClient.parameterToString(namespace)))
      .replaceAll("\\{" + "flowId" + "\\}", apiClient.escapeString(apiClient.parameterToString(flowId)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("triggerId", triggerId));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Download logs for a specific execution, taskrun or task
   * 
   * @param executionId The execution id (required)
   * @param minLevel The min log level filter (optional)
   * @param taskRunId The taskrun id (optional)
   * @param taskId The task id (optional)
   * @param attempt The attempt number (optional)
   * @return File
   * @throws ApiException if fails to make API call
   */
  public File download1(String executionId, Level minLevel, String taskRunId, String taskId, Integer attempt) throws ApiException {
    return this.download1(executionId, minLevel, taskRunId, taskId, attempt, Collections.emptyMap());
  }


  /**
   * Download logs for a specific execution, taskrun or task
   * 
   * @param executionId The execution id (required)
   * @param minLevel The min log level filter (optional)
   * @param taskRunId The taskrun id (optional)
   * @param taskId The task id (optional)
   * @param attempt The attempt number (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return File
   * @throws ApiException if fails to make API call
   */
  public File download1(String executionId, Level minLevel, String taskRunId, String taskId, Integer attempt, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'executionId' is set
    if (executionId == null) {
      throw new ApiException(400, "Missing the required parameter 'executionId' when calling download1");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/logs/{executionId}/download"
      .replaceAll("\\{" + "executionId" + "\\}", apiClient.escapeString(apiClient.parameterToString(executionId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("minLevel", minLevel));
    localVarQueryParams.addAll(apiClient.parameterToPair("taskRunId", taskRunId));
    localVarQueryParams.addAll(apiClient.parameterToPair("taskId", taskId));
    localVarQueryParams.addAll(apiClient.parameterToPair("attempt", attempt));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "text/plain"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<File> localVarReturnType = new TypeReference<File>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Download logs for a specific execution, taskrun or task
   * 
   * @param executionId The execution id (required)
   * @param tenant  (required)
   * @param minLevel The min log level filter (optional)
   * @param taskRunId The taskrun id (optional)
   * @param taskId The task id (optional)
   * @param attempt The attempt number (optional)
   * @return File
   * @throws ApiException if fails to make API call
   */
  public File download3(String executionId, String tenant, Level minLevel, String taskRunId, String taskId, Integer attempt) throws ApiException {
    return this.download3(executionId, tenant, minLevel, taskRunId, taskId, attempt, Collections.emptyMap());
  }


  /**
   * Download logs for a specific execution, taskrun or task
   * 
   * @param executionId The execution id (required)
   * @param tenant  (required)
   * @param minLevel The min log level filter (optional)
   * @param taskRunId The taskrun id (optional)
   * @param taskId The task id (optional)
   * @param attempt The attempt number (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return File
   * @throws ApiException if fails to make API call
   */
  public File download3(String executionId, String tenant, Level minLevel, String taskRunId, String taskId, Integer attempt, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'executionId' is set
    if (executionId == null) {
      throw new ApiException(400, "Missing the required parameter 'executionId' when calling download3");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling download3");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/logs/{executionId}/download"
      .replaceAll("\\{" + "executionId" + "\\}", apiClient.escapeString(apiClient.parameterToString(executionId)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("minLevel", minLevel));
    localVarQueryParams.addAll(apiClient.parameterToPair("taskRunId", taskRunId));
    localVarQueryParams.addAll(apiClient.parameterToPair("taskId", taskId));
    localVarQueryParams.addAll(apiClient.parameterToPair("attempt", attempt));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "text/plain"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<File> localVarReturnType = new TypeReference<File>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Search for logs
   * 
   * @param page The current page (required)
   * @param size The current page size (required)
   * @param q A string filter (optional)
   * @param sort The sort of current page (optional)
   * @param namespace A namespace filter prefix (optional)
   * @param flowId A flow id filter (optional)
   * @param triggerId A trigger id filter (optional)
   * @param minLevel The min log level filter (optional)
   * @param startDate The start datetime (optional)
   * @param endDate The end datetime (optional)
   * @return PagedResultsLogEntry
   * @throws ApiException if fails to make API call
   */
  public PagedResultsLogEntry find10(Integer page, Integer size, String q, List<String> sort, String namespace, String flowId, String triggerId, Level minLevel, OffsetDateTime startDate, OffsetDateTime endDate) throws ApiException {
    return this.find10(page, size, q, sort, namespace, flowId, triggerId, minLevel, startDate, endDate, Collections.emptyMap());
  }


  /**
   * Search for logs
   * 
   * @param page The current page (required)
   * @param size The current page size (required)
   * @param q A string filter (optional)
   * @param sort The sort of current page (optional)
   * @param namespace A namespace filter prefix (optional)
   * @param flowId A flow id filter (optional)
   * @param triggerId A trigger id filter (optional)
   * @param minLevel The min log level filter (optional)
   * @param startDate The start datetime (optional)
   * @param endDate The end datetime (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return PagedResultsLogEntry
   * @throws ApiException if fails to make API call
   */
  public PagedResultsLogEntry find10(Integer page, Integer size, String q, List<String> sort, String namespace, String flowId, String triggerId, Level minLevel, OffsetDateTime startDate, OffsetDateTime endDate, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'page' is set
    if (page == null) {
      throw new ApiException(400, "Missing the required parameter 'page' when calling find10");
    }
    
    // verify the required parameter 'size' is set
    if (size == null) {
      throw new ApiException(400, "Missing the required parameter 'size' when calling find10");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/logs/search";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
    localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
    localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sort", sort));
    localVarQueryParams.addAll(apiClient.parameterToPair("namespace", namespace));
    localVarQueryParams.addAll(apiClient.parameterToPair("flowId", flowId));
    localVarQueryParams.addAll(apiClient.parameterToPair("triggerId", triggerId));
    localVarQueryParams.addAll(apiClient.parameterToPair("minLevel", minLevel));
    localVarQueryParams.addAll(apiClient.parameterToPair("startDate", startDate));
    localVarQueryParams.addAll(apiClient.parameterToPair("endDate", endDate));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<PagedResultsLogEntry> localVarReturnType = new TypeReference<PagedResultsLogEntry>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Search for logs
   * 
   * @param page The current page (required)
   * @param size The current page size (required)
   * @param tenant  (required)
   * @param q A string filter (optional)
   * @param sort The sort of current page (optional)
   * @param namespace A namespace filter prefix (optional)
   * @param flowId A flow id filter (optional)
   * @param triggerId A trigger id filter (optional)
   * @param minLevel The min log level filter (optional)
   * @param startDate The start datetime (optional)
   * @param endDate The end datetime (optional)
   * @return PagedResultsLogEntry
   * @throws ApiException if fails to make API call
   */
  public PagedResultsLogEntry find36(Integer page, Integer size, String tenant, String q, List<String> sort, String namespace, String flowId, String triggerId, Level minLevel, OffsetDateTime startDate, OffsetDateTime endDate) throws ApiException {
    return this.find36(page, size, tenant, q, sort, namespace, flowId, triggerId, minLevel, startDate, endDate, Collections.emptyMap());
  }


  /**
   * Search for logs
   * 
   * @param page The current page (required)
   * @param size The current page size (required)
   * @param tenant  (required)
   * @param q A string filter (optional)
   * @param sort The sort of current page (optional)
   * @param namespace A namespace filter prefix (optional)
   * @param flowId A flow id filter (optional)
   * @param triggerId A trigger id filter (optional)
   * @param minLevel The min log level filter (optional)
   * @param startDate The start datetime (optional)
   * @param endDate The end datetime (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return PagedResultsLogEntry
   * @throws ApiException if fails to make API call
   */
  public PagedResultsLogEntry find36(Integer page, Integer size, String tenant, String q, List<String> sort, String namespace, String flowId, String triggerId, Level minLevel, OffsetDateTime startDate, OffsetDateTime endDate, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'page' is set
    if (page == null) {
      throw new ApiException(400, "Missing the required parameter 'page' when calling find36");
    }
    
    // verify the required parameter 'size' is set
    if (size == null) {
      throw new ApiException(400, "Missing the required parameter 'size' when calling find36");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling find36");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/logs/search"
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
    localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
    localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sort", sort));
    localVarQueryParams.addAll(apiClient.parameterToPair("namespace", namespace));
    localVarQueryParams.addAll(apiClient.parameterToPair("flowId", flowId));
    localVarQueryParams.addAll(apiClient.parameterToPair("triggerId", triggerId));
    localVarQueryParams.addAll(apiClient.parameterToPair("minLevel", minLevel));
    localVarQueryParams.addAll(apiClient.parameterToPair("startDate", startDate));
    localVarQueryParams.addAll(apiClient.parameterToPair("endDate", endDate));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<PagedResultsLogEntry> localVarReturnType = new TypeReference<PagedResultsLogEntry>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get logs for a specific execution, taskrun or task
   * 
   * @param executionId The execution id (required)
   * @param minLevel The min log level filter (optional)
   * @param taskRunId The taskrun id (optional)
   * @param taskId The task id (optional)
   * @param attempt The attempt number (optional)
   * @return List&lt;LogEntry&gt;
   * @throws ApiException if fails to make API call
   */
  public List<LogEntry> findByExecution(String executionId, Level minLevel, String taskRunId, String taskId, Integer attempt) throws ApiException {
    return this.findByExecution(executionId, minLevel, taskRunId, taskId, attempt, Collections.emptyMap());
  }


  /**
   * Get logs for a specific execution, taskrun or task
   * 
   * @param executionId The execution id (required)
   * @param minLevel The min log level filter (optional)
   * @param taskRunId The taskrun id (optional)
   * @param taskId The task id (optional)
   * @param attempt The attempt number (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return List&lt;LogEntry&gt;
   * @throws ApiException if fails to make API call
   */
  public List<LogEntry> findByExecution(String executionId, Level minLevel, String taskRunId, String taskId, Integer attempt, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'executionId' is set
    if (executionId == null) {
      throw new ApiException(400, "Missing the required parameter 'executionId' when calling findByExecution");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/logs/{executionId}"
      .replaceAll("\\{" + "executionId" + "\\}", apiClient.escapeString(apiClient.parameterToString(executionId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("minLevel", minLevel));
    localVarQueryParams.addAll(apiClient.parameterToPair("taskRunId", taskRunId));
    localVarQueryParams.addAll(apiClient.parameterToPair("taskId", taskId));
    localVarQueryParams.addAll(apiClient.parameterToPair("attempt", attempt));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<List<LogEntry>> localVarReturnType = new TypeReference<List<LogEntry>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get logs for a specific execution, taskrun or task
   * 
   * @param executionId The execution id (required)
   * @param tenant  (required)
   * @param minLevel The min log level filter (optional)
   * @param taskRunId The taskrun id (optional)
   * @param taskId The task id (optional)
   * @param attempt The attempt number (optional)
   * @return List&lt;LogEntry&gt;
   * @throws ApiException if fails to make API call
   */
  public List<LogEntry> findByExecution2(String executionId, String tenant, Level minLevel, String taskRunId, String taskId, Integer attempt) throws ApiException {
    return this.findByExecution2(executionId, tenant, minLevel, taskRunId, taskId, attempt, Collections.emptyMap());
  }


  /**
   * Get logs for a specific execution, taskrun or task
   * 
   * @param executionId The execution id (required)
   * @param tenant  (required)
   * @param minLevel The min log level filter (optional)
   * @param taskRunId The taskrun id (optional)
   * @param taskId The task id (optional)
   * @param attempt The attempt number (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return List&lt;LogEntry&gt;
   * @throws ApiException if fails to make API call
   */
  public List<LogEntry> findByExecution2(String executionId, String tenant, Level minLevel, String taskRunId, String taskId, Integer attempt, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'executionId' is set
    if (executionId == null) {
      throw new ApiException(400, "Missing the required parameter 'executionId' when calling findByExecution2");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling findByExecution2");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/logs/{executionId}"
      .replaceAll("\\{" + "executionId" + "\\}", apiClient.escapeString(apiClient.parameterToString(executionId)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("minLevel", minLevel));
    localVarQueryParams.addAll(apiClient.parameterToPair("taskRunId", taskRunId));
    localVarQueryParams.addAll(apiClient.parameterToPair("taskId", taskId));
    localVarQueryParams.addAll(apiClient.parameterToPair("attempt", attempt));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<List<LogEntry>> localVarReturnType = new TypeReference<List<LogEntry>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Follow logs for a specific execution
   * 
   * @param executionId The execution id (required)
   * @param minLevel The min log level filter (optional)
   * @return EventLogEntry
   * @throws ApiException if fails to make API call
   */
  public EventLogEntry follow1(String executionId, Level minLevel) throws ApiException {
    return this.follow1(executionId, minLevel, Collections.emptyMap());
  }


  /**
   * Follow logs for a specific execution
   * 
   * @param executionId The execution id (required)
   * @param minLevel The min log level filter (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return EventLogEntry
   * @throws ApiException if fails to make API call
   */
  public EventLogEntry follow1(String executionId, Level minLevel, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'executionId' is set
    if (executionId == null) {
      throw new ApiException(400, "Missing the required parameter 'executionId' when calling follow1");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/logs/{executionId}/follow"
      .replaceAll("\\{" + "executionId" + "\\}", apiClient.escapeString(apiClient.parameterToString(executionId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("minLevel", minLevel));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "text/event-stream"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<EventLogEntry> localVarReturnType = new TypeReference<EventLogEntry>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Follow logs for a specific execution
   * 
   * @param executionId The execution id (required)
   * @param tenant  (required)
   * @param minLevel The min log level filter (optional)
   * @return EventLogEntry
   * @throws ApiException if fails to make API call
   */
  public EventLogEntry follow3(String executionId, String tenant, Level minLevel) throws ApiException {
    return this.follow3(executionId, tenant, minLevel, Collections.emptyMap());
  }


  /**
   * Follow logs for a specific execution
   * 
   * @param executionId The execution id (required)
   * @param tenant  (required)
   * @param minLevel The min log level filter (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return EventLogEntry
   * @throws ApiException if fails to make API call
   */
  public EventLogEntry follow3(String executionId, String tenant, Level minLevel, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'executionId' is set
    if (executionId == null) {
      throw new ApiException(400, "Missing the required parameter 'executionId' when calling follow3");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling follow3");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/logs/{executionId}/follow"
      .replaceAll("\\{" + "executionId" + "\\}", apiClient.escapeString(apiClient.parameterToString(executionId)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("minLevel", minLevel));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "text/event-stream"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<EventLogEntry> localVarReturnType = new TypeReference<EventLogEntry>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  @Override
  public <T> T invokeAPI(String url, String method, Object request, TypeReference<T> returnType, Map<String, String> additionalHeaders) throws ApiException {
    String localVarPath = url.replace(apiClient.getBaseURL(), "");
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarHeaderParams.putAll(additionalHeaders);

    final String[] localVarAccepts = {
      "text/event-stream"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    return apiClient.invokeAPI(
      localVarPath,
        method,
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        request,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        returnType
    );
  }
}
