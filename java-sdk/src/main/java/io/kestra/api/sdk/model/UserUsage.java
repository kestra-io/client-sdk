/*
 * Kestra EE
 * All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kestra.api.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * UserUsage
 */
@JsonPropertyOrder({
  UserUsage.JSON_PROPERTY_COUNT,
  UserUsage.JSON_PROPERTY_API_KEY_COUNT,
  UserUsage.JSON_PROPERTY_OIDC_COUNT,
  UserUsage.JSON_PROPERTY_BASIC_AUTH_COUNT
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-05T07:35:23.657005690Z[Etc/UTC]", comments = "Generator version: 7.14.0-SNAPSHOT")
public class UserUsage {
  public static final String JSON_PROPERTY_COUNT = "count";
  @javax.annotation.Nonnull
  private Long count;

  public static final String JSON_PROPERTY_API_KEY_COUNT = "apiKeyCount";
  @javax.annotation.Nonnull
  private Long apiKeyCount;

  public static final String JSON_PROPERTY_OIDC_COUNT = "oidcCount";
  @javax.annotation.Nonnull
  private Long oidcCount;

  public static final String JSON_PROPERTY_BASIC_AUTH_COUNT = "basicAuthCount";
  @javax.annotation.Nonnull
  private Long basicAuthCount;

  public UserUsage() {
  }

  public UserUsage count(@javax.annotation.Nonnull Long count) {
    
    this.count = count;
    return this;
  }

  /**
   * Get count
   * @return count
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getCount() {
    return count;
  }


  @JsonProperty(JSON_PROPERTY_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCount(@javax.annotation.Nonnull Long count) {
    this.count = count;
  }

  public UserUsage apiKeyCount(@javax.annotation.Nonnull Long apiKeyCount) {
    
    this.apiKeyCount = apiKeyCount;
    return this;
  }

  /**
   * Get apiKeyCount
   * @return apiKeyCount
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_API_KEY_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getApiKeyCount() {
    return apiKeyCount;
  }


  @JsonProperty(JSON_PROPERTY_API_KEY_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setApiKeyCount(@javax.annotation.Nonnull Long apiKeyCount) {
    this.apiKeyCount = apiKeyCount;
  }

  public UserUsage oidcCount(@javax.annotation.Nonnull Long oidcCount) {
    
    this.oidcCount = oidcCount;
    return this;
  }

  /**
   * Get oidcCount
   * @return oidcCount
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_OIDC_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getOidcCount() {
    return oidcCount;
  }


  @JsonProperty(JSON_PROPERTY_OIDC_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setOidcCount(@javax.annotation.Nonnull Long oidcCount) {
    this.oidcCount = oidcCount;
  }

  public UserUsage basicAuthCount(@javax.annotation.Nonnull Long basicAuthCount) {
    
    this.basicAuthCount = basicAuthCount;
    return this;
  }

  /**
   * Get basicAuthCount
   * @return basicAuthCount
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_BASIC_AUTH_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getBasicAuthCount() {
    return basicAuthCount;
  }


  @JsonProperty(JSON_PROPERTY_BASIC_AUTH_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setBasicAuthCount(@javax.annotation.Nonnull Long basicAuthCount) {
    this.basicAuthCount = basicAuthCount;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserUsage userUsage = (UserUsage) o;
    return Objects.equals(this.count, userUsage.count) &&
        Objects.equals(this.apiKeyCount, userUsage.apiKeyCount) &&
        Objects.equals(this.oidcCount, userUsage.oidcCount) &&
        Objects.equals(this.basicAuthCount, userUsage.basicAuthCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(count, apiKeyCount, oidcCount, basicAuthCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserUsage {\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    apiKeyCount: ").append(toIndentedString(apiKeyCount)).append("\n");
    sb.append("    oidcCount: ").append(toIndentedString(oidcCount)).append("\n");
    sb.append("    basicAuthCount: ").append(toIndentedString(basicAuthCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `count` to the URL query string
    if (getCount() != null) {
      try {
        joiner.add(String.format("%scount%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCount()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `apiKeyCount` to the URL query string
    if (getApiKeyCount() != null) {
      try {
        joiner.add(String.format("%sapiKeyCount%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getApiKeyCount()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `oidcCount` to the URL query string
    if (getOidcCount() != null) {
      try {
        joiner.add(String.format("%soidcCount%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getOidcCount()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `basicAuthCount` to the URL query string
    if (getBasicAuthCount() != null) {
      try {
        joiner.add(String.format("%sbasicAuthCount%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getBasicAuthCount()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

