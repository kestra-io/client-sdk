/*
 * Kestra EE
 * All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kestra.api.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.kestra.api.sdk.model.Banner;
import io.kestra.api.sdk.model.MiscControllerEnvironment;
import io.kestra.api.sdk.model.MiscControllerPreview;
import io.kestra.api.sdk.model.MiscControllerTenantConfigurationInfo;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * MiscControllerConfigurationEe
 */
@JsonPropertyOrder({
  MiscControllerConfigurationEe.JSON_PROPERTY_UUID,
  MiscControllerConfigurationEe.JSON_PROPERTY_VERSION,
  MiscControllerConfigurationEe.JSON_PROPERTY_COMMIT_ID,
  MiscControllerConfigurationEe.JSON_PROPERTY_COMMIT_DATE,
  MiscControllerConfigurationEe.JSON_PROPERTY_IS_CUSTOM_DASHBOARDS_ENABLED,
  MiscControllerConfigurationEe.JSON_PROPERTY_IS_TASK_RUN_ENABLED,
  MiscControllerConfigurationEe.JSON_PROPERTY_IS_ANONYMOUS_USAGE_ENABLED,
  MiscControllerConfigurationEe.JSON_PROPERTY_IS_TEMPLATE_ENABLED,
  MiscControllerConfigurationEe.JSON_PROPERTY_ENVIRONMENT,
  MiscControllerConfigurationEe.JSON_PROPERTY_PREVIEW,
  MiscControllerConfigurationEe.JSON_PROPERTY_IS_BASIC_AUTH_ENABLED,
  MiscControllerConfigurationEe.JSON_PROPERTY_SYSTEM_NAMESPACE,
  MiscControllerConfigurationEe.JSON_PROPERTY_HIDDEN_LABELS_PREFIXES,
  MiscControllerConfigurationEe.JSON_PROPERTY_TENANTS,
  MiscControllerConfigurationEe.JSON_PROPERTY_SECRETS_ENABLED,
  MiscControllerConfigurationEe.JSON_PROPERTY_SUPPORTED_STORAGES,
  MiscControllerConfigurationEe.JSON_PROPERTY_SUPPORTED_SECRETS,
  MiscControllerConfigurationEe.JSON_PROPERTY_BANNER
})
@JsonTypeName("MiscController.ConfigurationEe")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-31T15:48:45.246126227Z[Etc/UTC]", comments = "Generator version: 7.11.0-SNAPSHOT")
public class MiscControllerConfigurationEe {
  public static final String JSON_PROPERTY_UUID = "uuid";
  @javax.annotation.Nullable
  private String uuid;

  public static final String JSON_PROPERTY_VERSION = "version";
  @javax.annotation.Nullable
  private String version;

  public static final String JSON_PROPERTY_COMMIT_ID = "commitId";
  @javax.annotation.Nullable
  private String commitId;

  public static final String JSON_PROPERTY_COMMIT_DATE = "commitDate";
  @javax.annotation.Nullable
  private OffsetDateTime commitDate;

  public static final String JSON_PROPERTY_IS_CUSTOM_DASHBOARDS_ENABLED = "isCustomDashboardsEnabled";
  @javax.annotation.Nullable
  private Boolean isCustomDashboardsEnabled;

  public static final String JSON_PROPERTY_IS_TASK_RUN_ENABLED = "isTaskRunEnabled";
  @javax.annotation.Nullable
  private Boolean isTaskRunEnabled;

  public static final String JSON_PROPERTY_IS_ANONYMOUS_USAGE_ENABLED = "isAnonymousUsageEnabled";
  @javax.annotation.Nullable
  private Boolean isAnonymousUsageEnabled;

  public static final String JSON_PROPERTY_IS_TEMPLATE_ENABLED = "isTemplateEnabled";
  @javax.annotation.Nullable
  private Boolean isTemplateEnabled;

  public static final String JSON_PROPERTY_ENVIRONMENT = "environment";
  @javax.annotation.Nullable
  private MiscControllerEnvironment environment;

  public static final String JSON_PROPERTY_PREVIEW = "preview";
  @javax.annotation.Nullable
  private MiscControllerPreview preview;

  public static final String JSON_PROPERTY_IS_BASIC_AUTH_ENABLED = "isBasicAuthEnabled";
  @javax.annotation.Nullable
  private Boolean isBasicAuthEnabled;

  public static final String JSON_PROPERTY_SYSTEM_NAMESPACE = "systemNamespace";
  @javax.annotation.Nullable
  private String systemNamespace;

  public static final String JSON_PROPERTY_HIDDEN_LABELS_PREFIXES = "hiddenLabelsPrefixes";
  @javax.annotation.Nullable
  private List<String> hiddenLabelsPrefixes = new ArrayList<>();

  public static final String JSON_PROPERTY_TENANTS = "tenants";
  @javax.annotation.Nullable
  private MiscControllerTenantConfigurationInfo tenants;

  public static final String JSON_PROPERTY_SECRETS_ENABLED = "secretsEnabled";
  @javax.annotation.Nullable
  private Boolean secretsEnabled;

  public static final String JSON_PROPERTY_SUPPORTED_STORAGES = "supportedStorages";
  @javax.annotation.Nullable
  private List<String> supportedStorages = new ArrayList<>();

  public static final String JSON_PROPERTY_SUPPORTED_SECRETS = "supportedSecrets";
  @javax.annotation.Nullable
  private List<String> supportedSecrets = new ArrayList<>();

  public static final String JSON_PROPERTY_BANNER = "banner";
  @javax.annotation.Nullable
  private Banner banner;

  public MiscControllerConfigurationEe() {
  }

  public MiscControllerConfigurationEe uuid(@javax.annotation.Nullable String uuid) {
    
    this.uuid = uuid;
    return this;
  }

  /**
   * Get uuid
   * @return uuid
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_UUID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUuid() {
    return uuid;
  }


  @JsonProperty(JSON_PROPERTY_UUID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUuid(@javax.annotation.Nullable String uuid) {
    this.uuid = uuid;
  }

  public MiscControllerConfigurationEe version(@javax.annotation.Nullable String version) {
    
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getVersion() {
    return version;
  }


  @JsonProperty(JSON_PROPERTY_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVersion(@javax.annotation.Nullable String version) {
    this.version = version;
  }

  public MiscControllerConfigurationEe commitId(@javax.annotation.Nullable String commitId) {
    
    this.commitId = commitId;
    return this;
  }

  /**
   * Get commitId
   * @return commitId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COMMIT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCommitId() {
    return commitId;
  }


  @JsonProperty(JSON_PROPERTY_COMMIT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCommitId(@javax.annotation.Nullable String commitId) {
    this.commitId = commitId;
  }

  public MiscControllerConfigurationEe commitDate(@javax.annotation.Nullable OffsetDateTime commitDate) {
    
    this.commitDate = commitDate;
    return this;
  }

  /**
   * Get commitDate
   * @return commitDate
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COMMIT_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getCommitDate() {
    return commitDate;
  }


  @JsonProperty(JSON_PROPERTY_COMMIT_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCommitDate(@javax.annotation.Nullable OffsetDateTime commitDate) {
    this.commitDate = commitDate;
  }

  public MiscControllerConfigurationEe isCustomDashboardsEnabled(@javax.annotation.Nullable Boolean isCustomDashboardsEnabled) {
    
    this.isCustomDashboardsEnabled = isCustomDashboardsEnabled;
    return this;
  }

  /**
   * Get isCustomDashboardsEnabled
   * @return isCustomDashboardsEnabled
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IS_CUSTOM_DASHBOARDS_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIsCustomDashboardsEnabled() {
    return isCustomDashboardsEnabled;
  }


  @JsonProperty(JSON_PROPERTY_IS_CUSTOM_DASHBOARDS_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsCustomDashboardsEnabled(@javax.annotation.Nullable Boolean isCustomDashboardsEnabled) {
    this.isCustomDashboardsEnabled = isCustomDashboardsEnabled;
  }

  public MiscControllerConfigurationEe isTaskRunEnabled(@javax.annotation.Nullable Boolean isTaskRunEnabled) {
    
    this.isTaskRunEnabled = isTaskRunEnabled;
    return this;
  }

  /**
   * Get isTaskRunEnabled
   * @return isTaskRunEnabled
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IS_TASK_RUN_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIsTaskRunEnabled() {
    return isTaskRunEnabled;
  }


  @JsonProperty(JSON_PROPERTY_IS_TASK_RUN_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsTaskRunEnabled(@javax.annotation.Nullable Boolean isTaskRunEnabled) {
    this.isTaskRunEnabled = isTaskRunEnabled;
  }

  public MiscControllerConfigurationEe isAnonymousUsageEnabled(@javax.annotation.Nullable Boolean isAnonymousUsageEnabled) {
    
    this.isAnonymousUsageEnabled = isAnonymousUsageEnabled;
    return this;
  }

  /**
   * Get isAnonymousUsageEnabled
   * @return isAnonymousUsageEnabled
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IS_ANONYMOUS_USAGE_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIsAnonymousUsageEnabled() {
    return isAnonymousUsageEnabled;
  }


  @JsonProperty(JSON_PROPERTY_IS_ANONYMOUS_USAGE_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsAnonymousUsageEnabled(@javax.annotation.Nullable Boolean isAnonymousUsageEnabled) {
    this.isAnonymousUsageEnabled = isAnonymousUsageEnabled;
  }

  public MiscControllerConfigurationEe isTemplateEnabled(@javax.annotation.Nullable Boolean isTemplateEnabled) {
    
    this.isTemplateEnabled = isTemplateEnabled;
    return this;
  }

  /**
   * Get isTemplateEnabled
   * @return isTemplateEnabled
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IS_TEMPLATE_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIsTemplateEnabled() {
    return isTemplateEnabled;
  }


  @JsonProperty(JSON_PROPERTY_IS_TEMPLATE_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsTemplateEnabled(@javax.annotation.Nullable Boolean isTemplateEnabled) {
    this.isTemplateEnabled = isTemplateEnabled;
  }

  public MiscControllerConfigurationEe environment(@javax.annotation.Nullable MiscControllerEnvironment environment) {
    
    this.environment = environment;
    return this;
  }

  /**
   * Get environment
   * @return environment
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENVIRONMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public MiscControllerEnvironment getEnvironment() {
    return environment;
  }


  @JsonProperty(JSON_PROPERTY_ENVIRONMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnvironment(@javax.annotation.Nullable MiscControllerEnvironment environment) {
    this.environment = environment;
  }

  public MiscControllerConfigurationEe preview(@javax.annotation.Nullable MiscControllerPreview preview) {
    
    this.preview = preview;
    return this;
  }

  /**
   * Get preview
   * @return preview
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PREVIEW)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public MiscControllerPreview getPreview() {
    return preview;
  }


  @JsonProperty(JSON_PROPERTY_PREVIEW)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPreview(@javax.annotation.Nullable MiscControllerPreview preview) {
    this.preview = preview;
  }

  public MiscControllerConfigurationEe isBasicAuthEnabled(@javax.annotation.Nullable Boolean isBasicAuthEnabled) {
    
    this.isBasicAuthEnabled = isBasicAuthEnabled;
    return this;
  }

  /**
   * Get isBasicAuthEnabled
   * @return isBasicAuthEnabled
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IS_BASIC_AUTH_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIsBasicAuthEnabled() {
    return isBasicAuthEnabled;
  }


  @JsonProperty(JSON_PROPERTY_IS_BASIC_AUTH_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsBasicAuthEnabled(@javax.annotation.Nullable Boolean isBasicAuthEnabled) {
    this.isBasicAuthEnabled = isBasicAuthEnabled;
  }

  public MiscControllerConfigurationEe systemNamespace(@javax.annotation.Nullable String systemNamespace) {
    
    this.systemNamespace = systemNamespace;
    return this;
  }

  /**
   * Get systemNamespace
   * @return systemNamespace
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SYSTEM_NAMESPACE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSystemNamespace() {
    return systemNamespace;
  }


  @JsonProperty(JSON_PROPERTY_SYSTEM_NAMESPACE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSystemNamespace(@javax.annotation.Nullable String systemNamespace) {
    this.systemNamespace = systemNamespace;
  }

  public MiscControllerConfigurationEe hiddenLabelsPrefixes(@javax.annotation.Nullable List<String> hiddenLabelsPrefixes) {
    
    this.hiddenLabelsPrefixes = hiddenLabelsPrefixes;
    return this;
  }

  public MiscControllerConfigurationEe addHiddenLabelsPrefixesItem(String hiddenLabelsPrefixesItem) {
    if (this.hiddenLabelsPrefixes == null) {
      this.hiddenLabelsPrefixes = new ArrayList<>();
    }
    this.hiddenLabelsPrefixes.add(hiddenLabelsPrefixesItem);
    return this;
  }

  /**
   * Get hiddenLabelsPrefixes
   * @return hiddenLabelsPrefixes
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HIDDEN_LABELS_PREFIXES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getHiddenLabelsPrefixes() {
    return hiddenLabelsPrefixes;
  }


  @JsonProperty(JSON_PROPERTY_HIDDEN_LABELS_PREFIXES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHiddenLabelsPrefixes(@javax.annotation.Nullable List<String> hiddenLabelsPrefixes) {
    this.hiddenLabelsPrefixes = hiddenLabelsPrefixes;
  }

  public MiscControllerConfigurationEe tenants(@javax.annotation.Nullable MiscControllerTenantConfigurationInfo tenants) {
    
    this.tenants = tenants;
    return this;
  }

  /**
   * Get tenants
   * @return tenants
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TENANTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public MiscControllerTenantConfigurationInfo getTenants() {
    return tenants;
  }


  @JsonProperty(JSON_PROPERTY_TENANTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTenants(@javax.annotation.Nullable MiscControllerTenantConfigurationInfo tenants) {
    this.tenants = tenants;
  }

  public MiscControllerConfigurationEe secretsEnabled(@javax.annotation.Nullable Boolean secretsEnabled) {
    
    this.secretsEnabled = secretsEnabled;
    return this;
  }

  /**
   * Get secretsEnabled
   * @return secretsEnabled
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SECRETS_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getSecretsEnabled() {
    return secretsEnabled;
  }


  @JsonProperty(JSON_PROPERTY_SECRETS_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSecretsEnabled(@javax.annotation.Nullable Boolean secretsEnabled) {
    this.secretsEnabled = secretsEnabled;
  }

  public MiscControllerConfigurationEe supportedStorages(@javax.annotation.Nullable List<String> supportedStorages) {
    
    this.supportedStorages = supportedStorages;
    return this;
  }

  public MiscControllerConfigurationEe addSupportedStoragesItem(String supportedStoragesItem) {
    if (this.supportedStorages == null) {
      this.supportedStorages = new ArrayList<>();
    }
    this.supportedStorages.add(supportedStoragesItem);
    return this;
  }

  /**
   * Get supportedStorages
   * @return supportedStorages
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SUPPORTED_STORAGES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getSupportedStorages() {
    return supportedStorages;
  }


  @JsonProperty(JSON_PROPERTY_SUPPORTED_STORAGES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSupportedStorages(@javax.annotation.Nullable List<String> supportedStorages) {
    this.supportedStorages = supportedStorages;
  }

  public MiscControllerConfigurationEe supportedSecrets(@javax.annotation.Nullable List<String> supportedSecrets) {
    
    this.supportedSecrets = supportedSecrets;
    return this;
  }

  public MiscControllerConfigurationEe addSupportedSecretsItem(String supportedSecretsItem) {
    if (this.supportedSecrets == null) {
      this.supportedSecrets = new ArrayList<>();
    }
    this.supportedSecrets.add(supportedSecretsItem);
    return this;
  }

  /**
   * Get supportedSecrets
   * @return supportedSecrets
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SUPPORTED_SECRETS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getSupportedSecrets() {
    return supportedSecrets;
  }


  @JsonProperty(JSON_PROPERTY_SUPPORTED_SECRETS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSupportedSecrets(@javax.annotation.Nullable List<String> supportedSecrets) {
    this.supportedSecrets = supportedSecrets;
  }

  public MiscControllerConfigurationEe banner(@javax.annotation.Nullable Banner banner) {
    
    this.banner = banner;
    return this;
  }

  /**
   * Get banner
   * @return banner
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BANNER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Banner getBanner() {
    return banner;
  }


  @JsonProperty(JSON_PROPERTY_BANNER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBanner(@javax.annotation.Nullable Banner banner) {
    this.banner = banner;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MiscControllerConfigurationEe miscControllerConfigurationEe = (MiscControllerConfigurationEe) o;
    return Objects.equals(this.uuid, miscControllerConfigurationEe.uuid) &&
        Objects.equals(this.version, miscControllerConfigurationEe.version) &&
        Objects.equals(this.commitId, miscControllerConfigurationEe.commitId) &&
        Objects.equals(this.commitDate, miscControllerConfigurationEe.commitDate) &&
        Objects.equals(this.isCustomDashboardsEnabled, miscControllerConfigurationEe.isCustomDashboardsEnabled) &&
        Objects.equals(this.isTaskRunEnabled, miscControllerConfigurationEe.isTaskRunEnabled) &&
        Objects.equals(this.isAnonymousUsageEnabled, miscControllerConfigurationEe.isAnonymousUsageEnabled) &&
        Objects.equals(this.isTemplateEnabled, miscControllerConfigurationEe.isTemplateEnabled) &&
        Objects.equals(this.environment, miscControllerConfigurationEe.environment) &&
        Objects.equals(this.preview, miscControllerConfigurationEe.preview) &&
        Objects.equals(this.isBasicAuthEnabled, miscControllerConfigurationEe.isBasicAuthEnabled) &&
        Objects.equals(this.systemNamespace, miscControllerConfigurationEe.systemNamespace) &&
        Objects.equals(this.hiddenLabelsPrefixes, miscControllerConfigurationEe.hiddenLabelsPrefixes) &&
        Objects.equals(this.tenants, miscControllerConfigurationEe.tenants) &&
        Objects.equals(this.secretsEnabled, miscControllerConfigurationEe.secretsEnabled) &&
        Objects.equals(this.supportedStorages, miscControllerConfigurationEe.supportedStorages) &&
        Objects.equals(this.supportedSecrets, miscControllerConfigurationEe.supportedSecrets) &&
        Objects.equals(this.banner, miscControllerConfigurationEe.banner);
  }

  @Override
  public int hashCode() {
    return Objects.hash(uuid, version, commitId, commitDate, isCustomDashboardsEnabled, isTaskRunEnabled, isAnonymousUsageEnabled, isTemplateEnabled, environment, preview, isBasicAuthEnabled, systemNamespace, hiddenLabelsPrefixes, tenants, secretsEnabled, supportedStorages, supportedSecrets, banner);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MiscControllerConfigurationEe {\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    commitId: ").append(toIndentedString(commitId)).append("\n");
    sb.append("    commitDate: ").append(toIndentedString(commitDate)).append("\n");
    sb.append("    isCustomDashboardsEnabled: ").append(toIndentedString(isCustomDashboardsEnabled)).append("\n");
    sb.append("    isTaskRunEnabled: ").append(toIndentedString(isTaskRunEnabled)).append("\n");
    sb.append("    isAnonymousUsageEnabled: ").append(toIndentedString(isAnonymousUsageEnabled)).append("\n");
    sb.append("    isTemplateEnabled: ").append(toIndentedString(isTemplateEnabled)).append("\n");
    sb.append("    environment: ").append(toIndentedString(environment)).append("\n");
    sb.append("    preview: ").append(toIndentedString(preview)).append("\n");
    sb.append("    isBasicAuthEnabled: ").append(toIndentedString(isBasicAuthEnabled)).append("\n");
    sb.append("    systemNamespace: ").append(toIndentedString(systemNamespace)).append("\n");
    sb.append("    hiddenLabelsPrefixes: ").append(toIndentedString(hiddenLabelsPrefixes)).append("\n");
    sb.append("    tenants: ").append(toIndentedString(tenants)).append("\n");
    sb.append("    secretsEnabled: ").append(toIndentedString(secretsEnabled)).append("\n");
    sb.append("    supportedStorages: ").append(toIndentedString(supportedStorages)).append("\n");
    sb.append("    supportedSecrets: ").append(toIndentedString(supportedSecrets)).append("\n");
    sb.append("    banner: ").append(toIndentedString(banner)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `uuid` to the URL query string
    if (getUuid() != null) {
      try {
        joiner.add(String.format("%suuid%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUuid()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `version` to the URL query string
    if (getVersion() != null) {
      try {
        joiner.add(String.format("%sversion%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getVersion()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `commitId` to the URL query string
    if (getCommitId() != null) {
      try {
        joiner.add(String.format("%scommitId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCommitId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `commitDate` to the URL query string
    if (getCommitDate() != null) {
      try {
        joiner.add(String.format("%scommitDate%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCommitDate()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `isCustomDashboardsEnabled` to the URL query string
    if (getIsCustomDashboardsEnabled() != null) {
      try {
        joiner.add(String.format("%sisCustomDashboardsEnabled%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getIsCustomDashboardsEnabled()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `isTaskRunEnabled` to the URL query string
    if (getIsTaskRunEnabled() != null) {
      try {
        joiner.add(String.format("%sisTaskRunEnabled%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getIsTaskRunEnabled()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `isAnonymousUsageEnabled` to the URL query string
    if (getIsAnonymousUsageEnabled() != null) {
      try {
        joiner.add(String.format("%sisAnonymousUsageEnabled%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getIsAnonymousUsageEnabled()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `isTemplateEnabled` to the URL query string
    if (getIsTemplateEnabled() != null) {
      try {
        joiner.add(String.format("%sisTemplateEnabled%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getIsTemplateEnabled()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `environment` to the URL query string
    if (getEnvironment() != null) {
      joiner.add(getEnvironment().toUrlQueryString(prefix + "environment" + suffix));
    }

    // add `preview` to the URL query string
    if (getPreview() != null) {
      joiner.add(getPreview().toUrlQueryString(prefix + "preview" + suffix));
    }

    // add `isBasicAuthEnabled` to the URL query string
    if (getIsBasicAuthEnabled() != null) {
      try {
        joiner.add(String.format("%sisBasicAuthEnabled%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getIsBasicAuthEnabled()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `systemNamespace` to the URL query string
    if (getSystemNamespace() != null) {
      try {
        joiner.add(String.format("%ssystemNamespace%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSystemNamespace()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `hiddenLabelsPrefixes` to the URL query string
    if (getHiddenLabelsPrefixes() != null) {
      for (int i = 0; i < getHiddenLabelsPrefixes().size(); i++) {
        try {
          joiner.add(String.format("%shiddenLabelsPrefixes%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(String.valueOf(getHiddenLabelsPrefixes().get(i)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    // add `tenants` to the URL query string
    if (getTenants() != null) {
      joiner.add(getTenants().toUrlQueryString(prefix + "tenants" + suffix));
    }

    // add `secretsEnabled` to the URL query string
    if (getSecretsEnabled() != null) {
      try {
        joiner.add(String.format("%ssecretsEnabled%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSecretsEnabled()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `supportedStorages` to the URL query string
    if (getSupportedStorages() != null) {
      for (int i = 0; i < getSupportedStorages().size(); i++) {
        try {
          joiner.add(String.format("%ssupportedStorages%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(String.valueOf(getSupportedStorages().get(i)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    // add `supportedSecrets` to the URL query string
    if (getSupportedSecrets() != null) {
      for (int i = 0; i < getSupportedSecrets().size(); i++) {
        try {
          joiner.add(String.format("%ssupportedSecrets%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(String.valueOf(getSupportedSecrets().get(i)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    // add `banner` to the URL query string
    if (getBanner() != null) {
      joiner.add(getBanner().toUrlQueryString(prefix + "banner" + suffix));
    }

    return joiner.toString();
  }

}

