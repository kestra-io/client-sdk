/*
 * Kestra EE
 * All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kestra.api.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.kestra.api.sdk.model.Level;
import java.time.OffsetDateTime;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * LogEntry
 */
@JsonPropertyOrder({
  LogEntry.JSON_PROPERTY_NAMESPACE,
  LogEntry.JSON_PROPERTY_FLOW_ID,
  LogEntry.JSON_PROPERTY_TASK_ID,
  LogEntry.JSON_PROPERTY_EXECUTION_ID,
  LogEntry.JSON_PROPERTY_TASK_RUN_ID,
  LogEntry.JSON_PROPERTY_ATTEMPT_NUMBER,
  LogEntry.JSON_PROPERTY_TRIGGER_ID,
  LogEntry.JSON_PROPERTY_TIMESTAMP,
  LogEntry.JSON_PROPERTY_LEVEL,
  LogEntry.JSON_PROPERTY_THREAD,
  LogEntry.JSON_PROPERTY_MESSAGE,
  LogEntry.JSON_PROPERTY_DELETED
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-31T15:48:45.246126227Z[Etc/UTC]", comments = "Generator version: 7.11.0-SNAPSHOT")
public class LogEntry {
  public static final String JSON_PROPERTY_NAMESPACE = "namespace";
  @javax.annotation.Nonnull
  private String namespace;

  public static final String JSON_PROPERTY_FLOW_ID = "flowId";
  @javax.annotation.Nonnull
  private String flowId;

  public static final String JSON_PROPERTY_TASK_ID = "taskId";
  @javax.annotation.Nullable
  private String taskId;

  public static final String JSON_PROPERTY_EXECUTION_ID = "executionId";
  @javax.annotation.Nullable
  private String executionId;

  public static final String JSON_PROPERTY_TASK_RUN_ID = "taskRunId";
  @javax.annotation.Nullable
  private String taskRunId;

  public static final String JSON_PROPERTY_ATTEMPT_NUMBER = "attemptNumber";
  @javax.annotation.Nullable
  private Integer attemptNumber;

  public static final String JSON_PROPERTY_TRIGGER_ID = "triggerId";
  @javax.annotation.Nullable
  private String triggerId;

  public static final String JSON_PROPERTY_TIMESTAMP = "timestamp";
  @javax.annotation.Nonnull
  private OffsetDateTime timestamp;

  public static final String JSON_PROPERTY_LEVEL = "level";
  @javax.annotation.Nonnull
  private Level level;

  public static final String JSON_PROPERTY_THREAD = "thread";
  @javax.annotation.Nonnull
  private String thread;

  public static final String JSON_PROPERTY_MESSAGE = "message";
  @javax.annotation.Nonnull
  private String message;

  public static final String JSON_PROPERTY_DELETED = "deleted";
  @javax.annotation.Nonnull
  private Boolean deleted;

  public LogEntry() {
  }

  public LogEntry namespace(@javax.annotation.Nonnull String namespace) {
    
    this.namespace = namespace;
    return this;
  }

  /**
   * Get namespace
   * @return namespace
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NAMESPACE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getNamespace() {
    return namespace;
  }


  @JsonProperty(JSON_PROPERTY_NAMESPACE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setNamespace(@javax.annotation.Nonnull String namespace) {
    this.namespace = namespace;
  }

  public LogEntry flowId(@javax.annotation.Nonnull String flowId) {
    
    this.flowId = flowId;
    return this;
  }

  /**
   * Get flowId
   * @return flowId
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_FLOW_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getFlowId() {
    return flowId;
  }


  @JsonProperty(JSON_PROPERTY_FLOW_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFlowId(@javax.annotation.Nonnull String flowId) {
    this.flowId = flowId;
  }

  public LogEntry taskId(@javax.annotation.Nullable String taskId) {
    
    this.taskId = taskId;
    return this;
  }

  /**
   * Get taskId
   * @return taskId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TASK_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getTaskId() {
    return taskId;
  }


  @JsonProperty(JSON_PROPERTY_TASK_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTaskId(@javax.annotation.Nullable String taskId) {
    this.taskId = taskId;
  }

  public LogEntry executionId(@javax.annotation.Nullable String executionId) {
    
    this.executionId = executionId;
    return this;
  }

  /**
   * Get executionId
   * @return executionId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXECUTION_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getExecutionId() {
    return executionId;
  }


  @JsonProperty(JSON_PROPERTY_EXECUTION_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setExecutionId(@javax.annotation.Nullable String executionId) {
    this.executionId = executionId;
  }

  public LogEntry taskRunId(@javax.annotation.Nullable String taskRunId) {
    
    this.taskRunId = taskRunId;
    return this;
  }

  /**
   * Get taskRunId
   * @return taskRunId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TASK_RUN_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getTaskRunId() {
    return taskRunId;
  }


  @JsonProperty(JSON_PROPERTY_TASK_RUN_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTaskRunId(@javax.annotation.Nullable String taskRunId) {
    this.taskRunId = taskRunId;
  }

  public LogEntry attemptNumber(@javax.annotation.Nullable Integer attemptNumber) {
    
    this.attemptNumber = attemptNumber;
    return this;
  }

  /**
   * Get attemptNumber
   * @return attemptNumber
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ATTEMPT_NUMBER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getAttemptNumber() {
    return attemptNumber;
  }


  @JsonProperty(JSON_PROPERTY_ATTEMPT_NUMBER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAttemptNumber(@javax.annotation.Nullable Integer attemptNumber) {
    this.attemptNumber = attemptNumber;
  }

  public LogEntry triggerId(@javax.annotation.Nullable String triggerId) {
    
    this.triggerId = triggerId;
    return this;
  }

  /**
   * Get triggerId
   * @return triggerId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TRIGGER_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getTriggerId() {
    return triggerId;
  }


  @JsonProperty(JSON_PROPERTY_TRIGGER_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTriggerId(@javax.annotation.Nullable String triggerId) {
    this.triggerId = triggerId;
  }

  public LogEntry timestamp(@javax.annotation.Nonnull OffsetDateTime timestamp) {
    
    this.timestamp = timestamp;
    return this;
  }

  /**
   * Get timestamp
   * @return timestamp
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TIMESTAMP)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public OffsetDateTime getTimestamp() {
    return timestamp;
  }


  @JsonProperty(JSON_PROPERTY_TIMESTAMP)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTimestamp(@javax.annotation.Nonnull OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }

  public LogEntry level(@javax.annotation.Nonnull Level level) {
    
    this.level = level;
    return this;
  }

  /**
   * Get level
   * @return level
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_LEVEL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Level getLevel() {
    return level;
  }


  @JsonProperty(JSON_PROPERTY_LEVEL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLevel(@javax.annotation.Nonnull Level level) {
    this.level = level;
  }

  public LogEntry thread(@javax.annotation.Nonnull String thread) {
    
    this.thread = thread;
    return this;
  }

  /**
   * Get thread
   * @return thread
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_THREAD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getThread() {
    return thread;
  }


  @JsonProperty(JSON_PROPERTY_THREAD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setThread(@javax.annotation.Nonnull String thread) {
    this.thread = thread;
  }

  public LogEntry message(@javax.annotation.Nonnull String message) {
    
    this.message = message;
    return this;
  }

  /**
   * Get message
   * @return message
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getMessage() {
    return message;
  }


  @JsonProperty(JSON_PROPERTY_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMessage(@javax.annotation.Nonnull String message) {
    this.message = message;
  }

  public LogEntry deleted(@javax.annotation.Nonnull Boolean deleted) {
    
    this.deleted = deleted;
    return this;
  }

  /**
   * Get deleted
   * @return deleted
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DELETED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getDeleted() {
    return deleted;
  }


  @JsonProperty(JSON_PROPERTY_DELETED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDeleted(@javax.annotation.Nonnull Boolean deleted) {
    this.deleted = deleted;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LogEntry logEntry = (LogEntry) o;
    return Objects.equals(this.namespace, logEntry.namespace) &&
        Objects.equals(this.flowId, logEntry.flowId) &&
        Objects.equals(this.taskId, logEntry.taskId) &&
        Objects.equals(this.executionId, logEntry.executionId) &&
        Objects.equals(this.taskRunId, logEntry.taskRunId) &&
        Objects.equals(this.attemptNumber, logEntry.attemptNumber) &&
        Objects.equals(this.triggerId, logEntry.triggerId) &&
        Objects.equals(this.timestamp, logEntry.timestamp) &&
        Objects.equals(this.level, logEntry.level) &&
        Objects.equals(this.thread, logEntry.thread) &&
        Objects.equals(this.message, logEntry.message) &&
        Objects.equals(this.deleted, logEntry.deleted);
  }

  @Override
  public int hashCode() {
    return Objects.hash(namespace, flowId, taskId, executionId, taskRunId, attemptNumber, triggerId, timestamp, level, thread, message, deleted);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LogEntry {\n");
    sb.append("    namespace: ").append(toIndentedString(namespace)).append("\n");
    sb.append("    flowId: ").append(toIndentedString(flowId)).append("\n");
    sb.append("    taskId: ").append(toIndentedString(taskId)).append("\n");
    sb.append("    executionId: ").append(toIndentedString(executionId)).append("\n");
    sb.append("    taskRunId: ").append(toIndentedString(taskRunId)).append("\n");
    sb.append("    attemptNumber: ").append(toIndentedString(attemptNumber)).append("\n");
    sb.append("    triggerId: ").append(toIndentedString(triggerId)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    level: ").append(toIndentedString(level)).append("\n");
    sb.append("    thread: ").append(toIndentedString(thread)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    deleted: ").append(toIndentedString(deleted)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `namespace` to the URL query string
    if (getNamespace() != null) {
      try {
        joiner.add(String.format("%snamespace%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getNamespace()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `flowId` to the URL query string
    if (getFlowId() != null) {
      try {
        joiner.add(String.format("%sflowId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getFlowId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `taskId` to the URL query string
    if (getTaskId() != null) {
      try {
        joiner.add(String.format("%staskId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTaskId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `executionId` to the URL query string
    if (getExecutionId() != null) {
      try {
        joiner.add(String.format("%sexecutionId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getExecutionId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `taskRunId` to the URL query string
    if (getTaskRunId() != null) {
      try {
        joiner.add(String.format("%staskRunId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTaskRunId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `attemptNumber` to the URL query string
    if (getAttemptNumber() != null) {
      try {
        joiner.add(String.format("%sattemptNumber%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getAttemptNumber()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `triggerId` to the URL query string
    if (getTriggerId() != null) {
      try {
        joiner.add(String.format("%striggerId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTriggerId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `timestamp` to the URL query string
    if (getTimestamp() != null) {
      try {
        joiner.add(String.format("%stimestamp%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTimestamp()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `level` to the URL query string
    if (getLevel() != null) {
      try {
        joiner.add(String.format("%slevel%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getLevel()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `thread` to the URL query string
    if (getThread() != null) {
      try {
        joiner.add(String.format("%sthread%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getThread()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `message` to the URL query string
    if (getMessage() != null) {
      try {
        joiner.add(String.format("%smessage%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getMessage()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `deleted` to the URL query string
    if (getDeleted() != null) {
      try {
        joiner.add(String.format("%sdeleted%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDeleted()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

