/*
 * Kestra EE
 * All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package io.kestra.api.sdk.api;

import com.fasterxml.jackson.core.type.TypeReference;

import io.kestra.api.sdk.internal.ApiException;
import io.kestra.api.sdk.internal.ApiClient;
import io.kestra.api.sdk.internal.BaseApi;
import io.kestra.api.sdk.internal.Configuration;
import io.kestra.api.sdk.internal.Pair;

import io.kestra.api.sdk.model.AuthControllerInvitationUserRequest;
import io.kestra.api.sdk.model.AuthControllerResetPasswordRequest;
import io.kestra.api.sdk.model.Invitation;
import java.time.LocalDate;


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-31T15:48:45.246126227Z[Etc/UTC]", comments = "Generator version: 7.11.0-SNAPSHOT")
public class DefaultApi extends BaseApi {

  public DefaultApi() {
    super(Configuration.getDefaultApiClient());
  }

  public DefaultApi(ApiClient apiClient) {
    super(apiClient);
  }

  /**
   * 
   * 
   * @param invitationId  (required)
   * @return Invitation
   * @throws ApiException if fails to make API call
   */
  public Invitation acceptInvitation(String invitationId) throws ApiException {
    return this.acceptInvitation(invitationId, Collections.emptyMap());
  }


  /**
   * 
   * 
   * @param invitationId  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Invitation
   * @throws ApiException if fails to make API call
   */
  public Invitation acceptInvitation(String invitationId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'invitationId' is set
    if (invitationId == null) {
      throw new ApiException(400, "Missing the required parameter 'invitationId' when calling acceptInvitation");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/invitation/accept/{invitationId}"
      .replaceAll("\\{" + "invitationId" + "\\}", apiClient.escapeString(apiClient.parameterToString(invitationId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Invitation> localVarReturnType = new TypeReference<Invitation>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * 
   * 
   * @param invitationId  (required)
   * @param authControllerInvitationUserRequest  (required)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object createFromInvitation(String invitationId, AuthControllerInvitationUserRequest authControllerInvitationUserRequest) throws ApiException {
    return this.createFromInvitation(invitationId, authControllerInvitationUserRequest, Collections.emptyMap());
  }


  /**
   * 
   * 
   * @param invitationId  (required)
   * @param authControllerInvitationUserRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object createFromInvitation(String invitationId, AuthControllerInvitationUserRequest authControllerInvitationUserRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = authControllerInvitationUserRequest;
    
    // verify the required parameter 'invitationId' is set
    if (invitationId == null) {
      throw new ApiException(400, "Missing the required parameter 'invitationId' when calling createFromInvitation");
    }
    
    // verify the required parameter 'authControllerInvitationUserRequest' is set
    if (authControllerInvitationUserRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'authControllerInvitationUserRequest' when calling createFromInvitation");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/invitation/create/{invitationId}"
      .replaceAll("\\{" + "invitationId" + "\\}", apiClient.escapeString(apiClient.parameterToString(invitationId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Send an email to reset a password.
   * Send an email to reset a password. Note that whatever the username is found or not, the response will always be 200 to avoid leaking information.
   * @param username User that has forgotten his password (required)
   * @return String
   * @throws ApiException if fails to make API call
   */
  public String forgottenPassword(String username) throws ApiException {
    return this.forgottenPassword(username, Collections.emptyMap());
  }


  /**
   * Send an email to reset a password.
   * Send an email to reset a password. Note that whatever the username is found or not, the response will always be 200 to avoid leaking information.
   * @param username User that has forgotten his password (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return String
   * @throws ApiException if fails to make API call
   */
  public String forgottenPassword(String username, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'username' is set
    if (username == null) {
      throw new ApiException(400, "Missing the required parameter 'username' when calling forgottenPassword");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/forgotten-password";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("username", username));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<String> localVarReturnType = new TypeReference<String>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * 
   * 
   * @param from The start date (optional)
   * @return List&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public List<byte[]> generate(LocalDate from) throws ApiException {
    return this.generate(from, Collections.emptyMap());
  }


  /**
   * 
   * 
   * @param from The start date (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return List&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public List<byte[]> generate(LocalDate from, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/api/v1/stats/generate-reports";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("from", from));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/octet-stream"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<List<byte[]>> localVarReturnType = new TypeReference<List<byte[]>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * 
   * 
   * @param tenant  (required)
   * @param from The start date (optional)
   * @return List&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public List<byte[]> generate1(String tenant, LocalDate from) throws ApiException {
    return this.generate1(tenant, from, Collections.emptyMap());
  }


  /**
   * 
   * 
   * @param tenant  (required)
   * @param from The start date (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return List&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public List<byte[]> generate1(String tenant, LocalDate from, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling generate1");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/stats/generate-reports"
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("from", from));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/octet-stream"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<List<byte[]>> localVarReturnType = new TypeReference<List<byte[]>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Change a password for given token.
   * Change a password for given token. If password does not match password policy, use can still retry.
   * @param authControllerResetPasswordRequest An object containing the token and the new password. (required)
   * @return String
   * @throws ApiException if fails to make API call
   */
  public String resetPassword(AuthControllerResetPasswordRequest authControllerResetPasswordRequest) throws ApiException {
    return this.resetPassword(authControllerResetPasswordRequest, Collections.emptyMap());
  }


  /**
   * Change a password for given token.
   * Change a password for given token. If password does not match password policy, use can still retry.
   * @param authControllerResetPasswordRequest An object containing the token and the new password. (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return String
   * @throws ApiException if fails to make API call
   */
  public String resetPassword(AuthControllerResetPasswordRequest authControllerResetPasswordRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = authControllerResetPasswordRequest;
    
    // verify the required parameter 'authControllerResetPasswordRequest' is set
    if (authControllerResetPasswordRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'authControllerResetPasswordRequest' when calling resetPassword");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/reset-password";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<String> localVarReturnType = new TypeReference<String>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  @Override
  public <T> T invokeAPI(String url, String method, Object request, TypeReference<T> returnType, Map<String, String> additionalHeaders) throws ApiException {
    String localVarPath = url.replace(apiClient.getBaseURL(), "");
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarHeaderParams.putAll(additionalHeaders);

    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    return apiClient.invokeAPI(
      localVarPath,
        method,
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        request,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        returnType
    );
  }
}
