/*
 * Kestra EE
 * All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package io.kestra.api.sdk.api;

import com.fasterxml.jackson.core.type.TypeReference;

import io.kestra.api.sdk.internal.ApiException;
import io.kestra.api.sdk.internal.ApiClient;
import io.kestra.api.sdk.internal.BaseApi;
import io.kestra.api.sdk.internal.Configuration;
import io.kestra.api.sdk.internal.Pair;

import io.kestra.api.sdk.model.PagedResultsTrigger;
import io.kestra.api.sdk.model.PagedResultsTriggerControllerTriggers;
import io.kestra.api.sdk.model.Trigger;
import io.kestra.api.sdk.model.TriggerControllerSetDisabledRequest;


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-31T15:48:45.246126227Z[Etc/UTC]", comments = "Generator version: 7.11.0-SNAPSHOT")
public class TriggersApi extends BaseApi {

  public TriggersApi() {
    super(Configuration.getDefaultApiClient());
  }

  public TriggersApi(ApiClient apiClient) {
    super(apiClient);
  }

  /**
   * Delete a backfill
   * 
   * @param trigger  (required)
   * @return Trigger
   * @throws ApiException if fails to make API call
   */
  public Trigger deleteBackfill(Trigger trigger) throws ApiException {
    return this.deleteBackfill(trigger, Collections.emptyMap());
  }


  /**
   * Delete a backfill
   * 
   * @param trigger  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Trigger
   * @throws ApiException if fails to make API call
   */
  public Trigger deleteBackfill(Trigger trigger, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = trigger;
    
    // verify the required parameter 'trigger' is set
    if (trigger == null) {
      throw new ApiException(400, "Missing the required parameter 'trigger' when calling deleteBackfill");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/triggers/backfill/delete";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Trigger> localVarReturnType = new TypeReference<Trigger>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Delete a backfill
   * 
   * @param tenant  (required)
   * @param trigger  (required)
   * @return Trigger
   * @throws ApiException if fails to make API call
   */
  public Trigger deleteBackfill1(String tenant, Trigger trigger) throws ApiException {
    return this.deleteBackfill1(tenant, trigger, Collections.emptyMap());
  }


  /**
   * Delete a backfill
   * 
   * @param tenant  (required)
   * @param trigger  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Trigger
   * @throws ApiException if fails to make API call
   */
  public Trigger deleteBackfill1(String tenant, Trigger trigger, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = trigger;
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling deleteBackfill1");
    }
    
    // verify the required parameter 'trigger' is set
    if (trigger == null) {
      throw new ApiException(400, "Missing the required parameter 'trigger' when calling deleteBackfill1");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/triggers/backfill/delete"
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Trigger> localVarReturnType = new TypeReference<Trigger>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Delete backfill for given triggers
   * 
   * @param trigger  (required)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object deleteBackfillByIds(List<Trigger> trigger) throws ApiException {
    return this.deleteBackfillByIds(trigger, Collections.emptyMap());
  }


  /**
   * Delete backfill for given triggers
   * 
   * @param trigger  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object deleteBackfillByIds(List<Trigger> trigger, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = trigger;
    
    // verify the required parameter 'trigger' is set
    if (trigger == null) {
      throw new ApiException(400, "Missing the required parameter 'trigger' when calling deleteBackfillByIds");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/triggers/backfill/delete/by-triggers";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Delete backfill for given triggers
   * 
   * @param tenant  (required)
   * @param trigger  (required)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object deleteBackfillByIds1(String tenant, List<Trigger> trigger) throws ApiException {
    return this.deleteBackfillByIds1(tenant, trigger, Collections.emptyMap());
  }


  /**
   * Delete backfill for given triggers
   * 
   * @param tenant  (required)
   * @param trigger  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object deleteBackfillByIds1(String tenant, List<Trigger> trigger, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = trigger;
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling deleteBackfillByIds1");
    }
    
    // verify the required parameter 'trigger' is set
    if (trigger == null) {
      throw new ApiException(400, "Missing the required parameter 'trigger' when calling deleteBackfillByIds1");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/triggers/backfill/delete/by-triggers"
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Delete backfill for given triggers
   * 
   * @param q A string filter (optional)
   * @param namespace A namespace filter prefix (optional)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object deleteBackfillByQuery(String q, String namespace) throws ApiException {
    return this.deleteBackfillByQuery(q, namespace, Collections.emptyMap());
  }


  /**
   * Delete backfill for given triggers
   * 
   * @param q A string filter (optional)
   * @param namespace A namespace filter prefix (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object deleteBackfillByQuery(String q, String namespace, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/api/v1/triggers/backfill/delete/by-query";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
    localVarQueryParams.addAll(apiClient.parameterToPair("namespace", namespace));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Delete backfill for given triggers
   * 
   * @param tenant  (required)
   * @param q A string filter (optional)
   * @param namespace A namespace filter prefix (optional)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object deleteBackfillByQuery1(String tenant, String q, String namespace) throws ApiException {
    return this.deleteBackfillByQuery1(tenant, q, namespace, Collections.emptyMap());
  }


  /**
   * Delete backfill for given triggers
   * 
   * @param tenant  (required)
   * @param q A string filter (optional)
   * @param namespace A namespace filter prefix (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object deleteBackfillByQuery1(String tenant, String q, String namespace, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling deleteBackfillByQuery1");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/triggers/backfill/delete/by-query"
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
    localVarQueryParams.addAll(apiClient.parameterToPair("namespace", namespace));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get all triggers for a flow
   * 
   * @param page The current page (required)
   * @param size The current page size (required)
   * @param namespace The namespace (required)
   * @param flowId The flow id (required)
   * @param sort The sort of current page (optional)
   * @param q A string filter (optional)
   * @return PagedResultsTrigger
   * @throws ApiException if fails to make API call
   */
  public PagedResultsTrigger find25(Integer page, Integer size, String namespace, String flowId, List<String> sort, String q) throws ApiException {
    return this.find25(page, size, namespace, flowId, sort, q, Collections.emptyMap());
  }


  /**
   * Get all triggers for a flow
   * 
   * @param page The current page (required)
   * @param size The current page size (required)
   * @param namespace The namespace (required)
   * @param flowId The flow id (required)
   * @param sort The sort of current page (optional)
   * @param q A string filter (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return PagedResultsTrigger
   * @throws ApiException if fails to make API call
   */
  public PagedResultsTrigger find25(Integer page, Integer size, String namespace, String flowId, List<String> sort, String q, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'page' is set
    if (page == null) {
      throw new ApiException(400, "Missing the required parameter 'page' when calling find25");
    }
    
    // verify the required parameter 'size' is set
    if (size == null) {
      throw new ApiException(400, "Missing the required parameter 'size' when calling find25");
    }
    
    // verify the required parameter 'namespace' is set
    if (namespace == null) {
      throw new ApiException(400, "Missing the required parameter 'namespace' when calling find25");
    }
    
    // verify the required parameter 'flowId' is set
    if (flowId == null) {
      throw new ApiException(400, "Missing the required parameter 'flowId' when calling find25");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/triggers/{namespace}/{flowId}"
      .replaceAll("\\{" + "namespace" + "\\}", apiClient.escapeString(apiClient.parameterToString(namespace)))
      .replaceAll("\\{" + "flowId" + "\\}", apiClient.escapeString(apiClient.parameterToString(flowId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
    localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sort", sort));
    localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<PagedResultsTrigger> localVarReturnType = new TypeReference<PagedResultsTrigger>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get all triggers for a flow
   * 
   * @param page The current page (required)
   * @param size The current page size (required)
   * @param namespace The namespace (required)
   * @param flowId The flow id (required)
   * @param tenant  (required)
   * @param sort The sort of current page (optional)
   * @param q A string filter (optional)
   * @return PagedResultsTrigger
   * @throws ApiException if fails to make API call
   */
  public PagedResultsTrigger find51(Integer page, Integer size, String namespace, String flowId, String tenant, List<String> sort, String q) throws ApiException {
    return this.find51(page, size, namespace, flowId, tenant, sort, q, Collections.emptyMap());
  }


  /**
   * Get all triggers for a flow
   * 
   * @param page The current page (required)
   * @param size The current page size (required)
   * @param namespace The namespace (required)
   * @param flowId The flow id (required)
   * @param tenant  (required)
   * @param sort The sort of current page (optional)
   * @param q A string filter (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return PagedResultsTrigger
   * @throws ApiException if fails to make API call
   */
  public PagedResultsTrigger find51(Integer page, Integer size, String namespace, String flowId, String tenant, List<String> sort, String q, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'page' is set
    if (page == null) {
      throw new ApiException(400, "Missing the required parameter 'page' when calling find51");
    }
    
    // verify the required parameter 'size' is set
    if (size == null) {
      throw new ApiException(400, "Missing the required parameter 'size' when calling find51");
    }
    
    // verify the required parameter 'namespace' is set
    if (namespace == null) {
      throw new ApiException(400, "Missing the required parameter 'namespace' when calling find51");
    }
    
    // verify the required parameter 'flowId' is set
    if (flowId == null) {
      throw new ApiException(400, "Missing the required parameter 'flowId' when calling find51");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling find51");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/triggers/{namespace}/{flowId}"
      .replaceAll("\\{" + "namespace" + "\\}", apiClient.escapeString(apiClient.parameterToString(namespace)))
      .replaceAll("\\{" + "flowId" + "\\}", apiClient.escapeString(apiClient.parameterToString(flowId)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
    localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sort", sort));
    localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<PagedResultsTrigger> localVarReturnType = new TypeReference<PagedResultsTrigger>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Pause a backfill
   * 
   * @param trigger  (required)
   * @return Trigger
   * @throws ApiException if fails to make API call
   */
  public Trigger pauseBackfill(Trigger trigger) throws ApiException {
    return this.pauseBackfill(trigger, Collections.emptyMap());
  }


  /**
   * Pause a backfill
   * 
   * @param trigger  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Trigger
   * @throws ApiException if fails to make API call
   */
  public Trigger pauseBackfill(Trigger trigger, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = trigger;
    
    // verify the required parameter 'trigger' is set
    if (trigger == null) {
      throw new ApiException(400, "Missing the required parameter 'trigger' when calling pauseBackfill");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/triggers/backfill/pause";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Trigger> localVarReturnType = new TypeReference<Trigger>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "PUT",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Pause a backfill
   * 
   * @param tenant  (required)
   * @param trigger  (required)
   * @return Trigger
   * @throws ApiException if fails to make API call
   */
  public Trigger pauseBackfill1(String tenant, Trigger trigger) throws ApiException {
    return this.pauseBackfill1(tenant, trigger, Collections.emptyMap());
  }


  /**
   * Pause a backfill
   * 
   * @param tenant  (required)
   * @param trigger  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Trigger
   * @throws ApiException if fails to make API call
   */
  public Trigger pauseBackfill1(String tenant, Trigger trigger, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = trigger;
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling pauseBackfill1");
    }
    
    // verify the required parameter 'trigger' is set
    if (trigger == null) {
      throw new ApiException(400, "Missing the required parameter 'trigger' when calling pauseBackfill1");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/triggers/backfill/pause"
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Trigger> localVarReturnType = new TypeReference<Trigger>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "PUT",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Pause backfill for given triggers
   * 
   * @param trigger  (required)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object pauseBackfillByIds(List<Trigger> trigger) throws ApiException {
    return this.pauseBackfillByIds(trigger, Collections.emptyMap());
  }


  /**
   * Pause backfill for given triggers
   * 
   * @param trigger  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object pauseBackfillByIds(List<Trigger> trigger, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = trigger;
    
    // verify the required parameter 'trigger' is set
    if (trigger == null) {
      throw new ApiException(400, "Missing the required parameter 'trigger' when calling pauseBackfillByIds");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/triggers/backfill/pause/by-triggers";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Pause backfill for given triggers
   * 
   * @param tenant  (required)
   * @param trigger  (required)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object pauseBackfillByIds1(String tenant, List<Trigger> trigger) throws ApiException {
    return this.pauseBackfillByIds1(tenant, trigger, Collections.emptyMap());
  }


  /**
   * Pause backfill for given triggers
   * 
   * @param tenant  (required)
   * @param trigger  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object pauseBackfillByIds1(String tenant, List<Trigger> trigger, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = trigger;
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling pauseBackfillByIds1");
    }
    
    // verify the required parameter 'trigger' is set
    if (trigger == null) {
      throw new ApiException(400, "Missing the required parameter 'trigger' when calling pauseBackfillByIds1");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/triggers/backfill/pause/by-triggers"
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Pause backfill for given triggers
   * 
   * @param q A string filter (optional)
   * @param namespace A namespace filter prefix (optional)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object pauseBackfillByQuery(String q, String namespace) throws ApiException {
    return this.pauseBackfillByQuery(q, namespace, Collections.emptyMap());
  }


  /**
   * Pause backfill for given triggers
   * 
   * @param q A string filter (optional)
   * @param namespace A namespace filter prefix (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object pauseBackfillByQuery(String q, String namespace, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/api/v1/triggers/backfill/pause/by-query";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
    localVarQueryParams.addAll(apiClient.parameterToPair("namespace", namespace));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Pause backfill for given triggers
   * 
   * @param tenant  (required)
   * @param q A string filter (optional)
   * @param namespace A namespace filter prefix (optional)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object pauseBackfillByQuery1(String tenant, String q, String namespace) throws ApiException {
    return this.pauseBackfillByQuery1(tenant, q, namespace, Collections.emptyMap());
  }


  /**
   * Pause backfill for given triggers
   * 
   * @param tenant  (required)
   * @param q A string filter (optional)
   * @param namespace A namespace filter prefix (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object pauseBackfillByQuery1(String tenant, String q, String namespace, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling pauseBackfillByQuery1");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/triggers/backfill/pause/by-query"
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
    localVarQueryParams.addAll(apiClient.parameterToPair("namespace", namespace));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Restart a trigger
   * 
   * @param namespace The namespace (required)
   * @param flowId The flow id (required)
   * @param triggerId The trigger id (required)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object restart1(String namespace, String flowId, String triggerId) throws ApiException {
    return this.restart1(namespace, flowId, triggerId, Collections.emptyMap());
  }


  /**
   * Restart a trigger
   * 
   * @param namespace The namespace (required)
   * @param flowId The flow id (required)
   * @param triggerId The trigger id (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object restart1(String namespace, String flowId, String triggerId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'namespace' is set
    if (namespace == null) {
      throw new ApiException(400, "Missing the required parameter 'namespace' when calling restart1");
    }
    
    // verify the required parameter 'flowId' is set
    if (flowId == null) {
      throw new ApiException(400, "Missing the required parameter 'flowId' when calling restart1");
    }
    
    // verify the required parameter 'triggerId' is set
    if (triggerId == null) {
      throw new ApiException(400, "Missing the required parameter 'triggerId' when calling restart1");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/triggers/{namespace}/{flowId}/{triggerId}/restart"
      .replaceAll("\\{" + "namespace" + "\\}", apiClient.escapeString(apiClient.parameterToString(namespace)))
      .replaceAll("\\{" + "flowId" + "\\}", apiClient.escapeString(apiClient.parameterToString(flowId)))
      .replaceAll("\\{" + "triggerId" + "\\}", apiClient.escapeString(apiClient.parameterToString(triggerId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Restart a trigger
   * 
   * @param namespace The namespace (required)
   * @param flowId The flow id (required)
   * @param triggerId The trigger id (required)
   * @param tenant  (required)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object restart3(String namespace, String flowId, String triggerId, String tenant) throws ApiException {
    return this.restart3(namespace, flowId, triggerId, tenant, Collections.emptyMap());
  }


  /**
   * Restart a trigger
   * 
   * @param namespace The namespace (required)
   * @param flowId The flow id (required)
   * @param triggerId The trigger id (required)
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object restart3(String namespace, String flowId, String triggerId, String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'namespace' is set
    if (namespace == null) {
      throw new ApiException(400, "Missing the required parameter 'namespace' when calling restart3");
    }
    
    // verify the required parameter 'flowId' is set
    if (flowId == null) {
      throw new ApiException(400, "Missing the required parameter 'flowId' when calling restart3");
    }
    
    // verify the required parameter 'triggerId' is set
    if (triggerId == null) {
      throw new ApiException(400, "Missing the required parameter 'triggerId' when calling restart3");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling restart3");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/triggers/{namespace}/{flowId}/{triggerId}/restart"
      .replaceAll("\\{" + "namespace" + "\\}", apiClient.escapeString(apiClient.parameterToString(namespace)))
      .replaceAll("\\{" + "flowId" + "\\}", apiClient.escapeString(apiClient.parameterToString(flowId)))
      .replaceAll("\\{" + "triggerId" + "\\}", apiClient.escapeString(apiClient.parameterToString(triggerId)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Search for triggers
   * 
   * @param page The current page (required)
   * @param size The current page size (required)
   * @param sort The sort of current page (optional)
   * @param q A string filter (optional)
   * @param namespace A namespace filter prefix (optional)
   * @param workerId The identifier of the worker currently evaluating the trigger (optional)
   * @param flowId The flow identifier (optional)
   * @return PagedResultsTriggerControllerTriggers
   * @throws ApiException if fails to make API call
   */
  public PagedResultsTriggerControllerTriggers search4(Integer page, Integer size, List<String> sort, String q, String namespace, String workerId, String flowId) throws ApiException {
    return this.search4(page, size, sort, q, namespace, workerId, flowId, Collections.emptyMap());
  }


  /**
   * Search for triggers
   * 
   * @param page The current page (required)
   * @param size The current page size (required)
   * @param sort The sort of current page (optional)
   * @param q A string filter (optional)
   * @param namespace A namespace filter prefix (optional)
   * @param workerId The identifier of the worker currently evaluating the trigger (optional)
   * @param flowId The flow identifier (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return PagedResultsTriggerControllerTriggers
   * @throws ApiException if fails to make API call
   */
  public PagedResultsTriggerControllerTriggers search4(Integer page, Integer size, List<String> sort, String q, String namespace, String workerId, String flowId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'page' is set
    if (page == null) {
      throw new ApiException(400, "Missing the required parameter 'page' when calling search4");
    }
    
    // verify the required parameter 'size' is set
    if (size == null) {
      throw new ApiException(400, "Missing the required parameter 'size' when calling search4");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/triggers/search";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
    localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sort", sort));
    localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
    localVarQueryParams.addAll(apiClient.parameterToPair("namespace", namespace));
    localVarQueryParams.addAll(apiClient.parameterToPair("workerId", workerId));
    localVarQueryParams.addAll(apiClient.parameterToPair("flowId", flowId));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<PagedResultsTriggerControllerTriggers> localVarReturnType = new TypeReference<PagedResultsTriggerControllerTriggers>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Search for triggers
   * 
   * @param page The current page (required)
   * @param size The current page size (required)
   * @param tenant  (required)
   * @param sort The sort of current page (optional)
   * @param q A string filter (optional)
   * @param namespace A namespace filter prefix (optional)
   * @param workerId The identifier of the worker currently evaluating the trigger (optional)
   * @param flowId The flow identifier (optional)
   * @return PagedResultsTriggerControllerTriggers
   * @throws ApiException if fails to make API call
   */
  public PagedResultsTriggerControllerTriggers search9(Integer page, Integer size, String tenant, List<String> sort, String q, String namespace, String workerId, String flowId) throws ApiException {
    return this.search9(page, size, tenant, sort, q, namespace, workerId, flowId, Collections.emptyMap());
  }


  /**
   * Search for triggers
   * 
   * @param page The current page (required)
   * @param size The current page size (required)
   * @param tenant  (required)
   * @param sort The sort of current page (optional)
   * @param q A string filter (optional)
   * @param namespace A namespace filter prefix (optional)
   * @param workerId The identifier of the worker currently evaluating the trigger (optional)
   * @param flowId The flow identifier (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return PagedResultsTriggerControllerTriggers
   * @throws ApiException if fails to make API call
   */
  public PagedResultsTriggerControllerTriggers search9(Integer page, Integer size, String tenant, List<String> sort, String q, String namespace, String workerId, String flowId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'page' is set
    if (page == null) {
      throw new ApiException(400, "Missing the required parameter 'page' when calling search9");
    }
    
    // verify the required parameter 'size' is set
    if (size == null) {
      throw new ApiException(400, "Missing the required parameter 'size' when calling search9");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling search9");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/triggers/search"
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
    localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sort", sort));
    localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
    localVarQueryParams.addAll(apiClient.parameterToPair("namespace", namespace));
    localVarQueryParams.addAll(apiClient.parameterToPair("workerId", workerId));
    localVarQueryParams.addAll(apiClient.parameterToPair("flowId", flowId));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<PagedResultsTriggerControllerTriggers> localVarReturnType = new TypeReference<PagedResultsTriggerControllerTriggers>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Delete backfill for given triggers
   * 
   * @param triggerControllerSetDisabledRequest  (required)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object setDisabledByIds(TriggerControllerSetDisabledRequest triggerControllerSetDisabledRequest) throws ApiException {
    return this.setDisabledByIds(triggerControllerSetDisabledRequest, Collections.emptyMap());
  }


  /**
   * Delete backfill for given triggers
   * 
   * @param triggerControllerSetDisabledRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object setDisabledByIds(TriggerControllerSetDisabledRequest triggerControllerSetDisabledRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = triggerControllerSetDisabledRequest;
    
    // verify the required parameter 'triggerControllerSetDisabledRequest' is set
    if (triggerControllerSetDisabledRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'triggerControllerSetDisabledRequest' when calling setDisabledByIds");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/triggers/set-disabled/by-triggers";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Delete backfill for given triggers
   * 
   * @param tenant  (required)
   * @param triggerControllerSetDisabledRequest  (required)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object setDisabledByIds1(String tenant, TriggerControllerSetDisabledRequest triggerControllerSetDisabledRequest) throws ApiException {
    return this.setDisabledByIds1(tenant, triggerControllerSetDisabledRequest, Collections.emptyMap());
  }


  /**
   * Delete backfill for given triggers
   * 
   * @param tenant  (required)
   * @param triggerControllerSetDisabledRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object setDisabledByIds1(String tenant, TriggerControllerSetDisabledRequest triggerControllerSetDisabledRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = triggerControllerSetDisabledRequest;
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling setDisabledByIds1");
    }
    
    // verify the required parameter 'triggerControllerSetDisabledRequest' is set
    if (triggerControllerSetDisabledRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'triggerControllerSetDisabledRequest' when calling setDisabledByIds1");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/triggers/set-disabled/by-triggers"
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Delete backfill for given triggers
   * 
   * @param disabled The disabled state (required)
   * @param q A string filter (optional)
   * @param namespace A namespace filter prefix (optional)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object setDisabledByQuery(Boolean disabled, String q, String namespace) throws ApiException {
    return this.setDisabledByQuery(disabled, q, namespace, Collections.emptyMap());
  }


  /**
   * Delete backfill for given triggers
   * 
   * @param disabled The disabled state (required)
   * @param q A string filter (optional)
   * @param namespace A namespace filter prefix (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object setDisabledByQuery(Boolean disabled, String q, String namespace, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'disabled' is set
    if (disabled == null) {
      throw new ApiException(400, "Missing the required parameter 'disabled' when calling setDisabledByQuery");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/triggers/set-disabled/by-query";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
    localVarQueryParams.addAll(apiClient.parameterToPair("namespace", namespace));
    localVarQueryParams.addAll(apiClient.parameterToPair("disabled", disabled));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Delete backfill for given triggers
   * 
   * @param disabled The disabled state (required)
   * @param tenant  (required)
   * @param q A string filter (optional)
   * @param namespace A namespace filter prefix (optional)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object setDisabledByQuery1(Boolean disabled, String tenant, String q, String namespace) throws ApiException {
    return this.setDisabledByQuery1(disabled, tenant, q, namespace, Collections.emptyMap());
  }


  /**
   * Delete backfill for given triggers
   * 
   * @param disabled The disabled state (required)
   * @param tenant  (required)
   * @param q A string filter (optional)
   * @param namespace A namespace filter prefix (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object setDisabledByQuery1(Boolean disabled, String tenant, String q, String namespace, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'disabled' is set
    if (disabled == null) {
      throw new ApiException(400, "Missing the required parameter 'disabled' when calling setDisabledByQuery1");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling setDisabledByQuery1");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/triggers/set-disabled/by-query"
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
    localVarQueryParams.addAll(apiClient.parameterToPair("namespace", namespace));
    localVarQueryParams.addAll(apiClient.parameterToPair("disabled", disabled));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Unlock a trigger
   * 
   * @param namespace The namespace (required)
   * @param flowId The flow id (required)
   * @param triggerId The trigger id (required)
   * @return Trigger
   * @throws ApiException if fails to make API call
   */
  public Trigger unlock(String namespace, String flowId, String triggerId) throws ApiException {
    return this.unlock(namespace, flowId, triggerId, Collections.emptyMap());
  }


  /**
   * Unlock a trigger
   * 
   * @param namespace The namespace (required)
   * @param flowId The flow id (required)
   * @param triggerId The trigger id (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Trigger
   * @throws ApiException if fails to make API call
   */
  public Trigger unlock(String namespace, String flowId, String triggerId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'namespace' is set
    if (namespace == null) {
      throw new ApiException(400, "Missing the required parameter 'namespace' when calling unlock");
    }
    
    // verify the required parameter 'flowId' is set
    if (flowId == null) {
      throw new ApiException(400, "Missing the required parameter 'flowId' when calling unlock");
    }
    
    // verify the required parameter 'triggerId' is set
    if (triggerId == null) {
      throw new ApiException(400, "Missing the required parameter 'triggerId' when calling unlock");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/triggers/{namespace}/{flowId}/{triggerId}/unlock"
      .replaceAll("\\{" + "namespace" + "\\}", apiClient.escapeString(apiClient.parameterToString(namespace)))
      .replaceAll("\\{" + "flowId" + "\\}", apiClient.escapeString(apiClient.parameterToString(flowId)))
      .replaceAll("\\{" + "triggerId" + "\\}", apiClient.escapeString(apiClient.parameterToString(triggerId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Trigger> localVarReturnType = new TypeReference<Trigger>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Unlock a trigger
   * 
   * @param namespace The namespace (required)
   * @param flowId The flow id (required)
   * @param triggerId The trigger id (required)
   * @param tenant  (required)
   * @return Trigger
   * @throws ApiException if fails to make API call
   */
  public Trigger unlock1(String namespace, String flowId, String triggerId, String tenant) throws ApiException {
    return this.unlock1(namespace, flowId, triggerId, tenant, Collections.emptyMap());
  }


  /**
   * Unlock a trigger
   * 
   * @param namespace The namespace (required)
   * @param flowId The flow id (required)
   * @param triggerId The trigger id (required)
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Trigger
   * @throws ApiException if fails to make API call
   */
  public Trigger unlock1(String namespace, String flowId, String triggerId, String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'namespace' is set
    if (namespace == null) {
      throw new ApiException(400, "Missing the required parameter 'namespace' when calling unlock1");
    }
    
    // verify the required parameter 'flowId' is set
    if (flowId == null) {
      throw new ApiException(400, "Missing the required parameter 'flowId' when calling unlock1");
    }
    
    // verify the required parameter 'triggerId' is set
    if (triggerId == null) {
      throw new ApiException(400, "Missing the required parameter 'triggerId' when calling unlock1");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling unlock1");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/triggers/{namespace}/{flowId}/{triggerId}/unlock"
      .replaceAll("\\{" + "namespace" + "\\}", apiClient.escapeString(apiClient.parameterToString(namespace)))
      .replaceAll("\\{" + "flowId" + "\\}", apiClient.escapeString(apiClient.parameterToString(flowId)))
      .replaceAll("\\{" + "triggerId" + "\\}", apiClient.escapeString(apiClient.parameterToString(triggerId)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Trigger> localVarReturnType = new TypeReference<Trigger>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Unlock given triggers
   * 
   * @param trigger  (required)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object unlockByIds(List<Trigger> trigger) throws ApiException {
    return this.unlockByIds(trigger, Collections.emptyMap());
  }


  /**
   * Unlock given triggers
   * 
   * @param trigger  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object unlockByIds(List<Trigger> trigger, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = trigger;
    
    // verify the required parameter 'trigger' is set
    if (trigger == null) {
      throw new ApiException(400, "Missing the required parameter 'trigger' when calling unlockByIds");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/triggers/unlock/by-triggers";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Unlock given triggers
   * 
   * @param tenant  (required)
   * @param trigger  (required)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object unlockByIds1(String tenant, List<Trigger> trigger) throws ApiException {
    return this.unlockByIds1(tenant, trigger, Collections.emptyMap());
  }


  /**
   * Unlock given triggers
   * 
   * @param tenant  (required)
   * @param trigger  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object unlockByIds1(String tenant, List<Trigger> trigger, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = trigger;
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling unlockByIds1");
    }
    
    // verify the required parameter 'trigger' is set
    if (trigger == null) {
      throw new ApiException(400, "Missing the required parameter 'trigger' when calling unlockByIds1");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/triggers/unlock/by-triggers"
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Unlock triggers by query parameters
   * 
   * @param q A string filter (optional)
   * @param namespace A namespace filter prefix (optional)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object unlockByQuery(String q, String namespace) throws ApiException {
    return this.unlockByQuery(q, namespace, Collections.emptyMap());
  }


  /**
   * Unlock triggers by query parameters
   * 
   * @param q A string filter (optional)
   * @param namespace A namespace filter prefix (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object unlockByQuery(String q, String namespace, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/api/v1/triggers/unlock/by-query";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
    localVarQueryParams.addAll(apiClient.parameterToPair("namespace", namespace));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Unlock triggers by query parameters
   * 
   * @param tenant  (required)
   * @param q A string filter (optional)
   * @param namespace A namespace filter prefix (optional)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object unlockByQuery1(String tenant, String q, String namespace) throws ApiException {
    return this.unlockByQuery1(tenant, q, namespace, Collections.emptyMap());
  }


  /**
   * Unlock triggers by query parameters
   * 
   * @param tenant  (required)
   * @param q A string filter (optional)
   * @param namespace A namespace filter prefix (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object unlockByQuery1(String tenant, String q, String namespace, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling unlockByQuery1");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/triggers/unlock/by-query"
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
    localVarQueryParams.addAll(apiClient.parameterToPair("namespace", namespace));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Unpause a backfill
   * 
   * @param trigger  (required)
   * @return Trigger
   * @throws ApiException if fails to make API call
   */
  public Trigger unpauseBackfill(Trigger trigger) throws ApiException {
    return this.unpauseBackfill(trigger, Collections.emptyMap());
  }


  /**
   * Unpause a backfill
   * 
   * @param trigger  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Trigger
   * @throws ApiException if fails to make API call
   */
  public Trigger unpauseBackfill(Trigger trigger, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = trigger;
    
    // verify the required parameter 'trigger' is set
    if (trigger == null) {
      throw new ApiException(400, "Missing the required parameter 'trigger' when calling unpauseBackfill");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/triggers/backfill/unpause";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Trigger> localVarReturnType = new TypeReference<Trigger>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "PUT",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Unpause a backfill
   * 
   * @param tenant  (required)
   * @param trigger  (required)
   * @return Trigger
   * @throws ApiException if fails to make API call
   */
  public Trigger unpauseBackfill1(String tenant, Trigger trigger) throws ApiException {
    return this.unpauseBackfill1(tenant, trigger, Collections.emptyMap());
  }


  /**
   * Unpause a backfill
   * 
   * @param tenant  (required)
   * @param trigger  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Trigger
   * @throws ApiException if fails to make API call
   */
  public Trigger unpauseBackfill1(String tenant, Trigger trigger, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = trigger;
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling unpauseBackfill1");
    }
    
    // verify the required parameter 'trigger' is set
    if (trigger == null) {
      throw new ApiException(400, "Missing the required parameter 'trigger' when calling unpauseBackfill1");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/triggers/backfill/unpause"
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Trigger> localVarReturnType = new TypeReference<Trigger>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "PUT",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Unpause backfill for given triggers
   * 
   * @param trigger  (required)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object unpauseBackfillByIds(List<Trigger> trigger) throws ApiException {
    return this.unpauseBackfillByIds(trigger, Collections.emptyMap());
  }


  /**
   * Unpause backfill for given triggers
   * 
   * @param trigger  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object unpauseBackfillByIds(List<Trigger> trigger, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = trigger;
    
    // verify the required parameter 'trigger' is set
    if (trigger == null) {
      throw new ApiException(400, "Missing the required parameter 'trigger' when calling unpauseBackfillByIds");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/triggers/backfill/unpause/by-triggers";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Unpause backfill for given triggers
   * 
   * @param tenant  (required)
   * @param trigger  (required)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object unpauseBackfillByIds1(String tenant, List<Trigger> trigger) throws ApiException {
    return this.unpauseBackfillByIds1(tenant, trigger, Collections.emptyMap());
  }


  /**
   * Unpause backfill for given triggers
   * 
   * @param tenant  (required)
   * @param trigger  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object unpauseBackfillByIds1(String tenant, List<Trigger> trigger, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = trigger;
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling unpauseBackfillByIds1");
    }
    
    // verify the required parameter 'trigger' is set
    if (trigger == null) {
      throw new ApiException(400, "Missing the required parameter 'trigger' when calling unpauseBackfillByIds1");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/triggers/backfill/unpause/by-triggers"
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Unpause backfill for given triggers
   * 
   * @param q A string filter (optional)
   * @param namespace A namespace filter prefix (optional)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object unpauseBackfillByQuery(String q, String namespace) throws ApiException {
    return this.unpauseBackfillByQuery(q, namespace, Collections.emptyMap());
  }


  /**
   * Unpause backfill for given triggers
   * 
   * @param q A string filter (optional)
   * @param namespace A namespace filter prefix (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object unpauseBackfillByQuery(String q, String namespace, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/api/v1/triggers/backfill/unpause/by-query";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
    localVarQueryParams.addAll(apiClient.parameterToPair("namespace", namespace));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Unpause backfill for given triggers
   * 
   * @param tenant  (required)
   * @param q A string filter (optional)
   * @param namespace A namespace filter prefix (optional)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object unpauseBackfillByQuery1(String tenant, String q, String namespace) throws ApiException {
    return this.unpauseBackfillByQuery1(tenant, q, namespace, Collections.emptyMap());
  }


  /**
   * Unpause backfill for given triggers
   * 
   * @param tenant  (required)
   * @param q A string filter (optional)
   * @param namespace A namespace filter prefix (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object unpauseBackfillByQuery1(String tenant, String q, String namespace, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling unpauseBackfillByQuery1");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/triggers/backfill/unpause/by-query"
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
    localVarQueryParams.addAll(apiClient.parameterToPair("namespace", namespace));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Update a trigger
   * 
   * @param trigger  (required)
   * @return Trigger
   * @throws ApiException if fails to make API call
   */
  public Trigger update17(Trigger trigger) throws ApiException {
    return this.update17(trigger, Collections.emptyMap());
  }


  /**
   * Update a trigger
   * 
   * @param trigger  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Trigger
   * @throws ApiException if fails to make API call
   */
  public Trigger update17(Trigger trigger, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = trigger;
    
    // verify the required parameter 'trigger' is set
    if (trigger == null) {
      throw new ApiException(400, "Missing the required parameter 'trigger' when calling update17");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/triggers";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Trigger> localVarReturnType = new TypeReference<Trigger>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "PUT",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Update a trigger
   * 
   * @param tenant  (required)
   * @param trigger  (required)
   * @return Trigger
   * @throws ApiException if fails to make API call
   */
  public Trigger update35(String tenant, Trigger trigger) throws ApiException {
    return this.update35(tenant, trigger, Collections.emptyMap());
  }


  /**
   * Update a trigger
   * 
   * @param tenant  (required)
   * @param trigger  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Trigger
   * @throws ApiException if fails to make API call
   */
  public Trigger update35(String tenant, Trigger trigger, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = trigger;
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling update35");
    }
    
    // verify the required parameter 'trigger' is set
    if (trigger == null) {
      throw new ApiException(400, "Missing the required parameter 'trigger' when calling update35");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/triggers"
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Trigger> localVarReturnType = new TypeReference<Trigger>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "PUT",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  @Override
  public <T> T invokeAPI(String url, String method, Object request, TypeReference<T> returnType, Map<String, String> additionalHeaders) throws ApiException {
    String localVarPath = url.replace(apiClient.getBaseURL(), "");
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarHeaderParams.putAll(additionalHeaders);

    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    return apiClient.invokeAPI(
      localVarPath,
        method,
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        request,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        returnType
    );
  }
}
