/*
 * Kestra EE
 * All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package io.kestra.api.sdk.api;

import com.fasterxml.jackson.core.type.TypeReference;

import io.kestra.api.sdk.internal.ApiException;
import io.kestra.api.sdk.internal.ApiClient;
import io.kestra.api.sdk.internal.BaseApi;
import io.kestra.api.sdk.internal.Configuration;
import io.kestra.api.sdk.internal.Pair;

import io.kestra.api.sdk.model.AbstractBindingControllerBindingDetail;
import io.kestra.api.sdk.model.Binding;
import io.kestra.api.sdk.model.BindingType;
import io.kestra.api.sdk.model.PagedResultsAbstractBindingControllerBindingDetail;


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-31T15:48:45.246126227Z[Etc/UTC]", comments = "Generator version: 7.11.0-SNAPSHOT")
public class BindingsApi extends BaseApi {

  public BindingsApi() {
    super(Configuration.getDefaultApiClient());
  }

  public BindingsApi(ApiClient apiClient) {
    super(apiClient);
  }

  /**
   * Create multiple bindings
   * 
   * @param binding  (required)
   * @return List&lt;AbstractBindingControllerBindingDetail&gt;
   * @throws ApiException if fails to make API call
   */
  public List<AbstractBindingControllerBindingDetail> bulkCreate(List<Binding> binding) throws ApiException {
    return this.bulkCreate(binding, Collections.emptyMap());
  }


  /**
   * Create multiple bindings
   * 
   * @param binding  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return List&lt;AbstractBindingControllerBindingDetail&gt;
   * @throws ApiException if fails to make API call
   */
  public List<AbstractBindingControllerBindingDetail> bulkCreate(List<Binding> binding, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = binding;
    
    // verify the required parameter 'binding' is set
    if (binding == null) {
      throw new ApiException(400, "Missing the required parameter 'binding' when calling bulkCreate");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/bindings/bulk";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<List<AbstractBindingControllerBindingDetail>> localVarReturnType = new TypeReference<List<AbstractBindingControllerBindingDetail>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Create multiple bindings
   * 
   * @param binding  (required)
   * @return List&lt;AbstractBindingControllerBindingDetail&gt;
   * @throws ApiException if fails to make API call
   */
  public List<AbstractBindingControllerBindingDetail> bulkCreate1(List<Binding> binding) throws ApiException {
    return this.bulkCreate1(binding, Collections.emptyMap());
  }


  /**
   * Create multiple bindings
   * 
   * @param binding  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return List&lt;AbstractBindingControllerBindingDetail&gt;
   * @throws ApiException if fails to make API call
   */
  public List<AbstractBindingControllerBindingDetail> bulkCreate1(List<Binding> binding, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = binding;
    
    // verify the required parameter 'binding' is set
    if (binding == null) {
      throw new ApiException(400, "Missing the required parameter 'binding' when calling bulkCreate1");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/tenants/bindings/bulk";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<List<AbstractBindingControllerBindingDetail>> localVarReturnType = new TypeReference<List<AbstractBindingControllerBindingDetail>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Create multiple bindings
   * 
   * @param ressourceTenant  (required)
   * @param binding  (required)
   * @return List&lt;AbstractBindingControllerBindingDetail&gt;
   * @throws ApiException if fails to make API call
   */
  public List<AbstractBindingControllerBindingDetail> bulkCreate2(String ressourceTenant, List<Binding> binding) throws ApiException {
    return this.bulkCreate2(ressourceTenant, binding, Collections.emptyMap());
  }


  /**
   * Create multiple bindings
   * 
   * @param ressourceTenant  (required)
   * @param binding  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return List&lt;AbstractBindingControllerBindingDetail&gt;
   * @throws ApiException if fails to make API call
   */
  public List<AbstractBindingControllerBindingDetail> bulkCreate2(String ressourceTenant, List<Binding> binding, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = binding;
    
    // verify the required parameter 'ressourceTenant' is set
    if (ressourceTenant == null) {
      throw new ApiException(400, "Missing the required parameter 'ressourceTenant' when calling bulkCreate2");
    }
    
    // verify the required parameter 'binding' is set
    if (binding == null) {
      throw new ApiException(400, "Missing the required parameter 'binding' when calling bulkCreate2");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/tenants/{ressourceTenant}/bindings/bulk"
      .replaceAll("\\{" + "ressourceTenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(ressourceTenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<List<AbstractBindingControllerBindingDetail>> localVarReturnType = new TypeReference<List<AbstractBindingControllerBindingDetail>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Create multiple bindings
   * 
   * @param tenant  (required)
   * @param binding  (required)
   * @return List&lt;AbstractBindingControllerBindingDetail&gt;
   * @throws ApiException if fails to make API call
   */
  public List<AbstractBindingControllerBindingDetail> bulkCreate3(String tenant, List<Binding> binding) throws ApiException {
    return this.bulkCreate3(tenant, binding, Collections.emptyMap());
  }


  /**
   * Create multiple bindings
   * 
   * @param tenant  (required)
   * @param binding  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return List&lt;AbstractBindingControllerBindingDetail&gt;
   * @throws ApiException if fails to make API call
   */
  public List<AbstractBindingControllerBindingDetail> bulkCreate3(String tenant, List<Binding> binding, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = binding;
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling bulkCreate3");
    }
    
    // verify the required parameter 'binding' is set
    if (binding == null) {
      throw new ApiException(400, "Missing the required parameter 'binding' when calling bulkCreate3");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/bindings/bulk"
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<List<AbstractBindingControllerBindingDetail>> localVarReturnType = new TypeReference<List<AbstractBindingControllerBindingDetail>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Create multiple bindings
   * 
   * @param tenant  (required)
   * @param binding  (required)
   * @return List&lt;AbstractBindingControllerBindingDetail&gt;
   * @throws ApiException if fails to make API call
   */
  public List<AbstractBindingControllerBindingDetail> bulkCreate4(String tenant, List<Binding> binding) throws ApiException {
    return this.bulkCreate4(tenant, binding, Collections.emptyMap());
  }


  /**
   * Create multiple bindings
   * 
   * @param tenant  (required)
   * @param binding  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return List&lt;AbstractBindingControllerBindingDetail&gt;
   * @throws ApiException if fails to make API call
   */
  public List<AbstractBindingControllerBindingDetail> bulkCreate4(String tenant, List<Binding> binding, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = binding;
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling bulkCreate4");
    }
    
    // verify the required parameter 'binding' is set
    if (binding == null) {
      throw new ApiException(400, "Missing the required parameter 'binding' when calling bulkCreate4");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/tenants/bindings/bulk"
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<List<AbstractBindingControllerBindingDetail>> localVarReturnType = new TypeReference<List<AbstractBindingControllerBindingDetail>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Create multiple bindings
   * 
   * @param ressourceTenant  (required)
   * @param tenant  (required)
   * @param binding  (required)
   * @return List&lt;AbstractBindingControllerBindingDetail&gt;
   * @throws ApiException if fails to make API call
   */
  public List<AbstractBindingControllerBindingDetail> bulkCreate5(String ressourceTenant, String tenant, List<Binding> binding) throws ApiException {
    return this.bulkCreate5(ressourceTenant, tenant, binding, Collections.emptyMap());
  }


  /**
   * Create multiple bindings
   * 
   * @param ressourceTenant  (required)
   * @param tenant  (required)
   * @param binding  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return List&lt;AbstractBindingControllerBindingDetail&gt;
   * @throws ApiException if fails to make API call
   */
  public List<AbstractBindingControllerBindingDetail> bulkCreate5(String ressourceTenant, String tenant, List<Binding> binding, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = binding;
    
    // verify the required parameter 'ressourceTenant' is set
    if (ressourceTenant == null) {
      throw new ApiException(400, "Missing the required parameter 'ressourceTenant' when calling bulkCreate5");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling bulkCreate5");
    }
    
    // verify the required parameter 'binding' is set
    if (binding == null) {
      throw new ApiException(400, "Missing the required parameter 'binding' when calling bulkCreate5");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/tenants/{ressourceTenant}/bindings/bulk"
      .replaceAll("\\{" + "ressourceTenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(ressourceTenant)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<List<AbstractBindingControllerBindingDetail>> localVarReturnType = new TypeReference<List<AbstractBindingControllerBindingDetail>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Create a binding
   * 
   * @param binding  (required)
   * @return AbstractBindingControllerBindingDetail
   * @throws ApiException if fails to make API call
   */
  public AbstractBindingControllerBindingDetail create15(Binding binding) throws ApiException {
    return this.create15(binding, Collections.emptyMap());
  }


  /**
   * Create a binding
   * 
   * @param binding  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return AbstractBindingControllerBindingDetail
   * @throws ApiException if fails to make API call
   */
  public AbstractBindingControllerBindingDetail create15(Binding binding, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = binding;
    
    // verify the required parameter 'binding' is set
    if (binding == null) {
      throw new ApiException(400, "Missing the required parameter 'binding' when calling create15");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/tenants/bindings";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<AbstractBindingControllerBindingDetail> localVarReturnType = new TypeReference<AbstractBindingControllerBindingDetail>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Create a binding
   * 
   * @param binding  (required)
   * @return AbstractBindingControllerBindingDetail
   * @throws ApiException if fails to make API call
   */
  public AbstractBindingControllerBindingDetail create2(Binding binding) throws ApiException {
    return this.create2(binding, Collections.emptyMap());
  }


  /**
   * Create a binding
   * 
   * @param binding  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return AbstractBindingControllerBindingDetail
   * @throws ApiException if fails to make API call
   */
  public AbstractBindingControllerBindingDetail create2(Binding binding, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = binding;
    
    // verify the required parameter 'binding' is set
    if (binding == null) {
      throw new ApiException(400, "Missing the required parameter 'binding' when calling create2");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/bindings";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<AbstractBindingControllerBindingDetail> localVarReturnType = new TypeReference<AbstractBindingControllerBindingDetail>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Create a binding
   * 
   * @param ressourceTenant  (required)
   * @param binding  (required)
   * @return AbstractBindingControllerBindingDetail
   * @throws ApiException if fails to make API call
   */
  public AbstractBindingControllerBindingDetail create20(String ressourceTenant, Binding binding) throws ApiException {
    return this.create20(ressourceTenant, binding, Collections.emptyMap());
  }


  /**
   * Create a binding
   * 
   * @param ressourceTenant  (required)
   * @param binding  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return AbstractBindingControllerBindingDetail
   * @throws ApiException if fails to make API call
   */
  public AbstractBindingControllerBindingDetail create20(String ressourceTenant, Binding binding, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = binding;
    
    // verify the required parameter 'ressourceTenant' is set
    if (ressourceTenant == null) {
      throw new ApiException(400, "Missing the required parameter 'ressourceTenant' when calling create20");
    }
    
    // verify the required parameter 'binding' is set
    if (binding == null) {
      throw new ApiException(400, "Missing the required parameter 'binding' when calling create20");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/tenants/{ressourceTenant}/bindings"
      .replaceAll("\\{" + "ressourceTenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(ressourceTenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<AbstractBindingControllerBindingDetail> localVarReturnType = new TypeReference<AbstractBindingControllerBindingDetail>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Create a binding
   * 
   * @param tenant  (required)
   * @param binding  (required)
   * @return AbstractBindingControllerBindingDetail
   * @throws ApiException if fails to make API call
   */
  public AbstractBindingControllerBindingDetail create27(String tenant, Binding binding) throws ApiException {
    return this.create27(tenant, binding, Collections.emptyMap());
  }


  /**
   * Create a binding
   * 
   * @param tenant  (required)
   * @param binding  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return AbstractBindingControllerBindingDetail
   * @throws ApiException if fails to make API call
   */
  public AbstractBindingControllerBindingDetail create27(String tenant, Binding binding, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = binding;
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling create27");
    }
    
    // verify the required parameter 'binding' is set
    if (binding == null) {
      throw new ApiException(400, "Missing the required parameter 'binding' when calling create27");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/bindings"
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<AbstractBindingControllerBindingDetail> localVarReturnType = new TypeReference<AbstractBindingControllerBindingDetail>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Create a binding
   * 
   * @param tenant  (required)
   * @param binding  (required)
   * @return AbstractBindingControllerBindingDetail
   * @throws ApiException if fails to make API call
   */
  public AbstractBindingControllerBindingDetail create40(String tenant, Binding binding) throws ApiException {
    return this.create40(tenant, binding, Collections.emptyMap());
  }


  /**
   * Create a binding
   * 
   * @param tenant  (required)
   * @param binding  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return AbstractBindingControllerBindingDetail
   * @throws ApiException if fails to make API call
   */
  public AbstractBindingControllerBindingDetail create40(String tenant, Binding binding, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = binding;
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling create40");
    }
    
    // verify the required parameter 'binding' is set
    if (binding == null) {
      throw new ApiException(400, "Missing the required parameter 'binding' when calling create40");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/tenants/bindings"
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<AbstractBindingControllerBindingDetail> localVarReturnType = new TypeReference<AbstractBindingControllerBindingDetail>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Create a binding
   * 
   * @param ressourceTenant  (required)
   * @param tenant  (required)
   * @param binding  (required)
   * @return AbstractBindingControllerBindingDetail
   * @throws ApiException if fails to make API call
   */
  public AbstractBindingControllerBindingDetail create45(String ressourceTenant, String tenant, Binding binding) throws ApiException {
    return this.create45(ressourceTenant, tenant, binding, Collections.emptyMap());
  }


  /**
   * Create a binding
   * 
   * @param ressourceTenant  (required)
   * @param tenant  (required)
   * @param binding  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return AbstractBindingControllerBindingDetail
   * @throws ApiException if fails to make API call
   */
  public AbstractBindingControllerBindingDetail create45(String ressourceTenant, String tenant, Binding binding, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = binding;
    
    // verify the required parameter 'ressourceTenant' is set
    if (ressourceTenant == null) {
      throw new ApiException(400, "Missing the required parameter 'ressourceTenant' when calling create45");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling create45");
    }
    
    // verify the required parameter 'binding' is set
    if (binding == null) {
      throw new ApiException(400, "Missing the required parameter 'binding' when calling create45");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/tenants/{ressourceTenant}/bindings"
      .replaceAll("\\{" + "ressourceTenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(ressourceTenant)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<AbstractBindingControllerBindingDetail> localVarReturnType = new TypeReference<AbstractBindingControllerBindingDetail>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Delete a binding
   * 
   * @param id The binding id (required)
   * @throws ApiException if fails to make API call
   */
  public void delete17(String id) throws ApiException {
    this.delete17(id, Collections.emptyMap());
  }


  /**
   * Delete a binding
   * 
   * @param id The binding id (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void delete17(String id, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling delete17");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/tenants/bindings/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Delete a binding
   * 
   * @param id The binding id (required)
   * @throws ApiException if fails to make API call
   */
  public void delete2(String id) throws ApiException {
    this.delete2(id, Collections.emptyMap());
  }


  /**
   * Delete a binding
   * 
   * @param id The binding id (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void delete2(String id, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling delete2");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/bindings/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Delete a binding
   * 
   * @param id The binding id (required)
   * @param ressourceTenant  (required)
   * @throws ApiException if fails to make API call
   */
  public void delete23(String id, String ressourceTenant) throws ApiException {
    this.delete23(id, ressourceTenant, Collections.emptyMap());
  }


  /**
   * Delete a binding
   * 
   * @param id The binding id (required)
   * @param ressourceTenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void delete23(String id, String ressourceTenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling delete23");
    }
    
    // verify the required parameter 'ressourceTenant' is set
    if (ressourceTenant == null) {
      throw new ApiException(400, "Missing the required parameter 'ressourceTenant' when calling delete23");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/tenants/{ressourceTenant}/bindings/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "ressourceTenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(ressourceTenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Delete a binding
   * 
   * @param id The binding id (required)
   * @param tenant  (required)
   * @throws ApiException if fails to make API call
   */
  public void delete30(String id, String tenant) throws ApiException {
    this.delete30(id, tenant, Collections.emptyMap());
  }


  /**
   * Delete a binding
   * 
   * @param id The binding id (required)
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void delete30(String id, String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling delete30");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling delete30");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/bindings/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Delete a binding
   * 
   * @param id The binding id (required)
   * @param tenant  (required)
   * @throws ApiException if fails to make API call
   */
  public void delete45(String id, String tenant) throws ApiException {
    this.delete45(id, tenant, Collections.emptyMap());
  }


  /**
   * Delete a binding
   * 
   * @param id The binding id (required)
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void delete45(String id, String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling delete45");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling delete45");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/tenants/bindings/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Delete a binding
   * 
   * @param id The binding id (required)
   * @param ressourceTenant  (required)
   * @param tenant  (required)
   * @throws ApiException if fails to make API call
   */
  public void delete51(String id, String ressourceTenant, String tenant) throws ApiException {
    this.delete51(id, ressourceTenant, tenant, Collections.emptyMap());
  }


  /**
   * Delete a binding
   * 
   * @param id The binding id (required)
   * @param ressourceTenant  (required)
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void delete51(String id, String ressourceTenant, String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling delete51");
    }
    
    // verify the required parameter 'ressourceTenant' is set
    if (ressourceTenant == null) {
      throw new ApiException(400, "Missing the required parameter 'ressourceTenant' when calling delete51");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling delete51");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/tenants/{ressourceTenant}/bindings/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "ressourceTenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(ressourceTenant)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Search for bindings
   * 
   * @param page The current page (required)
   * @param size The current page size (required)
   * @param q A string filter (optional)
   * @param sort The sort of current page (optional)
   * @param type Binding type filter (optional)
   * @param id External id filter (optional)
   * @param namespace A namespace filter (optional)
   * @return PagedResultsAbstractBindingControllerBindingDetail
   * @throws ApiException if fails to make API call
   */
  public PagedResultsAbstractBindingControllerBindingDetail find14(Integer page, Integer size, String q, List<String> sort, BindingType type, String id, String namespace) throws ApiException {
    return this.find14(page, size, q, sort, type, id, namespace, Collections.emptyMap());
  }


  /**
   * Search for bindings
   * 
   * @param page The current page (required)
   * @param size The current page size (required)
   * @param q A string filter (optional)
   * @param sort The sort of current page (optional)
   * @param type Binding type filter (optional)
   * @param id External id filter (optional)
   * @param namespace A namespace filter (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return PagedResultsAbstractBindingControllerBindingDetail
   * @throws ApiException if fails to make API call
   */
  public PagedResultsAbstractBindingControllerBindingDetail find14(Integer page, Integer size, String q, List<String> sort, BindingType type, String id, String namespace, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'page' is set
    if (page == null) {
      throw new ApiException(400, "Missing the required parameter 'page' when calling find14");
    }
    
    // verify the required parameter 'size' is set
    if (size == null) {
      throw new ApiException(400, "Missing the required parameter 'size' when calling find14");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/tenants/bindings/search";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
    localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
    localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sort", sort));
    localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
    localVarQueryParams.addAll(apiClient.parameterToPair("id", id));
    localVarQueryParams.addAll(apiClient.parameterToPair("namespace", namespace));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<PagedResultsAbstractBindingControllerBindingDetail> localVarReturnType = new TypeReference<PagedResultsAbstractBindingControllerBindingDetail>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Search for bindings
   * 
   * @param page The current page (required)
   * @param size The current page size (required)
   * @param q A string filter (optional)
   * @param sort The sort of current page (optional)
   * @param type Binding type filter (optional)
   * @param id External id filter (optional)
   * @param namespace A namespace filter (optional)
   * @return PagedResultsAbstractBindingControllerBindingDetail
   * @throws ApiException if fails to make API call
   */
  public PagedResultsAbstractBindingControllerBindingDetail find2(Integer page, Integer size, String q, List<String> sort, BindingType type, String id, String namespace) throws ApiException {
    return this.find2(page, size, q, sort, type, id, namespace, Collections.emptyMap());
  }


  /**
   * Search for bindings
   * 
   * @param page The current page (required)
   * @param size The current page size (required)
   * @param q A string filter (optional)
   * @param sort The sort of current page (optional)
   * @param type Binding type filter (optional)
   * @param id External id filter (optional)
   * @param namespace A namespace filter (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return PagedResultsAbstractBindingControllerBindingDetail
   * @throws ApiException if fails to make API call
   */
  public PagedResultsAbstractBindingControllerBindingDetail find2(Integer page, Integer size, String q, List<String> sort, BindingType type, String id, String namespace, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'page' is set
    if (page == null) {
      throw new ApiException(400, "Missing the required parameter 'page' when calling find2");
    }
    
    // verify the required parameter 'size' is set
    if (size == null) {
      throw new ApiException(400, "Missing the required parameter 'size' when calling find2");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/bindings/search";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
    localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
    localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sort", sort));
    localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
    localVarQueryParams.addAll(apiClient.parameterToPair("id", id));
    localVarQueryParams.addAll(apiClient.parameterToPair("namespace", namespace));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<PagedResultsAbstractBindingControllerBindingDetail> localVarReturnType = new TypeReference<PagedResultsAbstractBindingControllerBindingDetail>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Search for bindings
   * 
   * @param page The current page (required)
   * @param size The current page size (required)
   * @param ressourceTenant  (required)
   * @param q A string filter (optional)
   * @param sort The sort of current page (optional)
   * @param type Binding type filter (optional)
   * @param id External id filter (optional)
   * @param namespace A namespace filter (optional)
   * @return PagedResultsAbstractBindingControllerBindingDetail
   * @throws ApiException if fails to make API call
   */
  public PagedResultsAbstractBindingControllerBindingDetail find20(Integer page, Integer size, String ressourceTenant, String q, List<String> sort, BindingType type, String id, String namespace) throws ApiException {
    return this.find20(page, size, ressourceTenant, q, sort, type, id, namespace, Collections.emptyMap());
  }


  /**
   * Search for bindings
   * 
   * @param page The current page (required)
   * @param size The current page size (required)
   * @param ressourceTenant  (required)
   * @param q A string filter (optional)
   * @param sort The sort of current page (optional)
   * @param type Binding type filter (optional)
   * @param id External id filter (optional)
   * @param namespace A namespace filter (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return PagedResultsAbstractBindingControllerBindingDetail
   * @throws ApiException if fails to make API call
   */
  public PagedResultsAbstractBindingControllerBindingDetail find20(Integer page, Integer size, String ressourceTenant, String q, List<String> sort, BindingType type, String id, String namespace, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'page' is set
    if (page == null) {
      throw new ApiException(400, "Missing the required parameter 'page' when calling find20");
    }
    
    // verify the required parameter 'size' is set
    if (size == null) {
      throw new ApiException(400, "Missing the required parameter 'size' when calling find20");
    }
    
    // verify the required parameter 'ressourceTenant' is set
    if (ressourceTenant == null) {
      throw new ApiException(400, "Missing the required parameter 'ressourceTenant' when calling find20");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/tenants/{ressourceTenant}/bindings/search"
      .replaceAll("\\{" + "ressourceTenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(ressourceTenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
    localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
    localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sort", sort));
    localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
    localVarQueryParams.addAll(apiClient.parameterToPair("id", id));
    localVarQueryParams.addAll(apiClient.parameterToPair("namespace", namespace));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<PagedResultsAbstractBindingControllerBindingDetail> localVarReturnType = new TypeReference<PagedResultsAbstractBindingControllerBindingDetail>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Search for bindings
   * 
   * @param page The current page (required)
   * @param size The current page size (required)
   * @param tenant  (required)
   * @param q A string filter (optional)
   * @param sort The sort of current page (optional)
   * @param type Binding type filter (optional)
   * @param id External id filter (optional)
   * @param namespace A namespace filter (optional)
   * @return PagedResultsAbstractBindingControllerBindingDetail
   * @throws ApiException if fails to make API call
   */
  public PagedResultsAbstractBindingControllerBindingDetail find28(Integer page, Integer size, String tenant, String q, List<String> sort, BindingType type, String id, String namespace) throws ApiException {
    return this.find28(page, size, tenant, q, sort, type, id, namespace, Collections.emptyMap());
  }


  /**
   * Search for bindings
   * 
   * @param page The current page (required)
   * @param size The current page size (required)
   * @param tenant  (required)
   * @param q A string filter (optional)
   * @param sort The sort of current page (optional)
   * @param type Binding type filter (optional)
   * @param id External id filter (optional)
   * @param namespace A namespace filter (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return PagedResultsAbstractBindingControllerBindingDetail
   * @throws ApiException if fails to make API call
   */
  public PagedResultsAbstractBindingControllerBindingDetail find28(Integer page, Integer size, String tenant, String q, List<String> sort, BindingType type, String id, String namespace, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'page' is set
    if (page == null) {
      throw new ApiException(400, "Missing the required parameter 'page' when calling find28");
    }
    
    // verify the required parameter 'size' is set
    if (size == null) {
      throw new ApiException(400, "Missing the required parameter 'size' when calling find28");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling find28");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/bindings/search"
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
    localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
    localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sort", sort));
    localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
    localVarQueryParams.addAll(apiClient.parameterToPair("id", id));
    localVarQueryParams.addAll(apiClient.parameterToPair("namespace", namespace));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<PagedResultsAbstractBindingControllerBindingDetail> localVarReturnType = new TypeReference<PagedResultsAbstractBindingControllerBindingDetail>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Search for bindings
   * 
   * @param page The current page (required)
   * @param size The current page size (required)
   * @param tenant  (required)
   * @param q A string filter (optional)
   * @param sort The sort of current page (optional)
   * @param type Binding type filter (optional)
   * @param id External id filter (optional)
   * @param namespace A namespace filter (optional)
   * @return PagedResultsAbstractBindingControllerBindingDetail
   * @throws ApiException if fails to make API call
   */
  public PagedResultsAbstractBindingControllerBindingDetail find40(Integer page, Integer size, String tenant, String q, List<String> sort, BindingType type, String id, String namespace) throws ApiException {
    return this.find40(page, size, tenant, q, sort, type, id, namespace, Collections.emptyMap());
  }


  /**
   * Search for bindings
   * 
   * @param page The current page (required)
   * @param size The current page size (required)
   * @param tenant  (required)
   * @param q A string filter (optional)
   * @param sort The sort of current page (optional)
   * @param type Binding type filter (optional)
   * @param id External id filter (optional)
   * @param namespace A namespace filter (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return PagedResultsAbstractBindingControllerBindingDetail
   * @throws ApiException if fails to make API call
   */
  public PagedResultsAbstractBindingControllerBindingDetail find40(Integer page, Integer size, String tenant, String q, List<String> sort, BindingType type, String id, String namespace, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'page' is set
    if (page == null) {
      throw new ApiException(400, "Missing the required parameter 'page' when calling find40");
    }
    
    // verify the required parameter 'size' is set
    if (size == null) {
      throw new ApiException(400, "Missing the required parameter 'size' when calling find40");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling find40");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/tenants/bindings/search"
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
    localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
    localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sort", sort));
    localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
    localVarQueryParams.addAll(apiClient.parameterToPair("id", id));
    localVarQueryParams.addAll(apiClient.parameterToPair("namespace", namespace));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<PagedResultsAbstractBindingControllerBindingDetail> localVarReturnType = new TypeReference<PagedResultsAbstractBindingControllerBindingDetail>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Search for bindings
   * 
   * @param page The current page (required)
   * @param size The current page size (required)
   * @param ressourceTenant  (required)
   * @param tenant  (required)
   * @param q A string filter (optional)
   * @param sort The sort of current page (optional)
   * @param type Binding type filter (optional)
   * @param id External id filter (optional)
   * @param namespace A namespace filter (optional)
   * @return PagedResultsAbstractBindingControllerBindingDetail
   * @throws ApiException if fails to make API call
   */
  public PagedResultsAbstractBindingControllerBindingDetail find46(Integer page, Integer size, String ressourceTenant, String tenant, String q, List<String> sort, BindingType type, String id, String namespace) throws ApiException {
    return this.find46(page, size, ressourceTenant, tenant, q, sort, type, id, namespace, Collections.emptyMap());
  }


  /**
   * Search for bindings
   * 
   * @param page The current page (required)
   * @param size The current page size (required)
   * @param ressourceTenant  (required)
   * @param tenant  (required)
   * @param q A string filter (optional)
   * @param sort The sort of current page (optional)
   * @param type Binding type filter (optional)
   * @param id External id filter (optional)
   * @param namespace A namespace filter (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return PagedResultsAbstractBindingControllerBindingDetail
   * @throws ApiException if fails to make API call
   */
  public PagedResultsAbstractBindingControllerBindingDetail find46(Integer page, Integer size, String ressourceTenant, String tenant, String q, List<String> sort, BindingType type, String id, String namespace, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'page' is set
    if (page == null) {
      throw new ApiException(400, "Missing the required parameter 'page' when calling find46");
    }
    
    // verify the required parameter 'size' is set
    if (size == null) {
      throw new ApiException(400, "Missing the required parameter 'size' when calling find46");
    }
    
    // verify the required parameter 'ressourceTenant' is set
    if (ressourceTenant == null) {
      throw new ApiException(400, "Missing the required parameter 'ressourceTenant' when calling find46");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling find46");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/tenants/{ressourceTenant}/bindings/search"
      .replaceAll("\\{" + "ressourceTenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(ressourceTenant)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
    localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
    localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sort", sort));
    localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
    localVarQueryParams.addAll(apiClient.parameterToPair("id", id));
    localVarQueryParams.addAll(apiClient.parameterToPair("namespace", namespace));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<PagedResultsAbstractBindingControllerBindingDetail> localVarReturnType = new TypeReference<PagedResultsAbstractBindingControllerBindingDetail>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get a binding
   * 
   * @param id The binding id (required)
   * @return AbstractBindingControllerBindingDetail
   * @throws ApiException if fails to make API call
   */
  public AbstractBindingControllerBindingDetail index1(String id) throws ApiException {
    return this.index1(id, Collections.emptyMap());
  }


  /**
   * Get a binding
   * 
   * @param id The binding id (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return AbstractBindingControllerBindingDetail
   * @throws ApiException if fails to make API call
   */
  public AbstractBindingControllerBindingDetail index1(String id, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling index1");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/bindings/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<AbstractBindingControllerBindingDetail> localVarReturnType = new TypeReference<AbstractBindingControllerBindingDetail>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get a binding
   * 
   * @param id The binding id (required)
   * @return AbstractBindingControllerBindingDetail
   * @throws ApiException if fails to make API call
   */
  public AbstractBindingControllerBindingDetail index10(String id) throws ApiException {
    return this.index10(id, Collections.emptyMap());
  }


  /**
   * Get a binding
   * 
   * @param id The binding id (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return AbstractBindingControllerBindingDetail
   * @throws ApiException if fails to make API call
   */
  public AbstractBindingControllerBindingDetail index10(String id, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling index10");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/tenants/bindings/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<AbstractBindingControllerBindingDetail> localVarReturnType = new TypeReference<AbstractBindingControllerBindingDetail>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get a binding
   * 
   * @param id The binding id (required)
   * @param ressourceTenant  (required)
   * @return AbstractBindingControllerBindingDetail
   * @throws ApiException if fails to make API call
   */
  public AbstractBindingControllerBindingDetail index15(String id, String ressourceTenant) throws ApiException {
    return this.index15(id, ressourceTenant, Collections.emptyMap());
  }


  /**
   * Get a binding
   * 
   * @param id The binding id (required)
   * @param ressourceTenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return AbstractBindingControllerBindingDetail
   * @throws ApiException if fails to make API call
   */
  public AbstractBindingControllerBindingDetail index15(String id, String ressourceTenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling index15");
    }
    
    // verify the required parameter 'ressourceTenant' is set
    if (ressourceTenant == null) {
      throw new ApiException(400, "Missing the required parameter 'ressourceTenant' when calling index15");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/tenants/{ressourceTenant}/bindings/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "ressourceTenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(ressourceTenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<AbstractBindingControllerBindingDetail> localVarReturnType = new TypeReference<AbstractBindingControllerBindingDetail>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get a binding
   * 
   * @param id The binding id (required)
   * @param tenant  (required)
   * @return AbstractBindingControllerBindingDetail
   * @throws ApiException if fails to make API call
   */
  public AbstractBindingControllerBindingDetail index22(String id, String tenant) throws ApiException {
    return this.index22(id, tenant, Collections.emptyMap());
  }


  /**
   * Get a binding
   * 
   * @param id The binding id (required)
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return AbstractBindingControllerBindingDetail
   * @throws ApiException if fails to make API call
   */
  public AbstractBindingControllerBindingDetail index22(String id, String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling index22");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling index22");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/bindings/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<AbstractBindingControllerBindingDetail> localVarReturnType = new TypeReference<AbstractBindingControllerBindingDetail>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get a binding
   * 
   * @param id The binding id (required)
   * @param tenant  (required)
   * @return AbstractBindingControllerBindingDetail
   * @throws ApiException if fails to make API call
   */
  public AbstractBindingControllerBindingDetail index31(String id, String tenant) throws ApiException {
    return this.index31(id, tenant, Collections.emptyMap());
  }


  /**
   * Get a binding
   * 
   * @param id The binding id (required)
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return AbstractBindingControllerBindingDetail
   * @throws ApiException if fails to make API call
   */
  public AbstractBindingControllerBindingDetail index31(String id, String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling index31");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling index31");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/tenants/bindings/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<AbstractBindingControllerBindingDetail> localVarReturnType = new TypeReference<AbstractBindingControllerBindingDetail>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get a binding
   * 
   * @param id The binding id (required)
   * @param ressourceTenant  (required)
   * @param tenant  (required)
   * @return AbstractBindingControllerBindingDetail
   * @throws ApiException if fails to make API call
   */
  public AbstractBindingControllerBindingDetail index36(String id, String ressourceTenant, String tenant) throws ApiException {
    return this.index36(id, ressourceTenant, tenant, Collections.emptyMap());
  }


  /**
   * Get a binding
   * 
   * @param id The binding id (required)
   * @param ressourceTenant  (required)
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return AbstractBindingControllerBindingDetail
   * @throws ApiException if fails to make API call
   */
  public AbstractBindingControllerBindingDetail index36(String id, String ressourceTenant, String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling index36");
    }
    
    // verify the required parameter 'ressourceTenant' is set
    if (ressourceTenant == null) {
      throw new ApiException(400, "Missing the required parameter 'ressourceTenant' when calling index36");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling index36");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/tenants/{ressourceTenant}/bindings/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "ressourceTenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(ressourceTenant)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<AbstractBindingControllerBindingDetail> localVarReturnType = new TypeReference<AbstractBindingControllerBindingDetail>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  @Override
  public <T> T invokeAPI(String url, String method, Object request, TypeReference<T> returnType, Map<String, String> additionalHeaders) throws ApiException {
    String localVarPath = url.replace(apiClient.getBaseURL(), "");
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarHeaderParams.putAll(additionalHeaders);

    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    return apiClient.invokeAPI(
      localVarPath,
        method,
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        request,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        returnType
    );
  }
}
