/*
 * Kestra EE
 * All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kestra.api.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.kestra.api.sdk.model.ServerConfigLiveness;
import io.kestra.api.sdk.model.WorkerTaskRestartStrategy;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * ServerConfig
 */
@JsonPropertyOrder({
  ServerConfig.JSON_PROPERTY_WORKER_TASK_RESTART_STRATEGY,
  ServerConfig.JSON_PROPERTY_TERMINATION_GRACE_PERIOD,
  ServerConfig.JSON_PROPERTY_LIVENESS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-05T07:35:23.657005690Z[Etc/UTC]", comments = "Generator version: 7.14.0-SNAPSHOT")
public class ServerConfig {
  public static final String JSON_PROPERTY_WORKER_TASK_RESTART_STRATEGY = "workerTaskRestartStrategy";
  @javax.annotation.Nullable
  private JsonNullable<WorkerTaskRestartStrategy> workerTaskRestartStrategy = JsonNullable.<WorkerTaskRestartStrategy>undefined();

  public static final String JSON_PROPERTY_TERMINATION_GRACE_PERIOD = "terminationGracePeriod";
  @javax.annotation.Nonnull
  private String terminationGracePeriod = "5m";

  public static final String JSON_PROPERTY_LIVENESS = "liveness";
  @javax.annotation.Nonnull
  private ServerConfigLiveness liveness;

  public ServerConfig() {
  }

  public ServerConfig workerTaskRestartStrategy(@javax.annotation.Nullable WorkerTaskRestartStrategy workerTaskRestartStrategy) {
    this.workerTaskRestartStrategy = JsonNullable.<WorkerTaskRestartStrategy>of(workerTaskRestartStrategy);
    
    return this;
  }

  /**
   * Get workerTaskRestartStrategy
   * @return workerTaskRestartStrategy
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public WorkerTaskRestartStrategy getWorkerTaskRestartStrategy() {
        return workerTaskRestartStrategy.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_WORKER_TASK_RESTART_STRATEGY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<WorkerTaskRestartStrategy> getWorkerTaskRestartStrategy_JsonNullable() {
    return workerTaskRestartStrategy;
  }
  
  @JsonProperty(JSON_PROPERTY_WORKER_TASK_RESTART_STRATEGY)
  public void setWorkerTaskRestartStrategy_JsonNullable(JsonNullable<WorkerTaskRestartStrategy> workerTaskRestartStrategy) {
    this.workerTaskRestartStrategy = workerTaskRestartStrategy;
  }

  public void setWorkerTaskRestartStrategy(@javax.annotation.Nullable WorkerTaskRestartStrategy workerTaskRestartStrategy) {
    this.workerTaskRestartStrategy = JsonNullable.<WorkerTaskRestartStrategy>of(workerTaskRestartStrategy);
  }

  public ServerConfig terminationGracePeriod(@javax.annotation.Nonnull String terminationGracePeriod) {
    
    this.terminationGracePeriod = terminationGracePeriod;
    return this;
  }

  /**
   * Get terminationGracePeriod
   * @return terminationGracePeriod
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TERMINATION_GRACE_PERIOD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getTerminationGracePeriod() {
    return terminationGracePeriod;
  }


  @JsonProperty(JSON_PROPERTY_TERMINATION_GRACE_PERIOD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTerminationGracePeriod(@javax.annotation.Nonnull String terminationGracePeriod) {
    this.terminationGracePeriod = terminationGracePeriod;
  }

  public ServerConfig liveness(@javax.annotation.Nonnull ServerConfigLiveness liveness) {
    
    this.liveness = liveness;
    return this;
  }

  /**
   * Get liveness
   * @return liveness
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_LIVENESS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public ServerConfigLiveness getLiveness() {
    return liveness;
  }


  @JsonProperty(JSON_PROPERTY_LIVENESS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLiveness(@javax.annotation.Nonnull ServerConfigLiveness liveness) {
    this.liveness = liveness;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServerConfig serverConfig = (ServerConfig) o;
    return equalsNullable(this.workerTaskRestartStrategy, serverConfig.workerTaskRestartStrategy) &&
        Objects.equals(this.terminationGracePeriod, serverConfig.terminationGracePeriod) &&
        Objects.equals(this.liveness, serverConfig.liveness);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(workerTaskRestartStrategy), terminationGracePeriod, liveness);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServerConfig {\n");
    sb.append("    workerTaskRestartStrategy: ").append(toIndentedString(workerTaskRestartStrategy)).append("\n");
    sb.append("    terminationGracePeriod: ").append(toIndentedString(terminationGracePeriod)).append("\n");
    sb.append("    liveness: ").append(toIndentedString(liveness)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `workerTaskRestartStrategy` to the URL query string
    if (getWorkerTaskRestartStrategy() != null) {
      try {
        joiner.add(String.format("%sworkerTaskRestartStrategy%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getWorkerTaskRestartStrategy()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `terminationGracePeriod` to the URL query string
    if (getTerminationGracePeriod() != null) {
      try {
        joiner.add(String.format("%sterminationGracePeriod%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTerminationGracePeriod()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `liveness` to the URL query string
    if (getLiveness() != null) {
      joiner.add(getLiveness().toUrlQueryString(prefix + "liveness" + suffix));
    }

    return joiner.toString();
  }

}

