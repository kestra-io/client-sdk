/*
 * Kestra EE
 * All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package io.kestra.api.sdk.api;

import com.fasterxml.jackson.core.type.TypeReference;

import io.kestra.api.sdk.internal.ApiException;
import io.kestra.api.sdk.internal.ApiClient;
import io.kestra.api.sdk.internal.BaseApi;
import io.kestra.api.sdk.internal.Configuration;
import io.kestra.api.sdk.internal.Pair;

import io.kestra.api.sdk.model.AppResponse;
import io.kestra.api.sdk.model.AppsControllerApiApp;
import io.kestra.api.sdk.model.AppsControllerApiAppSource;
import io.kestra.api.sdk.model.AppsControllerApiAppTags;
import io.kestra.api.sdk.model.EventAppResponse;
import java.io.File;
import io.kestra.api.sdk.model.FileMetas;
import io.kestra.api.sdk.model.HttpParameters;
import io.kestra.api.sdk.model.Level;
import io.kestra.api.sdk.model.PagedResultsAppsControllerApiApp;
import java.net.URI;


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-31T15:48:45.246126227Z[Etc/UTC]", comments = "Generator version: 7.11.0-SNAPSHOT")
public class AppsApi extends BaseApi {

  public AppsApi() {
    super(Configuration.getDefaultApiClient());
  }

  public AppsApi(ApiClient apiClient) {
    super(apiClient);
  }

  /**
   * Create a new app
   * 
   * @param body  (required)
   * @return AppsControllerApiAppSource
   * @throws ApiException if fails to make API call
   */
  public AppsControllerApiAppSource create(String body) throws ApiException {
    return this.create(body, Collections.emptyMap());
  }


  /**
   * Create a new app
   * 
   * @param body  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return AppsControllerApiAppSource
   * @throws ApiException if fails to make API call
   */
  public AppsControllerApiAppSource create(String body, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = body;
    
    // verify the required parameter 'body' is set
    if (body == null) {
      throw new ApiException(400, "Missing the required parameter 'body' when calling create");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/apps";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/x-yaml"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<AppsControllerApiAppSource> localVarReturnType = new TypeReference<AppsControllerApiAppSource>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Create a new app
   * 
   * @param tenant  (required)
   * @param body  (required)
   * @return AppsControllerApiAppSource
   * @throws ApiException if fails to make API call
   */
  public AppsControllerApiAppSource create26(String tenant, String body) throws ApiException {
    return this.create26(tenant, body, Collections.emptyMap());
  }


  /**
   * Create a new app
   * 
   * @param tenant  (required)
   * @param body  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return AppsControllerApiAppSource
   * @throws ApiException if fails to make API call
   */
  public AppsControllerApiAppSource create26(String tenant, String body, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = body;
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling create26");
    }
    
    // verify the required parameter 'body' is set
    if (body == null) {
      throw new ApiException(400, "Missing the required parameter 'body' when calling create26");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/apps"
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/x-yaml"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<AppsControllerApiAppSource> localVarReturnType = new TypeReference<AppsControllerApiAppSource>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Delete an existing app
   * 
   * @param uid The ID of the app (required)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object delete(String uid) throws ApiException {
    return this.delete(uid, Collections.emptyMap());
  }


  /**
   * Delete an existing app
   * 
   * @param uid The ID of the app (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object delete(String uid, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'uid' is set
    if (uid == null) {
      throw new ApiException(400, "Missing the required parameter 'uid' when calling delete");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/apps/{uid}"
      .replaceAll("\\{" + "uid" + "\\}", apiClient.escapeString(apiClient.parameterToString(uid)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Delete an existing app
   * 
   * @param uid The ID of the app (required)
   * @param tenant  (required)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object delete29(String uid, String tenant) throws ApiException {
    return this.delete29(uid, tenant, Collections.emptyMap());
  }


  /**
   * Delete an existing app
   * 
   * @param uid The ID of the app (required)
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object delete29(String uid, String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'uid' is set
    if (uid == null) {
      throw new ApiException(400, "Missing the required parameter 'uid' when calling delete29");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling delete29");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/apps/{uid}"
      .replaceAll("\\{" + "uid" + "\\}", apiClient.escapeString(apiClient.parameterToString(uid)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Disable the app.
   * 
   * @param uid The ID of app (required)
   * @return AppsControllerApiApp
   * @throws ApiException if fails to make API call
   */
  public AppsControllerApiApp disable(String uid) throws ApiException {
    return this.disable(uid, Collections.emptyMap());
  }


  /**
   * Disable the app.
   * 
   * @param uid The ID of app (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return AppsControllerApiApp
   * @throws ApiException if fails to make API call
   */
  public AppsControllerApiApp disable(String uid, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'uid' is set
    if (uid == null) {
      throw new ApiException(400, "Missing the required parameter 'uid' when calling disable");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/apps/{uid}/disable"
      .replaceAll("\\{" + "uid" + "\\}", apiClient.escapeString(apiClient.parameterToString(uid)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<AppsControllerApiApp> localVarReturnType = new TypeReference<AppsControllerApiApp>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Disable the app.
   * 
   * @param uid The ID of app (required)
   * @param tenant  (required)
   * @return AppsControllerApiApp
   * @throws ApiException if fails to make API call
   */
  public AppsControllerApiApp disable2(String uid, String tenant) throws ApiException {
    return this.disable2(uid, tenant, Collections.emptyMap());
  }


  /**
   * Disable the app.
   * 
   * @param uid The ID of app (required)
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return AppsControllerApiApp
   * @throws ApiException if fails to make API call
   */
  public AppsControllerApiApp disable2(String uid, String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'uid' is set
    if (uid == null) {
      throw new ApiException(400, "Missing the required parameter 'uid' when calling disable2");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling disable2");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/apps/{uid}/disable"
      .replaceAll("\\{" + "uid" + "\\}", apiClient.escapeString(apiClient.parameterToString(uid)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<AppsControllerApiApp> localVarReturnType = new TypeReference<AppsControllerApiApp>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Dispatch for a given app.
   * 
   * @param id The ID of the app. (required)
   * @param dispatch The ID to dispatch (required)
   * @param parameters  (optional)
   * @return AppResponse
   * @throws ApiException if fails to make API call
   */
  public AppResponse dispatch(String id, String dispatch, HttpParameters parameters) throws ApiException {
    return this.dispatch(id, dispatch, parameters, Collections.emptyMap());
  }


  /**
   * Dispatch for a given app.
   * 
   * @param id The ID of the app. (required)
   * @param dispatch The ID to dispatch (required)
   * @param parameters  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return AppResponse
   * @throws ApiException if fails to make API call
   */
  public AppResponse dispatch(String id, String dispatch, HttpParameters parameters, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dispatch");
    }
    
    // verify the required parameter 'dispatch' is set
    if (dispatch == null) {
      throw new ApiException(400, "Missing the required parameter 'dispatch' when calling dispatch");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/apps/view/{id}/dispatch/{dispatch}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "dispatch" + "\\}", apiClient.escapeString(apiClient.parameterToString(dispatch)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    if (parameters != null)
      localVarFormParams.put("parameters", parameters);

    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "multipart/form-data"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<AppResponse> localVarReturnType = new TypeReference<AppResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Dispatch for a given app.
   * 
   * @param id The ID of the app. (required)
   * @param dispatch The ID to dispatch (required)
   * @param tenant  (required)
   * @param parameters  (optional)
   * @return AppResponse
   * @throws ApiException if fails to make API call
   */
  public AppResponse dispatch1(String id, String dispatch, String tenant, HttpParameters parameters) throws ApiException {
    return this.dispatch1(id, dispatch, tenant, parameters, Collections.emptyMap());
  }


  /**
   * Dispatch for a given app.
   * 
   * @param id The ID of the app. (required)
   * @param dispatch The ID to dispatch (required)
   * @param tenant  (required)
   * @param parameters  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return AppResponse
   * @throws ApiException if fails to make API call
   */
  public AppResponse dispatch1(String id, String dispatch, String tenant, HttpParameters parameters, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dispatch1");
    }
    
    // verify the required parameter 'dispatch' is set
    if (dispatch == null) {
      throw new ApiException(400, "Missing the required parameter 'dispatch' when calling dispatch1");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling dispatch1");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/apps/view/{id}/dispatch/{dispatch}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "dispatch" + "\\}", apiClient.escapeString(apiClient.parameterToString(dispatch)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    if (parameters != null)
      localVarFormParams.put("parameters", parameters);

    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "multipart/form-data"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<AppResponse> localVarReturnType = new TypeReference<AppResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Download logs for an app execution
   * 
   * @param uid The ID of the app. (required)
   * @param executionId The ID of the execution. (required)
   * @param minLevel The min log level filter (optional)
   * @param taskIds The tasks&#39; IDs (optional)
   * @return File
   * @throws ApiException if fails to make API call
   */
  public File download(String uid, String executionId, Level minLevel, List<String> taskIds) throws ApiException {
    return this.download(uid, executionId, minLevel, taskIds, Collections.emptyMap());
  }


  /**
   * Download logs for an app execution
   * 
   * @param uid The ID of the app. (required)
   * @param executionId The ID of the execution. (required)
   * @param minLevel The min log level filter (optional)
   * @param taskIds The tasks&#39; IDs (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return File
   * @throws ApiException if fails to make API call
   */
  public File download(String uid, String executionId, Level minLevel, List<String> taskIds, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'uid' is set
    if (uid == null) {
      throw new ApiException(400, "Missing the required parameter 'uid' when calling download");
    }
    
    // verify the required parameter 'executionId' is set
    if (executionId == null) {
      throw new ApiException(400, "Missing the required parameter 'executionId' when calling download");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/apps/view/{uid}/logs/download"
      .replaceAll("\\{" + "uid" + "\\}", apiClient.escapeString(apiClient.parameterToString(uid)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("executionId", executionId));
    localVarQueryParams.addAll(apiClient.parameterToPair("minLevel", minLevel));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "taskIds", taskIds));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/octet-stream"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<File> localVarReturnType = new TypeReference<File>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Download logs for an app execution
   * 
   * @param uid The ID of the app. (required)
   * @param executionId The ID of the execution. (required)
   * @param tenant  (required)
   * @param minLevel The min log level filter (optional)
   * @param taskIds The tasks&#39; IDs (optional)
   * @return File
   * @throws ApiException if fails to make API call
   */
  public File download2(String uid, String executionId, String tenant, Level minLevel, List<String> taskIds) throws ApiException {
    return this.download2(uid, executionId, tenant, minLevel, taskIds, Collections.emptyMap());
  }


  /**
   * Download logs for an app execution
   * 
   * @param uid The ID of the app. (required)
   * @param executionId The ID of the execution. (required)
   * @param tenant  (required)
   * @param minLevel The min log level filter (optional)
   * @param taskIds The tasks&#39; IDs (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return File
   * @throws ApiException if fails to make API call
   */
  public File download2(String uid, String executionId, String tenant, Level minLevel, List<String> taskIds, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'uid' is set
    if (uid == null) {
      throw new ApiException(400, "Missing the required parameter 'uid' when calling download2");
    }
    
    // verify the required parameter 'executionId' is set
    if (executionId == null) {
      throw new ApiException(400, "Missing the required parameter 'executionId' when calling download2");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling download2");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/apps/view/{uid}/logs/download"
      .replaceAll("\\{" + "uid" + "\\}", apiClient.escapeString(apiClient.parameterToString(uid)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("executionId", executionId));
    localVarQueryParams.addAll(apiClient.parameterToPair("minLevel", minLevel));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "taskIds", taskIds));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/octet-stream"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<File> localVarReturnType = new TypeReference<File>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Enable the app.
   * 
   * @param uid The ID of app (required)
   * @return AppsControllerApiApp
   * @throws ApiException if fails to make API call
   */
  public AppsControllerApiApp enable(String uid) throws ApiException {
    return this.enable(uid, Collections.emptyMap());
  }


  /**
   * Enable the app.
   * 
   * @param uid The ID of app (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return AppsControllerApiApp
   * @throws ApiException if fails to make API call
   */
  public AppsControllerApiApp enable(String uid, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'uid' is set
    if (uid == null) {
      throw new ApiException(400, "Missing the required parameter 'uid' when calling enable");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/apps/{uid}/enable"
      .replaceAll("\\{" + "uid" + "\\}", apiClient.escapeString(apiClient.parameterToString(uid)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<AppsControllerApiApp> localVarReturnType = new TypeReference<AppsControllerApiApp>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Enable the app.
   * 
   * @param uid The ID of app (required)
   * @param tenant  (required)
   * @return AppsControllerApiApp
   * @throws ApiException if fails to make API call
   */
  public AppsControllerApiApp enable2(String uid, String tenant) throws ApiException {
    return this.enable2(uid, tenant, Collections.emptyMap());
  }


  /**
   * Enable the app.
   * 
   * @param uid The ID of app (required)
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return AppsControllerApiApp
   * @throws ApiException if fails to make API call
   */
  public AppsControllerApiApp enable2(String uid, String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'uid' is set
    if (uid == null) {
      throw new ApiException(400, "Missing the required parameter 'uid' when calling enable2");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling enable2");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/apps/{uid}/enable"
      .replaceAll("\\{" + "uid" + "\\}", apiClient.escapeString(apiClient.parameterToString(uid)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<AppsControllerApiApp> localVarReturnType = new TypeReference<AppsControllerApiApp>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get a app
   * 
   * @param uid The ID of the app (required)
   * @return AppsControllerApiAppSource
   * @throws ApiException if fails to make API call
   */
  public AppsControllerApiAppSource get(String uid) throws ApiException {
    return this.get(uid, Collections.emptyMap());
  }


  /**
   * Get a app
   * 
   * @param uid The ID of the app (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return AppsControllerApiAppSource
   * @throws ApiException if fails to make API call
   */
  public AppsControllerApiAppSource get(String uid, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'uid' is set
    if (uid == null) {
      throw new ApiException(400, "Missing the required parameter 'uid' when calling get");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/apps/{uid}"
      .replaceAll("\\{" + "uid" + "\\}", apiClient.escapeString(apiClient.parameterToString(uid)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<AppsControllerApiAppSource> localVarReturnType = new TypeReference<AppsControllerApiAppSource>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get a app
   * 
   * @param uid The ID of the app (required)
   * @param tenant  (required)
   * @return AppsControllerApiAppSource
   * @throws ApiException if fails to make API call
   */
  public AppsControllerApiAppSource get8(String uid, String tenant) throws ApiException {
    return this.get8(uid, tenant, Collections.emptyMap());
  }


  /**
   * Get a app
   * 
   * @param uid The ID of the app (required)
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return AppsControllerApiAppSource
   * @throws ApiException if fails to make API call
   */
  public AppsControllerApiAppSource get8(String uid, String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'uid' is set
    if (uid == null) {
      throw new ApiException(400, "Missing the required parameter 'uid' when calling get8");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling get8");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/apps/{uid}"
      .replaceAll("\\{" + "uid" + "\\}", apiClient.escapeString(apiClient.parameterToString(uid)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<AppsControllerApiAppSource> localVarReturnType = new TypeReference<AppsControllerApiAppSource>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Download file for an app execution
   * 
   * @param id The ID of the app. (required)
   * @param path The internal storage uri (required)
   * @return File
   * @throws ApiException if fails to make API call
   */
  public File getFileDownload(String id, URI path) throws ApiException {
    return this.getFileDownload(id, path, Collections.emptyMap());
  }


  /**
   * Download file for an app execution
   * 
   * @param id The ID of the app. (required)
   * @param path The internal storage uri (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return File
   * @throws ApiException if fails to make API call
   */
  public File getFileDownload(String id, URI path, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getFileDownload");
    }
    
    // verify the required parameter 'path' is set
    if (path == null) {
      throw new ApiException(400, "Missing the required parameter 'path' when calling getFileDownload");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/apps/view/{id}/file/download"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("path", path));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<File> localVarReturnType = new TypeReference<File>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Download file for an app execution
   * 
   * @param id The ID of the app. (required)
   * @param path The internal storage uri (required)
   * @param tenant  (required)
   * @return File
   * @throws ApiException if fails to make API call
   */
  public File getFileDownload1(String id, URI path, String tenant) throws ApiException {
    return this.getFileDownload1(id, path, tenant, Collections.emptyMap());
  }


  /**
   * Download file for an app execution
   * 
   * @param id The ID of the app. (required)
   * @param path The internal storage uri (required)
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return File
   * @throws ApiException if fails to make API call
   */
  public File getFileDownload1(String id, URI path, String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getFileDownload1");
    }
    
    // verify the required parameter 'path' is set
    if (path == null) {
      throw new ApiException(400, "Missing the required parameter 'path' when calling getFileDownload1");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling getFileDownload1");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/apps/view/{id}/file/download"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("path", path));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<File> localVarReturnType = new TypeReference<File>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get file meta information for an app execution
   * 
   * @param id The ID of the app. (required)
   * @param path The internal storage uri (required)
   * @return FileMetas
   * @throws ApiException if fails to make API call
   */
  public FileMetas getFileMeta(String id, URI path) throws ApiException {
    return this.getFileMeta(id, path, Collections.emptyMap());
  }


  /**
   * Get file meta information for an app execution
   * 
   * @param id The ID of the app. (required)
   * @param path The internal storage uri (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return FileMetas
   * @throws ApiException if fails to make API call
   */
  public FileMetas getFileMeta(String id, URI path, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getFileMeta");
    }
    
    // verify the required parameter 'path' is set
    if (path == null) {
      throw new ApiException(400, "Missing the required parameter 'path' when calling getFileMeta");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/apps/view/{id}/file/meta"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("path", path));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<FileMetas> localVarReturnType = new TypeReference<FileMetas>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get file meta information for an app execution
   * 
   * @param id The ID of the app. (required)
   * @param path The internal storage uri (required)
   * @param tenant  (required)
   * @return FileMetas
   * @throws ApiException if fails to make API call
   */
  public FileMetas getFileMeta1(String id, URI path, String tenant) throws ApiException {
    return this.getFileMeta1(id, path, tenant, Collections.emptyMap());
  }


  /**
   * Get file meta information for an app execution
   * 
   * @param id The ID of the app. (required)
   * @param path The internal storage uri (required)
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return FileMetas
   * @throws ApiException if fails to make API call
   */
  public FileMetas getFileMeta1(String id, URI path, String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getFileMeta1");
    }
    
    // verify the required parameter 'path' is set
    if (path == null) {
      throw new ApiException(400, "Missing the required parameter 'path' when calling getFileMeta1");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling getFileMeta1");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/apps/view/{id}/file/meta"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("path", path));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<FileMetas> localVarReturnType = new TypeReference<FileMetas>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get file preview for an app execution
   * 
   * @param id The ID of the app. (required)
   * @param path The internal storage uri (required)
   * @param encoding The file encoding as Java charset name. Defaults to UTF-8 (required)
   * @param maxRows The max row returns (optional)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object getFilePreview(String id, URI path, String encoding, Integer maxRows) throws ApiException {
    return this.getFilePreview(id, path, encoding, maxRows, Collections.emptyMap());
  }


  /**
   * Get file preview for an app execution
   * 
   * @param id The ID of the app. (required)
   * @param path The internal storage uri (required)
   * @param encoding The file encoding as Java charset name. Defaults to UTF-8 (required)
   * @param maxRows The max row returns (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object getFilePreview(String id, URI path, String encoding, Integer maxRows, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getFilePreview");
    }
    
    // verify the required parameter 'path' is set
    if (path == null) {
      throw new ApiException(400, "Missing the required parameter 'path' when calling getFilePreview");
    }
    
    // verify the required parameter 'encoding' is set
    if (encoding == null) {
      throw new ApiException(400, "Missing the required parameter 'encoding' when calling getFilePreview");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/apps/view/{id}/file/preview"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("path", path));
    localVarQueryParams.addAll(apiClient.parameterToPair("maxRows", maxRows));
    localVarQueryParams.addAll(apiClient.parameterToPair("encoding", encoding));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get file preview for an app execution
   * 
   * @param id The ID of the app. (required)
   * @param path The internal storage uri (required)
   * @param encoding The file encoding as Java charset name. Defaults to UTF-8 (required)
   * @param tenant  (required)
   * @param maxRows The max row returns (optional)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object getFilePreview1(String id, URI path, String encoding, String tenant, Integer maxRows) throws ApiException {
    return this.getFilePreview1(id, path, encoding, tenant, maxRows, Collections.emptyMap());
  }


  /**
   * Get file preview for an app execution
   * 
   * @param id The ID of the app. (required)
   * @param path The internal storage uri (required)
   * @param encoding The file encoding as Java charset name. Defaults to UTF-8 (required)
   * @param tenant  (required)
   * @param maxRows The max row returns (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object getFilePreview1(String id, URI path, String encoding, String tenant, Integer maxRows, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getFilePreview1");
    }
    
    // verify the required parameter 'path' is set
    if (path == null) {
      throw new ApiException(400, "Missing the required parameter 'path' when calling getFilePreview1");
    }
    
    // verify the required parameter 'encoding' is set
    if (encoding == null) {
      throw new ApiException(400, "Missing the required parameter 'encoding' when calling getFilePreview1");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling getFilePreview1");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/apps/view/{id}/file/preview"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("path", path));
    localVarQueryParams.addAll(apiClient.parameterToPair("maxRows", maxRows));
    localVarQueryParams.addAll(apiClient.parameterToPair("encoding", encoding));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Open an app
   * 
   * @param uid The ID of the app (required)
   * @param parameters  (required)
   * @return AppResponse
   * @throws ApiException if fails to make API call
   */
  public AppResponse open(String uid, HttpParameters parameters) throws ApiException {
    return this.open(uid, parameters, Collections.emptyMap());
  }


  /**
   * Open an app
   * 
   * @param uid The ID of the app (required)
   * @param parameters  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return AppResponse
   * @throws ApiException if fails to make API call
   */
  public AppResponse open(String uid, HttpParameters parameters, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'uid' is set
    if (uid == null) {
      throw new ApiException(400, "Missing the required parameter 'uid' when calling open");
    }
    
    // verify the required parameter 'parameters' is set
    if (parameters == null) {
      throw new ApiException(400, "Missing the required parameter 'parameters' when calling open");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/apps/view/{uid}"
      .replaceAll("\\{" + "uid" + "\\}", apiClient.escapeString(apiClient.parameterToString(uid)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryStringJoiner.add(parameters.toUrlQueryString());
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<AppResponse> localVarReturnType = new TypeReference<AppResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Open an app
   * 
   * @param uid The ID of the app (required)
   * @param parameters  (required)
   * @param tenant  (required)
   * @return AppResponse
   * @throws ApiException if fails to make API call
   */
  public AppResponse open1(String uid, HttpParameters parameters, String tenant) throws ApiException {
    return this.open1(uid, parameters, tenant, Collections.emptyMap());
  }


  /**
   * Open an app
   * 
   * @param uid The ID of the app (required)
   * @param parameters  (required)
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return AppResponse
   * @throws ApiException if fails to make API call
   */
  public AppResponse open1(String uid, HttpParameters parameters, String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'uid' is set
    if (uid == null) {
      throw new ApiException(400, "Missing the required parameter 'uid' when calling open1");
    }
    
    // verify the required parameter 'parameters' is set
    if (parameters == null) {
      throw new ApiException(400, "Missing the required parameter 'parameters' when calling open1");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling open1");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/apps/view/{uid}"
      .replaceAll("\\{" + "uid" + "\\}", apiClient.escapeString(apiClient.parameterToString(uid)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryStringJoiner.add(parameters.toUrlQueryString());
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<AppResponse> localVarReturnType = new TypeReference<AppResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Search for apps
   * 
   * @param page The current page (required)
   * @param size The current page size (required)
   * @param sort The sort of current page (optional)
   * @param tags A tags filter (optional)
   * @param q A string filter (optional)
   * @param namespace A namespace filter prefix (optional)
   * @param flowId A flow id filter (optional)
   * @return PagedResultsAppsControllerApiApp
   * @throws ApiException if fails to make API call
   */
  public PagedResultsAppsControllerApiApp search(Integer page, Integer size, List<String> sort, List<String> tags, String q, String namespace, String flowId) throws ApiException {
    return this.search(page, size, sort, tags, q, namespace, flowId, Collections.emptyMap());
  }


  /**
   * Search for apps
   * 
   * @param page The current page (required)
   * @param size The current page size (required)
   * @param sort The sort of current page (optional)
   * @param tags A tags filter (optional)
   * @param q A string filter (optional)
   * @param namespace A namespace filter prefix (optional)
   * @param flowId A flow id filter (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return PagedResultsAppsControllerApiApp
   * @throws ApiException if fails to make API call
   */
  public PagedResultsAppsControllerApiApp search(Integer page, Integer size, List<String> sort, List<String> tags, String q, String namespace, String flowId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'page' is set
    if (page == null) {
      throw new ApiException(400, "Missing the required parameter 'page' when calling search");
    }
    
    // verify the required parameter 'size' is set
    if (size == null) {
      throw new ApiException(400, "Missing the required parameter 'size' when calling search");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/apps/search";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
    localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sort", sort));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "tags", tags));
    localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
    localVarQueryParams.addAll(apiClient.parameterToPair("namespace", namespace));
    localVarQueryParams.addAll(apiClient.parameterToPair("flowId", flowId));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<PagedResultsAppsControllerApiApp> localVarReturnType = new TypeReference<PagedResultsAppsControllerApiApp>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Search for apps
   * 
   * @param page The current page (required)
   * @param size The current page size (required)
   * @param tenant  (required)
   * @param sort The sort of current page (optional)
   * @param tags A tags filter (optional)
   * @param q A string filter (optional)
   * @param namespace A namespace filter prefix (optional)
   * @param flowId A flow id filter (optional)
   * @return PagedResultsAppsControllerApiApp
   * @throws ApiException if fails to make API call
   */
  public PagedResultsAppsControllerApiApp search5(Integer page, Integer size, String tenant, List<String> sort, List<String> tags, String q, String namespace, String flowId) throws ApiException {
    return this.search5(page, size, tenant, sort, tags, q, namespace, flowId, Collections.emptyMap());
  }


  /**
   * Search for apps
   * 
   * @param page The current page (required)
   * @param size The current page size (required)
   * @param tenant  (required)
   * @param sort The sort of current page (optional)
   * @param tags A tags filter (optional)
   * @param q A string filter (optional)
   * @param namespace A namespace filter prefix (optional)
   * @param flowId A flow id filter (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return PagedResultsAppsControllerApiApp
   * @throws ApiException if fails to make API call
   */
  public PagedResultsAppsControllerApiApp search5(Integer page, Integer size, String tenant, List<String> sort, List<String> tags, String q, String namespace, String flowId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'page' is set
    if (page == null) {
      throw new ApiException(400, "Missing the required parameter 'page' when calling search5");
    }
    
    // verify the required parameter 'size' is set
    if (size == null) {
      throw new ApiException(400, "Missing the required parameter 'size' when calling search5");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling search5");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/apps/search"
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
    localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sort", sort));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "tags", tags));
    localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
    localVarQueryParams.addAll(apiClient.parameterToPair("namespace", namespace));
    localVarQueryParams.addAll(apiClient.parameterToPair("flowId", flowId));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<PagedResultsAppsControllerApiApp> localVarReturnType = new TypeReference<PagedResultsAppsControllerApiApp>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get an event stream from a given app.
   * 
   * @param id The ID of the app. (required)
   * @param stream The ID of the stream to get (required)
   * @param parameters  (required)
   * @return EventAppResponse
   * @throws ApiException if fails to make API call
   */
  public EventAppResponse streams(String id, String stream, HttpParameters parameters) throws ApiException {
    return this.streams(id, stream, parameters, Collections.emptyMap());
  }


  /**
   * Get an event stream from a given app.
   * 
   * @param id The ID of the app. (required)
   * @param stream The ID of the stream to get (required)
   * @param parameters  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return EventAppResponse
   * @throws ApiException if fails to make API call
   */
  public EventAppResponse streams(String id, String stream, HttpParameters parameters, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling streams");
    }
    
    // verify the required parameter 'stream' is set
    if (stream == null) {
      throw new ApiException(400, "Missing the required parameter 'stream' when calling streams");
    }
    
    // verify the required parameter 'parameters' is set
    if (parameters == null) {
      throw new ApiException(400, "Missing the required parameter 'parameters' when calling streams");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/apps/view/{id}/streams/{stream}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "stream" + "\\}", apiClient.escapeString(apiClient.parameterToString(stream)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryStringJoiner.add(parameters.toUrlQueryString());
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "text/event-stream"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<EventAppResponse> localVarReturnType = new TypeReference<EventAppResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get an event stream from a given app.
   * 
   * @param id The ID of the app. (required)
   * @param stream The ID of the stream to get (required)
   * @param parameters  (required)
   * @param tenant  (required)
   * @return EventAppResponse
   * @throws ApiException if fails to make API call
   */
  public EventAppResponse streams1(String id, String stream, HttpParameters parameters, String tenant) throws ApiException {
    return this.streams1(id, stream, parameters, tenant, Collections.emptyMap());
  }


  /**
   * Get an event stream from a given app.
   * 
   * @param id The ID of the app. (required)
   * @param stream The ID of the stream to get (required)
   * @param parameters  (required)
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return EventAppResponse
   * @throws ApiException if fails to make API call
   */
  public EventAppResponse streams1(String id, String stream, HttpParameters parameters, String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling streams1");
    }
    
    // verify the required parameter 'stream' is set
    if (stream == null) {
      throw new ApiException(400, "Missing the required parameter 'stream' when calling streams1");
    }
    
    // verify the required parameter 'parameters' is set
    if (parameters == null) {
      throw new ApiException(400, "Missing the required parameter 'parameters' when calling streams1");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling streams1");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/apps/view/{id}/streams/{stream}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "stream" + "\\}", apiClient.escapeString(apiClient.parameterToString(stream)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryStringJoiner.add(parameters.toUrlQueryString());
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "text/event-stream"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<EventAppResponse> localVarReturnType = new TypeReference<EventAppResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get all the app tags
   * 
   * @return AppsControllerApiAppTags
   * @throws ApiException if fails to make API call
   */
  public AppsControllerApiAppTags tags() throws ApiException {
    return this.tags(Collections.emptyMap());
  }


  /**
   * Get all the app tags
   * 
   * @param additionalHeaders additionalHeaders for this call
   * @return AppsControllerApiAppTags
   * @throws ApiException if fails to make API call
   */
  public AppsControllerApiAppTags tags(Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/api/v1/apps/tags";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<AppsControllerApiAppTags> localVarReturnType = new TypeReference<AppsControllerApiAppTags>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get all the app tags
   * 
   * @param tenant  (required)
   * @return AppsControllerApiAppTags
   * @throws ApiException if fails to make API call
   */
  public AppsControllerApiAppTags tags1(String tenant) throws ApiException {
    return this.tags1(tenant, Collections.emptyMap());
  }


  /**
   * Get all the app tags
   * 
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return AppsControllerApiAppTags
   * @throws ApiException if fails to make API call
   */
  public AppsControllerApiAppTags tags1(String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling tags1");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/apps/tags"
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<AppsControllerApiAppTags> localVarReturnType = new TypeReference<AppsControllerApiAppTags>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Update an existing app
   * 
   * @param uid The ID of the app (required)
   * @param body  (required)
   * @return AppsControllerApiAppSource
   * @throws ApiException if fails to make API call
   */
  public AppsControllerApiAppSource update(String uid, String body) throws ApiException {
    return this.update(uid, body, Collections.emptyMap());
  }


  /**
   * Update an existing app
   * 
   * @param uid The ID of the app (required)
   * @param body  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return AppsControllerApiAppSource
   * @throws ApiException if fails to make API call
   */
  public AppsControllerApiAppSource update(String uid, String body, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = body;
    
    // verify the required parameter 'uid' is set
    if (uid == null) {
      throw new ApiException(400, "Missing the required parameter 'uid' when calling update");
    }
    
    // verify the required parameter 'body' is set
    if (body == null) {
      throw new ApiException(400, "Missing the required parameter 'body' when calling update");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/apps/{uid}"
      .replaceAll("\\{" + "uid" + "\\}", apiClient.escapeString(apiClient.parameterToString(uid)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/x-yaml"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<AppsControllerApiAppSource> localVarReturnType = new TypeReference<AppsControllerApiAppSource>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "PUT",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Update an existing app
   * 
   * @param uid The ID of the app (required)
   * @param tenant  (required)
   * @param body  (required)
   * @return AppsControllerApiAppSource
   * @throws ApiException if fails to make API call
   */
  public AppsControllerApiAppSource update19(String uid, String tenant, String body) throws ApiException {
    return this.update19(uid, tenant, body, Collections.emptyMap());
  }


  /**
   * Update an existing app
   * 
   * @param uid The ID of the app (required)
   * @param tenant  (required)
   * @param body  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return AppsControllerApiAppSource
   * @throws ApiException if fails to make API call
   */
  public AppsControllerApiAppSource update19(String uid, String tenant, String body, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = body;
    
    // verify the required parameter 'uid' is set
    if (uid == null) {
      throw new ApiException(400, "Missing the required parameter 'uid' when calling update19");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling update19");
    }
    
    // verify the required parameter 'body' is set
    if (body == null) {
      throw new ApiException(400, "Missing the required parameter 'body' when calling update19");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/apps/{uid}"
      .replaceAll("\\{" + "uid" + "\\}", apiClient.escapeString(apiClient.parameterToString(uid)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/x-yaml"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<AppsControllerApiAppSource> localVarReturnType = new TypeReference<AppsControllerApiAppSource>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "PUT",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  @Override
  public <T> T invokeAPI(String url, String method, Object request, TypeReference<T> returnType, Map<String, String> additionalHeaders) throws ApiException {
    String localVarPath = url.replace(apiClient.getBaseURL(), "");
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarHeaderParams.putAll(additionalHeaders);

    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/x-yaml"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    return apiClient.invokeAPI(
      localVarPath,
        method,
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        request,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        returnType
    );
  }
}
