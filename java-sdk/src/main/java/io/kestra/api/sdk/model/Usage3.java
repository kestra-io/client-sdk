/*
 * Kestra EE
 * All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kestra.api.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.kestra.api.sdk.model.ConfigurationUsage;
import io.kestra.api.sdk.model.ExecutionUsage;
import io.kestra.api.sdk.model.FlowUsage;
import io.kestra.api.sdk.model.GroupUsage;
import io.kestra.api.sdk.model.HostUsage;
import io.kestra.api.sdk.model.NamespaceUsage;
import io.kestra.api.sdk.model.PluginUsage;
import io.kestra.api.sdk.model.RoleUsage;
import io.kestra.api.sdk.model.ServerType;
import io.kestra.api.sdk.model.ServiceUsage;
import io.kestra.api.sdk.model.TenantUsage;
import io.kestra.api.sdk.model.UserUsage;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * Usage3
 */
@JsonPropertyOrder({
  Usage3.JSON_PROPERTY_UUID,
  Usage3.JSON_PROPERTY_START_UUID,
  Usage3.JSON_PROPERTY_INSTANCE_UUID,
  Usage3.JSON_PROPERTY_SERVER_TYPE,
  Usage3.JSON_PROPERTY_VERSION,
  Usage3.JSON_PROPERTY_ZONE_ID,
  Usage3.JSON_PROPERTY_URI,
  Usage3.JSON_PROPERTY_ENVIRONMENTS,
  Usage3.JSON_PROPERTY_START_TIME,
  Usage3.JSON_PROPERTY_HOST,
  Usage3.JSON_PROPERTY_CONFIGURATIONS,
  Usage3.JSON_PROPERTY_PLUGINS,
  Usage3.JSON_PROPERTY_FLOWS,
  Usage3.JSON_PROPERTY_EXECUTIONS,
  Usage3.JSON_PROPERTY_SERVICES,
  Usage3.JSON_PROPERTY_GROUPS,
  Usage3.JSON_PROPERTY_USERS,
  Usage3.JSON_PROPERTY_ROLES,
  Usage3.JSON_PROPERTY_NAMESPACES,
  Usage3.JSON_PROPERTY_TENANTS
})
@JsonTypeName("Usage_3")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-31T15:48:45.246126227Z[Etc/UTC]", comments = "Generator version: 7.11.0-SNAPSHOT")
public class Usage3 {
  public static final String JSON_PROPERTY_UUID = "uuid";
  @javax.annotation.Nonnull
  private String uuid;

  public static final String JSON_PROPERTY_START_UUID = "startUuid";
  @javax.annotation.Nonnull
  private String startUuid;

  public static final String JSON_PROPERTY_INSTANCE_UUID = "instanceUuid";
  @javax.annotation.Nonnull
  private String instanceUuid;

  public static final String JSON_PROPERTY_SERVER_TYPE = "serverType";
  @javax.annotation.Nonnull
  private ServerType serverType;

  public static final String JSON_PROPERTY_VERSION = "version";
  @javax.annotation.Nonnull
  private String version;

  public static final String JSON_PROPERTY_ZONE_ID = "zoneId";
  @javax.annotation.Nonnull
  private String zoneId;

  public static final String JSON_PROPERTY_URI = "uri";
  @javax.annotation.Nullable
  private String uri;

  public static final String JSON_PROPERTY_ENVIRONMENTS = "environments";
  @javax.annotation.Nullable
  private List<String> environments;

  public static final String JSON_PROPERTY_START_TIME = "startTime";
  @javax.annotation.Nonnull
  private OffsetDateTime startTime;

  public static final String JSON_PROPERTY_HOST = "host";
  @javax.annotation.Nonnull
  private HostUsage host;

  public static final String JSON_PROPERTY_CONFIGURATIONS = "configurations";
  @javax.annotation.Nonnull
  private ConfigurationUsage configurations;

  public static final String JSON_PROPERTY_PLUGINS = "plugins";
  @javax.annotation.Nonnull
  private List<PluginUsage> plugins = new ArrayList<>();

  public static final String JSON_PROPERTY_FLOWS = "flows";
  @javax.annotation.Nonnull
  private FlowUsage flows;

  public static final String JSON_PROPERTY_EXECUTIONS = "executions";
  @javax.annotation.Nonnull
  private ExecutionUsage executions;

  public static final String JSON_PROPERTY_SERVICES = "services";
  @javax.annotation.Nullable
  private ServiceUsage services;

  public static final String JSON_PROPERTY_GROUPS = "groups";
  @javax.annotation.Nullable
  private GroupUsage groups;

  public static final String JSON_PROPERTY_USERS = "users";
  @javax.annotation.Nullable
  private UserUsage users;

  public static final String JSON_PROPERTY_ROLES = "roles";
  @javax.annotation.Nullable
  private RoleUsage roles;

  public static final String JSON_PROPERTY_NAMESPACES = "namespaces";
  @javax.annotation.Nullable
  private NamespaceUsage namespaces;

  public static final String JSON_PROPERTY_TENANTS = "tenants";
  @javax.annotation.Nullable
  private TenantUsage tenants;

  public Usage3() {
  }

  public Usage3 uuid(@javax.annotation.Nonnull String uuid) {
    
    this.uuid = uuid;
    return this;
  }

  /**
   * Get uuid
   * @return uuid
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_UUID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getUuid() {
    return uuid;
  }


  @JsonProperty(JSON_PROPERTY_UUID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUuid(@javax.annotation.Nonnull String uuid) {
    this.uuid = uuid;
  }

  public Usage3 startUuid(@javax.annotation.Nonnull String startUuid) {
    
    this.startUuid = startUuid;
    return this;
  }

  /**
   * Get startUuid
   * @return startUuid
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_START_UUID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getStartUuid() {
    return startUuid;
  }


  @JsonProperty(JSON_PROPERTY_START_UUID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStartUuid(@javax.annotation.Nonnull String startUuid) {
    this.startUuid = startUuid;
  }

  public Usage3 instanceUuid(@javax.annotation.Nonnull String instanceUuid) {
    
    this.instanceUuid = instanceUuid;
    return this;
  }

  /**
   * Get instanceUuid
   * @return instanceUuid
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_INSTANCE_UUID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getInstanceUuid() {
    return instanceUuid;
  }


  @JsonProperty(JSON_PROPERTY_INSTANCE_UUID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setInstanceUuid(@javax.annotation.Nonnull String instanceUuid) {
    this.instanceUuid = instanceUuid;
  }

  public Usage3 serverType(@javax.annotation.Nonnull ServerType serverType) {
    
    this.serverType = serverType;
    return this;
  }

  /**
   * Get serverType
   * @return serverType
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SERVER_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public ServerType getServerType() {
    return serverType;
  }


  @JsonProperty(JSON_PROPERTY_SERVER_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setServerType(@javax.annotation.Nonnull ServerType serverType) {
    this.serverType = serverType;
  }

  public Usage3 version(@javax.annotation.Nonnull String version) {
    
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_VERSION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getVersion() {
    return version;
  }


  @JsonProperty(JSON_PROPERTY_VERSION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setVersion(@javax.annotation.Nonnull String version) {
    this.version = version;
  }

  public Usage3 zoneId(@javax.annotation.Nonnull String zoneId) {
    
    this.zoneId = zoneId;
    return this;
  }

  /**
   * Get zoneId
   * @return zoneId
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ZONE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getZoneId() {
    return zoneId;
  }


  @JsonProperty(JSON_PROPERTY_ZONE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setZoneId(@javax.annotation.Nonnull String zoneId) {
    this.zoneId = zoneId;
  }

  public Usage3 uri(@javax.annotation.Nullable String uri) {
    
    this.uri = uri;
    return this;
  }

  /**
   * Get uri
   * @return uri
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_URI)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getUri() {
    return uri;
  }


  @JsonProperty(JSON_PROPERTY_URI)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUri(@javax.annotation.Nullable String uri) {
    this.uri = uri;
  }

  public Usage3 environments(@javax.annotation.Nullable List<String> environments) {
    
    this.environments = environments;
    return this;
  }

  public Usage3 addEnvironmentsItem(String environmentsItem) {
    if (this.environments == null) {
      this.environments = new ArrayList<>();
    }
    this.environments.add(environmentsItem);
    return this;
  }

  /**
   * Get environments
   * @return environments
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENVIRONMENTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<String> getEnvironments() {
    return environments;
  }


  @JsonProperty(JSON_PROPERTY_ENVIRONMENTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEnvironments(@javax.annotation.Nullable List<String> environments) {
    this.environments = environments;
  }

  public Usage3 startTime(@javax.annotation.Nonnull OffsetDateTime startTime) {
    
    this.startTime = startTime;
    return this;
  }

  /**
   * Get startTime
   * @return startTime
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_START_TIME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public OffsetDateTime getStartTime() {
    return startTime;
  }


  @JsonProperty(JSON_PROPERTY_START_TIME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStartTime(@javax.annotation.Nonnull OffsetDateTime startTime) {
    this.startTime = startTime;
  }

  public Usage3 host(@javax.annotation.Nonnull HostUsage host) {
    
    this.host = host;
    return this;
  }

  /**
   * Get host
   * @return host
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_HOST)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public HostUsage getHost() {
    return host;
  }


  @JsonProperty(JSON_PROPERTY_HOST)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setHost(@javax.annotation.Nonnull HostUsage host) {
    this.host = host;
  }

  public Usage3 configurations(@javax.annotation.Nonnull ConfigurationUsage configurations) {
    
    this.configurations = configurations;
    return this;
  }

  /**
   * Get configurations
   * @return configurations
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CONFIGURATIONS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public ConfigurationUsage getConfigurations() {
    return configurations;
  }


  @JsonProperty(JSON_PROPERTY_CONFIGURATIONS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setConfigurations(@javax.annotation.Nonnull ConfigurationUsage configurations) {
    this.configurations = configurations;
  }

  public Usage3 plugins(@javax.annotation.Nonnull List<PluginUsage> plugins) {
    
    this.plugins = plugins;
    return this;
  }

  public Usage3 addPluginsItem(PluginUsage pluginsItem) {
    if (this.plugins == null) {
      this.plugins = new ArrayList<>();
    }
    this.plugins.add(pluginsItem);
    return this;
  }

  /**
   * Get plugins
   * @return plugins
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PLUGINS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<PluginUsage> getPlugins() {
    return plugins;
  }


  @JsonProperty(JSON_PROPERTY_PLUGINS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPlugins(@javax.annotation.Nonnull List<PluginUsage> plugins) {
    this.plugins = plugins;
  }

  public Usage3 flows(@javax.annotation.Nonnull FlowUsage flows) {
    
    this.flows = flows;
    return this;
  }

  /**
   * Get flows
   * @return flows
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_FLOWS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public FlowUsage getFlows() {
    return flows;
  }


  @JsonProperty(JSON_PROPERTY_FLOWS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFlows(@javax.annotation.Nonnull FlowUsage flows) {
    this.flows = flows;
  }

  public Usage3 executions(@javax.annotation.Nonnull ExecutionUsage executions) {
    
    this.executions = executions;
    return this;
  }

  /**
   * Get executions
   * @return executions
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_EXECUTIONS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public ExecutionUsage getExecutions() {
    return executions;
  }


  @JsonProperty(JSON_PROPERTY_EXECUTIONS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setExecutions(@javax.annotation.Nonnull ExecutionUsage executions) {
    this.executions = executions;
  }

  public Usage3 services(@javax.annotation.Nullable ServiceUsage services) {
    
    this.services = services;
    return this;
  }

  /**
   * Get services
   * @return services
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SERVICES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public ServiceUsage getServices() {
    return services;
  }


  @JsonProperty(JSON_PROPERTY_SERVICES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setServices(@javax.annotation.Nullable ServiceUsage services) {
    this.services = services;
  }

  public Usage3 groups(@javax.annotation.Nullable GroupUsage groups) {
    
    this.groups = groups;
    return this;
  }

  /**
   * Get groups
   * @return groups
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_GROUPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public GroupUsage getGroups() {
    return groups;
  }


  @JsonProperty(JSON_PROPERTY_GROUPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGroups(@javax.annotation.Nullable GroupUsage groups) {
    this.groups = groups;
  }

  public Usage3 users(@javax.annotation.Nullable UserUsage users) {
    
    this.users = users;
    return this;
  }

  /**
   * Get users
   * @return users
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public UserUsage getUsers() {
    return users;
  }


  @JsonProperty(JSON_PROPERTY_USERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUsers(@javax.annotation.Nullable UserUsage users) {
    this.users = users;
  }

  public Usage3 roles(@javax.annotation.Nullable RoleUsage roles) {
    
    this.roles = roles;
    return this;
  }

  /**
   * Get roles
   * @return roles
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ROLES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RoleUsage getRoles() {
    return roles;
  }


  @JsonProperty(JSON_PROPERTY_ROLES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRoles(@javax.annotation.Nullable RoleUsage roles) {
    this.roles = roles;
  }

  public Usage3 namespaces(@javax.annotation.Nullable NamespaceUsage namespaces) {
    
    this.namespaces = namespaces;
    return this;
  }

  /**
   * Get namespaces
   * @return namespaces
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NAMESPACES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public NamespaceUsage getNamespaces() {
    return namespaces;
  }


  @JsonProperty(JSON_PROPERTY_NAMESPACES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNamespaces(@javax.annotation.Nullable NamespaceUsage namespaces) {
    this.namespaces = namespaces;
  }

  public Usage3 tenants(@javax.annotation.Nullable TenantUsage tenants) {
    
    this.tenants = tenants;
    return this;
  }

  /**
   * Get tenants
   * @return tenants
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TENANTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TenantUsage getTenants() {
    return tenants;
  }


  @JsonProperty(JSON_PROPERTY_TENANTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTenants(@javax.annotation.Nullable TenantUsage tenants) {
    this.tenants = tenants;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Usage3 usage3 = (Usage3) o;
    return Objects.equals(this.uuid, usage3.uuid) &&
        Objects.equals(this.startUuid, usage3.startUuid) &&
        Objects.equals(this.instanceUuid, usage3.instanceUuid) &&
        Objects.equals(this.serverType, usage3.serverType) &&
        Objects.equals(this.version, usage3.version) &&
        Objects.equals(this.zoneId, usage3.zoneId) &&
        Objects.equals(this.uri, usage3.uri) &&
        Objects.equals(this.environments, usage3.environments) &&
        Objects.equals(this.startTime, usage3.startTime) &&
        Objects.equals(this.host, usage3.host) &&
        Objects.equals(this.configurations, usage3.configurations) &&
        Objects.equals(this.plugins, usage3.plugins) &&
        Objects.equals(this.flows, usage3.flows) &&
        Objects.equals(this.executions, usage3.executions) &&
        Objects.equals(this.services, usage3.services) &&
        Objects.equals(this.groups, usage3.groups) &&
        Objects.equals(this.users, usage3.users) &&
        Objects.equals(this.roles, usage3.roles) &&
        Objects.equals(this.namespaces, usage3.namespaces) &&
        Objects.equals(this.tenants, usage3.tenants);
  }

  @Override
  public int hashCode() {
    return Objects.hash(uuid, startUuid, instanceUuid, serverType, version, zoneId, uri, environments, startTime, host, configurations, plugins, flows, executions, services, groups, users, roles, namespaces, tenants);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Usage3 {\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    startUuid: ").append(toIndentedString(startUuid)).append("\n");
    sb.append("    instanceUuid: ").append(toIndentedString(instanceUuid)).append("\n");
    sb.append("    serverType: ").append(toIndentedString(serverType)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    zoneId: ").append(toIndentedString(zoneId)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("    environments: ").append(toIndentedString(environments)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    host: ").append(toIndentedString(host)).append("\n");
    sb.append("    configurations: ").append(toIndentedString(configurations)).append("\n");
    sb.append("    plugins: ").append(toIndentedString(plugins)).append("\n");
    sb.append("    flows: ").append(toIndentedString(flows)).append("\n");
    sb.append("    executions: ").append(toIndentedString(executions)).append("\n");
    sb.append("    services: ").append(toIndentedString(services)).append("\n");
    sb.append("    groups: ").append(toIndentedString(groups)).append("\n");
    sb.append("    users: ").append(toIndentedString(users)).append("\n");
    sb.append("    roles: ").append(toIndentedString(roles)).append("\n");
    sb.append("    namespaces: ").append(toIndentedString(namespaces)).append("\n");
    sb.append("    tenants: ").append(toIndentedString(tenants)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `uuid` to the URL query string
    if (getUuid() != null) {
      try {
        joiner.add(String.format("%suuid%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUuid()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `startUuid` to the URL query string
    if (getStartUuid() != null) {
      try {
        joiner.add(String.format("%sstartUuid%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getStartUuid()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `instanceUuid` to the URL query string
    if (getInstanceUuid() != null) {
      try {
        joiner.add(String.format("%sinstanceUuid%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getInstanceUuid()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `serverType` to the URL query string
    if (getServerType() != null) {
      try {
        joiner.add(String.format("%sserverType%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getServerType()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `version` to the URL query string
    if (getVersion() != null) {
      try {
        joiner.add(String.format("%sversion%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getVersion()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `zoneId` to the URL query string
    if (getZoneId() != null) {
      try {
        joiner.add(String.format("%szoneId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getZoneId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `uri` to the URL query string
    if (getUri() != null) {
      try {
        joiner.add(String.format("%suri%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUri()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `environments` to the URL query string
    if (getEnvironments() != null) {
      for (int i = 0; i < getEnvironments().size(); i++) {
        try {
          joiner.add(String.format("%senvironments%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(String.valueOf(getEnvironments().get(i)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    // add `startTime` to the URL query string
    if (getStartTime() != null) {
      try {
        joiner.add(String.format("%sstartTime%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getStartTime()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `host` to the URL query string
    if (getHost() != null) {
      joiner.add(getHost().toUrlQueryString(prefix + "host" + suffix));
    }

    // add `configurations` to the URL query string
    if (getConfigurations() != null) {
      joiner.add(getConfigurations().toUrlQueryString(prefix + "configurations" + suffix));
    }

    // add `plugins` to the URL query string
    if (getPlugins() != null) {
      for (int i = 0; i < getPlugins().size(); i++) {
        if (getPlugins().get(i) != null) {
          joiner.add(getPlugins().get(i).toUrlQueryString(String.format("%splugins%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `flows` to the URL query string
    if (getFlows() != null) {
      joiner.add(getFlows().toUrlQueryString(prefix + "flows" + suffix));
    }

    // add `executions` to the URL query string
    if (getExecutions() != null) {
      joiner.add(getExecutions().toUrlQueryString(prefix + "executions" + suffix));
    }

    // add `services` to the URL query string
    if (getServices() != null) {
      joiner.add(getServices().toUrlQueryString(prefix + "services" + suffix));
    }

    // add `groups` to the URL query string
    if (getGroups() != null) {
      joiner.add(getGroups().toUrlQueryString(prefix + "groups" + suffix));
    }

    // add `users` to the URL query string
    if (getUsers() != null) {
      joiner.add(getUsers().toUrlQueryString(prefix + "users" + suffix));
    }

    // add `roles` to the URL query string
    if (getRoles() != null) {
      joiner.add(getRoles().toUrlQueryString(prefix + "roles" + suffix));
    }

    // add `namespaces` to the URL query string
    if (getNamespaces() != null) {
      joiner.add(getNamespaces().toUrlQueryString(prefix + "namespaces" + suffix));
    }

    // add `tenants` to the URL query string
    if (getTenants() != null) {
      joiner.add(getTenants().toUrlQueryString(prefix + "tenants" + suffix));
    }

    return joiner.toString();
  }

}

