/*
 * Kestra EE
 * All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package io.kestra.api.sdk.api;

import com.fasterxml.jackson.core.type.TypeReference;

import io.kestra.api.sdk.internal.ApiException;
import io.kestra.api.sdk.internal.ApiClient;
import io.kestra.api.sdk.internal.BaseApi;
import io.kestra.api.sdk.internal.Configuration;
import io.kestra.api.sdk.internal.Pair;

import io.kestra.api.sdk.model.AbstractUserControllerPasswordRequest;
import io.kestra.api.sdk.model.AbstractUserControllerUserApiAutocomplete;
import io.kestra.api.sdk.model.ApiServiceAccount;
import io.kestra.api.sdk.model.ApiUser;
import io.kestra.api.sdk.model.CreateApiTokenRequest;
import io.kestra.api.sdk.model.MeControllerUpdatePasswordRequest;
import io.kestra.api.sdk.model.PagedResultsApiUser;
import io.kestra.api.sdk.model.UserType;


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-31T15:48:45.246126227Z[Etc/UTC]", comments = "Generator version: 7.11.0-SNAPSHOT")
public class UsersApi extends BaseApi {

  public UsersApi() {
    super(Configuration.getDefaultApiClient());
  }

  public UsersApi(ApiClient apiClient) {
    super(apiClient);
  }

  /**
   * List users for autocomplete
   * 
   * @param ressourceTenant  (required)
   * @param abstractUserControllerUserApiAutocomplete  (required)
   * @return List&lt;ApiUser&gt;
   * @throws ApiException if fails to make API call
   */
  public List<ApiUser> autocomplete10(String ressourceTenant, AbstractUserControllerUserApiAutocomplete abstractUserControllerUserApiAutocomplete) throws ApiException {
    return this.autocomplete10(ressourceTenant, abstractUserControllerUserApiAutocomplete, Collections.emptyMap());
  }


  /**
   * List users for autocomplete
   * 
   * @param ressourceTenant  (required)
   * @param abstractUserControllerUserApiAutocomplete  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return List&lt;ApiUser&gt;
   * @throws ApiException if fails to make API call
   */
  public List<ApiUser> autocomplete10(String ressourceTenant, AbstractUserControllerUserApiAutocomplete abstractUserControllerUserApiAutocomplete, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = abstractUserControllerUserApiAutocomplete;
    
    // verify the required parameter 'ressourceTenant' is set
    if (ressourceTenant == null) {
      throw new ApiException(400, "Missing the required parameter 'ressourceTenant' when calling autocomplete10");
    }
    
    // verify the required parameter 'abstractUserControllerUserApiAutocomplete' is set
    if (abstractUserControllerUserApiAutocomplete == null) {
      throw new ApiException(400, "Missing the required parameter 'abstractUserControllerUserApiAutocomplete' when calling autocomplete10");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/tenants/{ressourceTenant}/users/autocomplete"
      .replaceAll("\\{" + "ressourceTenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(ressourceTenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<List<ApiUser>> localVarReturnType = new TypeReference<List<ApiUser>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * List users for autocomplete
   * 
   * @param abstractUserControllerUserApiAutocomplete  (required)
   * @return List&lt;ApiUser&gt;
   * @throws ApiException if fails to make API call
   */
  public List<ApiUser> autocomplete11(AbstractUserControllerUserApiAutocomplete abstractUserControllerUserApiAutocomplete) throws ApiException {
    return this.autocomplete11(abstractUserControllerUserApiAutocomplete, Collections.emptyMap());
  }


  /**
   * List users for autocomplete
   * 
   * @param abstractUserControllerUserApiAutocomplete  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return List&lt;ApiUser&gt;
   * @throws ApiException if fails to make API call
   */
  public List<ApiUser> autocomplete11(AbstractUserControllerUserApiAutocomplete abstractUserControllerUserApiAutocomplete, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = abstractUserControllerUserApiAutocomplete;
    
    // verify the required parameter 'abstractUserControllerUserApiAutocomplete' is set
    if (abstractUserControllerUserApiAutocomplete == null) {
      throw new ApiException(400, "Missing the required parameter 'abstractUserControllerUserApiAutocomplete' when calling autocomplete11");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/users/autocomplete";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<List<ApiUser>> localVarReturnType = new TypeReference<List<ApiUser>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * List users for autocomplete
   * 
   * @param tenant  (required)
   * @param abstractUserControllerUserApiAutocomplete  (required)
   * @return List&lt;ApiUser&gt;
   * @throws ApiException if fails to make API call
   */
  public List<ApiUser> autocomplete18(String tenant, AbstractUserControllerUserApiAutocomplete abstractUserControllerUserApiAutocomplete) throws ApiException {
    return this.autocomplete18(tenant, abstractUserControllerUserApiAutocomplete, Collections.emptyMap());
  }


  /**
   * List users for autocomplete
   * 
   * @param tenant  (required)
   * @param abstractUserControllerUserApiAutocomplete  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return List&lt;ApiUser&gt;
   * @throws ApiException if fails to make API call
   */
  public List<ApiUser> autocomplete18(String tenant, AbstractUserControllerUserApiAutocomplete abstractUserControllerUserApiAutocomplete, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = abstractUserControllerUserApiAutocomplete;
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling autocomplete18");
    }
    
    // verify the required parameter 'abstractUserControllerUserApiAutocomplete' is set
    if (abstractUserControllerUserApiAutocomplete == null) {
      throw new ApiException(400, "Missing the required parameter 'abstractUserControllerUserApiAutocomplete' when calling autocomplete18");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/tenants/users/autocomplete"
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<List<ApiUser>> localVarReturnType = new TypeReference<List<ApiUser>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * List users for autocomplete
   * 
   * @param ressourceTenant  (required)
   * @param tenant  (required)
   * @param abstractUserControllerUserApiAutocomplete  (required)
   * @return List&lt;ApiUser&gt;
   * @throws ApiException if fails to make API call
   */
  public List<ApiUser> autocomplete22(String ressourceTenant, String tenant, AbstractUserControllerUserApiAutocomplete abstractUserControllerUserApiAutocomplete) throws ApiException {
    return this.autocomplete22(ressourceTenant, tenant, abstractUserControllerUserApiAutocomplete, Collections.emptyMap());
  }


  /**
   * List users for autocomplete
   * 
   * @param ressourceTenant  (required)
   * @param tenant  (required)
   * @param abstractUserControllerUserApiAutocomplete  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return List&lt;ApiUser&gt;
   * @throws ApiException if fails to make API call
   */
  public List<ApiUser> autocomplete22(String ressourceTenant, String tenant, AbstractUserControllerUserApiAutocomplete abstractUserControllerUserApiAutocomplete, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = abstractUserControllerUserApiAutocomplete;
    
    // verify the required parameter 'ressourceTenant' is set
    if (ressourceTenant == null) {
      throw new ApiException(400, "Missing the required parameter 'ressourceTenant' when calling autocomplete22");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling autocomplete22");
    }
    
    // verify the required parameter 'abstractUserControllerUserApiAutocomplete' is set
    if (abstractUserControllerUserApiAutocomplete == null) {
      throw new ApiException(400, "Missing the required parameter 'abstractUserControllerUserApiAutocomplete' when calling autocomplete22");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/tenants/{ressourceTenant}/users/autocomplete"
      .replaceAll("\\{" + "ressourceTenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(ressourceTenant)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<List<ApiUser>> localVarReturnType = new TypeReference<List<ApiUser>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * List users for autocomplete
   * 
   * @param tenant  (required)
   * @param abstractUserControllerUserApiAutocomplete  (required)
   * @return List&lt;ApiUser&gt;
   * @throws ApiException if fails to make API call
   */
  public List<ApiUser> autocomplete23(String tenant, AbstractUserControllerUserApiAutocomplete abstractUserControllerUserApiAutocomplete) throws ApiException {
    return this.autocomplete23(tenant, abstractUserControllerUserApiAutocomplete, Collections.emptyMap());
  }


  /**
   * List users for autocomplete
   * 
   * @param tenant  (required)
   * @param abstractUserControllerUserApiAutocomplete  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return List&lt;ApiUser&gt;
   * @throws ApiException if fails to make API call
   */
  public List<ApiUser> autocomplete23(String tenant, AbstractUserControllerUserApiAutocomplete abstractUserControllerUserApiAutocomplete, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = abstractUserControllerUserApiAutocomplete;
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling autocomplete23");
    }
    
    // verify the required parameter 'abstractUserControllerUserApiAutocomplete' is set
    if (abstractUserControllerUserApiAutocomplete == null) {
      throw new ApiException(400, "Missing the required parameter 'abstractUserControllerUserApiAutocomplete' when calling autocomplete23");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/users/autocomplete"
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<List<ApiUser>> localVarReturnType = new TypeReference<List<ApiUser>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * List users for autocomplete
   * 
   * @param abstractUserControllerUserApiAutocomplete  (required)
   * @return List&lt;ApiUser&gt;
   * @throws ApiException if fails to make API call
   */
  public List<ApiUser> autocomplete6(AbstractUserControllerUserApiAutocomplete abstractUserControllerUserApiAutocomplete) throws ApiException {
    return this.autocomplete6(abstractUserControllerUserApiAutocomplete, Collections.emptyMap());
  }


  /**
   * List users for autocomplete
   * 
   * @param abstractUserControllerUserApiAutocomplete  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return List&lt;ApiUser&gt;
   * @throws ApiException if fails to make API call
   */
  public List<ApiUser> autocomplete6(AbstractUserControllerUserApiAutocomplete abstractUserControllerUserApiAutocomplete, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = abstractUserControllerUserApiAutocomplete;
    
    // verify the required parameter 'abstractUserControllerUserApiAutocomplete' is set
    if (abstractUserControllerUserApiAutocomplete == null) {
      throw new ApiException(400, "Missing the required parameter 'abstractUserControllerUserApiAutocomplete' when calling autocomplete6");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/tenants/users/autocomplete";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<List<ApiUser>> localVarReturnType = new TypeReference<List<ApiUser>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Create a standard user
   * 
   * @param apiUser  (required)
   * @return ApiUser
   * @throws ApiException if fails to make API call
   */
  public ApiUser create19(ApiUser apiUser) throws ApiException {
    return this.create19(apiUser, Collections.emptyMap());
  }


  /**
   * Create a standard user
   * 
   * @param apiUser  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return ApiUser
   * @throws ApiException if fails to make API call
   */
  public ApiUser create19(ApiUser apiUser, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = apiUser;
    
    // verify the required parameter 'apiUser' is set
    if (apiUser == null) {
      throw new ApiException(400, "Missing the required parameter 'apiUser' when calling create19");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/tenants/users";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<ApiUser> localVarReturnType = new TypeReference<ApiUser>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Create a standard user
   * 
   * @param ressourceTenant  (required)
   * @param apiUser  (required)
   * @return ApiUser
   * @throws ApiException if fails to make API call
   */
  public ApiUser create24(String ressourceTenant, ApiUser apiUser) throws ApiException {
    return this.create24(ressourceTenant, apiUser, Collections.emptyMap());
  }


  /**
   * Create a standard user
   * 
   * @param ressourceTenant  (required)
   * @param apiUser  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return ApiUser
   * @throws ApiException if fails to make API call
   */
  public ApiUser create24(String ressourceTenant, ApiUser apiUser, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = apiUser;
    
    // verify the required parameter 'ressourceTenant' is set
    if (ressourceTenant == null) {
      throw new ApiException(400, "Missing the required parameter 'ressourceTenant' when calling create24");
    }
    
    // verify the required parameter 'apiUser' is set
    if (apiUser == null) {
      throw new ApiException(400, "Missing the required parameter 'apiUser' when calling create24");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/tenants/{ressourceTenant}/users"
      .replaceAll("\\{" + "ressourceTenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(ressourceTenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<ApiUser> localVarReturnType = new TypeReference<ApiUser>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Create a standard user
   * 
   * @param apiUser  (required)
   * @return ApiUser
   * @throws ApiException if fails to make API call
   */
  public ApiUser create25(ApiUser apiUser) throws ApiException {
    return this.create25(apiUser, Collections.emptyMap());
  }


  /**
   * Create a standard user
   * 
   * @param apiUser  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return ApiUser
   * @throws ApiException if fails to make API call
   */
  public ApiUser create25(ApiUser apiUser, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = apiUser;
    
    // verify the required parameter 'apiUser' is set
    if (apiUser == null) {
      throw new ApiException(400, "Missing the required parameter 'apiUser' when calling create25");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/users";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<ApiUser> localVarReturnType = new TypeReference<ApiUser>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Create a standard user
   * 
   * @param tenant  (required)
   * @param apiUser  (required)
   * @return ApiUser
   * @throws ApiException if fails to make API call
   */
  public ApiUser create44(String tenant, ApiUser apiUser) throws ApiException {
    return this.create44(tenant, apiUser, Collections.emptyMap());
  }


  /**
   * Create a standard user
   * 
   * @param tenant  (required)
   * @param apiUser  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return ApiUser
   * @throws ApiException if fails to make API call
   */
  public ApiUser create44(String tenant, ApiUser apiUser, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = apiUser;
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling create44");
    }
    
    // verify the required parameter 'apiUser' is set
    if (apiUser == null) {
      throw new ApiException(400, "Missing the required parameter 'apiUser' when calling create44");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/tenants/users"
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<ApiUser> localVarReturnType = new TypeReference<ApiUser>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Create a standard user
   * 
   * @param ressourceTenant  (required)
   * @param tenant  (required)
   * @param apiUser  (required)
   * @return ApiUser
   * @throws ApiException if fails to make API call
   */
  public ApiUser create49(String ressourceTenant, String tenant, ApiUser apiUser) throws ApiException {
    return this.create49(ressourceTenant, tenant, apiUser, Collections.emptyMap());
  }


  /**
   * Create a standard user
   * 
   * @param ressourceTenant  (required)
   * @param tenant  (required)
   * @param apiUser  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return ApiUser
   * @throws ApiException if fails to make API call
   */
  public ApiUser create49(String ressourceTenant, String tenant, ApiUser apiUser, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = apiUser;
    
    // verify the required parameter 'ressourceTenant' is set
    if (ressourceTenant == null) {
      throw new ApiException(400, "Missing the required parameter 'ressourceTenant' when calling create49");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling create49");
    }
    
    // verify the required parameter 'apiUser' is set
    if (apiUser == null) {
      throw new ApiException(400, "Missing the required parameter 'apiUser' when calling create49");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/tenants/{ressourceTenant}/users"
      .replaceAll("\\{" + "ressourceTenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(ressourceTenant)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<ApiUser> localVarReturnType = new TypeReference<ApiUser>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Create a standard user
   * 
   * @param tenant  (required)
   * @param apiUser  (required)
   * @return ApiUser
   * @throws ApiException if fails to make API call
   */
  public ApiUser create50(String tenant, ApiUser apiUser) throws ApiException {
    return this.create50(tenant, apiUser, Collections.emptyMap());
  }


  /**
   * Create a standard user
   * 
   * @param tenant  (required)
   * @param apiUser  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return ApiUser
   * @throws ApiException if fails to make API call
   */
  public ApiUser create50(String tenant, ApiUser apiUser, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = apiUser;
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling create50");
    }
    
    // verify the required parameter 'apiUser' is set
    if (apiUser == null) {
      throw new ApiException(400, "Missing the required parameter 'apiUser' when calling create50");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/users"
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<ApiUser> localVarReturnType = new TypeReference<ApiUser>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Create new API Token for a specific user
   * 
   * @param id The user id (required)
   * @param createApiTokenRequest  (required)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object createApiTokensForUser(String id, CreateApiTokenRequest createApiTokenRequest) throws ApiException {
    return this.createApiTokensForUser(id, createApiTokenRequest, Collections.emptyMap());
  }


  /**
   * Create new API Token for a specific user
   * 
   * @param id The user id (required)
   * @param createApiTokenRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object createApiTokensForUser(String id, CreateApiTokenRequest createApiTokenRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = createApiTokenRequest;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling createApiTokensForUser");
    }
    
    // verify the required parameter 'createApiTokenRequest' is set
    if (createApiTokenRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createApiTokenRequest' when calling createApiTokensForUser");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/tenants/users/{id}/api-tokens"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Create new API Token for a specific user
   * 
   * @param id The user id (required)
   * @param ressourceTenant  (required)
   * @param createApiTokenRequest  (required)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object createApiTokensForUser1(String id, String ressourceTenant, CreateApiTokenRequest createApiTokenRequest) throws ApiException {
    return this.createApiTokensForUser1(id, ressourceTenant, createApiTokenRequest, Collections.emptyMap());
  }


  /**
   * Create new API Token for a specific user
   * 
   * @param id The user id (required)
   * @param ressourceTenant  (required)
   * @param createApiTokenRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object createApiTokensForUser1(String id, String ressourceTenant, CreateApiTokenRequest createApiTokenRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = createApiTokenRequest;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling createApiTokensForUser1");
    }
    
    // verify the required parameter 'ressourceTenant' is set
    if (ressourceTenant == null) {
      throw new ApiException(400, "Missing the required parameter 'ressourceTenant' when calling createApiTokensForUser1");
    }
    
    // verify the required parameter 'createApiTokenRequest' is set
    if (createApiTokenRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createApiTokenRequest' when calling createApiTokensForUser1");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/tenants/{ressourceTenant}/users/{id}/api-tokens"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "ressourceTenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(ressourceTenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Create new API Token for a specific user
   * 
   * @param id The user id (required)
   * @param createApiTokenRequest  (required)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object createApiTokensForUser2(String id, CreateApiTokenRequest createApiTokenRequest) throws ApiException {
    return this.createApiTokensForUser2(id, createApiTokenRequest, Collections.emptyMap());
  }


  /**
   * Create new API Token for a specific user
   * 
   * @param id The user id (required)
   * @param createApiTokenRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object createApiTokensForUser2(String id, CreateApiTokenRequest createApiTokenRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = createApiTokenRequest;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling createApiTokensForUser2");
    }
    
    // verify the required parameter 'createApiTokenRequest' is set
    if (createApiTokenRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createApiTokenRequest' when calling createApiTokensForUser2");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/users/{id}/api-tokens"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Create new API Token for a specific user
   * 
   * @param id The user id (required)
   * @param tenant  (required)
   * @param createApiTokenRequest  (required)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object createApiTokensForUser3(String id, String tenant, CreateApiTokenRequest createApiTokenRequest) throws ApiException {
    return this.createApiTokensForUser3(id, tenant, createApiTokenRequest, Collections.emptyMap());
  }


  /**
   * Create new API Token for a specific user
   * 
   * @param id The user id (required)
   * @param tenant  (required)
   * @param createApiTokenRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object createApiTokensForUser3(String id, String tenant, CreateApiTokenRequest createApiTokenRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = createApiTokenRequest;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling createApiTokensForUser3");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling createApiTokensForUser3");
    }
    
    // verify the required parameter 'createApiTokenRequest' is set
    if (createApiTokenRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createApiTokenRequest' when calling createApiTokensForUser3");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/tenants/users/{id}/api-tokens"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Create new API Token for a specific user
   * 
   * @param id The user id (required)
   * @param ressourceTenant  (required)
   * @param tenant  (required)
   * @param createApiTokenRequest  (required)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object createApiTokensForUser4(String id, String ressourceTenant, String tenant, CreateApiTokenRequest createApiTokenRequest) throws ApiException {
    return this.createApiTokensForUser4(id, ressourceTenant, tenant, createApiTokenRequest, Collections.emptyMap());
  }


  /**
   * Create new API Token for a specific user
   * 
   * @param id The user id (required)
   * @param ressourceTenant  (required)
   * @param tenant  (required)
   * @param createApiTokenRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object createApiTokensForUser4(String id, String ressourceTenant, String tenant, CreateApiTokenRequest createApiTokenRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = createApiTokenRequest;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling createApiTokensForUser4");
    }
    
    // verify the required parameter 'ressourceTenant' is set
    if (ressourceTenant == null) {
      throw new ApiException(400, "Missing the required parameter 'ressourceTenant' when calling createApiTokensForUser4");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling createApiTokensForUser4");
    }
    
    // verify the required parameter 'createApiTokenRequest' is set
    if (createApiTokenRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createApiTokenRequest' when calling createApiTokensForUser4");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/tenants/{ressourceTenant}/users/{id}/api-tokens"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "ressourceTenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(ressourceTenant)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Create new API Token for a specific user
   * 
   * @param id The user id (required)
   * @param tenant  (required)
   * @param createApiTokenRequest  (required)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object createApiTokensForUser5(String id, String tenant, CreateApiTokenRequest createApiTokenRequest) throws ApiException {
    return this.createApiTokensForUser5(id, tenant, createApiTokenRequest, Collections.emptyMap());
  }


  /**
   * Create new API Token for a specific user
   * 
   * @param id The user id (required)
   * @param tenant  (required)
   * @param createApiTokenRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object createApiTokensForUser5(String id, String tenant, CreateApiTokenRequest createApiTokenRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = createApiTokenRequest;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling createApiTokensForUser5");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling createApiTokensForUser5");
    }
    
    // verify the required parameter 'createApiTokenRequest' is set
    if (createApiTokenRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createApiTokenRequest' when calling createApiTokensForUser5");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/users/{id}/api-tokens"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Create a user service account
   * 
   * @param apiServiceAccount  (required)
   * @return ApiServiceAccount
   * @throws ApiException if fails to make API call
   */
  public ApiServiceAccount createServiceAccount(ApiServiceAccount apiServiceAccount) throws ApiException {
    return this.createServiceAccount(apiServiceAccount, Collections.emptyMap());
  }


  /**
   * Create a user service account
   * 
   * @param apiServiceAccount  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return ApiServiceAccount
   * @throws ApiException if fails to make API call
   */
  public ApiServiceAccount createServiceAccount(ApiServiceAccount apiServiceAccount, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = apiServiceAccount;
    
    // verify the required parameter 'apiServiceAccount' is set
    if (apiServiceAccount == null) {
      throw new ApiException(400, "Missing the required parameter 'apiServiceAccount' when calling createServiceAccount");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/tenants/users/service-accounts";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<ApiServiceAccount> localVarReturnType = new TypeReference<ApiServiceAccount>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Create a user service account
   * 
   * @param ressourceTenant  (required)
   * @param apiServiceAccount  (required)
   * @return ApiServiceAccount
   * @throws ApiException if fails to make API call
   */
  public ApiServiceAccount createServiceAccount1(String ressourceTenant, ApiServiceAccount apiServiceAccount) throws ApiException {
    return this.createServiceAccount1(ressourceTenant, apiServiceAccount, Collections.emptyMap());
  }


  /**
   * Create a user service account
   * 
   * @param ressourceTenant  (required)
   * @param apiServiceAccount  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return ApiServiceAccount
   * @throws ApiException if fails to make API call
   */
  public ApiServiceAccount createServiceAccount1(String ressourceTenant, ApiServiceAccount apiServiceAccount, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = apiServiceAccount;
    
    // verify the required parameter 'ressourceTenant' is set
    if (ressourceTenant == null) {
      throw new ApiException(400, "Missing the required parameter 'ressourceTenant' when calling createServiceAccount1");
    }
    
    // verify the required parameter 'apiServiceAccount' is set
    if (apiServiceAccount == null) {
      throw new ApiException(400, "Missing the required parameter 'apiServiceAccount' when calling createServiceAccount1");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/tenants/{ressourceTenant}/users/service-accounts"
      .replaceAll("\\{" + "ressourceTenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(ressourceTenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<ApiServiceAccount> localVarReturnType = new TypeReference<ApiServiceAccount>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Create a user service account
   * 
   * @param apiServiceAccount  (required)
   * @return ApiServiceAccount
   * @throws ApiException if fails to make API call
   */
  public ApiServiceAccount createServiceAccount2(ApiServiceAccount apiServiceAccount) throws ApiException {
    return this.createServiceAccount2(apiServiceAccount, Collections.emptyMap());
  }


  /**
   * Create a user service account
   * 
   * @param apiServiceAccount  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return ApiServiceAccount
   * @throws ApiException if fails to make API call
   */
  public ApiServiceAccount createServiceAccount2(ApiServiceAccount apiServiceAccount, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = apiServiceAccount;
    
    // verify the required parameter 'apiServiceAccount' is set
    if (apiServiceAccount == null) {
      throw new ApiException(400, "Missing the required parameter 'apiServiceAccount' when calling createServiceAccount2");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/users/service-accounts";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<ApiServiceAccount> localVarReturnType = new TypeReference<ApiServiceAccount>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Create a user service account
   * 
   * @param tenant  (required)
   * @param apiServiceAccount  (required)
   * @return ApiServiceAccount
   * @throws ApiException if fails to make API call
   */
  public ApiServiceAccount createServiceAccount3(String tenant, ApiServiceAccount apiServiceAccount) throws ApiException {
    return this.createServiceAccount3(tenant, apiServiceAccount, Collections.emptyMap());
  }


  /**
   * Create a user service account
   * 
   * @param tenant  (required)
   * @param apiServiceAccount  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return ApiServiceAccount
   * @throws ApiException if fails to make API call
   */
  public ApiServiceAccount createServiceAccount3(String tenant, ApiServiceAccount apiServiceAccount, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = apiServiceAccount;
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling createServiceAccount3");
    }
    
    // verify the required parameter 'apiServiceAccount' is set
    if (apiServiceAccount == null) {
      throw new ApiException(400, "Missing the required parameter 'apiServiceAccount' when calling createServiceAccount3");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/tenants/users/service-accounts"
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<ApiServiceAccount> localVarReturnType = new TypeReference<ApiServiceAccount>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Create a user service account
   * 
   * @param ressourceTenant  (required)
   * @param tenant  (required)
   * @param apiServiceAccount  (required)
   * @return ApiServiceAccount
   * @throws ApiException if fails to make API call
   */
  public ApiServiceAccount createServiceAccount4(String ressourceTenant, String tenant, ApiServiceAccount apiServiceAccount) throws ApiException {
    return this.createServiceAccount4(ressourceTenant, tenant, apiServiceAccount, Collections.emptyMap());
  }


  /**
   * Create a user service account
   * 
   * @param ressourceTenant  (required)
   * @param tenant  (required)
   * @param apiServiceAccount  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return ApiServiceAccount
   * @throws ApiException if fails to make API call
   */
  public ApiServiceAccount createServiceAccount4(String ressourceTenant, String tenant, ApiServiceAccount apiServiceAccount, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = apiServiceAccount;
    
    // verify the required parameter 'ressourceTenant' is set
    if (ressourceTenant == null) {
      throw new ApiException(400, "Missing the required parameter 'ressourceTenant' when calling createServiceAccount4");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling createServiceAccount4");
    }
    
    // verify the required parameter 'apiServiceAccount' is set
    if (apiServiceAccount == null) {
      throw new ApiException(400, "Missing the required parameter 'apiServiceAccount' when calling createServiceAccount4");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/tenants/{ressourceTenant}/users/service-accounts"
      .replaceAll("\\{" + "ressourceTenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(ressourceTenant)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<ApiServiceAccount> localVarReturnType = new TypeReference<ApiServiceAccount>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Create a user service account
   * 
   * @param tenant  (required)
   * @param apiServiceAccount  (required)
   * @return ApiServiceAccount
   * @throws ApiException if fails to make API call
   */
  public ApiServiceAccount createServiceAccount5(String tenant, ApiServiceAccount apiServiceAccount) throws ApiException {
    return this.createServiceAccount5(tenant, apiServiceAccount, Collections.emptyMap());
  }


  /**
   * Create a user service account
   * 
   * @param tenant  (required)
   * @param apiServiceAccount  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return ApiServiceAccount
   * @throws ApiException if fails to make API call
   */
  public ApiServiceAccount createServiceAccount5(String tenant, ApiServiceAccount apiServiceAccount, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = apiServiceAccount;
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling createServiceAccount5");
    }
    
    // verify the required parameter 'apiServiceAccount' is set
    if (apiServiceAccount == null) {
      throw new ApiException(400, "Missing the required parameter 'apiServiceAccount' when calling createServiceAccount5");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/users/service-accounts"
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<ApiServiceAccount> localVarReturnType = new TypeReference<ApiServiceAccount>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Delete a user
   * 
   * @param id The user id (required)
   * @throws ApiException if fails to make API call
   */
  public void delete21(String id) throws ApiException {
    this.delete21(id, Collections.emptyMap());
  }


  /**
   * Delete a user
   * 
   * @param id The user id (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void delete21(String id, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling delete21");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/tenants/users/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Delete a user
   * 
   * @param id The user id (required)
   * @param ressourceTenant  (required)
   * @throws ApiException if fails to make API call
   */
  public void delete27(String id, String ressourceTenant) throws ApiException {
    this.delete27(id, ressourceTenant, Collections.emptyMap());
  }


  /**
   * Delete a user
   * 
   * @param id The user id (required)
   * @param ressourceTenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void delete27(String id, String ressourceTenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling delete27");
    }
    
    // verify the required parameter 'ressourceTenant' is set
    if (ressourceTenant == null) {
      throw new ApiException(400, "Missing the required parameter 'ressourceTenant' when calling delete27");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/tenants/{ressourceTenant}/users/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "ressourceTenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(ressourceTenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Delete a user
   * 
   * @param id The user id (required)
   * @throws ApiException if fails to make API call
   */
  public void delete28(String id) throws ApiException {
    this.delete28(id, Collections.emptyMap());
  }


  /**
   * Delete a user
   * 
   * @param id The user id (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void delete28(String id, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling delete28");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/users/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Delete a user
   * 
   * @param id The user id (required)
   * @param tenant  (required)
   * @throws ApiException if fails to make API call
   */
  public void delete49(String id, String tenant) throws ApiException {
    this.delete49(id, tenant, Collections.emptyMap());
  }


  /**
   * Delete a user
   * 
   * @param id The user id (required)
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void delete49(String id, String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling delete49");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling delete49");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/tenants/users/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Delete a user
   * 
   * @param id The user id (required)
   * @param ressourceTenant  (required)
   * @param tenant  (required)
   * @throws ApiException if fails to make API call
   */
  public void delete55(String id, String ressourceTenant, String tenant) throws ApiException {
    this.delete55(id, ressourceTenant, tenant, Collections.emptyMap());
  }


  /**
   * Delete a user
   * 
   * @param id The user id (required)
   * @param ressourceTenant  (required)
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void delete55(String id, String ressourceTenant, String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling delete55");
    }
    
    // verify the required parameter 'ressourceTenant' is set
    if (ressourceTenant == null) {
      throw new ApiException(400, "Missing the required parameter 'ressourceTenant' when calling delete55");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling delete55");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/tenants/{ressourceTenant}/users/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "ressourceTenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(ressourceTenant)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Delete a user
   * 
   * @param id The user id (required)
   * @param tenant  (required)
   * @throws ApiException if fails to make API call
   */
  public void delete56(String id, String tenant) throws ApiException {
    this.delete56(id, tenant, Collections.emptyMap());
  }


  /**
   * Delete a user
   * 
   * @param id The user id (required)
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void delete56(String id, String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling delete56");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling delete56");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/users/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Delete an API Token for specific user and token id
   * 
   * @param id The user id (required)
   * @param tokenId The token id (required)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object deleteApiToken1(String id, String tokenId) throws ApiException {
    return this.deleteApiToken1(id, tokenId, Collections.emptyMap());
  }


  /**
   * Delete an API Token for specific user and token id
   * 
   * @param id The user id (required)
   * @param tokenId The token id (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object deleteApiToken1(String id, String tokenId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteApiToken1");
    }
    
    // verify the required parameter 'tokenId' is set
    if (tokenId == null) {
      throw new ApiException(400, "Missing the required parameter 'tokenId' when calling deleteApiToken1");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/tenants/users/{id}/api-tokens/{tokenId}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "tokenId" + "\\}", apiClient.escapeString(apiClient.parameterToString(tokenId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Delete an API Token for specific user and token id
   * 
   * @param id The user id (required)
   * @param tokenId The token id (required)
   * @param ressourceTenant  (required)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object deleteApiToken2(String id, String tokenId, String ressourceTenant) throws ApiException {
    return this.deleteApiToken2(id, tokenId, ressourceTenant, Collections.emptyMap());
  }


  /**
   * Delete an API Token for specific user and token id
   * 
   * @param id The user id (required)
   * @param tokenId The token id (required)
   * @param ressourceTenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object deleteApiToken2(String id, String tokenId, String ressourceTenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteApiToken2");
    }
    
    // verify the required parameter 'tokenId' is set
    if (tokenId == null) {
      throw new ApiException(400, "Missing the required parameter 'tokenId' when calling deleteApiToken2");
    }
    
    // verify the required parameter 'ressourceTenant' is set
    if (ressourceTenant == null) {
      throw new ApiException(400, "Missing the required parameter 'ressourceTenant' when calling deleteApiToken2");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/tenants/{ressourceTenant}/users/{id}/api-tokens/{tokenId}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "tokenId" + "\\}", apiClient.escapeString(apiClient.parameterToString(tokenId)))
      .replaceAll("\\{" + "ressourceTenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(ressourceTenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Delete an API Token for specific user and token id
   * 
   * @param id The user id (required)
   * @param tokenId The token id (required)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object deleteApiToken3(String id, String tokenId) throws ApiException {
    return this.deleteApiToken3(id, tokenId, Collections.emptyMap());
  }


  /**
   * Delete an API Token for specific user and token id
   * 
   * @param id The user id (required)
   * @param tokenId The token id (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object deleteApiToken3(String id, String tokenId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteApiToken3");
    }
    
    // verify the required parameter 'tokenId' is set
    if (tokenId == null) {
      throw new ApiException(400, "Missing the required parameter 'tokenId' when calling deleteApiToken3");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/users/{id}/api-tokens/{tokenId}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "tokenId" + "\\}", apiClient.escapeString(apiClient.parameterToString(tokenId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Delete an API Token for specific user and token id
   * 
   * @param id The user id (required)
   * @param tokenId The token id (required)
   * @param tenant  (required)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object deleteApiToken5(String id, String tokenId, String tenant) throws ApiException {
    return this.deleteApiToken5(id, tokenId, tenant, Collections.emptyMap());
  }


  /**
   * Delete an API Token for specific user and token id
   * 
   * @param id The user id (required)
   * @param tokenId The token id (required)
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object deleteApiToken5(String id, String tokenId, String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteApiToken5");
    }
    
    // verify the required parameter 'tokenId' is set
    if (tokenId == null) {
      throw new ApiException(400, "Missing the required parameter 'tokenId' when calling deleteApiToken5");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling deleteApiToken5");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/tenants/users/{id}/api-tokens/{tokenId}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "tokenId" + "\\}", apiClient.escapeString(apiClient.parameterToString(tokenId)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Delete an API Token for specific user and token id
   * 
   * @param id The user id (required)
   * @param tokenId The token id (required)
   * @param ressourceTenant  (required)
   * @param tenant  (required)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object deleteApiToken6(String id, String tokenId, String ressourceTenant, String tenant) throws ApiException {
    return this.deleteApiToken6(id, tokenId, ressourceTenant, tenant, Collections.emptyMap());
  }


  /**
   * Delete an API Token for specific user and token id
   * 
   * @param id The user id (required)
   * @param tokenId The token id (required)
   * @param ressourceTenant  (required)
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object deleteApiToken6(String id, String tokenId, String ressourceTenant, String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteApiToken6");
    }
    
    // verify the required parameter 'tokenId' is set
    if (tokenId == null) {
      throw new ApiException(400, "Missing the required parameter 'tokenId' when calling deleteApiToken6");
    }
    
    // verify the required parameter 'ressourceTenant' is set
    if (ressourceTenant == null) {
      throw new ApiException(400, "Missing the required parameter 'ressourceTenant' when calling deleteApiToken6");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling deleteApiToken6");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/tenants/{ressourceTenant}/users/{id}/api-tokens/{tokenId}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "tokenId" + "\\}", apiClient.escapeString(apiClient.parameterToString(tokenId)))
      .replaceAll("\\{" + "ressourceTenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(ressourceTenant)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Delete an API Token for specific user and token id
   * 
   * @param id The user id (required)
   * @param tokenId The token id (required)
   * @param tenant  (required)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object deleteApiToken7(String id, String tokenId, String tenant) throws ApiException {
    return this.deleteApiToken7(id, tokenId, tenant, Collections.emptyMap());
  }


  /**
   * Delete an API Token for specific user and token id
   * 
   * @param id The user id (required)
   * @param tokenId The token id (required)
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object deleteApiToken7(String id, String tokenId, String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteApiToken7");
    }
    
    // verify the required parameter 'tokenId' is set
    if (tokenId == null) {
      throw new ApiException(400, "Missing the required parameter 'tokenId' when calling deleteApiToken7");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling deleteApiToken7");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/users/{id}/api-tokens/{tokenId}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "tokenId" + "\\}", apiClient.escapeString(apiClient.parameterToString(tokenId)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Delete an Auth for a user
   * 
   * @param id The user id (required)
   * @param uid The auth id (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteAuth(String id, String uid) throws ApiException {
    this.deleteAuth(id, uid, Collections.emptyMap());
  }


  /**
   * Delete an Auth for a user
   * 
   * @param id The user id (required)
   * @param uid The auth id (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void deleteAuth(String id, String uid, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteAuth");
    }
    
    // verify the required parameter 'uid' is set
    if (uid == null) {
      throw new ApiException(400, "Missing the required parameter 'uid' when calling deleteAuth");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/tenants/users/{id}/auths/{uid}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "uid" + "\\}", apiClient.escapeString(apiClient.parameterToString(uid)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Delete an Auth for a user
   * 
   * @param id The user id (required)
   * @param uid The auth id (required)
   * @param ressourceTenant  (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteAuth1(String id, String uid, String ressourceTenant) throws ApiException {
    this.deleteAuth1(id, uid, ressourceTenant, Collections.emptyMap());
  }


  /**
   * Delete an Auth for a user
   * 
   * @param id The user id (required)
   * @param uid The auth id (required)
   * @param ressourceTenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void deleteAuth1(String id, String uid, String ressourceTenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteAuth1");
    }
    
    // verify the required parameter 'uid' is set
    if (uid == null) {
      throw new ApiException(400, "Missing the required parameter 'uid' when calling deleteAuth1");
    }
    
    // verify the required parameter 'ressourceTenant' is set
    if (ressourceTenant == null) {
      throw new ApiException(400, "Missing the required parameter 'ressourceTenant' when calling deleteAuth1");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/tenants/{ressourceTenant}/users/{id}/auths/{uid}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "uid" + "\\}", apiClient.escapeString(apiClient.parameterToString(uid)))
      .replaceAll("\\{" + "ressourceTenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(ressourceTenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Delete an Auth for a user
   * 
   * @param id The user id (required)
   * @param uid The auth id (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteAuth2(String id, String uid) throws ApiException {
    this.deleteAuth2(id, uid, Collections.emptyMap());
  }


  /**
   * Delete an Auth for a user
   * 
   * @param id The user id (required)
   * @param uid The auth id (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void deleteAuth2(String id, String uid, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteAuth2");
    }
    
    // verify the required parameter 'uid' is set
    if (uid == null) {
      throw new ApiException(400, "Missing the required parameter 'uid' when calling deleteAuth2");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/users/{id}/auths/{uid}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "uid" + "\\}", apiClient.escapeString(apiClient.parameterToString(uid)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Delete an Auth for a user
   * 
   * @param id The user id (required)
   * @param uid The auth id (required)
   * @param tenant  (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteAuth3(String id, String uid, String tenant) throws ApiException {
    this.deleteAuth3(id, uid, tenant, Collections.emptyMap());
  }


  /**
   * Delete an Auth for a user
   * 
   * @param id The user id (required)
   * @param uid The auth id (required)
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void deleteAuth3(String id, String uid, String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteAuth3");
    }
    
    // verify the required parameter 'uid' is set
    if (uid == null) {
      throw new ApiException(400, "Missing the required parameter 'uid' when calling deleteAuth3");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling deleteAuth3");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/tenants/users/{id}/auths/{uid}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "uid" + "\\}", apiClient.escapeString(apiClient.parameterToString(uid)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Delete an Auth for a user
   * 
   * @param id The user id (required)
   * @param uid The auth id (required)
   * @param ressourceTenant  (required)
   * @param tenant  (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteAuth4(String id, String uid, String ressourceTenant, String tenant) throws ApiException {
    this.deleteAuth4(id, uid, ressourceTenant, tenant, Collections.emptyMap());
  }


  /**
   * Delete an Auth for a user
   * 
   * @param id The user id (required)
   * @param uid The auth id (required)
   * @param ressourceTenant  (required)
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void deleteAuth4(String id, String uid, String ressourceTenant, String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteAuth4");
    }
    
    // verify the required parameter 'uid' is set
    if (uid == null) {
      throw new ApiException(400, "Missing the required parameter 'uid' when calling deleteAuth4");
    }
    
    // verify the required parameter 'ressourceTenant' is set
    if (ressourceTenant == null) {
      throw new ApiException(400, "Missing the required parameter 'ressourceTenant' when calling deleteAuth4");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling deleteAuth4");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/tenants/{ressourceTenant}/users/{id}/auths/{uid}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "uid" + "\\}", apiClient.escapeString(apiClient.parameterToString(uid)))
      .replaceAll("\\{" + "ressourceTenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(ressourceTenant)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Delete an Auth for a user
   * 
   * @param id The user id (required)
   * @param uid The auth id (required)
   * @param tenant  (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteAuth5(String id, String uid, String tenant) throws ApiException {
    this.deleteAuth5(id, uid, tenant, Collections.emptyMap());
  }


  /**
   * Delete an Auth for a user
   * 
   * @param id The user id (required)
   * @param uid The auth id (required)
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void deleteAuth5(String id, String uid, String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteAuth5");
    }
    
    // verify the required parameter 'uid' is set
    if (uid == null) {
      throw new ApiException(400, "Missing the required parameter 'uid' when calling deleteAuth5");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling deleteAuth5");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/users/{id}/auths/{uid}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "uid" + "\\}", apiClient.escapeString(apiClient.parameterToString(uid)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Delete a user refresh token
   * 
   * @param id The user id (required)
   * @return ApiUser
   * @throws ApiException if fails to make API call
   */
  public ApiUser deleteRefreshToken(String id) throws ApiException {
    return this.deleteRefreshToken(id, Collections.emptyMap());
  }


  /**
   * Delete a user refresh token
   * 
   * @param id The user id (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return ApiUser
   * @throws ApiException if fails to make API call
   */
  public ApiUser deleteRefreshToken(String id, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteRefreshToken");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/tenants/users/{id}/refresh-token"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<ApiUser> localVarReturnType = new TypeReference<ApiUser>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Delete a user refresh token
   * 
   * @param id The user id (required)
   * @param ressourceTenant  (required)
   * @return ApiUser
   * @throws ApiException if fails to make API call
   */
  public ApiUser deleteRefreshToken1(String id, String ressourceTenant) throws ApiException {
    return this.deleteRefreshToken1(id, ressourceTenant, Collections.emptyMap());
  }


  /**
   * Delete a user refresh token
   * 
   * @param id The user id (required)
   * @param ressourceTenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return ApiUser
   * @throws ApiException if fails to make API call
   */
  public ApiUser deleteRefreshToken1(String id, String ressourceTenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteRefreshToken1");
    }
    
    // verify the required parameter 'ressourceTenant' is set
    if (ressourceTenant == null) {
      throw new ApiException(400, "Missing the required parameter 'ressourceTenant' when calling deleteRefreshToken1");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/tenants/{ressourceTenant}/users/{id}/refresh-token"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "ressourceTenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(ressourceTenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<ApiUser> localVarReturnType = new TypeReference<ApiUser>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Delete a user refresh token
   * 
   * @param id The user id (required)
   * @return ApiUser
   * @throws ApiException if fails to make API call
   */
  public ApiUser deleteRefreshToken2(String id) throws ApiException {
    return this.deleteRefreshToken2(id, Collections.emptyMap());
  }


  /**
   * Delete a user refresh token
   * 
   * @param id The user id (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return ApiUser
   * @throws ApiException if fails to make API call
   */
  public ApiUser deleteRefreshToken2(String id, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteRefreshToken2");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/users/{id}/refresh-token"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<ApiUser> localVarReturnType = new TypeReference<ApiUser>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Delete a user refresh token
   * 
   * @param id The user id (required)
   * @param tenant  (required)
   * @return ApiUser
   * @throws ApiException if fails to make API call
   */
  public ApiUser deleteRefreshToken3(String id, String tenant) throws ApiException {
    return this.deleteRefreshToken3(id, tenant, Collections.emptyMap());
  }


  /**
   * Delete a user refresh token
   * 
   * @param id The user id (required)
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return ApiUser
   * @throws ApiException if fails to make API call
   */
  public ApiUser deleteRefreshToken3(String id, String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteRefreshToken3");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling deleteRefreshToken3");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/tenants/users/{id}/refresh-token"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<ApiUser> localVarReturnType = new TypeReference<ApiUser>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Delete a user refresh token
   * 
   * @param id The user id (required)
   * @param ressourceTenant  (required)
   * @param tenant  (required)
   * @return ApiUser
   * @throws ApiException if fails to make API call
   */
  public ApiUser deleteRefreshToken4(String id, String ressourceTenant, String tenant) throws ApiException {
    return this.deleteRefreshToken4(id, ressourceTenant, tenant, Collections.emptyMap());
  }


  /**
   * Delete a user refresh token
   * 
   * @param id The user id (required)
   * @param ressourceTenant  (required)
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return ApiUser
   * @throws ApiException if fails to make API call
   */
  public ApiUser deleteRefreshToken4(String id, String ressourceTenant, String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteRefreshToken4");
    }
    
    // verify the required parameter 'ressourceTenant' is set
    if (ressourceTenant == null) {
      throw new ApiException(400, "Missing the required parameter 'ressourceTenant' when calling deleteRefreshToken4");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling deleteRefreshToken4");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/tenants/{ressourceTenant}/users/{id}/refresh-token"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "ressourceTenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(ressourceTenant)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<ApiUser> localVarReturnType = new TypeReference<ApiUser>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Delete a user refresh token
   * 
   * @param id The user id (required)
   * @param tenant  (required)
   * @return ApiUser
   * @throws ApiException if fails to make API call
   */
  public ApiUser deleteRefreshToken5(String id, String tenant) throws ApiException {
    return this.deleteRefreshToken5(id, tenant, Collections.emptyMap());
  }


  /**
   * Delete a user refresh token
   * 
   * @param id The user id (required)
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return ApiUser
   * @throws ApiException if fails to make API call
   */
  public ApiUser deleteRefreshToken5(String id, String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteRefreshToken5");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling deleteRefreshToken5");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/users/{id}/refresh-token"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<ApiUser> localVarReturnType = new TypeReference<ApiUser>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Search for users
   * 
   * @param page The current page (required)
   * @param size The current page size (required)
   * @param q A string filter (optional)
   * @param sort The sort of current page (optional)
   * @param type The type of user (optional)
   * @return PagedResultsApiUser
   * @throws ApiException if fails to make API call
   */
  public PagedResultsApiUser find19(Integer page, Integer size, String q, List<String> sort, UserType type) throws ApiException {
    return this.find19(page, size, q, sort, type, Collections.emptyMap());
  }


  /**
   * Search for users
   * 
   * @param page The current page (required)
   * @param size The current page size (required)
   * @param q A string filter (optional)
   * @param sort The sort of current page (optional)
   * @param type The type of user (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return PagedResultsApiUser
   * @throws ApiException if fails to make API call
   */
  public PagedResultsApiUser find19(Integer page, Integer size, String q, List<String> sort, UserType type, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'page' is set
    if (page == null) {
      throw new ApiException(400, "Missing the required parameter 'page' when calling find19");
    }
    
    // verify the required parameter 'size' is set
    if (size == null) {
      throw new ApiException(400, "Missing the required parameter 'size' when calling find19");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/tenants/users/search";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
    localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
    localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sort", sort));
    localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<PagedResultsApiUser> localVarReturnType = new TypeReference<PagedResultsApiUser>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Search for users
   * 
   * @param page The current page (required)
   * @param size The current page size (required)
   * @param ressourceTenant  (required)
   * @param q A string filter (optional)
   * @param sort The sort of current page (optional)
   * @param type The type of user (optional)
   * @return PagedResultsApiUser
   * @throws ApiException if fails to make API call
   */
  public PagedResultsApiUser find24(Integer page, Integer size, String ressourceTenant, String q, List<String> sort, UserType type) throws ApiException {
    return this.find24(page, size, ressourceTenant, q, sort, type, Collections.emptyMap());
  }


  /**
   * Search for users
   * 
   * @param page The current page (required)
   * @param size The current page size (required)
   * @param ressourceTenant  (required)
   * @param q A string filter (optional)
   * @param sort The sort of current page (optional)
   * @param type The type of user (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return PagedResultsApiUser
   * @throws ApiException if fails to make API call
   */
  public PagedResultsApiUser find24(Integer page, Integer size, String ressourceTenant, String q, List<String> sort, UserType type, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'page' is set
    if (page == null) {
      throw new ApiException(400, "Missing the required parameter 'page' when calling find24");
    }
    
    // verify the required parameter 'size' is set
    if (size == null) {
      throw new ApiException(400, "Missing the required parameter 'size' when calling find24");
    }
    
    // verify the required parameter 'ressourceTenant' is set
    if (ressourceTenant == null) {
      throw new ApiException(400, "Missing the required parameter 'ressourceTenant' when calling find24");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/tenants/{ressourceTenant}/users/search"
      .replaceAll("\\{" + "ressourceTenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(ressourceTenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
    localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
    localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sort", sort));
    localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<PagedResultsApiUser> localVarReturnType = new TypeReference<PagedResultsApiUser>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Search for users
   * 
   * @param page The current page (required)
   * @param size The current page size (required)
   * @param q A string filter (optional)
   * @param sort The sort of current page (optional)
   * @param type The type of user (optional)
   * @return PagedResultsApiUser
   * @throws ApiException if fails to make API call
   */
  public PagedResultsApiUser find26(Integer page, Integer size, String q, List<String> sort, UserType type) throws ApiException {
    return this.find26(page, size, q, sort, type, Collections.emptyMap());
  }


  /**
   * Search for users
   * 
   * @param page The current page (required)
   * @param size The current page size (required)
   * @param q A string filter (optional)
   * @param sort The sort of current page (optional)
   * @param type The type of user (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return PagedResultsApiUser
   * @throws ApiException if fails to make API call
   */
  public PagedResultsApiUser find26(Integer page, Integer size, String q, List<String> sort, UserType type, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'page' is set
    if (page == null) {
      throw new ApiException(400, "Missing the required parameter 'page' when calling find26");
    }
    
    // verify the required parameter 'size' is set
    if (size == null) {
      throw new ApiException(400, "Missing the required parameter 'size' when calling find26");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/users/search";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
    localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
    localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sort", sort));
    localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<PagedResultsApiUser> localVarReturnType = new TypeReference<PagedResultsApiUser>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Search for users
   * 
   * @param page The current page (required)
   * @param size The current page size (required)
   * @param tenant  (required)
   * @param q A string filter (optional)
   * @param sort The sort of current page (optional)
   * @param type The type of user (optional)
   * @return PagedResultsApiUser
   * @throws ApiException if fails to make API call
   */
  public PagedResultsApiUser find45(Integer page, Integer size, String tenant, String q, List<String> sort, UserType type) throws ApiException {
    return this.find45(page, size, tenant, q, sort, type, Collections.emptyMap());
  }


  /**
   * Search for users
   * 
   * @param page The current page (required)
   * @param size The current page size (required)
   * @param tenant  (required)
   * @param q A string filter (optional)
   * @param sort The sort of current page (optional)
   * @param type The type of user (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return PagedResultsApiUser
   * @throws ApiException if fails to make API call
   */
  public PagedResultsApiUser find45(Integer page, Integer size, String tenant, String q, List<String> sort, UserType type, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'page' is set
    if (page == null) {
      throw new ApiException(400, "Missing the required parameter 'page' when calling find45");
    }
    
    // verify the required parameter 'size' is set
    if (size == null) {
      throw new ApiException(400, "Missing the required parameter 'size' when calling find45");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling find45");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/tenants/users/search"
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
    localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
    localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sort", sort));
    localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<PagedResultsApiUser> localVarReturnType = new TypeReference<PagedResultsApiUser>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Search for users
   * 
   * @param page The current page (required)
   * @param size The current page size (required)
   * @param ressourceTenant  (required)
   * @param tenant  (required)
   * @param q A string filter (optional)
   * @param sort The sort of current page (optional)
   * @param type The type of user (optional)
   * @return PagedResultsApiUser
   * @throws ApiException if fails to make API call
   */
  public PagedResultsApiUser find50(Integer page, Integer size, String ressourceTenant, String tenant, String q, List<String> sort, UserType type) throws ApiException {
    return this.find50(page, size, ressourceTenant, tenant, q, sort, type, Collections.emptyMap());
  }


  /**
   * Search for users
   * 
   * @param page The current page (required)
   * @param size The current page size (required)
   * @param ressourceTenant  (required)
   * @param tenant  (required)
   * @param q A string filter (optional)
   * @param sort The sort of current page (optional)
   * @param type The type of user (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return PagedResultsApiUser
   * @throws ApiException if fails to make API call
   */
  public PagedResultsApiUser find50(Integer page, Integer size, String ressourceTenant, String tenant, String q, List<String> sort, UserType type, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'page' is set
    if (page == null) {
      throw new ApiException(400, "Missing the required parameter 'page' when calling find50");
    }
    
    // verify the required parameter 'size' is set
    if (size == null) {
      throw new ApiException(400, "Missing the required parameter 'size' when calling find50");
    }
    
    // verify the required parameter 'ressourceTenant' is set
    if (ressourceTenant == null) {
      throw new ApiException(400, "Missing the required parameter 'ressourceTenant' when calling find50");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling find50");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/tenants/{ressourceTenant}/users/search"
      .replaceAll("\\{" + "ressourceTenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(ressourceTenant)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
    localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
    localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sort", sort));
    localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<PagedResultsApiUser> localVarReturnType = new TypeReference<PagedResultsApiUser>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Search for users
   * 
   * @param page The current page (required)
   * @param size The current page size (required)
   * @param tenant  (required)
   * @param q A string filter (optional)
   * @param sort The sort of current page (optional)
   * @param type The type of user (optional)
   * @return PagedResultsApiUser
   * @throws ApiException if fails to make API call
   */
  public PagedResultsApiUser find52(Integer page, Integer size, String tenant, String q, List<String> sort, UserType type) throws ApiException {
    return this.find52(page, size, tenant, q, sort, type, Collections.emptyMap());
  }


  /**
   * Search for users
   * 
   * @param page The current page (required)
   * @param size The current page size (required)
   * @param tenant  (required)
   * @param q A string filter (optional)
   * @param sort The sort of current page (optional)
   * @param type The type of user (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return PagedResultsApiUser
   * @throws ApiException if fails to make API call
   */
  public PagedResultsApiUser find52(Integer page, Integer size, String tenant, String q, List<String> sort, UserType type, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'page' is set
    if (page == null) {
      throw new ApiException(400, "Missing the required parameter 'page' when calling find52");
    }
    
    // verify the required parameter 'size' is set
    if (size == null) {
      throw new ApiException(400, "Missing the required parameter 'size' when calling find52");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling find52");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/users/search"
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
    localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
    localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sort", sort));
    localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<PagedResultsApiUser> localVarReturnType = new TypeReference<PagedResultsApiUser>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get all users in the instance across all tenantd
   * 
   * @param page The current page (required)
   * @param size The current page size (required)
   * @param q A string filter (optional)
   * @param sort The sort of current page (optional)
   * @param type The type of user (optional)
   * @return PagedResultsApiUser
   * @throws ApiException if fails to make API call
   */
  public PagedResultsApiUser findAllForAllTenants(Integer page, Integer size, String q, List<String> sort, UserType type) throws ApiException {
    return this.findAllForAllTenants(page, size, q, sort, type, Collections.emptyMap());
  }


  /**
   * Get all users in the instance across all tenantd
   * 
   * @param page The current page (required)
   * @param size The current page size (required)
   * @param q A string filter (optional)
   * @param sort The sort of current page (optional)
   * @param type The type of user (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return PagedResultsApiUser
   * @throws ApiException if fails to make API call
   */
  public PagedResultsApiUser findAllForAllTenants(Integer page, Integer size, String q, List<String> sort, UserType type, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'page' is set
    if (page == null) {
      throw new ApiException(400, "Missing the required parameter 'page' when calling findAllForAllTenants");
    }
    
    // verify the required parameter 'size' is set
    if (size == null) {
      throw new ApiException(400, "Missing the required parameter 'size' when calling findAllForAllTenants");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/tenants/users/instance";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
    localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
    localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sort", sort));
    localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<PagedResultsApiUser> localVarReturnType = new TypeReference<PagedResultsApiUser>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get all users in the instance across all tenantd
   * 
   * @param page The current page (required)
   * @param size The current page size (required)
   * @param ressourceTenant  (required)
   * @param q A string filter (optional)
   * @param sort The sort of current page (optional)
   * @param type The type of user (optional)
   * @return PagedResultsApiUser
   * @throws ApiException if fails to make API call
   */
  public PagedResultsApiUser findAllForAllTenants1(Integer page, Integer size, String ressourceTenant, String q, List<String> sort, UserType type) throws ApiException {
    return this.findAllForAllTenants1(page, size, ressourceTenant, q, sort, type, Collections.emptyMap());
  }


  /**
   * Get all users in the instance across all tenantd
   * 
   * @param page The current page (required)
   * @param size The current page size (required)
   * @param ressourceTenant  (required)
   * @param q A string filter (optional)
   * @param sort The sort of current page (optional)
   * @param type The type of user (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return PagedResultsApiUser
   * @throws ApiException if fails to make API call
   */
  public PagedResultsApiUser findAllForAllTenants1(Integer page, Integer size, String ressourceTenant, String q, List<String> sort, UserType type, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'page' is set
    if (page == null) {
      throw new ApiException(400, "Missing the required parameter 'page' when calling findAllForAllTenants1");
    }
    
    // verify the required parameter 'size' is set
    if (size == null) {
      throw new ApiException(400, "Missing the required parameter 'size' when calling findAllForAllTenants1");
    }
    
    // verify the required parameter 'ressourceTenant' is set
    if (ressourceTenant == null) {
      throw new ApiException(400, "Missing the required parameter 'ressourceTenant' when calling findAllForAllTenants1");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/tenants/{ressourceTenant}/users/instance"
      .replaceAll("\\{" + "ressourceTenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(ressourceTenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
    localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
    localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sort", sort));
    localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<PagedResultsApiUser> localVarReturnType = new TypeReference<PagedResultsApiUser>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get all users in the instance across all tenantd
   * 
   * @param page The current page (required)
   * @param size The current page size (required)
   * @param tenant  (required)
   * @param q A string filter (optional)
   * @param sort The sort of current page (optional)
   * @param type The type of user (optional)
   * @return PagedResultsApiUser
   * @throws ApiException if fails to make API call
   */
  public PagedResultsApiUser findAllForAllTenants2(Integer page, Integer size, String tenant, String q, List<String> sort, UserType type) throws ApiException {
    return this.findAllForAllTenants2(page, size, tenant, q, sort, type, Collections.emptyMap());
  }


  /**
   * Get all users in the instance across all tenantd
   * 
   * @param page The current page (required)
   * @param size The current page size (required)
   * @param tenant  (required)
   * @param q A string filter (optional)
   * @param sort The sort of current page (optional)
   * @param type The type of user (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return PagedResultsApiUser
   * @throws ApiException if fails to make API call
   */
  public PagedResultsApiUser findAllForAllTenants2(Integer page, Integer size, String tenant, String q, List<String> sort, UserType type, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'page' is set
    if (page == null) {
      throw new ApiException(400, "Missing the required parameter 'page' when calling findAllForAllTenants2");
    }
    
    // verify the required parameter 'size' is set
    if (size == null) {
      throw new ApiException(400, "Missing the required parameter 'size' when calling findAllForAllTenants2");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling findAllForAllTenants2");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/tenants/users/instance"
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
    localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
    localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sort", sort));
    localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<PagedResultsApiUser> localVarReturnType = new TypeReference<PagedResultsApiUser>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get all users in the instance across all tenantd
   * 
   * @param page The current page (required)
   * @param size The current page size (required)
   * @param ressourceTenant  (required)
   * @param tenant  (required)
   * @param q A string filter (optional)
   * @param sort The sort of current page (optional)
   * @param type The type of user (optional)
   * @return PagedResultsApiUser
   * @throws ApiException if fails to make API call
   */
  public PagedResultsApiUser findAllForAllTenants3(Integer page, Integer size, String ressourceTenant, String tenant, String q, List<String> sort, UserType type) throws ApiException {
    return this.findAllForAllTenants3(page, size, ressourceTenant, tenant, q, sort, type, Collections.emptyMap());
  }


  /**
   * Get all users in the instance across all tenantd
   * 
   * @param page The current page (required)
   * @param size The current page size (required)
   * @param ressourceTenant  (required)
   * @param tenant  (required)
   * @param q A string filter (optional)
   * @param sort The sort of current page (optional)
   * @param type The type of user (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return PagedResultsApiUser
   * @throws ApiException if fails to make API call
   */
  public PagedResultsApiUser findAllForAllTenants3(Integer page, Integer size, String ressourceTenant, String tenant, String q, List<String> sort, UserType type, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'page' is set
    if (page == null) {
      throw new ApiException(400, "Missing the required parameter 'page' when calling findAllForAllTenants3");
    }
    
    // verify the required parameter 'size' is set
    if (size == null) {
      throw new ApiException(400, "Missing the required parameter 'size' when calling findAllForAllTenants3");
    }
    
    // verify the required parameter 'ressourceTenant' is set
    if (ressourceTenant == null) {
      throw new ApiException(400, "Missing the required parameter 'ressourceTenant' when calling findAllForAllTenants3");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling findAllForAllTenants3");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/tenants/{ressourceTenant}/users/instance"
      .replaceAll("\\{" + "ressourceTenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(ressourceTenant)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
    localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
    localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sort", sort));
    localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<PagedResultsApiUser> localVarReturnType = new TypeReference<PagedResultsApiUser>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Impersonate a user
   * 
   * @param id The user id (required)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object impersonate(String id) throws ApiException {
    return this.impersonate(id, Collections.emptyMap());
  }


  /**
   * Impersonate a user
   * 
   * @param id The user id (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object impersonate(String id, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling impersonate");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/tenants/users/{id}/impersonate"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Impersonate a user
   * 
   * @param id The user id (required)
   * @param ressourceTenant  (required)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object impersonate1(String id, String ressourceTenant) throws ApiException {
    return this.impersonate1(id, ressourceTenant, Collections.emptyMap());
  }


  /**
   * Impersonate a user
   * 
   * @param id The user id (required)
   * @param ressourceTenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object impersonate1(String id, String ressourceTenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling impersonate1");
    }
    
    // verify the required parameter 'ressourceTenant' is set
    if (ressourceTenant == null) {
      throw new ApiException(400, "Missing the required parameter 'ressourceTenant' when calling impersonate1");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/tenants/{ressourceTenant}/users/{id}/impersonate"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "ressourceTenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(ressourceTenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Impersonate a user
   * 
   * @param id The user id (required)
   * @param tenant  (required)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object impersonate2(String id, String tenant) throws ApiException {
    return this.impersonate2(id, tenant, Collections.emptyMap());
  }


  /**
   * Impersonate a user
   * 
   * @param id The user id (required)
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object impersonate2(String id, String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling impersonate2");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling impersonate2");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/tenants/users/{id}/impersonate"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Impersonate a user
   * 
   * @param id The user id (required)
   * @param ressourceTenant  (required)
   * @param tenant  (required)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object impersonate3(String id, String ressourceTenant, String tenant) throws ApiException {
    return this.impersonate3(id, ressourceTenant, tenant, Collections.emptyMap());
  }


  /**
   * Impersonate a user
   * 
   * @param id The user id (required)
   * @param ressourceTenant  (required)
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object impersonate3(String id, String ressourceTenant, String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling impersonate3");
    }
    
    // verify the required parameter 'ressourceTenant' is set
    if (ressourceTenant == null) {
      throw new ApiException(400, "Missing the required parameter 'ressourceTenant' when calling impersonate3");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling impersonate3");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/tenants/{ressourceTenant}/users/{id}/impersonate"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "ressourceTenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(ressourceTenant)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get a user
   * 
   * @param id The user id (required)
   * @throws ApiException if fails to make API call
   */
  public void index13(String id) throws ApiException {
    this.index13(id, Collections.emptyMap());
  }


  /**
   * Get a user
   * 
   * @param id The user id (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void index13(String id, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling index13");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/tenants/users/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Create a basic auth password for a standard user
   * 
   * @param id The user id (required)
   * @param abstractUserControllerPasswordRequest  (required)
   * @return ApiUser
   * @throws ApiException if fails to make API call
   */
  public ApiUser index14(String id, AbstractUserControllerPasswordRequest abstractUserControllerPasswordRequest) throws ApiException {
    return this.index14(id, abstractUserControllerPasswordRequest, Collections.emptyMap());
  }


  /**
   * Create a basic auth password for a standard user
   * 
   * @param id The user id (required)
   * @param abstractUserControllerPasswordRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return ApiUser
   * @throws ApiException if fails to make API call
   */
  public ApiUser index14(String id, AbstractUserControllerPasswordRequest abstractUserControllerPasswordRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = abstractUserControllerPasswordRequest;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling index14");
    }
    
    // verify the required parameter 'abstractUserControllerPasswordRequest' is set
    if (abstractUserControllerPasswordRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'abstractUserControllerPasswordRequest' when calling index14");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/tenants/users/{id}/password"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<ApiUser> localVarReturnType = new TypeReference<ApiUser>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "PUT",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get a user
   * 
   * @param id The user id (required)
   * @param ressourceTenant  (required)
   * @throws ApiException if fails to make API call
   */
  public void index18(String id, String ressourceTenant) throws ApiException {
    this.index18(id, ressourceTenant, Collections.emptyMap());
  }


  /**
   * Get a user
   * 
   * @param id The user id (required)
   * @param ressourceTenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void index18(String id, String ressourceTenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling index18");
    }
    
    // verify the required parameter 'ressourceTenant' is set
    if (ressourceTenant == null) {
      throw new ApiException(400, "Missing the required parameter 'ressourceTenant' when calling index18");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/tenants/{ressourceTenant}/users/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "ressourceTenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(ressourceTenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Create a basic auth password for a standard user
   * 
   * @param id The user id (required)
   * @param ressourceTenant  (required)
   * @param abstractUserControllerPasswordRequest  (required)
   * @return ApiUser
   * @throws ApiException if fails to make API call
   */
  public ApiUser index19(String id, String ressourceTenant, AbstractUserControllerPasswordRequest abstractUserControllerPasswordRequest) throws ApiException {
    return this.index19(id, ressourceTenant, abstractUserControllerPasswordRequest, Collections.emptyMap());
  }


  /**
   * Create a basic auth password for a standard user
   * 
   * @param id The user id (required)
   * @param ressourceTenant  (required)
   * @param abstractUserControllerPasswordRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return ApiUser
   * @throws ApiException if fails to make API call
   */
  public ApiUser index19(String id, String ressourceTenant, AbstractUserControllerPasswordRequest abstractUserControllerPasswordRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = abstractUserControllerPasswordRequest;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling index19");
    }
    
    // verify the required parameter 'ressourceTenant' is set
    if (ressourceTenant == null) {
      throw new ApiException(400, "Missing the required parameter 'ressourceTenant' when calling index19");
    }
    
    // verify the required parameter 'abstractUserControllerPasswordRequest' is set
    if (abstractUserControllerPasswordRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'abstractUserControllerPasswordRequest' when calling index19");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/tenants/{ressourceTenant}/users/{id}/password"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "ressourceTenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(ressourceTenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<ApiUser> localVarReturnType = new TypeReference<ApiUser>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "PUT",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get a user
   * 
   * @param id The user id (required)
   * @throws ApiException if fails to make API call
   */
  public void index20(String id) throws ApiException {
    this.index20(id, Collections.emptyMap());
  }


  /**
   * Get a user
   * 
   * @param id The user id (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void index20(String id, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling index20");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/users/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Create a basic auth password for a standard user
   * 
   * @param id The user id (required)
   * @param abstractUserControllerPasswordRequest  (required)
   * @return ApiUser
   * @throws ApiException if fails to make API call
   */
  public ApiUser index21(String id, AbstractUserControllerPasswordRequest abstractUserControllerPasswordRequest) throws ApiException {
    return this.index21(id, abstractUserControllerPasswordRequest, Collections.emptyMap());
  }


  /**
   * Create a basic auth password for a standard user
   * 
   * @param id The user id (required)
   * @param abstractUserControllerPasswordRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return ApiUser
   * @throws ApiException if fails to make API call
   */
  public ApiUser index21(String id, AbstractUserControllerPasswordRequest abstractUserControllerPasswordRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = abstractUserControllerPasswordRequest;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling index21");
    }
    
    // verify the required parameter 'abstractUserControllerPasswordRequest' is set
    if (abstractUserControllerPasswordRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'abstractUserControllerPasswordRequest' when calling index21");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/users/{id}/password"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<ApiUser> localVarReturnType = new TypeReference<ApiUser>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "PUT",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get a user
   * 
   * @param id The user id (required)
   * @param tenant  (required)
   * @throws ApiException if fails to make API call
   */
  public void index34(String id, String tenant) throws ApiException {
    this.index34(id, tenant, Collections.emptyMap());
  }


  /**
   * Get a user
   * 
   * @param id The user id (required)
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void index34(String id, String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling index34");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling index34");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/tenants/users/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Create a basic auth password for a standard user
   * 
   * @param id The user id (required)
   * @param tenant  (required)
   * @param abstractUserControllerPasswordRequest  (required)
   * @return ApiUser
   * @throws ApiException if fails to make API call
   */
  public ApiUser index35(String id, String tenant, AbstractUserControllerPasswordRequest abstractUserControllerPasswordRequest) throws ApiException {
    return this.index35(id, tenant, abstractUserControllerPasswordRequest, Collections.emptyMap());
  }


  /**
   * Create a basic auth password for a standard user
   * 
   * @param id The user id (required)
   * @param tenant  (required)
   * @param abstractUserControllerPasswordRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return ApiUser
   * @throws ApiException if fails to make API call
   */
  public ApiUser index35(String id, String tenant, AbstractUserControllerPasswordRequest abstractUserControllerPasswordRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = abstractUserControllerPasswordRequest;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling index35");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling index35");
    }
    
    // verify the required parameter 'abstractUserControllerPasswordRequest' is set
    if (abstractUserControllerPasswordRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'abstractUserControllerPasswordRequest' when calling index35");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/tenants/users/{id}/password"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<ApiUser> localVarReturnType = new TypeReference<ApiUser>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "PUT",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get a user
   * 
   * @param id The user id (required)
   * @param ressourceTenant  (required)
   * @param tenant  (required)
   * @throws ApiException if fails to make API call
   */
  public void index39(String id, String ressourceTenant, String tenant) throws ApiException {
    this.index39(id, ressourceTenant, tenant, Collections.emptyMap());
  }


  /**
   * Get a user
   * 
   * @param id The user id (required)
   * @param ressourceTenant  (required)
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void index39(String id, String ressourceTenant, String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling index39");
    }
    
    // verify the required parameter 'ressourceTenant' is set
    if (ressourceTenant == null) {
      throw new ApiException(400, "Missing the required parameter 'ressourceTenant' when calling index39");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling index39");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/tenants/{ressourceTenant}/users/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "ressourceTenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(ressourceTenant)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Create a basic auth password for a standard user
   * 
   * @param id The user id (required)
   * @param ressourceTenant  (required)
   * @param tenant  (required)
   * @param abstractUserControllerPasswordRequest  (required)
   * @return ApiUser
   * @throws ApiException if fails to make API call
   */
  public ApiUser index40(String id, String ressourceTenant, String tenant, AbstractUserControllerPasswordRequest abstractUserControllerPasswordRequest) throws ApiException {
    return this.index40(id, ressourceTenant, tenant, abstractUserControllerPasswordRequest, Collections.emptyMap());
  }


  /**
   * Create a basic auth password for a standard user
   * 
   * @param id The user id (required)
   * @param ressourceTenant  (required)
   * @param tenant  (required)
   * @param abstractUserControllerPasswordRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return ApiUser
   * @throws ApiException if fails to make API call
   */
  public ApiUser index40(String id, String ressourceTenant, String tenant, AbstractUserControllerPasswordRequest abstractUserControllerPasswordRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = abstractUserControllerPasswordRequest;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling index40");
    }
    
    // verify the required parameter 'ressourceTenant' is set
    if (ressourceTenant == null) {
      throw new ApiException(400, "Missing the required parameter 'ressourceTenant' when calling index40");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling index40");
    }
    
    // verify the required parameter 'abstractUserControllerPasswordRequest' is set
    if (abstractUserControllerPasswordRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'abstractUserControllerPasswordRequest' when calling index40");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/tenants/{ressourceTenant}/users/{id}/password"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "ressourceTenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(ressourceTenant)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<ApiUser> localVarReturnType = new TypeReference<ApiUser>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "PUT",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get a user
   * 
   * @param id The user id (required)
   * @param tenant  (required)
   * @throws ApiException if fails to make API call
   */
  public void index41(String id, String tenant) throws ApiException {
    this.index41(id, tenant, Collections.emptyMap());
  }


  /**
   * Get a user
   * 
   * @param id The user id (required)
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void index41(String id, String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling index41");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling index41");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/users/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Create a basic auth password for a standard user
   * 
   * @param id The user id (required)
   * @param tenant  (required)
   * @param abstractUserControllerPasswordRequest  (required)
   * @return ApiUser
   * @throws ApiException if fails to make API call
   */
  public ApiUser index42(String id, String tenant, AbstractUserControllerPasswordRequest abstractUserControllerPasswordRequest) throws ApiException {
    return this.index42(id, tenant, abstractUserControllerPasswordRequest, Collections.emptyMap());
  }


  /**
   * Create a basic auth password for a standard user
   * 
   * @param id The user id (required)
   * @param tenant  (required)
   * @param abstractUserControllerPasswordRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return ApiUser
   * @throws ApiException if fails to make API call
   */
  public ApiUser index42(String id, String tenant, AbstractUserControllerPasswordRequest abstractUserControllerPasswordRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = abstractUserControllerPasswordRequest;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling index42");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling index42");
    }
    
    // verify the required parameter 'abstractUserControllerPasswordRequest' is set
    if (abstractUserControllerPasswordRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'abstractUserControllerPasswordRequest' when calling index42");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/users/{id}/password"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<ApiUser> localVarReturnType = new TypeReference<ApiUser>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "PUT",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * List all API Tokens for specific user
   * 
   * @param id The user id (required)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object listApiTokens1(String id) throws ApiException {
    return this.listApiTokens1(id, Collections.emptyMap());
  }


  /**
   * List all API Tokens for specific user
   * 
   * @param id The user id (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object listApiTokens1(String id, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling listApiTokens1");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/tenants/users/{id}/api-tokens"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * List all API Tokens for specific user
   * 
   * @param id The user id (required)
   * @param ressourceTenant  (required)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object listApiTokens2(String id, String ressourceTenant) throws ApiException {
    return this.listApiTokens2(id, ressourceTenant, Collections.emptyMap());
  }


  /**
   * List all API Tokens for specific user
   * 
   * @param id The user id (required)
   * @param ressourceTenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object listApiTokens2(String id, String ressourceTenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling listApiTokens2");
    }
    
    // verify the required parameter 'ressourceTenant' is set
    if (ressourceTenant == null) {
      throw new ApiException(400, "Missing the required parameter 'ressourceTenant' when calling listApiTokens2");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/tenants/{ressourceTenant}/users/{id}/api-tokens"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "ressourceTenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(ressourceTenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * List all API Tokens for specific user
   * 
   * @param id The user id (required)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object listApiTokens3(String id) throws ApiException {
    return this.listApiTokens3(id, Collections.emptyMap());
  }


  /**
   * List all API Tokens for specific user
   * 
   * @param id The user id (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object listApiTokens3(String id, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling listApiTokens3");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/users/{id}/api-tokens"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * List all API Tokens for specific user
   * 
   * @param id The user id (required)
   * @param tenant  (required)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object listApiTokens5(String id, String tenant) throws ApiException {
    return this.listApiTokens5(id, tenant, Collections.emptyMap());
  }


  /**
   * List all API Tokens for specific user
   * 
   * @param id The user id (required)
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object listApiTokens5(String id, String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling listApiTokens5");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling listApiTokens5");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/tenants/users/{id}/api-tokens"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * List all API Tokens for specific user
   * 
   * @param id The user id (required)
   * @param ressourceTenant  (required)
   * @param tenant  (required)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object listApiTokens6(String id, String ressourceTenant, String tenant) throws ApiException {
    return this.listApiTokens6(id, ressourceTenant, tenant, Collections.emptyMap());
  }


  /**
   * List all API Tokens for specific user
   * 
   * @param id The user id (required)
   * @param ressourceTenant  (required)
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object listApiTokens6(String id, String ressourceTenant, String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling listApiTokens6");
    }
    
    // verify the required parameter 'ressourceTenant' is set
    if (ressourceTenant == null) {
      throw new ApiException(400, "Missing the required parameter 'ressourceTenant' when calling listApiTokens6");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling listApiTokens6");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/tenants/{ressourceTenant}/users/{id}/api-tokens"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "ressourceTenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(ressourceTenant)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * List all API Tokens for specific user
   * 
   * @param id The user id (required)
   * @param tenant  (required)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object listApiTokens7(String id, String tenant) throws ApiException {
    return this.listApiTokens7(id, tenant, Collections.emptyMap());
  }


  /**
   * List all API Tokens for specific user
   * 
   * @param id The user id (required)
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object listApiTokens7(String id, String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling listApiTokens7");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling listApiTokens7");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/users/{id}/api-tokens"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Update a user service account
   * 
   * @param id The user id (required)
   * @param body  (required)
   * @throws ApiException if fails to make API call
   */
  public void setSuperAdmin(String id, Boolean body) throws ApiException {
    this.setSuperAdmin(id, body, Collections.emptyMap());
  }


  /**
   * Update a user service account
   * 
   * @param id The user id (required)
   * @param body  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void setSuperAdmin(String id, Boolean body, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = body;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling setSuperAdmin");
    }
    
    // verify the required parameter 'body' is set
    if (body == null) {
      throw new ApiException(400, "Missing the required parameter 'body' when calling setSuperAdmin");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/tenants/users/{id}/set-superadmin"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    apiClient.invokeAPI(
        localVarPath,
        "PUT",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Update a user service account
   * 
   * @param id The user id (required)
   * @param ressourceTenant  (required)
   * @param body  (required)
   * @throws ApiException if fails to make API call
   */
  public void setSuperAdmin1(String id, String ressourceTenant, Boolean body) throws ApiException {
    this.setSuperAdmin1(id, ressourceTenant, body, Collections.emptyMap());
  }


  /**
   * Update a user service account
   * 
   * @param id The user id (required)
   * @param ressourceTenant  (required)
   * @param body  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void setSuperAdmin1(String id, String ressourceTenant, Boolean body, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = body;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling setSuperAdmin1");
    }
    
    // verify the required parameter 'ressourceTenant' is set
    if (ressourceTenant == null) {
      throw new ApiException(400, "Missing the required parameter 'ressourceTenant' when calling setSuperAdmin1");
    }
    
    // verify the required parameter 'body' is set
    if (body == null) {
      throw new ApiException(400, "Missing the required parameter 'body' when calling setSuperAdmin1");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/tenants/{ressourceTenant}/users/{id}/set-superadmin"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "ressourceTenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(ressourceTenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    apiClient.invokeAPI(
        localVarPath,
        "PUT",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Update a user service account
   * 
   * @param id The user id (required)
   * @param tenant  (required)
   * @param body  (required)
   * @throws ApiException if fails to make API call
   */
  public void setSuperAdmin2(String id, String tenant, Boolean body) throws ApiException {
    this.setSuperAdmin2(id, tenant, body, Collections.emptyMap());
  }


  /**
   * Update a user service account
   * 
   * @param id The user id (required)
   * @param tenant  (required)
   * @param body  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void setSuperAdmin2(String id, String tenant, Boolean body, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = body;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling setSuperAdmin2");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling setSuperAdmin2");
    }
    
    // verify the required parameter 'body' is set
    if (body == null) {
      throw new ApiException(400, "Missing the required parameter 'body' when calling setSuperAdmin2");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/tenants/users/{id}/set-superadmin"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    apiClient.invokeAPI(
        localVarPath,
        "PUT",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Update a user service account
   * 
   * @param id The user id (required)
   * @param ressourceTenant  (required)
   * @param tenant  (required)
   * @param body  (required)
   * @throws ApiException if fails to make API call
   */
  public void setSuperAdmin3(String id, String ressourceTenant, String tenant, Boolean body) throws ApiException {
    this.setSuperAdmin3(id, ressourceTenant, tenant, body, Collections.emptyMap());
  }


  /**
   * Update a user service account
   * 
   * @param id The user id (required)
   * @param ressourceTenant  (required)
   * @param tenant  (required)
   * @param body  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void setSuperAdmin3(String id, String ressourceTenant, String tenant, Boolean body, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = body;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling setSuperAdmin3");
    }
    
    // verify the required parameter 'ressourceTenant' is set
    if (ressourceTenant == null) {
      throw new ApiException(400, "Missing the required parameter 'ressourceTenant' when calling setSuperAdmin3");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling setSuperAdmin3");
    }
    
    // verify the required parameter 'body' is set
    if (body == null) {
      throw new ApiException(400, "Missing the required parameter 'body' when calling setSuperAdmin3");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/tenants/{ressourceTenant}/users/{id}/set-superadmin"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "ressourceTenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(ressourceTenant)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    apiClient.invokeAPI(
        localVarPath,
        "PUT",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Update a standard user
   * 
   * @param id The user id (required)
   * @param apiUser  (required)
   * @throws ApiException if fails to make API call
   */
  public void update12(String id, ApiUser apiUser) throws ApiException {
    this.update12(id, apiUser, Collections.emptyMap());
  }


  /**
   * Update a standard user
   * 
   * @param id The user id (required)
   * @param apiUser  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void update12(String id, ApiUser apiUser, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = apiUser;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling update12");
    }
    
    // verify the required parameter 'apiUser' is set
    if (apiUser == null) {
      throw new ApiException(400, "Missing the required parameter 'apiUser' when calling update12");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/tenants/users/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    apiClient.invokeAPI(
        localVarPath,
        "PUT",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Update a standard user
   * 
   * @param id The user id (required)
   * @param ressourceTenant  (required)
   * @param apiUser  (required)
   * @throws ApiException if fails to make API call
   */
  public void update16(String id, String ressourceTenant, ApiUser apiUser) throws ApiException {
    this.update16(id, ressourceTenant, apiUser, Collections.emptyMap());
  }


  /**
   * Update a standard user
   * 
   * @param id The user id (required)
   * @param ressourceTenant  (required)
   * @param apiUser  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void update16(String id, String ressourceTenant, ApiUser apiUser, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = apiUser;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling update16");
    }
    
    // verify the required parameter 'ressourceTenant' is set
    if (ressourceTenant == null) {
      throw new ApiException(400, "Missing the required parameter 'ressourceTenant' when calling update16");
    }
    
    // verify the required parameter 'apiUser' is set
    if (apiUser == null) {
      throw new ApiException(400, "Missing the required parameter 'apiUser' when calling update16");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/tenants/{ressourceTenant}/users/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "ressourceTenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(ressourceTenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    apiClient.invokeAPI(
        localVarPath,
        "PUT",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Update a standard user
   * 
   * @param id The user id (required)
   * @param apiUser  (required)
   * @throws ApiException if fails to make API call
   */
  public void update18(String id, ApiUser apiUser) throws ApiException {
    this.update18(id, apiUser, Collections.emptyMap());
  }


  /**
   * Update a standard user
   * 
   * @param id The user id (required)
   * @param apiUser  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void update18(String id, ApiUser apiUser, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = apiUser;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling update18");
    }
    
    // verify the required parameter 'apiUser' is set
    if (apiUser == null) {
      throw new ApiException(400, "Missing the required parameter 'apiUser' when calling update18");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/users/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    apiClient.invokeAPI(
        localVarPath,
        "PUT",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Update a standard user
   * 
   * @param id The user id (required)
   * @param tenant  (required)
   * @param apiUser  (required)
   * @throws ApiException if fails to make API call
   */
  public void update30(String id, String tenant, ApiUser apiUser) throws ApiException {
    this.update30(id, tenant, apiUser, Collections.emptyMap());
  }


  /**
   * Update a standard user
   * 
   * @param id The user id (required)
   * @param tenant  (required)
   * @param apiUser  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void update30(String id, String tenant, ApiUser apiUser, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = apiUser;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling update30");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling update30");
    }
    
    // verify the required parameter 'apiUser' is set
    if (apiUser == null) {
      throw new ApiException(400, "Missing the required parameter 'apiUser' when calling update30");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/tenants/users/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    apiClient.invokeAPI(
        localVarPath,
        "PUT",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Update a standard user
   * 
   * @param id The user id (required)
   * @param ressourceTenant  (required)
   * @param tenant  (required)
   * @param apiUser  (required)
   * @throws ApiException if fails to make API call
   */
  public void update34(String id, String ressourceTenant, String tenant, ApiUser apiUser) throws ApiException {
    this.update34(id, ressourceTenant, tenant, apiUser, Collections.emptyMap());
  }


  /**
   * Update a standard user
   * 
   * @param id The user id (required)
   * @param ressourceTenant  (required)
   * @param tenant  (required)
   * @param apiUser  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void update34(String id, String ressourceTenant, String tenant, ApiUser apiUser, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = apiUser;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling update34");
    }
    
    // verify the required parameter 'ressourceTenant' is set
    if (ressourceTenant == null) {
      throw new ApiException(400, "Missing the required parameter 'ressourceTenant' when calling update34");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling update34");
    }
    
    // verify the required parameter 'apiUser' is set
    if (apiUser == null) {
      throw new ApiException(400, "Missing the required parameter 'apiUser' when calling update34");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/tenants/{ressourceTenant}/users/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "ressourceTenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(ressourceTenant)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    apiClient.invokeAPI(
        localVarPath,
        "PUT",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Update a standard user
   * 
   * @param id The user id (required)
   * @param tenant  (required)
   * @param apiUser  (required)
   * @throws ApiException if fails to make API call
   */
  public void update36(String id, String tenant, ApiUser apiUser) throws ApiException {
    this.update36(id, tenant, apiUser, Collections.emptyMap());
  }


  /**
   * Update a standard user
   * 
   * @param id The user id (required)
   * @param tenant  (required)
   * @param apiUser  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void update36(String id, String tenant, ApiUser apiUser, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = apiUser;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling update36");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling update36");
    }
    
    // verify the required parameter 'apiUser' is set
    if (apiUser == null) {
      throw new ApiException(400, "Missing the required parameter 'apiUser' when calling update36");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/users/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    apiClient.invokeAPI(
        localVarPath,
        "PUT",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Update login password for the current user.
   * 
   * @param meControllerUpdatePasswordRequest  (required)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object updatePassword(MeControllerUpdatePasswordRequest meControllerUpdatePasswordRequest) throws ApiException {
    return this.updatePassword(meControllerUpdatePasswordRequest, Collections.emptyMap());
  }


  /**
   * Update login password for the current user.
   * 
   * @param meControllerUpdatePasswordRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object updatePassword(MeControllerUpdatePasswordRequest meControllerUpdatePasswordRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = meControllerUpdatePasswordRequest;
    
    // verify the required parameter 'meControllerUpdatePasswordRequest' is set
    if (meControllerUpdatePasswordRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'meControllerUpdatePasswordRequest' when calling updatePassword");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/me/password";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "PUT",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Update login password for the current user.
   * 
   * @param tenant  (required)
   * @param meControllerUpdatePasswordRequest  (required)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object updatePassword1(String tenant, MeControllerUpdatePasswordRequest meControllerUpdatePasswordRequest) throws ApiException {
    return this.updatePassword1(tenant, meControllerUpdatePasswordRequest, Collections.emptyMap());
  }


  /**
   * Update login password for the current user.
   * 
   * @param tenant  (required)
   * @param meControllerUpdatePasswordRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object updatePassword1(String tenant, MeControllerUpdatePasswordRequest meControllerUpdatePasswordRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = meControllerUpdatePasswordRequest;
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling updatePassword1");
    }
    
    // verify the required parameter 'meControllerUpdatePasswordRequest' is set
    if (meControllerUpdatePasswordRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'meControllerUpdatePasswordRequest' when calling updatePassword1");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/me/password"
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "PUT",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Update a user service account
   * 
   * @param id The user id (required)
   * @param apiServiceAccount  (required)
   * @throws ApiException if fails to make API call
   */
  public void updateServiceAccount(String id, ApiServiceAccount apiServiceAccount) throws ApiException {
    this.updateServiceAccount(id, apiServiceAccount, Collections.emptyMap());
  }


  /**
   * Update a user service account
   * 
   * @param id The user id (required)
   * @param apiServiceAccount  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void updateServiceAccount(String id, ApiServiceAccount apiServiceAccount, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = apiServiceAccount;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling updateServiceAccount");
    }
    
    // verify the required parameter 'apiServiceAccount' is set
    if (apiServiceAccount == null) {
      throw new ApiException(400, "Missing the required parameter 'apiServiceAccount' when calling updateServiceAccount");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/tenants/users/service-accounts/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    apiClient.invokeAPI(
        localVarPath,
        "PUT",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Update a user service account
   * 
   * @param id The user id (required)
   * @param ressourceTenant  (required)
   * @param apiServiceAccount  (required)
   * @throws ApiException if fails to make API call
   */
  public void updateServiceAccount1(String id, String ressourceTenant, ApiServiceAccount apiServiceAccount) throws ApiException {
    this.updateServiceAccount1(id, ressourceTenant, apiServiceAccount, Collections.emptyMap());
  }


  /**
   * Update a user service account
   * 
   * @param id The user id (required)
   * @param ressourceTenant  (required)
   * @param apiServiceAccount  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void updateServiceAccount1(String id, String ressourceTenant, ApiServiceAccount apiServiceAccount, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = apiServiceAccount;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling updateServiceAccount1");
    }
    
    // verify the required parameter 'ressourceTenant' is set
    if (ressourceTenant == null) {
      throw new ApiException(400, "Missing the required parameter 'ressourceTenant' when calling updateServiceAccount1");
    }
    
    // verify the required parameter 'apiServiceAccount' is set
    if (apiServiceAccount == null) {
      throw new ApiException(400, "Missing the required parameter 'apiServiceAccount' when calling updateServiceAccount1");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/tenants/{ressourceTenant}/users/service-accounts/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "ressourceTenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(ressourceTenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    apiClient.invokeAPI(
        localVarPath,
        "PUT",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Update a user service account
   * 
   * @param id The user id (required)
   * @param apiServiceAccount  (required)
   * @throws ApiException if fails to make API call
   */
  public void updateServiceAccount2(String id, ApiServiceAccount apiServiceAccount) throws ApiException {
    this.updateServiceAccount2(id, apiServiceAccount, Collections.emptyMap());
  }


  /**
   * Update a user service account
   * 
   * @param id The user id (required)
   * @param apiServiceAccount  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void updateServiceAccount2(String id, ApiServiceAccount apiServiceAccount, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = apiServiceAccount;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling updateServiceAccount2");
    }
    
    // verify the required parameter 'apiServiceAccount' is set
    if (apiServiceAccount == null) {
      throw new ApiException(400, "Missing the required parameter 'apiServiceAccount' when calling updateServiceAccount2");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/users/service-accounts/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    apiClient.invokeAPI(
        localVarPath,
        "PUT",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Update a user service account
   * 
   * @param id The user id (required)
   * @param tenant  (required)
   * @param apiServiceAccount  (required)
   * @throws ApiException if fails to make API call
   */
  public void updateServiceAccount3(String id, String tenant, ApiServiceAccount apiServiceAccount) throws ApiException {
    this.updateServiceAccount3(id, tenant, apiServiceAccount, Collections.emptyMap());
  }


  /**
   * Update a user service account
   * 
   * @param id The user id (required)
   * @param tenant  (required)
   * @param apiServiceAccount  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void updateServiceAccount3(String id, String tenant, ApiServiceAccount apiServiceAccount, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = apiServiceAccount;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling updateServiceAccount3");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling updateServiceAccount3");
    }
    
    // verify the required parameter 'apiServiceAccount' is set
    if (apiServiceAccount == null) {
      throw new ApiException(400, "Missing the required parameter 'apiServiceAccount' when calling updateServiceAccount3");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/tenants/users/service-accounts/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    apiClient.invokeAPI(
        localVarPath,
        "PUT",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Update a user service account
   * 
   * @param id The user id (required)
   * @param ressourceTenant  (required)
   * @param tenant  (required)
   * @param apiServiceAccount  (required)
   * @throws ApiException if fails to make API call
   */
  public void updateServiceAccount4(String id, String ressourceTenant, String tenant, ApiServiceAccount apiServiceAccount) throws ApiException {
    this.updateServiceAccount4(id, ressourceTenant, tenant, apiServiceAccount, Collections.emptyMap());
  }


  /**
   * Update a user service account
   * 
   * @param id The user id (required)
   * @param ressourceTenant  (required)
   * @param tenant  (required)
   * @param apiServiceAccount  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void updateServiceAccount4(String id, String ressourceTenant, String tenant, ApiServiceAccount apiServiceAccount, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = apiServiceAccount;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling updateServiceAccount4");
    }
    
    // verify the required parameter 'ressourceTenant' is set
    if (ressourceTenant == null) {
      throw new ApiException(400, "Missing the required parameter 'ressourceTenant' when calling updateServiceAccount4");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling updateServiceAccount4");
    }
    
    // verify the required parameter 'apiServiceAccount' is set
    if (apiServiceAccount == null) {
      throw new ApiException(400, "Missing the required parameter 'apiServiceAccount' when calling updateServiceAccount4");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/tenants/{ressourceTenant}/users/service-accounts/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "ressourceTenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(ressourceTenant)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    apiClient.invokeAPI(
        localVarPath,
        "PUT",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Update a user service account
   * 
   * @param id The user id (required)
   * @param tenant  (required)
   * @param apiServiceAccount  (required)
   * @throws ApiException if fails to make API call
   */
  public void updateServiceAccount5(String id, String tenant, ApiServiceAccount apiServiceAccount) throws ApiException {
    this.updateServiceAccount5(id, tenant, apiServiceAccount, Collections.emptyMap());
  }


  /**
   * Update a user service account
   * 
   * @param id The user id (required)
   * @param tenant  (required)
   * @param apiServiceAccount  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void updateServiceAccount5(String id, String tenant, ApiServiceAccount apiServiceAccount, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = apiServiceAccount;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling updateServiceAccount5");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling updateServiceAccount5");
    }
    
    // verify the required parameter 'apiServiceAccount' is set
    if (apiServiceAccount == null) {
      throw new ApiException(400, "Missing the required parameter 'apiServiceAccount' when calling updateServiceAccount5");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/users/service-accounts/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    apiClient.invokeAPI(
        localVarPath,
        "PUT",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  @Override
  public <T> T invokeAPI(String url, String method, Object request, TypeReference<T> returnType, Map<String, String> additionalHeaders) throws ApiException {
    String localVarPath = url.replace(apiClient.getBaseURL(), "");
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarHeaderParams.putAll(additionalHeaders);

    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    return apiClient.invokeAPI(
      localVarPath,
        method,
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        request,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        returnType
    );
  }
}
