/*
 * Kestra EE
 * All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kestra.api.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.kestra.api.sdk.model.AuditLogDetail;
import io.kestra.api.sdk.model.CrudEventType;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * AuditLog
 */
@JsonPropertyOrder({
  AuditLog.JSON_PROPERTY_ID,
  AuditLog.JSON_PROPERTY_TYPE,
  AuditLog.JSON_PROPERTY_DETAIL,
  AuditLog.JSON_PROPERTY_DATE,
  AuditLog.JSON_PROPERTY_USER_ID,
  AuditLog.JSON_PROPERTY_IP_ADDRESS,
  AuditLog.JSON_PROPERTY_IMPERSONATED_BY,
  AuditLog.JSON_PROPERTY_DELETED,
  AuditLog.JSON_PROPERTY_APPLIED_PATCH,
  AuditLog.JSON_PROPERTY_REVERT_PATCH
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-31T15:48:45.246126227Z[Etc/UTC]", comments = "Generator version: 7.11.0-SNAPSHOT")
public class AuditLog {
  public static final String JSON_PROPERTY_ID = "id";
  @javax.annotation.Nonnull
  private String id;

  public static final String JSON_PROPERTY_TYPE = "type";
  @javax.annotation.Nonnull
  private CrudEventType type;

  public static final String JSON_PROPERTY_DETAIL = "detail";
  @javax.annotation.Nonnull
  private AuditLogDetail detail;

  public static final String JSON_PROPERTY_DATE = "date";
  @javax.annotation.Nonnull
  private OffsetDateTime date;

  public static final String JSON_PROPERTY_USER_ID = "userId";
  @javax.annotation.Nonnull
  private String userId;

  public static final String JSON_PROPERTY_IP_ADDRESS = "ipAddress";
  @javax.annotation.Nonnull
  private String ipAddress;

  public static final String JSON_PROPERTY_IMPERSONATED_BY = "impersonatedBy";
  @javax.annotation.Nonnull
  private String impersonatedBy;

  public static final String JSON_PROPERTY_DELETED = "deleted";
  @javax.annotation.Nonnull
  private Boolean deleted;

  public static final String JSON_PROPERTY_APPLIED_PATCH = "appliedPatch";
  @javax.annotation.Nonnull
  private List<Object> appliedPatch = new ArrayList<>();

  public static final String JSON_PROPERTY_REVERT_PATCH = "revertPatch";
  @javax.annotation.Nonnull
  private List<Object> revertPatch = new ArrayList<>();

  public AuditLog() {
  }

  public AuditLog id(@javax.annotation.Nonnull String id) {
    
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(@javax.annotation.Nonnull String id) {
    this.id = id;
  }

  public AuditLog type(@javax.annotation.Nonnull CrudEventType type) {
    
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public CrudEventType getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setType(@javax.annotation.Nonnull CrudEventType type) {
    this.type = type;
  }

  public AuditLog detail(@javax.annotation.Nonnull AuditLogDetail detail) {
    
    this.detail = detail;
    return this;
  }

  /**
   * Get detail
   * @return detail
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DETAIL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public AuditLogDetail getDetail() {
    return detail;
  }


  @JsonProperty(JSON_PROPERTY_DETAIL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDetail(@javax.annotation.Nonnull AuditLogDetail detail) {
    this.detail = detail;
  }

  public AuditLog date(@javax.annotation.Nonnull OffsetDateTime date) {
    
    this.date = date;
    return this;
  }

  /**
   * Get date
   * @return date
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public OffsetDateTime getDate() {
    return date;
  }


  @JsonProperty(JSON_PROPERTY_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDate(@javax.annotation.Nonnull OffsetDateTime date) {
    this.date = date;
  }

  public AuditLog userId(@javax.annotation.Nonnull String userId) {
    
    this.userId = userId;
    return this;
  }

  /**
   * Get userId
   * @return userId
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_USER_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getUserId() {
    return userId;
  }


  @JsonProperty(JSON_PROPERTY_USER_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUserId(@javax.annotation.Nonnull String userId) {
    this.userId = userId;
  }

  public AuditLog ipAddress(@javax.annotation.Nonnull String ipAddress) {
    
    this.ipAddress = ipAddress;
    return this;
  }

  /**
   * Get ipAddress
   * @return ipAddress
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_IP_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getIpAddress() {
    return ipAddress;
  }


  @JsonProperty(JSON_PROPERTY_IP_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIpAddress(@javax.annotation.Nonnull String ipAddress) {
    this.ipAddress = ipAddress;
  }

  public AuditLog impersonatedBy(@javax.annotation.Nonnull String impersonatedBy) {
    
    this.impersonatedBy = impersonatedBy;
    return this;
  }

  /**
   * Get impersonatedBy
   * @return impersonatedBy
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_IMPERSONATED_BY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getImpersonatedBy() {
    return impersonatedBy;
  }


  @JsonProperty(JSON_PROPERTY_IMPERSONATED_BY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setImpersonatedBy(@javax.annotation.Nonnull String impersonatedBy) {
    this.impersonatedBy = impersonatedBy;
  }

  public AuditLog deleted(@javax.annotation.Nonnull Boolean deleted) {
    
    this.deleted = deleted;
    return this;
  }

  /**
   * Get deleted
   * @return deleted
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DELETED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getDeleted() {
    return deleted;
  }


  @JsonProperty(JSON_PROPERTY_DELETED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDeleted(@javax.annotation.Nonnull Boolean deleted) {
    this.deleted = deleted;
  }

  public AuditLog appliedPatch(@javax.annotation.Nonnull List<Object> appliedPatch) {
    
    this.appliedPatch = appliedPatch;
    return this;
  }

  public AuditLog addAppliedPatchItem(Object appliedPatchItem) {
    if (this.appliedPatch == null) {
      this.appliedPatch = new ArrayList<>();
    }
    this.appliedPatch.add(appliedPatchItem);
    return this;
  }

  /**
   * Get appliedPatch
   * @return appliedPatch
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_APPLIED_PATCH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<Object> getAppliedPatch() {
    return appliedPatch;
  }


  @JsonProperty(JSON_PROPERTY_APPLIED_PATCH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAppliedPatch(@javax.annotation.Nonnull List<Object> appliedPatch) {
    this.appliedPatch = appliedPatch;
  }

  public AuditLog revertPatch(@javax.annotation.Nonnull List<Object> revertPatch) {
    
    this.revertPatch = revertPatch;
    return this;
  }

  public AuditLog addRevertPatchItem(Object revertPatchItem) {
    if (this.revertPatch == null) {
      this.revertPatch = new ArrayList<>();
    }
    this.revertPatch.add(revertPatchItem);
    return this;
  }

  /**
   * Get revertPatch
   * @return revertPatch
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_REVERT_PATCH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<Object> getRevertPatch() {
    return revertPatch;
  }


  @JsonProperty(JSON_PROPERTY_REVERT_PATCH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRevertPatch(@javax.annotation.Nonnull List<Object> revertPatch) {
    this.revertPatch = revertPatch;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AuditLog auditLog = (AuditLog) o;
    return Objects.equals(this.id, auditLog.id) &&
        Objects.equals(this.type, auditLog.type) &&
        Objects.equals(this.detail, auditLog.detail) &&
        Objects.equals(this.date, auditLog.date) &&
        Objects.equals(this.userId, auditLog.userId) &&
        Objects.equals(this.ipAddress, auditLog.ipAddress) &&
        Objects.equals(this.impersonatedBy, auditLog.impersonatedBy) &&
        Objects.equals(this.deleted, auditLog.deleted) &&
        Objects.equals(this.appliedPatch, auditLog.appliedPatch) &&
        Objects.equals(this.revertPatch, auditLog.revertPatch);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, type, detail, date, userId, ipAddress, impersonatedBy, deleted, appliedPatch, revertPatch);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AuditLog {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    detail: ").append(toIndentedString(detail)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    ipAddress: ").append(toIndentedString(ipAddress)).append("\n");
    sb.append("    impersonatedBy: ").append(toIndentedString(impersonatedBy)).append("\n");
    sb.append("    deleted: ").append(toIndentedString(deleted)).append("\n");
    sb.append("    appliedPatch: ").append(toIndentedString(appliedPatch)).append("\n");
    sb.append("    revertPatch: ").append(toIndentedString(revertPatch)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `id` to the URL query string
    if (getId() != null) {
      try {
        joiner.add(String.format("%sid%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `type` to the URL query string
    if (getType() != null) {
      try {
        joiner.add(String.format("%stype%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getType()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `detail` to the URL query string
    if (getDetail() != null) {
      joiner.add(getDetail().toUrlQueryString(prefix + "detail" + suffix));
    }

    // add `date` to the URL query string
    if (getDate() != null) {
      try {
        joiner.add(String.format("%sdate%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDate()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `userId` to the URL query string
    if (getUserId() != null) {
      try {
        joiner.add(String.format("%suserId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUserId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `ipAddress` to the URL query string
    if (getIpAddress() != null) {
      try {
        joiner.add(String.format("%sipAddress%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getIpAddress()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `impersonatedBy` to the URL query string
    if (getImpersonatedBy() != null) {
      try {
        joiner.add(String.format("%simpersonatedBy%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getImpersonatedBy()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `deleted` to the URL query string
    if (getDeleted() != null) {
      try {
        joiner.add(String.format("%sdeleted%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDeleted()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `appliedPatch` to the URL query string
    if (getAppliedPatch() != null) {
      for (int i = 0; i < getAppliedPatch().size(); i++) {
        try {
          joiner.add(String.format("%sappliedPatch%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(String.valueOf(getAppliedPatch().get(i)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    // add `revertPatch` to the URL query string
    if (getRevertPatch() != null) {
      for (int i = 0; i < getRevertPatch().size(); i++) {
        try {
          joiner.add(String.format("%srevertPatch%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(String.valueOf(getRevertPatch().get(i)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    return joiner.toString();
  }

}

