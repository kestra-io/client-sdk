/*
 * Kestra EE
 * All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package io.kestra.api.sdk.api;

import com.fasterxml.jackson.core.type.TypeReference;

import io.kestra.api.sdk.internal.ApiException;
import io.kestra.api.sdk.internal.ApiClient;
import io.kestra.api.sdk.internal.BaseApi;
import io.kestra.api.sdk.internal.Configuration;
import io.kestra.api.sdk.internal.Pair;

import io.kestra.api.sdk.model.PatchRequest;
import io.kestra.api.sdk.model.ScimGroup;
import io.kestra.api.sdk.model.ScimResource;
import io.kestra.api.sdk.model.ScimUser;
import io.kestra.api.sdk.model.SearchRequest;
import io.kestra.api.sdk.model.SortOrder;


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-31T15:48:45.246126227Z[Etc/UTC]", comments = "Generator version: 7.11.0-SNAPSHOT")
public class ScimApi extends BaseApi {

  public ScimApi() {
    super(Configuration.getDefaultApiClient());
  }

  public ScimApi(ApiClient apiClient) {
    super(apiClient);
  }

  /**
   * {@inheritDoc}
   * Create
   * @param integration  (required)
   * @param tenant  (required)
   * @param scimUser  (required)
   * @param attributes  (optional)
   * @param excludedAttributes  (optional)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object create32(String integration, String tenant, ScimUser scimUser, String attributes, String excludedAttributes) throws ApiException {
    return this.create32(integration, tenant, scimUser, attributes, excludedAttributes, Collections.emptyMap());
  }


  /**
   * {@inheritDoc}
   * Create
   * @param integration  (required)
   * @param tenant  (required)
   * @param scimUser  (required)
   * @param attributes  (optional)
   * @param excludedAttributes  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object create32(String integration, String tenant, ScimUser scimUser, String attributes, String excludedAttributes, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = scimUser;
    
    // verify the required parameter 'integration' is set
    if (integration == null) {
      throw new ApiException(400, "Missing the required parameter 'integration' when calling create32");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling create32");
    }
    
    // verify the required parameter 'scimUser' is set
    if (scimUser == null) {
      throw new ApiException(400, "Missing the required parameter 'scimUser' when calling create32");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/integrations/{integration}/scim/v2/Groups"
      .replaceAll("\\{" + "integration" + "\\}", apiClient.escapeString(apiClient.parameterToString(integration)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("attributes", attributes));
    localVarQueryParams.addAll(apiClient.parameterToPair("excludedAttributes", excludedAttributes));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/scim+json", "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/scim+json", "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * {@inheritDoc}
   * Create
   * @param integration  (required)
   * @param tenant  (required)
   * @param scimUser  (required)
   * @param attributes  (optional)
   * @param excludedAttributes  (optional)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object create33(String integration, String tenant, ScimUser scimUser, String attributes, String excludedAttributes) throws ApiException {
    return this.create33(integration, tenant, scimUser, attributes, excludedAttributes, Collections.emptyMap());
  }


  /**
   * {@inheritDoc}
   * Create
   * @param integration  (required)
   * @param tenant  (required)
   * @param scimUser  (required)
   * @param attributes  (optional)
   * @param excludedAttributes  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object create33(String integration, String tenant, ScimUser scimUser, String attributes, String excludedAttributes, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = scimUser;
    
    // verify the required parameter 'integration' is set
    if (integration == null) {
      throw new ApiException(400, "Missing the required parameter 'integration' when calling create33");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling create33");
    }
    
    // verify the required parameter 'scimUser' is set
    if (scimUser == null) {
      throw new ApiException(400, "Missing the required parameter 'scimUser' when calling create33");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/integrations/{integration}/scim/v2/Users"
      .replaceAll("\\{" + "integration" + "\\}", apiClient.escapeString(apiClient.parameterToString(integration)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("attributes", attributes));
    localVarQueryParams.addAll(apiClient.parameterToPair("excludedAttributes", excludedAttributes));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/scim+json", "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/scim+json", "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * {@inheritDoc}
   * Create
   * @param integration  (required)
   * @param scimUser  (required)
   * @param attributes  (optional)
   * @param excludedAttributes  (optional)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object create7(String integration, ScimUser scimUser, String attributes, String excludedAttributes) throws ApiException {
    return this.create7(integration, scimUser, attributes, excludedAttributes, Collections.emptyMap());
  }


  /**
   * {@inheritDoc}
   * Create
   * @param integration  (required)
   * @param scimUser  (required)
   * @param attributes  (optional)
   * @param excludedAttributes  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object create7(String integration, ScimUser scimUser, String attributes, String excludedAttributes, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = scimUser;
    
    // verify the required parameter 'integration' is set
    if (integration == null) {
      throw new ApiException(400, "Missing the required parameter 'integration' when calling create7");
    }
    
    // verify the required parameter 'scimUser' is set
    if (scimUser == null) {
      throw new ApiException(400, "Missing the required parameter 'scimUser' when calling create7");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/integrations/{integration}/scim/v2/Groups"
      .replaceAll("\\{" + "integration" + "\\}", apiClient.escapeString(apiClient.parameterToString(integration)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("attributes", attributes));
    localVarQueryParams.addAll(apiClient.parameterToPair("excludedAttributes", excludedAttributes));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/scim+json", "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/scim+json", "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * {@inheritDoc}
   * Create
   * @param integration  (required)
   * @param scimUser  (required)
   * @param attributes  (optional)
   * @param excludedAttributes  (optional)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object create8(String integration, ScimUser scimUser, String attributes, String excludedAttributes) throws ApiException {
    return this.create8(integration, scimUser, attributes, excludedAttributes, Collections.emptyMap());
  }


  /**
   * {@inheritDoc}
   * Create
   * @param integration  (required)
   * @param scimUser  (required)
   * @param attributes  (optional)
   * @param excludedAttributes  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object create8(String integration, ScimUser scimUser, String attributes, String excludedAttributes, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = scimUser;
    
    // verify the required parameter 'integration' is set
    if (integration == null) {
      throw new ApiException(400, "Missing the required parameter 'integration' when calling create8");
    }
    
    // verify the required parameter 'scimUser' is set
    if (scimUser == null) {
      throw new ApiException(400, "Missing the required parameter 'scimUser' when calling create8");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/integrations/{integration}/scim/v2/Users"
      .replaceAll("\\{" + "integration" + "\\}", apiClient.escapeString(apiClient.parameterToString(integration)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("attributes", attributes));
    localVarQueryParams.addAll(apiClient.parameterToPair("excludedAttributes", excludedAttributes));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/scim+json", "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/scim+json", "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * {@inheritDoc}
   * Delete from the backing store
   * @param id  (required)
   * @param integration  (required)
   * @param tenant  (required)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object delete35(String id, String integration, String tenant) throws ApiException {
    return this.delete35(id, integration, tenant, Collections.emptyMap());
  }


  /**
   * {@inheritDoc}
   * Delete from the backing store
   * @param id  (required)
   * @param integration  (required)
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object delete35(String id, String integration, String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling delete35");
    }
    
    // verify the required parameter 'integration' is set
    if (integration == null) {
      throw new ApiException(400, "Missing the required parameter 'integration' when calling delete35");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling delete35");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/integrations/{integration}/scim/v2/Groups/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "integration" + "\\}", apiClient.escapeString(apiClient.parameterToString(integration)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/scim+json", "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * {@inheritDoc}
   * Delete from the backing store
   * @param id  (required)
   * @param integration  (required)
   * @param tenant  (required)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object delete36(String id, String integration, String tenant) throws ApiException {
    return this.delete36(id, integration, tenant, Collections.emptyMap());
  }


  /**
   * {@inheritDoc}
   * Delete from the backing store
   * @param id  (required)
   * @param integration  (required)
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object delete36(String id, String integration, String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling delete36");
    }
    
    // verify the required parameter 'integration' is set
    if (integration == null) {
      throw new ApiException(400, "Missing the required parameter 'integration' when calling delete36");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling delete36");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/integrations/{integration}/scim/v2/Users/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "integration" + "\\}", apiClient.escapeString(apiClient.parameterToString(integration)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/scim+json", "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * {@inheritDoc}
   * Delete from the backing store
   * @param id  (required)
   * @param integration  (required)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object delete7(String id, String integration) throws ApiException {
    return this.delete7(id, integration, Collections.emptyMap());
  }


  /**
   * {@inheritDoc}
   * Delete from the backing store
   * @param id  (required)
   * @param integration  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object delete7(String id, String integration, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling delete7");
    }
    
    // verify the required parameter 'integration' is set
    if (integration == null) {
      throw new ApiException(400, "Missing the required parameter 'integration' when calling delete7");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/integrations/{integration}/scim/v2/Groups/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "integration" + "\\}", apiClient.escapeString(apiClient.parameterToString(integration)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/scim+json", "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * {@inheritDoc}
   * Delete from the backing store
   * @param id  (required)
   * @param integration  (required)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object delete8(String id, String integration) throws ApiException {
    return this.delete8(id, integration, Collections.emptyMap());
  }


  /**
   * {@inheritDoc}
   * Delete from the backing store
   * @param id  (required)
   * @param integration  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object delete8(String id, String integration, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling delete8");
    }
    
    // verify the required parameter 'integration' is set
    if (integration == null) {
      throw new ApiException(400, "Missing the required parameter 'integration' when calling delete8");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/integrations/{integration}/scim/v2/Users/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "integration" + "\\}", apiClient.escapeString(apiClient.parameterToString(integration)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/scim+json", "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * {@inheritDoc}
   * Search
   * @param integration  (required)
   * @param tenant  (required)
   * @param searchRequest  (required)
   * @return ScimResource
   * @throws ApiException if fails to make API call
   */
  public ScimResource find33(String integration, String tenant, SearchRequest searchRequest) throws ApiException {
    return this.find33(integration, tenant, searchRequest, Collections.emptyMap());
  }


  /**
   * {@inheritDoc}
   * Search
   * @param integration  (required)
   * @param tenant  (required)
   * @param searchRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return ScimResource
   * @throws ApiException if fails to make API call
   */
  public ScimResource find33(String integration, String tenant, SearchRequest searchRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = searchRequest;
    
    // verify the required parameter 'integration' is set
    if (integration == null) {
      throw new ApiException(400, "Missing the required parameter 'integration' when calling find33");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling find33");
    }
    
    // verify the required parameter 'searchRequest' is set
    if (searchRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'searchRequest' when calling find33");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/integrations/{integration}/scim/v2/Groups/.search"
      .replaceAll("\\{" + "integration" + "\\}", apiClient.escapeString(apiClient.parameterToString(integration)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/scim+json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/scim+json", "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<ScimResource> localVarReturnType = new TypeReference<ScimResource>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * {@inheritDoc}
   * Search
   * @param integration  (required)
   * @param tenant  (required)
   * @param searchRequest  (required)
   * @return ScimResource
   * @throws ApiException if fails to make API call
   */
  public ScimResource find34(String integration, String tenant, SearchRequest searchRequest) throws ApiException {
    return this.find34(integration, tenant, searchRequest, Collections.emptyMap());
  }


  /**
   * {@inheritDoc}
   * Search
   * @param integration  (required)
   * @param tenant  (required)
   * @param searchRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return ScimResource
   * @throws ApiException if fails to make API call
   */
  public ScimResource find34(String integration, String tenant, SearchRequest searchRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = searchRequest;
    
    // verify the required parameter 'integration' is set
    if (integration == null) {
      throw new ApiException(400, "Missing the required parameter 'integration' when calling find34");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling find34");
    }
    
    // verify the required parameter 'searchRequest' is set
    if (searchRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'searchRequest' when calling find34");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/integrations/{integration}/scim/v2/Users/.search"
      .replaceAll("\\{" + "integration" + "\\}", apiClient.escapeString(apiClient.parameterToString(integration)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/scim+json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/scim+json", "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<ScimResource> localVarReturnType = new TypeReference<ScimResource>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * {@inheritDoc}
   * Search
   * @param integration  (required)
   * @param searchRequest  (required)
   * @return ScimResource
   * @throws ApiException if fails to make API call
   */
  public ScimResource find7(String integration, SearchRequest searchRequest) throws ApiException {
    return this.find7(integration, searchRequest, Collections.emptyMap());
  }


  /**
   * {@inheritDoc}
   * Search
   * @param integration  (required)
   * @param searchRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return ScimResource
   * @throws ApiException if fails to make API call
   */
  public ScimResource find7(String integration, SearchRequest searchRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = searchRequest;
    
    // verify the required parameter 'integration' is set
    if (integration == null) {
      throw new ApiException(400, "Missing the required parameter 'integration' when calling find7");
    }
    
    // verify the required parameter 'searchRequest' is set
    if (searchRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'searchRequest' when calling find7");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/integrations/{integration}/scim/v2/Groups/.search"
      .replaceAll("\\{" + "integration" + "\\}", apiClient.escapeString(apiClient.parameterToString(integration)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/scim+json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/scim+json", "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<ScimResource> localVarReturnType = new TypeReference<ScimResource>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * {@inheritDoc}
   * Search
   * @param integration  (required)
   * @param searchRequest  (required)
   * @return ScimResource
   * @throws ApiException if fails to make API call
   */
  public ScimResource find8(String integration, SearchRequest searchRequest) throws ApiException {
    return this.find8(integration, searchRequest, Collections.emptyMap());
  }


  /**
   * {@inheritDoc}
   * Search
   * @param integration  (required)
   * @param searchRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return ScimResource
   * @throws ApiException if fails to make API call
   */
  public ScimResource find8(String integration, SearchRequest searchRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = searchRequest;
    
    // verify the required parameter 'integration' is set
    if (integration == null) {
      throw new ApiException(400, "Missing the required parameter 'integration' when calling find8");
    }
    
    // verify the required parameter 'searchRequest' is set
    if (searchRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'searchRequest' when calling find8");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/integrations/{integration}/scim/v2/Users/.search"
      .replaceAll("\\{" + "integration" + "\\}", apiClient.escapeString(apiClient.parameterToString(integration)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/scim+json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/scim+json", "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<ScimResource> localVarReturnType = new TypeReference<ScimResource>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * {@inheritDoc}
   * Find by id
   * @param id  (required)
   * @param integration  (required)
   * @param attributes  (optional)
   * @param excludedAttributes  (optional)
   * @return ScimResource
   * @throws ApiException if fails to make API call
   */
  public ScimResource getById(String id, String integration, String attributes, String excludedAttributes) throws ApiException {
    return this.getById(id, integration, attributes, excludedAttributes, Collections.emptyMap());
  }


  /**
   * {@inheritDoc}
   * Find by id
   * @param id  (required)
   * @param integration  (required)
   * @param attributes  (optional)
   * @param excludedAttributes  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return ScimResource
   * @throws ApiException if fails to make API call
   */
  public ScimResource getById(String id, String integration, String attributes, String excludedAttributes, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getById");
    }
    
    // verify the required parameter 'integration' is set
    if (integration == null) {
      throw new ApiException(400, "Missing the required parameter 'integration' when calling getById");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/integrations/{integration}/scim/v2/Groups/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "integration" + "\\}", apiClient.escapeString(apiClient.parameterToString(integration)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("attributes", attributes));
    localVarQueryParams.addAll(apiClient.parameterToPair("excludedAttributes", excludedAttributes));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/scim+json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<ScimResource> localVarReturnType = new TypeReference<ScimResource>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * {@inheritDoc}
   * Find by id
   * @param id  (required)
   * @param integration  (required)
   * @param attributes  (optional)
   * @param excludedAttributes  (optional)
   * @return ScimResource
   * @throws ApiException if fails to make API call
   */
  public ScimResource getById1(String id, String integration, String attributes, String excludedAttributes) throws ApiException {
    return this.getById1(id, integration, attributes, excludedAttributes, Collections.emptyMap());
  }


  /**
   * {@inheritDoc}
   * Find by id
   * @param id  (required)
   * @param integration  (required)
   * @param attributes  (optional)
   * @param excludedAttributes  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return ScimResource
   * @throws ApiException if fails to make API call
   */
  public ScimResource getById1(String id, String integration, String attributes, String excludedAttributes, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getById1");
    }
    
    // verify the required parameter 'integration' is set
    if (integration == null) {
      throw new ApiException(400, "Missing the required parameter 'integration' when calling getById1");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/integrations/{integration}/scim/v2/Users/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "integration" + "\\}", apiClient.escapeString(apiClient.parameterToString(integration)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("attributes", attributes));
    localVarQueryParams.addAll(apiClient.parameterToPair("excludedAttributes", excludedAttributes));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/scim+json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<ScimResource> localVarReturnType = new TypeReference<ScimResource>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * {@inheritDoc}
   * Find by id
   * @param id  (required)
   * @param integration  (required)
   * @param tenant  (required)
   * @param attributes  (optional)
   * @param excludedAttributes  (optional)
   * @return ScimResource
   * @throws ApiException if fails to make API call
   */
  public ScimResource getById2(String id, String integration, String tenant, String attributes, String excludedAttributes) throws ApiException {
    return this.getById2(id, integration, tenant, attributes, excludedAttributes, Collections.emptyMap());
  }


  /**
   * {@inheritDoc}
   * Find by id
   * @param id  (required)
   * @param integration  (required)
   * @param tenant  (required)
   * @param attributes  (optional)
   * @param excludedAttributes  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return ScimResource
   * @throws ApiException if fails to make API call
   */
  public ScimResource getById2(String id, String integration, String tenant, String attributes, String excludedAttributes, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getById2");
    }
    
    // verify the required parameter 'integration' is set
    if (integration == null) {
      throw new ApiException(400, "Missing the required parameter 'integration' when calling getById2");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling getById2");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/integrations/{integration}/scim/v2/Groups/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "integration" + "\\}", apiClient.escapeString(apiClient.parameterToString(integration)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("attributes", attributes));
    localVarQueryParams.addAll(apiClient.parameterToPair("excludedAttributes", excludedAttributes));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/scim+json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<ScimResource> localVarReturnType = new TypeReference<ScimResource>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * {@inheritDoc}
   * Find by id
   * @param id  (required)
   * @param integration  (required)
   * @param tenant  (required)
   * @param attributes  (optional)
   * @param excludedAttributes  (optional)
   * @return ScimResource
   * @throws ApiException if fails to make API call
   */
  public ScimResource getById3(String id, String integration, String tenant, String attributes, String excludedAttributes) throws ApiException {
    return this.getById3(id, integration, tenant, attributes, excludedAttributes, Collections.emptyMap());
  }


  /**
   * {@inheritDoc}
   * Find by id
   * @param id  (required)
   * @param integration  (required)
   * @param tenant  (required)
   * @param attributes  (optional)
   * @param excludedAttributes  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return ScimResource
   * @throws ApiException if fails to make API call
   */
  public ScimResource getById3(String id, String integration, String tenant, String attributes, String excludedAttributes, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getById3");
    }
    
    // verify the required parameter 'integration' is set
    if (integration == null) {
      throw new ApiException(400, "Missing the required parameter 'integration' when calling getById3");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling getById3");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/integrations/{integration}/scim/v2/Users/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "integration" + "\\}", apiClient.escapeString(apiClient.parameterToString(integration)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("attributes", attributes));
    localVarQueryParams.addAll(apiClient.parameterToPair("excludedAttributes", excludedAttributes));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/scim+json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<ScimResource> localVarReturnType = new TypeReference<ScimResource>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * {@inheritDoc}
   * Patch a portion of the backing store
   * @param id  (required)
   * @param integration  (required)
   * @param patchRequest  (required)
   * @param attributes  (optional)
   * @param excludedAttributes  (optional)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object patch(String id, String integration, PatchRequest patchRequest, String attributes, String excludedAttributes) throws ApiException {
    return this.patch(id, integration, patchRequest, attributes, excludedAttributes, Collections.emptyMap());
  }


  /**
   * {@inheritDoc}
   * Patch a portion of the backing store
   * @param id  (required)
   * @param integration  (required)
   * @param patchRequest  (required)
   * @param attributes  (optional)
   * @param excludedAttributes  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object patch(String id, String integration, PatchRequest patchRequest, String attributes, String excludedAttributes, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = patchRequest;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling patch");
    }
    
    // verify the required parameter 'integration' is set
    if (integration == null) {
      throw new ApiException(400, "Missing the required parameter 'integration' when calling patch");
    }
    
    // verify the required parameter 'patchRequest' is set
    if (patchRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'patchRequest' when calling patch");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/integrations/{integration}/scim/v2/Groups/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "integration" + "\\}", apiClient.escapeString(apiClient.parameterToString(integration)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("attributes", attributes));
    localVarQueryParams.addAll(apiClient.parameterToPair("excludedAttributes", excludedAttributes));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/scim+json", "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/scim+json", "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "PATCH",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * {@inheritDoc}
   * Patch a portion of the backing store
   * @param id  (required)
   * @param integration  (required)
   * @param patchRequest  (required)
   * @param attributes  (optional)
   * @param excludedAttributes  (optional)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object patch1(String id, String integration, PatchRequest patchRequest, String attributes, String excludedAttributes) throws ApiException {
    return this.patch1(id, integration, patchRequest, attributes, excludedAttributes, Collections.emptyMap());
  }


  /**
   * {@inheritDoc}
   * Patch a portion of the backing store
   * @param id  (required)
   * @param integration  (required)
   * @param patchRequest  (required)
   * @param attributes  (optional)
   * @param excludedAttributes  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object patch1(String id, String integration, PatchRequest patchRequest, String attributes, String excludedAttributes, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = patchRequest;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling patch1");
    }
    
    // verify the required parameter 'integration' is set
    if (integration == null) {
      throw new ApiException(400, "Missing the required parameter 'integration' when calling patch1");
    }
    
    // verify the required parameter 'patchRequest' is set
    if (patchRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'patchRequest' when calling patch1");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/integrations/{integration}/scim/v2/Users/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "integration" + "\\}", apiClient.escapeString(apiClient.parameterToString(integration)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("attributes", attributes));
    localVarQueryParams.addAll(apiClient.parameterToPair("excludedAttributes", excludedAttributes));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/scim+json", "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/scim+json", "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "PATCH",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * {@inheritDoc}
   * Patch a portion of the backing store
   * @param id  (required)
   * @param integration  (required)
   * @param tenant  (required)
   * @param patchRequest  (required)
   * @param attributes  (optional)
   * @param excludedAttributes  (optional)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object patch3(String id, String integration, String tenant, PatchRequest patchRequest, String attributes, String excludedAttributes) throws ApiException {
    return this.patch3(id, integration, tenant, patchRequest, attributes, excludedAttributes, Collections.emptyMap());
  }


  /**
   * {@inheritDoc}
   * Patch a portion of the backing store
   * @param id  (required)
   * @param integration  (required)
   * @param tenant  (required)
   * @param patchRequest  (required)
   * @param attributes  (optional)
   * @param excludedAttributes  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object patch3(String id, String integration, String tenant, PatchRequest patchRequest, String attributes, String excludedAttributes, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = patchRequest;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling patch3");
    }
    
    // verify the required parameter 'integration' is set
    if (integration == null) {
      throw new ApiException(400, "Missing the required parameter 'integration' when calling patch3");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling patch3");
    }
    
    // verify the required parameter 'patchRequest' is set
    if (patchRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'patchRequest' when calling patch3");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/integrations/{integration}/scim/v2/Groups/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "integration" + "\\}", apiClient.escapeString(apiClient.parameterToString(integration)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("attributes", attributes));
    localVarQueryParams.addAll(apiClient.parameterToPair("excludedAttributes", excludedAttributes));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/scim+json", "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/scim+json", "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "PATCH",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * {@inheritDoc}
   * Patch a portion of the backing store
   * @param id  (required)
   * @param integration  (required)
   * @param tenant  (required)
   * @param patchRequest  (required)
   * @param attributes  (optional)
   * @param excludedAttributes  (optional)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object patch4(String id, String integration, String tenant, PatchRequest patchRequest, String attributes, String excludedAttributes) throws ApiException {
    return this.patch4(id, integration, tenant, patchRequest, attributes, excludedAttributes, Collections.emptyMap());
  }


  /**
   * {@inheritDoc}
   * Patch a portion of the backing store
   * @param id  (required)
   * @param integration  (required)
   * @param tenant  (required)
   * @param patchRequest  (required)
   * @param attributes  (optional)
   * @param excludedAttributes  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object patch4(String id, String integration, String tenant, PatchRequest patchRequest, String attributes, String excludedAttributes, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = patchRequest;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling patch4");
    }
    
    // verify the required parameter 'integration' is set
    if (integration == null) {
      throw new ApiException(400, "Missing the required parameter 'integration' when calling patch4");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling patch4");
    }
    
    // verify the required parameter 'patchRequest' is set
    if (patchRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'patchRequest' when calling patch4");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/integrations/{integration}/scim/v2/Users/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "integration" + "\\}", apiClient.escapeString(apiClient.parameterToString(integration)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("attributes", attributes));
    localVarQueryParams.addAll(apiClient.parameterToPair("excludedAttributes", excludedAttributes));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/scim+json", "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/scim+json", "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "PATCH",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * {@inheritDoc}
   * Find by a combination of query parameters
   * @param integration  (required)
   * @param attributes  (optional)
   * @param excludedAttributes  (optional)
   * @param filter  (optional)
   * @param sortBy  (optional)
   * @param sortOrder  (optional)
   * @param startIndex  (optional)
   * @param count  (optional)
   * @return ScimResource
   * @throws ApiException if fails to make API call
   */
  public ScimResource query(String integration, String attributes, String excludedAttributes, String filter, String sortBy, SortOrder sortOrder, Integer startIndex, Integer count) throws ApiException {
    return this.query(integration, attributes, excludedAttributes, filter, sortBy, sortOrder, startIndex, count, Collections.emptyMap());
  }


  /**
   * {@inheritDoc}
   * Find by a combination of query parameters
   * @param integration  (required)
   * @param attributes  (optional)
   * @param excludedAttributes  (optional)
   * @param filter  (optional)
   * @param sortBy  (optional)
   * @param sortOrder  (optional)
   * @param startIndex  (optional)
   * @param count  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return ScimResource
   * @throws ApiException if fails to make API call
   */
  public ScimResource query(String integration, String attributes, String excludedAttributes, String filter, String sortBy, SortOrder sortOrder, Integer startIndex, Integer count, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'integration' is set
    if (integration == null) {
      throw new ApiException(400, "Missing the required parameter 'integration' when calling query");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/integrations/{integration}/scim/v2/Groups"
      .replaceAll("\\{" + "integration" + "\\}", apiClient.escapeString(apiClient.parameterToString(integration)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("attributes", attributes));
    localVarQueryParams.addAll(apiClient.parameterToPair("excludedAttributes", excludedAttributes));
    localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
    localVarQueryParams.addAll(apiClient.parameterToPair("sortBy", sortBy));
    localVarQueryParams.addAll(apiClient.parameterToPair("sortOrder", sortOrder));
    localVarQueryParams.addAll(apiClient.parameterToPair("startIndex", startIndex));
    localVarQueryParams.addAll(apiClient.parameterToPair("count", count));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/scim+json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<ScimResource> localVarReturnType = new TypeReference<ScimResource>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * {@inheritDoc}
   * Find by a combination of query parameters
   * @param integration  (required)
   * @param attributes  (optional)
   * @param excludedAttributes  (optional)
   * @param filter  (optional)
   * @param sortBy  (optional)
   * @param sortOrder  (optional)
   * @param startIndex  (optional)
   * @param count  (optional)
   * @return ScimResource
   * @throws ApiException if fails to make API call
   */
  public ScimResource query1(String integration, String attributes, String excludedAttributes, String filter, String sortBy, SortOrder sortOrder, Integer startIndex, Integer count) throws ApiException {
    return this.query1(integration, attributes, excludedAttributes, filter, sortBy, sortOrder, startIndex, count, Collections.emptyMap());
  }


  /**
   * {@inheritDoc}
   * Find by a combination of query parameters
   * @param integration  (required)
   * @param attributes  (optional)
   * @param excludedAttributes  (optional)
   * @param filter  (optional)
   * @param sortBy  (optional)
   * @param sortOrder  (optional)
   * @param startIndex  (optional)
   * @param count  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return ScimResource
   * @throws ApiException if fails to make API call
   */
  public ScimResource query1(String integration, String attributes, String excludedAttributes, String filter, String sortBy, SortOrder sortOrder, Integer startIndex, Integer count, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'integration' is set
    if (integration == null) {
      throw new ApiException(400, "Missing the required parameter 'integration' when calling query1");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/integrations/{integration}/scim/v2/Users"
      .replaceAll("\\{" + "integration" + "\\}", apiClient.escapeString(apiClient.parameterToString(integration)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("attributes", attributes));
    localVarQueryParams.addAll(apiClient.parameterToPair("excludedAttributes", excludedAttributes));
    localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
    localVarQueryParams.addAll(apiClient.parameterToPair("sortBy", sortBy));
    localVarQueryParams.addAll(apiClient.parameterToPair("sortOrder", sortOrder));
    localVarQueryParams.addAll(apiClient.parameterToPair("startIndex", startIndex));
    localVarQueryParams.addAll(apiClient.parameterToPair("count", count));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/scim+json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<ScimResource> localVarReturnType = new TypeReference<ScimResource>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * {@inheritDoc}
   * Find by a combination of query parameters
   * @param integration  (required)
   * @param tenant  (required)
   * @param attributes  (optional)
   * @param excludedAttributes  (optional)
   * @param filter  (optional)
   * @param sortBy  (optional)
   * @param sortOrder  (optional)
   * @param startIndex  (optional)
   * @param count  (optional)
   * @return ScimResource
   * @throws ApiException if fails to make API call
   */
  public ScimResource query2(String integration, String tenant, String attributes, String excludedAttributes, String filter, String sortBy, SortOrder sortOrder, Integer startIndex, Integer count) throws ApiException {
    return this.query2(integration, tenant, attributes, excludedAttributes, filter, sortBy, sortOrder, startIndex, count, Collections.emptyMap());
  }


  /**
   * {@inheritDoc}
   * Find by a combination of query parameters
   * @param integration  (required)
   * @param tenant  (required)
   * @param attributes  (optional)
   * @param excludedAttributes  (optional)
   * @param filter  (optional)
   * @param sortBy  (optional)
   * @param sortOrder  (optional)
   * @param startIndex  (optional)
   * @param count  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return ScimResource
   * @throws ApiException if fails to make API call
   */
  public ScimResource query2(String integration, String tenant, String attributes, String excludedAttributes, String filter, String sortBy, SortOrder sortOrder, Integer startIndex, Integer count, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'integration' is set
    if (integration == null) {
      throw new ApiException(400, "Missing the required parameter 'integration' when calling query2");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling query2");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/integrations/{integration}/scim/v2/Groups"
      .replaceAll("\\{" + "integration" + "\\}", apiClient.escapeString(apiClient.parameterToString(integration)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("attributes", attributes));
    localVarQueryParams.addAll(apiClient.parameterToPair("excludedAttributes", excludedAttributes));
    localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
    localVarQueryParams.addAll(apiClient.parameterToPair("sortBy", sortBy));
    localVarQueryParams.addAll(apiClient.parameterToPair("sortOrder", sortOrder));
    localVarQueryParams.addAll(apiClient.parameterToPair("startIndex", startIndex));
    localVarQueryParams.addAll(apiClient.parameterToPair("count", count));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/scim+json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<ScimResource> localVarReturnType = new TypeReference<ScimResource>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * {@inheritDoc}
   * Find by a combination of query parameters
   * @param integration  (required)
   * @param tenant  (required)
   * @param attributes  (optional)
   * @param excludedAttributes  (optional)
   * @param filter  (optional)
   * @param sortBy  (optional)
   * @param sortOrder  (optional)
   * @param startIndex  (optional)
   * @param count  (optional)
   * @return ScimResource
   * @throws ApiException if fails to make API call
   */
  public ScimResource query3(String integration, String tenant, String attributes, String excludedAttributes, String filter, String sortBy, SortOrder sortOrder, Integer startIndex, Integer count) throws ApiException {
    return this.query3(integration, tenant, attributes, excludedAttributes, filter, sortBy, sortOrder, startIndex, count, Collections.emptyMap());
  }


  /**
   * {@inheritDoc}
   * Find by a combination of query parameters
   * @param integration  (required)
   * @param tenant  (required)
   * @param attributes  (optional)
   * @param excludedAttributes  (optional)
   * @param filter  (optional)
   * @param sortBy  (optional)
   * @param sortOrder  (optional)
   * @param startIndex  (optional)
   * @param count  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return ScimResource
   * @throws ApiException if fails to make API call
   */
  public ScimResource query3(String integration, String tenant, String attributes, String excludedAttributes, String filter, String sortBy, SortOrder sortOrder, Integer startIndex, Integer count, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'integration' is set
    if (integration == null) {
      throw new ApiException(400, "Missing the required parameter 'integration' when calling query3");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling query3");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/integrations/{integration}/scim/v2/Users"
      .replaceAll("\\{" + "integration" + "\\}", apiClient.escapeString(apiClient.parameterToString(integration)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("attributes", attributes));
    localVarQueryParams.addAll(apiClient.parameterToPair("excludedAttributes", excludedAttributes));
    localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
    localVarQueryParams.addAll(apiClient.parameterToPair("sortBy", sortBy));
    localVarQueryParams.addAll(apiClient.parameterToPair("sortOrder", sortOrder));
    localVarQueryParams.addAll(apiClient.parameterToPair("startIndex", startIndex));
    localVarQueryParams.addAll(apiClient.parameterToPair("count", count));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/scim+json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<ScimResource> localVarReturnType = new TypeReference<ScimResource>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * {@inheritDoc}
   * Update
   * @param id  (required)
   * @param integration  (required)
   * @param tenant  (required)
   * @param scimResource  (required)
   * @param attributes  (optional)
   * @param excludedAttributes  (optional)
   * @return ScimResource
   * @throws ApiException if fails to make API call
   */
  public ScimResource update23(String id, String integration, String tenant, ScimResource scimResource, String attributes, String excludedAttributes) throws ApiException {
    return this.update23(id, integration, tenant, scimResource, attributes, excludedAttributes, Collections.emptyMap());
  }


  /**
   * {@inheritDoc}
   * Update
   * @param id  (required)
   * @param integration  (required)
   * @param tenant  (required)
   * @param scimResource  (required)
   * @param attributes  (optional)
   * @param excludedAttributes  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return ScimResource
   * @throws ApiException if fails to make API call
   */
  public ScimResource update23(String id, String integration, String tenant, ScimResource scimResource, String attributes, String excludedAttributes, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = scimResource;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling update23");
    }
    
    // verify the required parameter 'integration' is set
    if (integration == null) {
      throw new ApiException(400, "Missing the required parameter 'integration' when calling update23");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling update23");
    }
    
    // verify the required parameter 'scimResource' is set
    if (scimResource == null) {
      throw new ApiException(400, "Missing the required parameter 'scimResource' when calling update23");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/integrations/{integration}/scim/v2/Groups/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "integration" + "\\}", apiClient.escapeString(apiClient.parameterToString(integration)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("attributes", attributes));
    localVarQueryParams.addAll(apiClient.parameterToPair("excludedAttributes", excludedAttributes));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/scim+json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/scim+json", "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<ScimResource> localVarReturnType = new TypeReference<ScimResource>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "PUT",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * {@inheritDoc}
   * Update
   * @param id  (required)
   * @param integration  (required)
   * @param tenant  (required)
   * @param scimResource  (required)
   * @param attributes  (optional)
   * @param excludedAttributes  (optional)
   * @return ScimResource
   * @throws ApiException if fails to make API call
   */
  public ScimResource update24(String id, String integration, String tenant, ScimResource scimResource, String attributes, String excludedAttributes) throws ApiException {
    return this.update24(id, integration, tenant, scimResource, attributes, excludedAttributes, Collections.emptyMap());
  }


  /**
   * {@inheritDoc}
   * Update
   * @param id  (required)
   * @param integration  (required)
   * @param tenant  (required)
   * @param scimResource  (required)
   * @param attributes  (optional)
   * @param excludedAttributes  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return ScimResource
   * @throws ApiException if fails to make API call
   */
  public ScimResource update24(String id, String integration, String tenant, ScimResource scimResource, String attributes, String excludedAttributes, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = scimResource;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling update24");
    }
    
    // verify the required parameter 'integration' is set
    if (integration == null) {
      throw new ApiException(400, "Missing the required parameter 'integration' when calling update24");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling update24");
    }
    
    // verify the required parameter 'scimResource' is set
    if (scimResource == null) {
      throw new ApiException(400, "Missing the required parameter 'scimResource' when calling update24");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/integrations/{integration}/scim/v2/Users/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "integration" + "\\}", apiClient.escapeString(apiClient.parameterToString(integration)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("attributes", attributes));
    localVarQueryParams.addAll(apiClient.parameterToPair("excludedAttributes", excludedAttributes));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/scim+json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/scim+json", "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<ScimResource> localVarReturnType = new TypeReference<ScimResource>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "PUT",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * {@inheritDoc}
   * Update
   * @param id  (required)
   * @param integration  (required)
   * @param scimResource  (required)
   * @param attributes  (optional)
   * @param excludedAttributes  (optional)
   * @return ScimResource
   * @throws ApiException if fails to make API call
   */
  public ScimResource update5(String id, String integration, ScimResource scimResource, String attributes, String excludedAttributes) throws ApiException {
    return this.update5(id, integration, scimResource, attributes, excludedAttributes, Collections.emptyMap());
  }


  /**
   * {@inheritDoc}
   * Update
   * @param id  (required)
   * @param integration  (required)
   * @param scimResource  (required)
   * @param attributes  (optional)
   * @param excludedAttributes  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return ScimResource
   * @throws ApiException if fails to make API call
   */
  public ScimResource update5(String id, String integration, ScimResource scimResource, String attributes, String excludedAttributes, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = scimResource;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling update5");
    }
    
    // verify the required parameter 'integration' is set
    if (integration == null) {
      throw new ApiException(400, "Missing the required parameter 'integration' when calling update5");
    }
    
    // verify the required parameter 'scimResource' is set
    if (scimResource == null) {
      throw new ApiException(400, "Missing the required parameter 'scimResource' when calling update5");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/integrations/{integration}/scim/v2/Groups/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "integration" + "\\}", apiClient.escapeString(apiClient.parameterToString(integration)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("attributes", attributes));
    localVarQueryParams.addAll(apiClient.parameterToPair("excludedAttributes", excludedAttributes));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/scim+json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/scim+json", "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<ScimResource> localVarReturnType = new TypeReference<ScimResource>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "PUT",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * {@inheritDoc}
   * Update
   * @param id  (required)
   * @param integration  (required)
   * @param scimResource  (required)
   * @param attributes  (optional)
   * @param excludedAttributes  (optional)
   * @return ScimResource
   * @throws ApiException if fails to make API call
   */
  public ScimResource update6(String id, String integration, ScimResource scimResource, String attributes, String excludedAttributes) throws ApiException {
    return this.update6(id, integration, scimResource, attributes, excludedAttributes, Collections.emptyMap());
  }


  /**
   * {@inheritDoc}
   * Update
   * @param id  (required)
   * @param integration  (required)
   * @param scimResource  (required)
   * @param attributes  (optional)
   * @param excludedAttributes  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return ScimResource
   * @throws ApiException if fails to make API call
   */
  public ScimResource update6(String id, String integration, ScimResource scimResource, String attributes, String excludedAttributes, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = scimResource;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling update6");
    }
    
    // verify the required parameter 'integration' is set
    if (integration == null) {
      throw new ApiException(400, "Missing the required parameter 'integration' when calling update6");
    }
    
    // verify the required parameter 'scimResource' is set
    if (scimResource == null) {
      throw new ApiException(400, "Missing the required parameter 'scimResource' when calling update6");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/integrations/{integration}/scim/v2/Users/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "integration" + "\\}", apiClient.escapeString(apiClient.parameterToString(integration)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("attributes", attributes));
    localVarQueryParams.addAll(apiClient.parameterToPair("excludedAttributes", excludedAttributes));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/scim+json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/scim+json", "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<ScimResource> localVarReturnType = new TypeReference<ScimResource>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "PUT",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  @Override
  public <T> T invokeAPI(String url, String method, Object request, TypeReference<T> returnType, Map<String, String> additionalHeaders) throws ApiException {
    String localVarPath = url.replace(apiClient.getBaseURL(), "");
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarHeaderParams.putAll(additionalHeaders);

    final String[] localVarAccepts = {
      "application/scim+json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/scim+json", "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    return apiClient.invokeAPI(
      localVarPath,
        method,
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        request,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        returnType
    );
  }
}
