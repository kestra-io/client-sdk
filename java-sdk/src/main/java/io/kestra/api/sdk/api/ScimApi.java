/*
 * Kestra EE
 * All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package io.kestra.api.sdk.api;

import com.fasterxml.jackson.core.type.TypeReference;

import io.kestra.api.sdk.internal.ApiException;
import io.kestra.api.sdk.internal.ApiClient;
import io.kestra.api.sdk.internal.BaseApi;
import io.kestra.api.sdk.internal.Configuration;
import io.kestra.api.sdk.internal.Pair;

import io.kestra.api.sdk.model.PatchRequest;
import io.kestra.api.sdk.model.ScimResource;
import io.kestra.api.sdk.model.ScimUser;
import io.kestra.api.sdk.model.SearchRequest;
import io.kestra.api.sdk.model.SortOrder;


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-05T07:35:23.657005690Z[Etc/UTC]", comments = "Generator version: 7.14.0-SNAPSHOT")
public class ScimApi extends BaseApi {

  public ScimApi() {
    super(Configuration.getDefaultApiClient());
  }

  public ScimApi(ApiClient apiClient) {
    super(apiClient);
  }

  /**
   * {@inheritDoc}
   * Create
   * @param integration  (required)
   * @param tenant  (required)
   * @param scimUser  (required)
   * @param attributes  (optional)
   * @param excludedAttributes  (optional)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object createSCIMResourceByIdGroups(@javax.annotation.Nonnull String integration, @javax.annotation.Nonnull String tenant, @javax.annotation.Nonnull ScimUser scimUser, @javax.annotation.Nullable String attributes, @javax.annotation.Nullable String excludedAttributes) throws ApiException {
    return this.createSCIMResourceByIdGroups(integration, tenant, scimUser, attributes, excludedAttributes, Collections.emptyMap());
  }


  /**
   * {@inheritDoc}
   * Create
   * @param integration  (required)
   * @param tenant  (required)
   * @param scimUser  (required)
   * @param attributes  (optional)
   * @param excludedAttributes  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object createSCIMResourceByIdGroups(@javax.annotation.Nonnull String integration, @javax.annotation.Nonnull String tenant, @javax.annotation.Nonnull ScimUser scimUser, @javax.annotation.Nullable String attributes, @javax.annotation.Nullable String excludedAttributes, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = scimUser;
    
    // verify the required parameter 'integration' is set
    if (integration == null) {
      throw new ApiException(400, "Missing the required parameter 'integration' when calling createSCIMResourceByIdGroups");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling createSCIMResourceByIdGroups");
    }
    
    // verify the required parameter 'scimUser' is set
    if (scimUser == null) {
      throw new ApiException(400, "Missing the required parameter 'scimUser' when calling createSCIMResourceByIdGroups");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/integrations/{integration}/scim/v2/Groups"
      .replaceAll("\\{" + "integration" + "\\}", apiClient.escapeString(apiClient.parameterToString(integration)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("attributes", attributes));
    localVarQueryParams.addAll(apiClient.parameterToPair("excludedAttributes", excludedAttributes));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/scim+json", "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/scim+json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * {@inheritDoc}
   * Create
   * @param integration  (required)
   * @param tenant  (required)
   * @param scimUser  (required)
   * @param attributes  (optional)
   * @param excludedAttributes  (optional)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object createSCIMResourceByIdUsers(@javax.annotation.Nonnull String integration, @javax.annotation.Nonnull String tenant, @javax.annotation.Nonnull ScimUser scimUser, @javax.annotation.Nullable String attributes, @javax.annotation.Nullable String excludedAttributes) throws ApiException {
    return this.createSCIMResourceByIdUsers(integration, tenant, scimUser, attributes, excludedAttributes, Collections.emptyMap());
  }


  /**
   * {@inheritDoc}
   * Create
   * @param integration  (required)
   * @param tenant  (required)
   * @param scimUser  (required)
   * @param attributes  (optional)
   * @param excludedAttributes  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object createSCIMResourceByIdUsers(@javax.annotation.Nonnull String integration, @javax.annotation.Nonnull String tenant, @javax.annotation.Nonnull ScimUser scimUser, @javax.annotation.Nullable String attributes, @javax.annotation.Nullable String excludedAttributes, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = scimUser;
    
    // verify the required parameter 'integration' is set
    if (integration == null) {
      throw new ApiException(400, "Missing the required parameter 'integration' when calling createSCIMResourceByIdUsers");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling createSCIMResourceByIdUsers");
    }
    
    // verify the required parameter 'scimUser' is set
    if (scimUser == null) {
      throw new ApiException(400, "Missing the required parameter 'scimUser' when calling createSCIMResourceByIdUsers");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/integrations/{integration}/scim/v2/Users"
      .replaceAll("\\{" + "integration" + "\\}", apiClient.escapeString(apiClient.parameterToString(integration)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("attributes", attributes));
    localVarQueryParams.addAll(apiClient.parameterToPair("excludedAttributes", excludedAttributes));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/scim+json", "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/scim+json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * {@inheritDoc}
   * Delete from the backing store
   * @param id  (required)
   * @param integration  (required)
   * @param tenant  (required)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object deleteGroups(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String integration, @javax.annotation.Nonnull String tenant) throws ApiException {
    return this.deleteGroups(id, integration, tenant, Collections.emptyMap());
  }


  /**
   * {@inheritDoc}
   * Delete from the backing store
   * @param id  (required)
   * @param integration  (required)
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object deleteGroups(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String integration, @javax.annotation.Nonnull String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteGroups");
    }
    
    // verify the required parameter 'integration' is set
    if (integration == null) {
      throw new ApiException(400, "Missing the required parameter 'integration' when calling deleteGroups");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling deleteGroups");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/integrations/{integration}/scim/v2/Groups/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "integration" + "\\}", apiClient.escapeString(apiClient.parameterToString(integration)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/scim+json", "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * {@inheritDoc}
   * Delete from the backing store
   * @param id  (required)
   * @param integration  (required)
   * @param tenant  (required)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object deleteUsers(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String integration, @javax.annotation.Nonnull String tenant) throws ApiException {
    return this.deleteUsers(id, integration, tenant, Collections.emptyMap());
  }


  /**
   * {@inheritDoc}
   * Delete from the backing store
   * @param id  (required)
   * @param integration  (required)
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object deleteUsers(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String integration, @javax.annotation.Nonnull String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteUsers");
    }
    
    // verify the required parameter 'integration' is set
    if (integration == null) {
      throw new ApiException(400, "Missing the required parameter 'integration' when calling deleteUsers");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling deleteUsers");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/integrations/{integration}/scim/v2/Users/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "integration" + "\\}", apiClient.escapeString(apiClient.parameterToString(integration)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/scim+json", "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * {@inheritDoc}
   * Search
   * @param integration  (required)
   * @param tenant  (required)
   * @param searchRequest  (required)
   * @return ScimResource
   * @throws ApiException if fails to make API call
   */
  public ScimResource findGroups(@javax.annotation.Nonnull String integration, @javax.annotation.Nonnull String tenant, @javax.annotation.Nonnull SearchRequest searchRequest) throws ApiException {
    return this.findGroups(integration, tenant, searchRequest, Collections.emptyMap());
  }


  /**
   * {@inheritDoc}
   * Search
   * @param integration  (required)
   * @param tenant  (required)
   * @param searchRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return ScimResource
   * @throws ApiException if fails to make API call
   */
  public ScimResource findGroups(@javax.annotation.Nonnull String integration, @javax.annotation.Nonnull String tenant, @javax.annotation.Nonnull SearchRequest searchRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = searchRequest;
    
    // verify the required parameter 'integration' is set
    if (integration == null) {
      throw new ApiException(400, "Missing the required parameter 'integration' when calling findGroups");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling findGroups");
    }
    
    // verify the required parameter 'searchRequest' is set
    if (searchRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'searchRequest' when calling findGroups");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/integrations/{integration}/scim/v2/Groups/.search"
      .replaceAll("\\{" + "integration" + "\\}", apiClient.escapeString(apiClient.parameterToString(integration)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/scim+json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/scim+json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<ScimResource> localVarReturnType = new TypeReference<ScimResource>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * {@inheritDoc}
   * Search
   * @param integration  (required)
   * @param tenant  (required)
   * @param searchRequest  (required)
   * @return ScimResource
   * @throws ApiException if fails to make API call
   */
  public ScimResource findUsers(@javax.annotation.Nonnull String integration, @javax.annotation.Nonnull String tenant, @javax.annotation.Nonnull SearchRequest searchRequest) throws ApiException {
    return this.findUsers(integration, tenant, searchRequest, Collections.emptyMap());
  }


  /**
   * {@inheritDoc}
   * Search
   * @param integration  (required)
   * @param tenant  (required)
   * @param searchRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return ScimResource
   * @throws ApiException if fails to make API call
   */
  public ScimResource findUsers(@javax.annotation.Nonnull String integration, @javax.annotation.Nonnull String tenant, @javax.annotation.Nonnull SearchRequest searchRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = searchRequest;
    
    // verify the required parameter 'integration' is set
    if (integration == null) {
      throw new ApiException(400, "Missing the required parameter 'integration' when calling findUsers");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling findUsers");
    }
    
    // verify the required parameter 'searchRequest' is set
    if (searchRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'searchRequest' when calling findUsers");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/integrations/{integration}/scim/v2/Users/.search"
      .replaceAll("\\{" + "integration" + "\\}", apiClient.escapeString(apiClient.parameterToString(integration)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/scim+json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/scim+json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<ScimResource> localVarReturnType = new TypeReference<ScimResource>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * {@inheritDoc}
   * Find by id
   * @param id  (required)
   * @param integration  (required)
   * @param tenant  (required)
   * @param attributes  (optional)
   * @param excludedAttributes  (optional)
   * @return ScimResource
   * @throws ApiException if fails to make API call
   */
  public ScimResource getSCIMResourceByIdGroups(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String integration, @javax.annotation.Nonnull String tenant, @javax.annotation.Nullable String attributes, @javax.annotation.Nullable String excludedAttributes) throws ApiException {
    return this.getSCIMResourceByIdGroups(id, integration, tenant, attributes, excludedAttributes, Collections.emptyMap());
  }


  /**
   * {@inheritDoc}
   * Find by id
   * @param id  (required)
   * @param integration  (required)
   * @param tenant  (required)
   * @param attributes  (optional)
   * @param excludedAttributes  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return ScimResource
   * @throws ApiException if fails to make API call
   */
  public ScimResource getSCIMResourceByIdGroups(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String integration, @javax.annotation.Nonnull String tenant, @javax.annotation.Nullable String attributes, @javax.annotation.Nullable String excludedAttributes, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getSCIMResourceByIdGroups");
    }
    
    // verify the required parameter 'integration' is set
    if (integration == null) {
      throw new ApiException(400, "Missing the required parameter 'integration' when calling getSCIMResourceByIdGroups");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling getSCIMResourceByIdGroups");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/integrations/{integration}/scim/v2/Groups/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "integration" + "\\}", apiClient.escapeString(apiClient.parameterToString(integration)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("attributes", attributes));
    localVarQueryParams.addAll(apiClient.parameterToPair("excludedAttributes", excludedAttributes));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/scim+json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<ScimResource> localVarReturnType = new TypeReference<ScimResource>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * {@inheritDoc}
   * Find by id
   * @param id  (required)
   * @param integration  (required)
   * @param tenant  (required)
   * @param attributes  (optional)
   * @param excludedAttributes  (optional)
   * @return ScimResource
   * @throws ApiException if fails to make API call
   */
  public ScimResource getSCIMResourceByIdUsers(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String integration, @javax.annotation.Nonnull String tenant, @javax.annotation.Nullable String attributes, @javax.annotation.Nullable String excludedAttributes) throws ApiException {
    return this.getSCIMResourceByIdUsers(id, integration, tenant, attributes, excludedAttributes, Collections.emptyMap());
  }


  /**
   * {@inheritDoc}
   * Find by id
   * @param id  (required)
   * @param integration  (required)
   * @param tenant  (required)
   * @param attributes  (optional)
   * @param excludedAttributes  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return ScimResource
   * @throws ApiException if fails to make API call
   */
  public ScimResource getSCIMResourceByIdUsers(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String integration, @javax.annotation.Nonnull String tenant, @javax.annotation.Nullable String attributes, @javax.annotation.Nullable String excludedAttributes, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getSCIMResourceByIdUsers");
    }
    
    // verify the required parameter 'integration' is set
    if (integration == null) {
      throw new ApiException(400, "Missing the required parameter 'integration' when calling getSCIMResourceByIdUsers");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling getSCIMResourceByIdUsers");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/integrations/{integration}/scim/v2/Users/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "integration" + "\\}", apiClient.escapeString(apiClient.parameterToString(integration)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("attributes", attributes));
    localVarQueryParams.addAll(apiClient.parameterToPair("excludedAttributes", excludedAttributes));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/scim+json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<ScimResource> localVarReturnType = new TypeReference<ScimResource>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * {@inheritDoc}
   * Patch a portion of the backing store
   * @param id  (required)
   * @param integration  (required)
   * @param tenant  (required)
   * @param patchRequest  (required)
   * @param attributes  (optional)
   * @param excludedAttributes  (optional)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object patchGroups(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String integration, @javax.annotation.Nonnull String tenant, @javax.annotation.Nonnull PatchRequest patchRequest, @javax.annotation.Nullable String attributes, @javax.annotation.Nullable String excludedAttributes) throws ApiException {
    return this.patchGroups(id, integration, tenant, patchRequest, attributes, excludedAttributes, Collections.emptyMap());
  }


  /**
   * {@inheritDoc}
   * Patch a portion of the backing store
   * @param id  (required)
   * @param integration  (required)
   * @param tenant  (required)
   * @param patchRequest  (required)
   * @param attributes  (optional)
   * @param excludedAttributes  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object patchGroups(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String integration, @javax.annotation.Nonnull String tenant, @javax.annotation.Nonnull PatchRequest patchRequest, @javax.annotation.Nullable String attributes, @javax.annotation.Nullable String excludedAttributes, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = patchRequest;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling patchGroups");
    }
    
    // verify the required parameter 'integration' is set
    if (integration == null) {
      throw new ApiException(400, "Missing the required parameter 'integration' when calling patchGroups");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling patchGroups");
    }
    
    // verify the required parameter 'patchRequest' is set
    if (patchRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'patchRequest' when calling patchGroups");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/integrations/{integration}/scim/v2/Groups/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "integration" + "\\}", apiClient.escapeString(apiClient.parameterToString(integration)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("attributes", attributes));
    localVarQueryParams.addAll(apiClient.parameterToPair("excludedAttributes", excludedAttributes));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/scim+json", "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/scim+json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "PATCH",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * {@inheritDoc}
   * Patch a portion of the backing store
   * @param id  (required)
   * @param integration  (required)
   * @param tenant  (required)
   * @param patchRequest  (required)
   * @param attributes  (optional)
   * @param excludedAttributes  (optional)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object patchUsers(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String integration, @javax.annotation.Nonnull String tenant, @javax.annotation.Nonnull PatchRequest patchRequest, @javax.annotation.Nullable String attributes, @javax.annotation.Nullable String excludedAttributes) throws ApiException {
    return this.patchUsers(id, integration, tenant, patchRequest, attributes, excludedAttributes, Collections.emptyMap());
  }


  /**
   * {@inheritDoc}
   * Patch a portion of the backing store
   * @param id  (required)
   * @param integration  (required)
   * @param tenant  (required)
   * @param patchRequest  (required)
   * @param attributes  (optional)
   * @param excludedAttributes  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object patchUsers(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String integration, @javax.annotation.Nonnull String tenant, @javax.annotation.Nonnull PatchRequest patchRequest, @javax.annotation.Nullable String attributes, @javax.annotation.Nullable String excludedAttributes, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = patchRequest;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling patchUsers");
    }
    
    // verify the required parameter 'integration' is set
    if (integration == null) {
      throw new ApiException(400, "Missing the required parameter 'integration' when calling patchUsers");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling patchUsers");
    }
    
    // verify the required parameter 'patchRequest' is set
    if (patchRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'patchRequest' when calling patchUsers");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/integrations/{integration}/scim/v2/Users/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "integration" + "\\}", apiClient.escapeString(apiClient.parameterToString(integration)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("attributes", attributes));
    localVarQueryParams.addAll(apiClient.parameterToPair("excludedAttributes", excludedAttributes));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/scim+json", "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/scim+json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "PATCH",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * {@inheritDoc}
   * Find by a combination of query parameters
   * @param integration  (required)
   * @param tenant  (required)
   * @param attributes  (optional)
   * @param excludedAttributes  (optional)
   * @param filter  (optional)
   * @param sortBy  (optional)
   * @param sortOrder  (optional)
   * @param startIndex  (optional)
   * @param count  (optional)
   * @return ScimResource
   * @throws ApiException if fails to make API call
   */
  public ScimResource queryGroups(@javax.annotation.Nonnull String integration, @javax.annotation.Nonnull String tenant, @javax.annotation.Nullable String attributes, @javax.annotation.Nullable String excludedAttributes, @javax.annotation.Nullable String filter, @javax.annotation.Nullable String sortBy, @javax.annotation.Nullable SortOrder sortOrder, @javax.annotation.Nullable Integer startIndex, @javax.annotation.Nullable Integer count) throws ApiException {
    return this.queryGroups(integration, tenant, attributes, excludedAttributes, filter, sortBy, sortOrder, startIndex, count, Collections.emptyMap());
  }


  /**
   * {@inheritDoc}
   * Find by a combination of query parameters
   * @param integration  (required)
   * @param tenant  (required)
   * @param attributes  (optional)
   * @param excludedAttributes  (optional)
   * @param filter  (optional)
   * @param sortBy  (optional)
   * @param sortOrder  (optional)
   * @param startIndex  (optional)
   * @param count  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return ScimResource
   * @throws ApiException if fails to make API call
   */
  public ScimResource queryGroups(@javax.annotation.Nonnull String integration, @javax.annotation.Nonnull String tenant, @javax.annotation.Nullable String attributes, @javax.annotation.Nullable String excludedAttributes, @javax.annotation.Nullable String filter, @javax.annotation.Nullable String sortBy, @javax.annotation.Nullable SortOrder sortOrder, @javax.annotation.Nullable Integer startIndex, @javax.annotation.Nullable Integer count, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'integration' is set
    if (integration == null) {
      throw new ApiException(400, "Missing the required parameter 'integration' when calling queryGroups");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling queryGroups");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/integrations/{integration}/scim/v2/Groups"
      .replaceAll("\\{" + "integration" + "\\}", apiClient.escapeString(apiClient.parameterToString(integration)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("attributes", attributes));
    localVarQueryParams.addAll(apiClient.parameterToPair("excludedAttributes", excludedAttributes));
    localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
    localVarQueryParams.addAll(apiClient.parameterToPair("sortBy", sortBy));
    localVarQueryParams.addAll(apiClient.parameterToPair("sortOrder", sortOrder));
    localVarQueryParams.addAll(apiClient.parameterToPair("startIndex", startIndex));
    localVarQueryParams.addAll(apiClient.parameterToPair("count", count));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/scim+json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<ScimResource> localVarReturnType = new TypeReference<ScimResource>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * {@inheritDoc}
   * Find by a combination of query parameters
   * @param integration  (required)
   * @param tenant  (required)
   * @param attributes  (optional)
   * @param excludedAttributes  (optional)
   * @param filter  (optional)
   * @param sortBy  (optional)
   * @param sortOrder  (optional)
   * @param startIndex  (optional)
   * @param count  (optional)
   * @return ScimResource
   * @throws ApiException if fails to make API call
   */
  public ScimResource queryUsers(@javax.annotation.Nonnull String integration, @javax.annotation.Nonnull String tenant, @javax.annotation.Nullable String attributes, @javax.annotation.Nullable String excludedAttributes, @javax.annotation.Nullable String filter, @javax.annotation.Nullable String sortBy, @javax.annotation.Nullable SortOrder sortOrder, @javax.annotation.Nullable Integer startIndex, @javax.annotation.Nullable Integer count) throws ApiException {
    return this.queryUsers(integration, tenant, attributes, excludedAttributes, filter, sortBy, sortOrder, startIndex, count, Collections.emptyMap());
  }


  /**
   * {@inheritDoc}
   * Find by a combination of query parameters
   * @param integration  (required)
   * @param tenant  (required)
   * @param attributes  (optional)
   * @param excludedAttributes  (optional)
   * @param filter  (optional)
   * @param sortBy  (optional)
   * @param sortOrder  (optional)
   * @param startIndex  (optional)
   * @param count  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return ScimResource
   * @throws ApiException if fails to make API call
   */
  public ScimResource queryUsers(@javax.annotation.Nonnull String integration, @javax.annotation.Nonnull String tenant, @javax.annotation.Nullable String attributes, @javax.annotation.Nullable String excludedAttributes, @javax.annotation.Nullable String filter, @javax.annotation.Nullable String sortBy, @javax.annotation.Nullable SortOrder sortOrder, @javax.annotation.Nullable Integer startIndex, @javax.annotation.Nullable Integer count, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'integration' is set
    if (integration == null) {
      throw new ApiException(400, "Missing the required parameter 'integration' when calling queryUsers");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling queryUsers");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/integrations/{integration}/scim/v2/Users"
      .replaceAll("\\{" + "integration" + "\\}", apiClient.escapeString(apiClient.parameterToString(integration)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("attributes", attributes));
    localVarQueryParams.addAll(apiClient.parameterToPair("excludedAttributes", excludedAttributes));
    localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
    localVarQueryParams.addAll(apiClient.parameterToPair("sortBy", sortBy));
    localVarQueryParams.addAll(apiClient.parameterToPair("sortOrder", sortOrder));
    localVarQueryParams.addAll(apiClient.parameterToPair("startIndex", startIndex));
    localVarQueryParams.addAll(apiClient.parameterToPair("count", count));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/scim+json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<ScimResource> localVarReturnType = new TypeReference<ScimResource>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * {@inheritDoc}
   * Update
   * @param id  (required)
   * @param integration  (required)
   * @param tenant  (required)
   * @param scimResource  (required)
   * @param attributes  (optional)
   * @param excludedAttributes  (optional)
   * @return ScimResource
   * @throws ApiException if fails to make API call
   */
  public ScimResource updateGroups(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String integration, @javax.annotation.Nonnull String tenant, @javax.annotation.Nonnull ScimResource scimResource, @javax.annotation.Nullable String attributes, @javax.annotation.Nullable String excludedAttributes) throws ApiException {
    return this.updateGroups(id, integration, tenant, scimResource, attributes, excludedAttributes, Collections.emptyMap());
  }


  /**
   * {@inheritDoc}
   * Update
   * @param id  (required)
   * @param integration  (required)
   * @param tenant  (required)
   * @param scimResource  (required)
   * @param attributes  (optional)
   * @param excludedAttributes  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return ScimResource
   * @throws ApiException if fails to make API call
   */
  public ScimResource updateGroups(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String integration, @javax.annotation.Nonnull String tenant, @javax.annotation.Nonnull ScimResource scimResource, @javax.annotation.Nullable String attributes, @javax.annotation.Nullable String excludedAttributes, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = scimResource;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling updateGroups");
    }
    
    // verify the required parameter 'integration' is set
    if (integration == null) {
      throw new ApiException(400, "Missing the required parameter 'integration' when calling updateGroups");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling updateGroups");
    }
    
    // verify the required parameter 'scimResource' is set
    if (scimResource == null) {
      throw new ApiException(400, "Missing the required parameter 'scimResource' when calling updateGroups");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/integrations/{integration}/scim/v2/Groups/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "integration" + "\\}", apiClient.escapeString(apiClient.parameterToString(integration)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("attributes", attributes));
    localVarQueryParams.addAll(apiClient.parameterToPair("excludedAttributes", excludedAttributes));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/scim+json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/scim+json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<ScimResource> localVarReturnType = new TypeReference<ScimResource>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "PUT",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * {@inheritDoc}
   * Update
   * @param id  (required)
   * @param integration  (required)
   * @param tenant  (required)
   * @param scimResource  (required)
   * @param attributes  (optional)
   * @param excludedAttributes  (optional)
   * @return ScimResource
   * @throws ApiException if fails to make API call
   */
  public ScimResource updateUsers(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String integration, @javax.annotation.Nonnull String tenant, @javax.annotation.Nonnull ScimResource scimResource, @javax.annotation.Nullable String attributes, @javax.annotation.Nullable String excludedAttributes) throws ApiException {
    return this.updateUsers(id, integration, tenant, scimResource, attributes, excludedAttributes, Collections.emptyMap());
  }


  /**
   * {@inheritDoc}
   * Update
   * @param id  (required)
   * @param integration  (required)
   * @param tenant  (required)
   * @param scimResource  (required)
   * @param attributes  (optional)
   * @param excludedAttributes  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return ScimResource
   * @throws ApiException if fails to make API call
   */
  public ScimResource updateUsers(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String integration, @javax.annotation.Nonnull String tenant, @javax.annotation.Nonnull ScimResource scimResource, @javax.annotation.Nullable String attributes, @javax.annotation.Nullable String excludedAttributes, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = scimResource;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling updateUsers");
    }
    
    // verify the required parameter 'integration' is set
    if (integration == null) {
      throw new ApiException(400, "Missing the required parameter 'integration' when calling updateUsers");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling updateUsers");
    }
    
    // verify the required parameter 'scimResource' is set
    if (scimResource == null) {
      throw new ApiException(400, "Missing the required parameter 'scimResource' when calling updateUsers");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/integrations/{integration}/scim/v2/Users/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "integration" + "\\}", apiClient.escapeString(apiClient.parameterToString(integration)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("attributes", attributes));
    localVarQueryParams.addAll(apiClient.parameterToPair("excludedAttributes", excludedAttributes));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/scim+json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/scim+json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<ScimResource> localVarReturnType = new TypeReference<ScimResource>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "PUT",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  @Override
  public <T> T invokeAPI(String url, String method, Object request, TypeReference<T> returnType, Map<String, String> additionalHeaders) throws ApiException {
    String localVarPath = url.replace(apiClient.getBaseURL(), "");
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarHeaderParams.putAll(additionalHeaders);

    final String[] localVarAccepts = {
      "application/scim+json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/scim+json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    return apiClient.invokeAPI(
      localVarPath,
        method,
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        request,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        returnType
    );
  }
}
