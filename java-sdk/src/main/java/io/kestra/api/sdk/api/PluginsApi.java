/*
 * Kestra EE
 * All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package io.kestra.api.sdk.api;

import com.fasterxml.jackson.core.type.TypeReference;

import io.kestra.api.sdk.internal.ApiException;
import io.kestra.api.sdk.internal.ApiClient;
import io.kestra.api.sdk.internal.BaseApi;
import io.kestra.api.sdk.internal.Configuration;
import io.kestra.api.sdk.internal.Pair;

import io.kestra.api.sdk.model.ClusterControllerApiPluginArtifactListPluginArtifact;
import io.kestra.api.sdk.model.ClusterControllerApiPluginArtifactListPluginResolutionResult;
import io.kestra.api.sdk.model.ClusterControllerApiPluginListRequest;
import io.kestra.api.sdk.model.ClusterControllerApiPluginVersionDetails;
import io.kestra.api.sdk.model.ClusterControllerApiPluginVersions;
import io.kestra.api.sdk.model.DocumentationWithSchema;
import java.io.File;
import io.kestra.api.sdk.model.InputType;
import io.kestra.api.sdk.model.PagedResultsClusterControllerApiPluginArtifact;
import io.kestra.api.sdk.model.Plugin;
import io.kestra.api.sdk.model.PluginArtifact;
import io.kestra.api.sdk.model.PluginControllerApiPluginVersions;
import io.kestra.api.sdk.model.PluginIcon;
import io.kestra.api.sdk.model.SchemaType;
import io.kestra.api.sdk.model.Type;


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-05T07:35:23.657005690Z[Etc/UTC]", comments = "Generator version: 7.14.0-SNAPSHOT")
public class PluginsApi extends BaseApi {

  public PluginsApi() {
    super(Configuration.getDefaultApiClient());
  }

  public PluginsApi(ApiClient apiClient) {
    super(apiClient);
  }

  /**
   * Get all types for an inputs
   * 
   * @param tenant  (required)
   * @return List&lt;InputType&gt;
   * @throws ApiException if fails to make API call
   */
  public List<InputType> getAllInputTypes(@javax.annotation.Nonnull String tenant) throws ApiException {
    return this.getAllInputTypes(tenant, Collections.emptyMap());
  }


  /**
   * Get all types for an inputs
   * 
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return List&lt;InputType&gt;
   * @throws ApiException if fails to make API call
   */
  public List<InputType> getAllInputTypes(@javax.annotation.Nonnull String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling getAllInputTypes");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/plugins/inputs"
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<List<InputType>> localVarReturnType = new TypeReference<List<InputType>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get plugins group by subgroups
   * 
   * @param includeDeprecated Whether to include deprecated plugins (required)
   * @param tenant  (required)
   * @return List&lt;Plugin&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Plugin> getPluginBySubgroups(@javax.annotation.Nonnull Boolean includeDeprecated, @javax.annotation.Nonnull String tenant) throws ApiException {
    return this.getPluginBySubgroups(includeDeprecated, tenant, Collections.emptyMap());
  }


  /**
   * Get plugins group by subgroups
   * 
   * @param includeDeprecated Whether to include deprecated plugins (required)
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return List&lt;Plugin&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Plugin> getPluginBySubgroups(@javax.annotation.Nonnull Boolean includeDeprecated, @javax.annotation.Nonnull String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'includeDeprecated' is set
    if (includeDeprecated == null) {
      throw new ApiException(400, "Missing the required parameter 'includeDeprecated' when calling getPluginBySubgroups");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling getPluginBySubgroups");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/plugins/groups/subgroups"
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("includeDeprecated", includeDeprecated));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<List<Plugin>> localVarReturnType = new TypeReference<List<Plugin>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get plugin documentation
   * 
   * @param cls The plugin full class name (required)
   * @param all Include all the properties (required)
   * @param tenant  (required)
   * @return DocumentationWithSchema
   * @throws ApiException if fails to make API call
   */
  public DocumentationWithSchema getPluginDocumentation(@javax.annotation.Nonnull String cls, @javax.annotation.Nonnull Boolean all, @javax.annotation.Nonnull String tenant) throws ApiException {
    return this.getPluginDocumentation(cls, all, tenant, Collections.emptyMap());
  }


  /**
   * Get plugin documentation
   * 
   * @param cls The plugin full class name (required)
   * @param all Include all the properties (required)
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return DocumentationWithSchema
   * @throws ApiException if fails to make API call
   */
  public DocumentationWithSchema getPluginDocumentation(@javax.annotation.Nonnull String cls, @javax.annotation.Nonnull Boolean all, @javax.annotation.Nonnull String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'cls' is set
    if (cls == null) {
      throw new ApiException(400, "Missing the required parameter 'cls' when calling getPluginDocumentation");
    }
    
    // verify the required parameter 'all' is set
    if (all == null) {
      throw new ApiException(400, "Missing the required parameter 'all' when calling getPluginDocumentation");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling getPluginDocumentation");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/plugins/{cls}"
      .replaceAll("\\{" + "cls" + "\\}", apiClient.escapeString(apiClient.parameterToString(cls)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("all", all));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<DocumentationWithSchema> localVarReturnType = new TypeReference<DocumentationWithSchema>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get plugin documentation
   * 
   * @param cls The plugin type (required)
   * @param version The plugin version (required)
   * @param all Include all the properties (required)
   * @param tenant  (required)
   * @return DocumentationWithSchema
   * @throws ApiException if fails to make API call
   */
  public DocumentationWithSchema getPluginDocumentationFromVersion(@javax.annotation.Nonnull String cls, @javax.annotation.Nonnull String version, @javax.annotation.Nonnull Boolean all, @javax.annotation.Nonnull String tenant) throws ApiException {
    return this.getPluginDocumentationFromVersion(cls, version, all, tenant, Collections.emptyMap());
  }


  /**
   * Get plugin documentation
   * 
   * @param cls The plugin type (required)
   * @param version The plugin version (required)
   * @param all Include all the properties (required)
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return DocumentationWithSchema
   * @throws ApiException if fails to make API call
   */
  public DocumentationWithSchema getPluginDocumentationFromVersion(@javax.annotation.Nonnull String cls, @javax.annotation.Nonnull String version, @javax.annotation.Nonnull Boolean all, @javax.annotation.Nonnull String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'cls' is set
    if (cls == null) {
      throw new ApiException(400, "Missing the required parameter 'cls' when calling getPluginDocumentationFromVersion");
    }
    
    // verify the required parameter 'version' is set
    if (version == null) {
      throw new ApiException(400, "Missing the required parameter 'version' when calling getPluginDocumentationFromVersion");
    }
    
    // verify the required parameter 'all' is set
    if (all == null) {
      throw new ApiException(400, "Missing the required parameter 'all' when calling getPluginDocumentationFromVersion");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling getPluginDocumentationFromVersion");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/plugins/{cls}/versions/{version}"
      .replaceAll("\\{" + "cls" + "\\}", apiClient.escapeString(apiClient.parameterToString(cls)))
      .replaceAll("\\{" + "version" + "\\}", apiClient.escapeString(apiClient.parameterToString(version)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("all", all));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<DocumentationWithSchema> localVarReturnType = new TypeReference<DocumentationWithSchema>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get plugins icons
   * 
   * @param tenant  (required)
   * @return Map&lt;String, PluginIcon&gt;
   * @throws ApiException if fails to make API call
   */
  public Map<String, PluginIcon> getPluginGroupIcons(@javax.annotation.Nonnull String tenant) throws ApiException {
    return this.getPluginGroupIcons(tenant, Collections.emptyMap());
  }


  /**
   * Get plugins icons
   * 
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Map&lt;String, PluginIcon&gt;
   * @throws ApiException if fails to make API call
   */
  public Map<String, PluginIcon> getPluginGroupIcons(@javax.annotation.Nonnull String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling getPluginGroupIcons");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/plugins/icons/groups"
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<Map<String, PluginIcon>> localVarReturnType = new TypeReference<Map<String, PluginIcon>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get plugins icons
   * 
   * @param tenant  (required)
   * @return Map&lt;String, PluginIcon&gt;
   * @throws ApiException if fails to make API call
   */
  public Map<String, PluginIcon> getPluginIcons(@javax.annotation.Nonnull String tenant) throws ApiException {
    return this.getPluginIcons(tenant, Collections.emptyMap());
  }


  /**
   * Get plugins icons
   * 
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Map&lt;String, PluginIcon&gt;
   * @throws ApiException if fails to make API call
   */
  public Map<String, PluginIcon> getPluginIcons(@javax.annotation.Nonnull String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling getPluginIcons");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/plugins/icons"
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<Map<String, PluginIcon>> localVarReturnType = new TypeReference<Map<String, PluginIcon>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get all versions for a plugin
   * 
   * @param cls The plugin type (required)
   * @param tenant  (required)
   * @return PluginControllerApiPluginVersions
   * @throws ApiException if fails to make API call
   */
  public PluginControllerApiPluginVersions getPluginVersions(@javax.annotation.Nonnull String cls, @javax.annotation.Nonnull String tenant) throws ApiException {
    return this.getPluginVersions(cls, tenant, Collections.emptyMap());
  }


  /**
   * Get all versions for a plugin
   * 
   * @param cls The plugin type (required)
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return PluginControllerApiPluginVersions
   * @throws ApiException if fails to make API call
   */
  public PluginControllerApiPluginVersions getPluginVersions(@javax.annotation.Nonnull String cls, @javax.annotation.Nonnull String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'cls' is set
    if (cls == null) {
      throw new ApiException(400, "Missing the required parameter 'cls' when calling getPluginVersions");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling getPluginVersions");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/plugins/{cls}/versions"
      .replaceAll("\\{" + "cls" + "\\}", apiClient.escapeString(apiClient.parameterToString(cls)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<PluginControllerApiPluginVersions> localVarReturnType = new TypeReference<PluginControllerApiPluginVersions>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get json schemas for an input type
   * The schema will be output as [http://json-schema.org/draft-07/schema](Json Schema Draft 7)
   * @param type The schema needed (required)
   * @param tenant  (required)
   * @return DocumentationWithSchema
   * @throws ApiException if fails to make API call
   */
  public DocumentationWithSchema getSchemaFromInputType(@javax.annotation.Nonnull Type type, @javax.annotation.Nonnull String tenant) throws ApiException {
    return this.getSchemaFromInputType(type, tenant, Collections.emptyMap());
  }


  /**
   * Get json schemas for an input type
   * The schema will be output as [http://json-schema.org/draft-07/schema](Json Schema Draft 7)
   * @param type The schema needed (required)
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return DocumentationWithSchema
   * @throws ApiException if fails to make API call
   */
  public DocumentationWithSchema getSchemaFromInputType(@javax.annotation.Nonnull Type type, @javax.annotation.Nonnull String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'type' is set
    if (type == null) {
      throw new ApiException(400, "Missing the required parameter 'type' when calling getSchemaFromInputType");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling getSchemaFromInputType");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/plugins/inputs/{type}"
      .replaceAll("\\{" + "type" + "\\}", apiClient.escapeString(apiClient.parameterToString(type)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<DocumentationWithSchema> localVarReturnType = new TypeReference<DocumentationWithSchema>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get all json schemas for a type
   * The schema will be output as [http://json-schema.org/draft-07/schema](Json Schema Draft 7)
   * @param type The schema needed (required)
   * @param arrayOf If schema should be an array of requested type (required)
   * @param tenant  (required)
   * @return Map&lt;String, Object&gt;
   * @throws ApiException if fails to make API call
   */
  public Map<String, Object> getSchemasFromType(@javax.annotation.Nonnull SchemaType type, @javax.annotation.Nonnull Boolean arrayOf, @javax.annotation.Nonnull String tenant) throws ApiException {
    return this.getSchemasFromType(type, arrayOf, tenant, Collections.emptyMap());
  }


  /**
   * Get all json schemas for a type
   * The schema will be output as [http://json-schema.org/draft-07/schema](Json Schema Draft 7)
   * @param type The schema needed (required)
   * @param arrayOf If schema should be an array of requested type (required)
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Map&lt;String, Object&gt;
   * @throws ApiException if fails to make API call
   */
  public Map<String, Object> getSchemasFromType(@javax.annotation.Nonnull SchemaType type, @javax.annotation.Nonnull Boolean arrayOf, @javax.annotation.Nonnull String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'type' is set
    if (type == null) {
      throw new ApiException(400, "Missing the required parameter 'type' when calling getSchemasFromType");
    }
    
    // verify the required parameter 'arrayOf' is set
    if (arrayOf == null) {
      throw new ApiException(400, "Missing the required parameter 'arrayOf' when calling getSchemasFromType");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling getSchemasFromType");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/plugins/schemas/{type}"
      .replaceAll("\\{" + "type" + "\\}", apiClient.escapeString(apiClient.parameterToString(type)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("arrayOf", arrayOf));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<Map<String, Object>> localVarReturnType = new TypeReference<Map<String, Object>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get details about a Kestra&#39;s plugin artifact.
   * 
   * @param groupId  (required)
   * @param artifactId  (required)
   * @param tenant  (required)
   * @return ClusterControllerApiPluginVersions
   * @throws ApiException if fails to make API call
   */
  public ClusterControllerApiPluginVersions getVersionedPluginDetails(@javax.annotation.Nonnull String groupId, @javax.annotation.Nonnull String artifactId, @javax.annotation.Nonnull String tenant) throws ApiException {
    return this.getVersionedPluginDetails(groupId, artifactId, tenant, Collections.emptyMap());
  }


  /**
   * Get details about a Kestra&#39;s plugin artifact.
   * 
   * @param groupId  (required)
   * @param artifactId  (required)
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return ClusterControllerApiPluginVersions
   * @throws ApiException if fails to make API call
   */
  public ClusterControllerApiPluginVersions getVersionedPluginDetails(@javax.annotation.Nonnull String groupId, @javax.annotation.Nonnull String artifactId, @javax.annotation.Nonnull String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'groupId' is set
    if (groupId == null) {
      throw new ApiException(400, "Missing the required parameter 'groupId' when calling getVersionedPluginDetails");
    }
    
    // verify the required parameter 'artifactId' is set
    if (artifactId == null) {
      throw new ApiException(400, "Missing the required parameter 'artifactId' when calling getVersionedPluginDetails");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling getVersionedPluginDetails");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/cluster/versioned-plugins/{groupId}/{artifactId}"
      .replaceAll("\\{" + "groupId" + "\\}", apiClient.escapeString(apiClient.parameterToString(groupId)))
      .replaceAll("\\{" + "artifactId" + "\\}", apiClient.escapeString(apiClient.parameterToString(artifactId)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<ClusterControllerApiPluginVersions> localVarReturnType = new TypeReference<ClusterControllerApiPluginVersions>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get details about a specific Kestra&#39;s plugin artifact version.
   * 
   * @param groupId  (required)
   * @param artifactId  (required)
   * @param version  (required)
   * @param tenant  (required)
   * @return ClusterControllerApiPluginVersionDetails
   * @throws ApiException if fails to make API call
   */
  public ClusterControllerApiPluginVersionDetails getVersionedPluginDetailsFromVersion(@javax.annotation.Nonnull String groupId, @javax.annotation.Nonnull String artifactId, @javax.annotation.Nonnull String version, @javax.annotation.Nonnull String tenant) throws ApiException {
    return this.getVersionedPluginDetailsFromVersion(groupId, artifactId, version, tenant, Collections.emptyMap());
  }


  /**
   * Get details about a specific Kestra&#39;s plugin artifact version.
   * 
   * @param groupId  (required)
   * @param artifactId  (required)
   * @param version  (required)
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return ClusterControllerApiPluginVersionDetails
   * @throws ApiException if fails to make API call
   */
  public ClusterControllerApiPluginVersionDetails getVersionedPluginDetailsFromVersion(@javax.annotation.Nonnull String groupId, @javax.annotation.Nonnull String artifactId, @javax.annotation.Nonnull String version, @javax.annotation.Nonnull String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'groupId' is set
    if (groupId == null) {
      throw new ApiException(400, "Missing the required parameter 'groupId' when calling getVersionedPluginDetailsFromVersion");
    }
    
    // verify the required parameter 'artifactId' is set
    if (artifactId == null) {
      throw new ApiException(400, "Missing the required parameter 'artifactId' when calling getVersionedPluginDetailsFromVersion");
    }
    
    // verify the required parameter 'version' is set
    if (version == null) {
      throw new ApiException(400, "Missing the required parameter 'version' when calling getVersionedPluginDetailsFromVersion");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling getVersionedPluginDetailsFromVersion");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/cluster/versioned-plugins/{groupId}/{artifactId}/{version}"
      .replaceAll("\\{" + "groupId" + "\\}", apiClient.escapeString(apiClient.parameterToString(groupId)))
      .replaceAll("\\{" + "artifactId" + "\\}", apiClient.escapeString(apiClient.parameterToString(artifactId)))
      .replaceAll("\\{" + "version" + "\\}", apiClient.escapeString(apiClient.parameterToString(version)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<ClusterControllerApiPluginVersionDetails> localVarReturnType = new TypeReference<ClusterControllerApiPluginVersionDetails>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Install a specific Kestra&#39;s plugin artifact
   * 
   * @param tenant  (required)
   * @param clusterControllerApiPluginListRequest List of plugins (required)
   * @return ClusterControllerApiPluginArtifactListPluginArtifact
   * @throws ApiException if fails to make API call
   */
  public ClusterControllerApiPluginArtifactListPluginArtifact installVersionedPlugins(@javax.annotation.Nonnull String tenant, @javax.annotation.Nonnull ClusterControllerApiPluginListRequest clusterControllerApiPluginListRequest) throws ApiException {
    return this.installVersionedPlugins(tenant, clusterControllerApiPluginListRequest, Collections.emptyMap());
  }


  /**
   * Install a specific Kestra&#39;s plugin artifact
   * 
   * @param tenant  (required)
   * @param clusterControllerApiPluginListRequest List of plugins (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return ClusterControllerApiPluginArtifactListPluginArtifact
   * @throws ApiException if fails to make API call
   */
  public ClusterControllerApiPluginArtifactListPluginArtifact installVersionedPlugins(@javax.annotation.Nonnull String tenant, @javax.annotation.Nonnull ClusterControllerApiPluginListRequest clusterControllerApiPluginListRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = clusterControllerApiPluginListRequest;
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling installVersionedPlugins");
    }
    
    // verify the required parameter 'clusterControllerApiPluginListRequest' is set
    if (clusterControllerApiPluginListRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'clusterControllerApiPluginListRequest' when calling installVersionedPlugins");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/cluster/versioned-plugins/install"
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<ClusterControllerApiPluginArtifactListPluginArtifact> localVarReturnType = new TypeReference<ClusterControllerApiPluginArtifactListPluginArtifact>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get the list of available Kestra&#39;s plugin artifact.
   * 
   * @param tenant  (required)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object listAvailableVersionedPlugins(@javax.annotation.Nonnull String tenant) throws ApiException {
    return this.listAvailableVersionedPlugins(tenant, Collections.emptyMap());
  }


  /**
   * Get the list of available Kestra&#39;s plugin artifact.
   * 
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object listAvailableVersionedPlugins(@javax.annotation.Nonnull String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling listAvailableVersionedPlugins");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/cluster/versioned-plugins/available"
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get list of plugins
   * 
   * @param tenant  (required)
   * @return List&lt;Plugin&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Plugin> listPlugins(@javax.annotation.Nonnull String tenant) throws ApiException {
    return this.listPlugins(tenant, Collections.emptyMap());
  }


  /**
   * Get list of plugins
   * 
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return List&lt;Plugin&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Plugin> listPlugins(@javax.annotation.Nonnull String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling listPlugins");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/plugins"
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<List<Plugin>> localVarReturnType = new TypeReference<List<Plugin>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get the list of installed Kestra&#39;s plugin artifact.
   * 
   * @param page The current page (required)
   * @param size The current page size (required)
   * @param tenant  (required)
   * @param sort The sort of current page (optional)
   * @param q The query (optional)
   * @return PagedResultsClusterControllerApiPluginArtifact
   * @throws ApiException if fails to make API call
   */
  public PagedResultsClusterControllerApiPluginArtifact listVersionedPlugin(@javax.annotation.Nonnull Integer page, @javax.annotation.Nonnull Integer size, @javax.annotation.Nonnull String tenant, @javax.annotation.Nullable List<String> sort, @javax.annotation.Nullable String q) throws ApiException {
    return this.listVersionedPlugin(page, size, tenant, sort, q, Collections.emptyMap());
  }


  /**
   * Get the list of installed Kestra&#39;s plugin artifact.
   * 
   * @param page The current page (required)
   * @param size The current page size (required)
   * @param tenant  (required)
   * @param sort The sort of current page (optional)
   * @param q The query (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return PagedResultsClusterControllerApiPluginArtifact
   * @throws ApiException if fails to make API call
   */
  public PagedResultsClusterControllerApiPluginArtifact listVersionedPlugin(@javax.annotation.Nonnull Integer page, @javax.annotation.Nonnull Integer size, @javax.annotation.Nonnull String tenant, @javax.annotation.Nullable List<String> sort, @javax.annotation.Nullable String q, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'page' is set
    if (page == null) {
      throw new ApiException(400, "Missing the required parameter 'page' when calling listVersionedPlugin");
    }
    
    // verify the required parameter 'size' is set
    if (size == null) {
      throw new ApiException(400, "Missing the required parameter 'size' when calling listVersionedPlugin");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling listVersionedPlugin");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/cluster/versioned-plugins"
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
    localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sort", sort));
    localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<PagedResultsClusterControllerApiPluginArtifact> localVarReturnType = new TypeReference<PagedResultsClusterControllerApiPluginArtifact>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Resolve a specific Kestra&#39;s plugin artifact
   * 
   * @param tenant  (required)
   * @param clusterControllerApiPluginListRequest List of plugins (required)
   * @return ClusterControllerApiPluginArtifactListPluginResolutionResult
   * @throws ApiException if fails to make API call
   */
  public ClusterControllerApiPluginArtifactListPluginResolutionResult resolveVersionedPlugins(@javax.annotation.Nonnull String tenant, @javax.annotation.Nonnull ClusterControllerApiPluginListRequest clusterControllerApiPluginListRequest) throws ApiException {
    return this.resolveVersionedPlugins(tenant, clusterControllerApiPluginListRequest, Collections.emptyMap());
  }


  /**
   * Resolve a specific Kestra&#39;s plugin artifact
   * 
   * @param tenant  (required)
   * @param clusterControllerApiPluginListRequest List of plugins (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return ClusterControllerApiPluginArtifactListPluginResolutionResult
   * @throws ApiException if fails to make API call
   */
  public ClusterControllerApiPluginArtifactListPluginResolutionResult resolveVersionedPlugins(@javax.annotation.Nonnull String tenant, @javax.annotation.Nonnull ClusterControllerApiPluginListRequest clusterControllerApiPluginListRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = clusterControllerApiPluginListRequest;
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling resolveVersionedPlugins");
    }
    
    // verify the required parameter 'clusterControllerApiPluginListRequest' is set
    if (clusterControllerApiPluginListRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'clusterControllerApiPluginListRequest' when calling resolveVersionedPlugins");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/cluster/versioned-plugins/resolve"
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<ClusterControllerApiPluginArtifactListPluginResolutionResult> localVarReturnType = new TypeReference<ClusterControllerApiPluginArtifactListPluginResolutionResult>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Uninstall Kestra&#39;s plugin artifacts
   * 
   * @param tenant  (required)
   * @param clusterControllerApiPluginListRequest List of plugins (required)
   * @return ClusterControllerApiPluginArtifactListPluginArtifact
   * @throws ApiException if fails to make API call
   */
  public ClusterControllerApiPluginArtifactListPluginArtifact uninstallVersionedPlugins(@javax.annotation.Nonnull String tenant, @javax.annotation.Nonnull ClusterControllerApiPluginListRequest clusterControllerApiPluginListRequest) throws ApiException {
    return this.uninstallVersionedPlugins(tenant, clusterControllerApiPluginListRequest, Collections.emptyMap());
  }


  /**
   * Uninstall Kestra&#39;s plugin artifacts
   * 
   * @param tenant  (required)
   * @param clusterControllerApiPluginListRequest List of plugins (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return ClusterControllerApiPluginArtifactListPluginArtifact
   * @throws ApiException if fails to make API call
   */
  public ClusterControllerApiPluginArtifactListPluginArtifact uninstallVersionedPlugins(@javax.annotation.Nonnull String tenant, @javax.annotation.Nonnull ClusterControllerApiPluginListRequest clusterControllerApiPluginListRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = clusterControllerApiPluginListRequest;
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling uninstallVersionedPlugins");
    }
    
    // verify the required parameter 'clusterControllerApiPluginListRequest' is set
    if (clusterControllerApiPluginListRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'clusterControllerApiPluginListRequest' when calling uninstallVersionedPlugins");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/cluster/versioned-plugins/uninstall"
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<ClusterControllerApiPluginArtifactListPluginArtifact> localVarReturnType = new TypeReference<ClusterControllerApiPluginArtifactListPluginArtifact>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Upload a Kestra&#39;s plugin artifact
   * 
   * @param tenant  (required)
   * @param _file  (optional)
   * @return PluginArtifact
   * @throws ApiException if fails to make API call
   */
  public PluginArtifact uploadVersionedPlugins(@javax.annotation.Nonnull String tenant, @javax.annotation.Nullable File _file) throws ApiException {
    return this.uploadVersionedPlugins(tenant, _file, Collections.emptyMap());
  }


  /**
   * Upload a Kestra&#39;s plugin artifact
   * 
   * @param tenant  (required)
   * @param _file  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return PluginArtifact
   * @throws ApiException if fails to make API call
   */
  public PluginArtifact uploadVersionedPlugins(@javax.annotation.Nonnull String tenant, @javax.annotation.Nullable File _file, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling uploadVersionedPlugins");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/cluster/versioned-plugins/upload"
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    if (_file != null)
      localVarFormParams.put("file", _file);

    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "multipart/form-data"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<PluginArtifact> localVarReturnType = new TypeReference<PluginArtifact>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  @Override
  public <T> T invokeAPI(String url, String method, Object request, TypeReference<T> returnType, Map<String, String> additionalHeaders) throws ApiException {
    String localVarPath = url.replace(apiClient.getBaseURL(), "");
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarHeaderParams.putAll(additionalHeaders);

    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "multipart/form-data"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    return apiClient.invokeAPI(
      localVarPath,
        method,
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        request,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        returnType
    );
  }
}
