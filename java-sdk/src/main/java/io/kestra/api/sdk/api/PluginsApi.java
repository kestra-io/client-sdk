/*
 * Kestra EE
 * All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package io.kestra.api.sdk.api;

import com.fasterxml.jackson.core.type.TypeReference;

import io.kestra.api.sdk.internal.ApiException;
import io.kestra.api.sdk.internal.ApiClient;
import io.kestra.api.sdk.internal.BaseApi;
import io.kestra.api.sdk.internal.Configuration;
import io.kestra.api.sdk.internal.Pair;

import io.kestra.api.sdk.model.DocumentationWithSchema;
import io.kestra.api.sdk.model.InputType;
import io.kestra.api.sdk.model.Plugin;
import io.kestra.api.sdk.model.PluginIcon;
import io.kestra.api.sdk.model.SchemaType;
import io.kestra.api.sdk.model.Type;


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-31T15:48:45.246126227Z[Etc/UTC]", comments = "Generator version: 7.11.0-SNAPSHOT")
public class PluginsApi extends BaseApi {

  public PluginsApi() {
    super(Configuration.getDefaultApiClient());
  }

  public PluginsApi(ApiClient apiClient) {
    super(apiClient);
  }

  /**
   * Get plugins icons
   * 
   * @return Map&lt;String, PluginIcon&gt;
   * @throws ApiException if fails to make API call
   */
  public Map<String, PluginIcon> icons() throws ApiException {
    return this.icons(Collections.emptyMap());
  }


  /**
   * Get plugins icons
   * 
   * @param additionalHeaders additionalHeaders for this call
   * @return Map&lt;String, PluginIcon&gt;
   * @throws ApiException if fails to make API call
   */
  public Map<String, PluginIcon> icons(Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/api/v1/plugins/icons";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Map<String, PluginIcon>> localVarReturnType = new TypeReference<Map<String, PluginIcon>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get plugins icons
   * 
   * @param tenant  (required)
   * @return Map&lt;String, PluginIcon&gt;
   * @throws ApiException if fails to make API call
   */
  public Map<String, PluginIcon> icons1(String tenant) throws ApiException {
    return this.icons1(tenant, Collections.emptyMap());
  }


  /**
   * Get plugins icons
   * 
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Map&lt;String, PluginIcon&gt;
   * @throws ApiException if fails to make API call
   */
  public Map<String, PluginIcon> icons1(String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling icons1");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/plugins/icons"
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Map<String, PluginIcon>> localVarReturnType = new TypeReference<Map<String, PluginIcon>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get all json schemas for a type
   * The schema will be output as [http://json-schema.org/draft-07/schema](Json Schema Draft 7)
   * @param type The schema needed (required)
   * @return DocumentationWithSchema
   * @throws ApiException if fails to make API call
   */
  public DocumentationWithSchema inputSchemas(Type type) throws ApiException {
    return this.inputSchemas(type, Collections.emptyMap());
  }


  /**
   * Get all json schemas for a type
   * The schema will be output as [http://json-schema.org/draft-07/schema](Json Schema Draft 7)
   * @param type The schema needed (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return DocumentationWithSchema
   * @throws ApiException if fails to make API call
   */
  public DocumentationWithSchema inputSchemas(Type type, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'type' is set
    if (type == null) {
      throw new ApiException(400, "Missing the required parameter 'type' when calling inputSchemas");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/plugins/inputs/{type}"
      .replaceAll("\\{" + "type" + "\\}", apiClient.escapeString(apiClient.parameterToString(type)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<DocumentationWithSchema> localVarReturnType = new TypeReference<DocumentationWithSchema>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get all json schemas for a type
   * The schema will be output as [http://json-schema.org/draft-07/schema](Json Schema Draft 7)
   * @param type The schema needed (required)
   * @param tenant  (required)
   * @return DocumentationWithSchema
   * @throws ApiException if fails to make API call
   */
  public DocumentationWithSchema inputSchemas1(Type type, String tenant) throws ApiException {
    return this.inputSchemas1(type, tenant, Collections.emptyMap());
  }


  /**
   * Get all json schemas for a type
   * The schema will be output as [http://json-schema.org/draft-07/schema](Json Schema Draft 7)
   * @param type The schema needed (required)
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return DocumentationWithSchema
   * @throws ApiException if fails to make API call
   */
  public DocumentationWithSchema inputSchemas1(Type type, String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'type' is set
    if (type == null) {
      throw new ApiException(400, "Missing the required parameter 'type' when calling inputSchemas1");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling inputSchemas1");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/plugins/inputs/{type}"
      .replaceAll("\\{" + "type" + "\\}", apiClient.escapeString(apiClient.parameterToString(type)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<DocumentationWithSchema> localVarReturnType = new TypeReference<DocumentationWithSchema>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get all types for an inputs
   * 
   * @return List&lt;InputType&gt;
   * @throws ApiException if fails to make API call
   */
  public List<InputType> inputs() throws ApiException {
    return this.inputs(Collections.emptyMap());
  }


  /**
   * Get all types for an inputs
   * 
   * @param additionalHeaders additionalHeaders for this call
   * @return List&lt;InputType&gt;
   * @throws ApiException if fails to make API call
   */
  public List<InputType> inputs(Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/api/v1/plugins/inputs";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<List<InputType>> localVarReturnType = new TypeReference<List<InputType>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get all types for an inputs
   * 
   * @param tenant  (required)
   * @return List&lt;InputType&gt;
   * @throws ApiException if fails to make API call
   */
  public List<InputType> inputs1(String tenant) throws ApiException {
    return this.inputs1(tenant, Collections.emptyMap());
  }


  /**
   * Get all types for an inputs
   * 
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return List&lt;InputType&gt;
   * @throws ApiException if fails to make API call
   */
  public List<InputType> inputs1(String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling inputs1");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/plugins/inputs"
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<List<InputType>> localVarReturnType = new TypeReference<List<InputType>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get plugin documentation
   * 
   * @param cls The plugin full class name (required)
   * @param all Include all the properties (required)
   * @return DocumentationWithSchema
   * @throws ApiException if fails to make API call
   */
  public DocumentationWithSchema pluginDocumentation(String cls, Boolean all) throws ApiException {
    return this.pluginDocumentation(cls, all, Collections.emptyMap());
  }


  /**
   * Get plugin documentation
   * 
   * @param cls The plugin full class name (required)
   * @param all Include all the properties (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return DocumentationWithSchema
   * @throws ApiException if fails to make API call
   */
  public DocumentationWithSchema pluginDocumentation(String cls, Boolean all, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'cls' is set
    if (cls == null) {
      throw new ApiException(400, "Missing the required parameter 'cls' when calling pluginDocumentation");
    }
    
    // verify the required parameter 'all' is set
    if (all == null) {
      throw new ApiException(400, "Missing the required parameter 'all' when calling pluginDocumentation");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/plugins/{cls}"
      .replaceAll("\\{" + "cls" + "\\}", apiClient.escapeString(apiClient.parameterToString(cls)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("all", all));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<DocumentationWithSchema> localVarReturnType = new TypeReference<DocumentationWithSchema>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get plugin documentation
   * 
   * @param cls The plugin full class name (required)
   * @param all Include all the properties (required)
   * @param tenant  (required)
   * @return DocumentationWithSchema
   * @throws ApiException if fails to make API call
   */
  public DocumentationWithSchema pluginDocumentation1(String cls, Boolean all, String tenant) throws ApiException {
    return this.pluginDocumentation1(cls, all, tenant, Collections.emptyMap());
  }


  /**
   * Get plugin documentation
   * 
   * @param cls The plugin full class name (required)
   * @param all Include all the properties (required)
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return DocumentationWithSchema
   * @throws ApiException if fails to make API call
   */
  public DocumentationWithSchema pluginDocumentation1(String cls, Boolean all, String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'cls' is set
    if (cls == null) {
      throw new ApiException(400, "Missing the required parameter 'cls' when calling pluginDocumentation1");
    }
    
    // verify the required parameter 'all' is set
    if (all == null) {
      throw new ApiException(400, "Missing the required parameter 'all' when calling pluginDocumentation1");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling pluginDocumentation1");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/plugins/{cls}"
      .replaceAll("\\{" + "cls" + "\\}", apiClient.escapeString(apiClient.parameterToString(cls)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("all", all));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<DocumentationWithSchema> localVarReturnType = new TypeReference<DocumentationWithSchema>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get plugins icons
   * 
   * @return Map&lt;String, PluginIcon&gt;
   * @throws ApiException if fails to make API call
   */
  public Map<String, PluginIcon> pluginGroupIcons() throws ApiException {
    return this.pluginGroupIcons(Collections.emptyMap());
  }


  /**
   * Get plugins icons
   * 
   * @param additionalHeaders additionalHeaders for this call
   * @return Map&lt;String, PluginIcon&gt;
   * @throws ApiException if fails to make API call
   */
  public Map<String, PluginIcon> pluginGroupIcons(Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/api/v1/plugins/icons/groups";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Map<String, PluginIcon>> localVarReturnType = new TypeReference<Map<String, PluginIcon>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get plugins icons
   * 
   * @param tenant  (required)
   * @return Map&lt;String, PluginIcon&gt;
   * @throws ApiException if fails to make API call
   */
  public Map<String, PluginIcon> pluginGroupIcons1(String tenant) throws ApiException {
    return this.pluginGroupIcons1(tenant, Collections.emptyMap());
  }


  /**
   * Get plugins icons
   * 
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Map&lt;String, PluginIcon&gt;
   * @throws ApiException if fails to make API call
   */
  public Map<String, PluginIcon> pluginGroupIcons1(String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling pluginGroupIcons1");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/plugins/icons/groups"
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Map<String, PluginIcon>> localVarReturnType = new TypeReference<Map<String, PluginIcon>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get all json schemas for a type
   * The schema will be output as [http://json-schema.org/draft-07/schema](Json Schema Draft 7)
   * @param type The schema needed (required)
   * @param arrayOf If schema should be an array of requested type (optional, default to false)
   * @return Map&lt;String, Object&gt;
   * @throws ApiException if fails to make API call
   */
  public Map<String, Object> schemas(SchemaType type, Boolean arrayOf) throws ApiException {
    return this.schemas(type, arrayOf, Collections.emptyMap());
  }


  /**
   * Get all json schemas for a type
   * The schema will be output as [http://json-schema.org/draft-07/schema](Json Schema Draft 7)
   * @param type The schema needed (required)
   * @param arrayOf If schema should be an array of requested type (optional, default to false)
   * @param additionalHeaders additionalHeaders for this call
   * @return Map&lt;String, Object&gt;
   * @throws ApiException if fails to make API call
   */
  public Map<String, Object> schemas(SchemaType type, Boolean arrayOf, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'type' is set
    if (type == null) {
      throw new ApiException(400, "Missing the required parameter 'type' when calling schemas");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/plugins/schemas/{type}"
      .replaceAll("\\{" + "type" + "\\}", apiClient.escapeString(apiClient.parameterToString(type)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("arrayOf", arrayOf));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Map<String, Object>> localVarReturnType = new TypeReference<Map<String, Object>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get all json schemas for a type
   * The schema will be output as [http://json-schema.org/draft-07/schema](Json Schema Draft 7)
   * @param type The schema needed (required)
   * @param tenant  (required)
   * @param arrayOf If schema should be an array of requested type (optional, default to false)
   * @return Map&lt;String, Object&gt;
   * @throws ApiException if fails to make API call
   */
  public Map<String, Object> schemas1(SchemaType type, String tenant, Boolean arrayOf) throws ApiException {
    return this.schemas1(type, tenant, arrayOf, Collections.emptyMap());
  }


  /**
   * Get all json schemas for a type
   * The schema will be output as [http://json-schema.org/draft-07/schema](Json Schema Draft 7)
   * @param type The schema needed (required)
   * @param tenant  (required)
   * @param arrayOf If schema should be an array of requested type (optional, default to false)
   * @param additionalHeaders additionalHeaders for this call
   * @return Map&lt;String, Object&gt;
   * @throws ApiException if fails to make API call
   */
  public Map<String, Object> schemas1(SchemaType type, String tenant, Boolean arrayOf, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'type' is set
    if (type == null) {
      throw new ApiException(400, "Missing the required parameter 'type' when calling schemas1");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling schemas1");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/plugins/schemas/{type}"
      .replaceAll("\\{" + "type" + "\\}", apiClient.escapeString(apiClient.parameterToString(type)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("arrayOf", arrayOf));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Map<String, Object>> localVarReturnType = new TypeReference<Map<String, Object>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get list of plugins
   * 
   * @return List&lt;Plugin&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Plugin> search3() throws ApiException {
    return this.search3(Collections.emptyMap());
  }


  /**
   * Get list of plugins
   * 
   * @param additionalHeaders additionalHeaders for this call
   * @return List&lt;Plugin&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Plugin> search3(Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/api/v1/plugins";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<List<Plugin>> localVarReturnType = new TypeReference<List<Plugin>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get list of plugins
   * 
   * @param tenant  (required)
   * @return List&lt;Plugin&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Plugin> search8(String tenant) throws ApiException {
    return this.search8(tenant, Collections.emptyMap());
  }


  /**
   * Get list of plugins
   * 
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return List&lt;Plugin&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Plugin> search8(String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling search8");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/plugins"
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<List<Plugin>> localVarReturnType = new TypeReference<List<Plugin>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get plugins group by subgroups
   * 
   * @return List&lt;Plugin&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Plugin> subgroups() throws ApiException {
    return this.subgroups(Collections.emptyMap());
  }


  /**
   * Get plugins group by subgroups
   * 
   * @param additionalHeaders additionalHeaders for this call
   * @return List&lt;Plugin&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Plugin> subgroups(Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/api/v1/plugins/groups/subgroups";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<List<Plugin>> localVarReturnType = new TypeReference<List<Plugin>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get plugins group by subgroups
   * 
   * @param tenant  (required)
   * @return List&lt;Plugin&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Plugin> subgroups1(String tenant) throws ApiException {
    return this.subgroups1(tenant, Collections.emptyMap());
  }


  /**
   * Get plugins group by subgroups
   * 
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return List&lt;Plugin&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Plugin> subgroups1(String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling subgroups1");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/plugins/groups/subgroups"
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<List<Plugin>> localVarReturnType = new TypeReference<List<Plugin>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  @Override
  public <T> T invokeAPI(String url, String method, Object request, TypeReference<T> returnType, Map<String, String> additionalHeaders) throws ApiException {
    String localVarPath = url.replace(apiClient.getBaseURL(), "");
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarHeaderParams.putAll(additionalHeaders);

    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    return apiClient.invokeAPI(
      localVarPath,
        method,
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        request,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        returnType
    );
  }
}
