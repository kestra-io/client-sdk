/*
 * Kestra EE
 * All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package io.kestra.sdk.api;

import com.fasterxml.jackson.core.type.TypeReference;

import io.kestra.sdk.internal.ApiException;
import io.kestra.sdk.internal.ApiClient;
import io.kestra.sdk.internal.BaseApi;
import io.kestra.sdk.internal.Configuration;
import io.kestra.sdk.internal.Pair;

import io.kestra.sdk.model.ApiAutocomplete;
import io.kestra.sdk.model.ApiIds;
import io.kestra.sdk.model.PagedResultsRole;
import io.kestra.sdk.model.Role;


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-05T07:35:23.657005690Z[Etc/UTC]", comments = "Generator version: 7.14.0-SNAPSHOT")
public class RolesApi extends BaseApi {

  public RolesApi() {
    super(Configuration.getDefaultApiClient());
  }

  public RolesApi(ApiClient apiClient) {
    super(apiClient);
  }

  /**
   * List roles for autocomplete
   *
   * @param tenant  (required)
   * @param apiAutocomplete Autocomplete request (required)
   * @return List&lt;Role&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Role> autocompleteRoles(@javax.annotation.Nonnull String tenant, @javax.annotation.Nonnull ApiAutocomplete apiAutocomplete) throws ApiException {
    return this.autocompleteRoles(tenant, apiAutocomplete, Collections.emptyMap());
  }


  /**
   * List roles for autocomplete
   *
   * @param tenant  (required)
   * @param apiAutocomplete Autocomplete request (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return List&lt;Role&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Role> autocompleteRoles(@javax.annotation.Nonnull String tenant, @javax.annotation.Nonnull ApiAutocomplete apiAutocomplete, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = apiAutocomplete;

    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling autocompleteRoles");
    }

    // verify the required parameter 'apiAutocomplete' is set
    if (apiAutocomplete == null) {
      throw new ApiException(400, "Missing the required parameter 'apiAutocomplete' when calling autocompleteRoles");
    }

    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/roles/autocomplete"
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    localVarHeaderParams.putAll(additionalHeaders);



    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<List<Role>> localVarReturnType = new TypeReference<List<Role>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * List roles for autocomplete
   *
   * @param resourceTenant  (required)
   * @param apiAutocomplete Autocomplete request (required)
   * @return List&lt;Role&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Role> autocompleteRolesWithResourceTenantasSuperAdmin(@javax.annotation.Nonnull String resourceTenant, @javax.annotation.Nonnull ApiAutocomplete apiAutocomplete) throws ApiException {
    return this.autocompleteRolesWithResourceTenantasSuperAdmin(resourceTenant, apiAutocomplete, Collections.emptyMap());
  }


  /**
   * List roles for autocomplete
   *
   * @param resourceTenant  (required)
   * @param apiAutocomplete Autocomplete request (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return List&lt;Role&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Role> autocompleteRolesWithResourceTenantasSuperAdmin(@javax.annotation.Nonnull String resourceTenant, @javax.annotation.Nonnull ApiAutocomplete apiAutocomplete, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = apiAutocomplete;

    // verify the required parameter 'resourceTenant' is set
    if (resourceTenant == null) {
      throw new ApiException(400, "Missing the required parameter 'resourceTenant' when calling autocompleteRolesWithResourceTenantasSuperAdmin");
    }

    // verify the required parameter 'apiAutocomplete' is set
    if (apiAutocomplete == null) {
      throw new ApiException(400, "Missing the required parameter 'apiAutocomplete' when calling autocompleteRolesWithResourceTenantasSuperAdmin");
    }

    // create path and map variables
    String localVarPath = "/api/v1/tenants/{resourceTenant}/roles/autocomplete"
      .replaceAll("\\{" + "resourceTenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(resourceTenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    localVarHeaderParams.putAll(additionalHeaders);



    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<List<Role>> localVarReturnType = new TypeReference<List<Role>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * List roles for autocomplete
   *
   * @param apiAutocomplete Autocomplete request (required)
   * @return List&lt;Role&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Role> autocompleteRolesasSuperAdmin(@javax.annotation.Nonnull ApiAutocomplete apiAutocomplete) throws ApiException {
    return this.autocompleteRolesasSuperAdmin(apiAutocomplete, Collections.emptyMap());
  }


  /**
   * List roles for autocomplete
   *
   * @param apiAutocomplete Autocomplete request (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return List&lt;Role&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Role> autocompleteRolesasSuperAdmin(@javax.annotation.Nonnull ApiAutocomplete apiAutocomplete, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = apiAutocomplete;

    // verify the required parameter 'apiAutocomplete' is set
    if (apiAutocomplete == null) {
      throw new ApiException(400, "Missing the required parameter 'apiAutocomplete' when calling autocompleteRolesasSuperAdmin");
    }

    // create path and map variables
    String localVarPath = "/api/v1/tenants/roles/autocomplete";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    localVarHeaderParams.putAll(additionalHeaders);



    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<List<Role>> localVarReturnType = new TypeReference<List<Role>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Create a role
   *
   * @param tenant  (required)
   * @param role  (required)
   * @return Role
   * @throws ApiException if fails to make API call
   */
  public Role createRole(@javax.annotation.Nonnull String tenant, @javax.annotation.Nonnull Role role) throws ApiException {
    return this.createRole(tenant, role, Collections.emptyMap());
  }


  /**
   * Create a role
   *
   * @param tenant  (required)
   * @param role  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Role
   * @throws ApiException if fails to make API call
   */
  public Role createRole(@javax.annotation.Nonnull String tenant, @javax.annotation.Nonnull Role role, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = role;

    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling createRole");
    }

    // verify the required parameter 'role' is set
    if (role == null) {
      throw new ApiException(400, "Missing the required parameter 'role' when calling createRole");
    }

    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/roles"
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    localVarHeaderParams.putAll(additionalHeaders);



    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<Role> localVarReturnType = new TypeReference<Role>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Create a role
   *
   * @param resourceTenant  (required)
   * @param role  (required)
   * @return Role
   * @throws ApiException if fails to make API call
   */
  public Role createRoleWithResourceTenantasSuperAdmin(@javax.annotation.Nonnull String resourceTenant, @javax.annotation.Nonnull Role role) throws ApiException {
    return this.createRoleWithResourceTenantasSuperAdmin(resourceTenant, role, Collections.emptyMap());
  }


  /**
   * Create a role
   *
   * @param resourceTenant  (required)
   * @param role  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Role
   * @throws ApiException if fails to make API call
   */
  public Role createRoleWithResourceTenantasSuperAdmin(@javax.annotation.Nonnull String resourceTenant, @javax.annotation.Nonnull Role role, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = role;

    // verify the required parameter 'resourceTenant' is set
    if (resourceTenant == null) {
      throw new ApiException(400, "Missing the required parameter 'resourceTenant' when calling createRoleWithResourceTenantasSuperAdmin");
    }

    // verify the required parameter 'role' is set
    if (role == null) {
      throw new ApiException(400, "Missing the required parameter 'role' when calling createRoleWithResourceTenantasSuperAdmin");
    }

    // create path and map variables
    String localVarPath = "/api/v1/tenants/{resourceTenant}/roles"
      .replaceAll("\\{" + "resourceTenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(resourceTenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    localVarHeaderParams.putAll(additionalHeaders);



    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<Role> localVarReturnType = new TypeReference<Role>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Create a role
   *
   * @param role  (required)
   * @return Role
   * @throws ApiException if fails to make API call
   */
  public Role createRoleasSuperAdmin(@javax.annotation.Nonnull Role role) throws ApiException {
    return this.createRoleasSuperAdmin(role, Collections.emptyMap());
  }


  /**
   * Create a role
   *
   * @param role  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Role
   * @throws ApiException if fails to make API call
   */
  public Role createRoleasSuperAdmin(@javax.annotation.Nonnull Role role, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = role;

    // verify the required parameter 'role' is set
    if (role == null) {
      throw new ApiException(400, "Missing the required parameter 'role' when calling createRoleasSuperAdmin");
    }

    // create path and map variables
    String localVarPath = "/api/v1/tenants/roles";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    localVarHeaderParams.putAll(additionalHeaders);



    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<Role> localVarReturnType = new TypeReference<Role>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Delete a role
   *
   * @param id The role id (required)
   * @param tenant  (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteRole(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String tenant) throws ApiException {
    this.deleteRole(id, tenant, Collections.emptyMap());
  }


  /**
   * Delete a role
   *
   * @param id The role id (required)
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void deleteRole(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;

    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteRole");
    }

    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling deleteRole");
    }

    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/roles/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    localVarHeaderParams.putAll(additionalHeaders);



    final String[] localVarAccepts = {

    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Delete a role
   *
   * @param id The role id (required)
   * @param resourceTenant  (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteRoleWithResourceTenantasSuperAdmin(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String resourceTenant) throws ApiException {
    this.deleteRoleWithResourceTenantasSuperAdmin(id, resourceTenant, Collections.emptyMap());
  }


  /**
   * Delete a role
   *
   * @param id The role id (required)
   * @param resourceTenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void deleteRoleWithResourceTenantasSuperAdmin(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String resourceTenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;

    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteRoleWithResourceTenantasSuperAdmin");
    }

    // verify the required parameter 'resourceTenant' is set
    if (resourceTenant == null) {
      throw new ApiException(400, "Missing the required parameter 'resourceTenant' when calling deleteRoleWithResourceTenantasSuperAdmin");
    }

    // create path and map variables
    String localVarPath = "/api/v1/tenants/{resourceTenant}/roles/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "resourceTenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(resourceTenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    localVarHeaderParams.putAll(additionalHeaders);



    final String[] localVarAccepts = {

    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Delete a role
   *
   * @param id The role id (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteRoleasSuperAdmin(@javax.annotation.Nonnull String id) throws ApiException {
    this.deleteRoleasSuperAdmin(id, Collections.emptyMap());
  }


  /**
   * Delete a role
   *
   * @param id The role id (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void deleteRoleasSuperAdmin(@javax.annotation.Nonnull String id, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;

    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteRoleasSuperAdmin");
    }

    // create path and map variables
    String localVarPath = "/api/v1/tenants/roles/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    localVarHeaderParams.putAll(additionalHeaders);



    final String[] localVarAccepts = {

    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Get a role
   *
   * @param id The role id (required)
   * @param tenant  (required)
   * @return Role
   * @throws ApiException if fails to make API call
   */
  public Role getRole(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String tenant) throws ApiException {
    return this.getRole(id, tenant, Collections.emptyMap());
  }


  /**
   * Get a role
   *
   * @param id The role id (required)
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Role
   * @throws ApiException if fails to make API call
   */
  public Role getRole(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;

    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getRole");
    }

    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling getRole");
    }

    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/roles/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    localVarHeaderParams.putAll(additionalHeaders);



    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<Role> localVarReturnType = new TypeReference<Role>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get a role
   *
   * @param id The role id (required)
   * @param resourceTenant  (required)
   * @return Role
   * @throws ApiException if fails to make API call
   */
  public Role getRoleWithResourceTenantasSuperAdmin(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String resourceTenant) throws ApiException {
    return this.getRoleWithResourceTenantasSuperAdmin(id, resourceTenant, Collections.emptyMap());
  }


  /**
   * Get a role
   *
   * @param id The role id (required)
   * @param resourceTenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Role
   * @throws ApiException if fails to make API call
   */
  public Role getRoleWithResourceTenantasSuperAdmin(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String resourceTenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;

    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getRoleWithResourceTenantasSuperAdmin");
    }

    // verify the required parameter 'resourceTenant' is set
    if (resourceTenant == null) {
      throw new ApiException(400, "Missing the required parameter 'resourceTenant' when calling getRoleWithResourceTenantasSuperAdmin");
    }

    // create path and map variables
    String localVarPath = "/api/v1/tenants/{resourceTenant}/roles/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "resourceTenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(resourceTenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    localVarHeaderParams.putAll(additionalHeaders);



    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<Role> localVarReturnType = new TypeReference<Role>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get a role
   *
   * @param id The role id (required)
   * @return Role
   * @throws ApiException if fails to make API call
   */
  public Role getRoleasSuperAdmin(@javax.annotation.Nonnull String id) throws ApiException {
    return this.getRoleasSuperAdmin(id, Collections.emptyMap());
  }


  /**
   * Get a role
   *
   * @param id The role id (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Role
   * @throws ApiException if fails to make API call
   */
  public Role getRoleasSuperAdmin(@javax.annotation.Nonnull String id, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;

    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getRoleasSuperAdmin");
    }

    // create path and map variables
    String localVarPath = "/api/v1/tenants/roles/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    localVarHeaderParams.putAll(additionalHeaders);



    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<Role> localVarReturnType = new TypeReference<Role>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   *
   * List roles by ids
   * @param tenant  (required)
   * @param apiIds The ids that must be present on results (required)
   * @return List&lt;Role&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Role> listRolesFromGivenIds(@javax.annotation.Nonnull String tenant, @javax.annotation.Nonnull ApiIds apiIds) throws ApiException {
    return this.listRolesFromGivenIds(tenant, apiIds, Collections.emptyMap());
  }


  /**
   *
   * List roles by ids
   * @param tenant  (required)
   * @param apiIds The ids that must be present on results (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return List&lt;Role&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Role> listRolesFromGivenIds(@javax.annotation.Nonnull String tenant, @javax.annotation.Nonnull ApiIds apiIds, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = apiIds;

    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling listRolesFromGivenIds");
    }

    // verify the required parameter 'apiIds' is set
    if (apiIds == null) {
      throw new ApiException(400, "Missing the required parameter 'apiIds' when calling listRolesFromGivenIds");
    }

    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/roles/ids"
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    localVarHeaderParams.putAll(additionalHeaders);



    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<List<Role>> localVarReturnType = new TypeReference<List<Role>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   *
   * List roles by ids
   * @param resourceTenant  (required)
   * @param apiIds The ids that must be present on results (required)
   * @return List&lt;Role&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Role> listRolesFromGivenIdsWithResourceTenantasSuperAdmin(@javax.annotation.Nonnull String resourceTenant, @javax.annotation.Nonnull ApiIds apiIds) throws ApiException {
    return this.listRolesFromGivenIdsWithResourceTenantasSuperAdmin(resourceTenant, apiIds, Collections.emptyMap());
  }


  /**
   *
   * List roles by ids
   * @param resourceTenant  (required)
   * @param apiIds The ids that must be present on results (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return List&lt;Role&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Role> listRolesFromGivenIdsWithResourceTenantasSuperAdmin(@javax.annotation.Nonnull String resourceTenant, @javax.annotation.Nonnull ApiIds apiIds, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = apiIds;

    // verify the required parameter 'resourceTenant' is set
    if (resourceTenant == null) {
      throw new ApiException(400, "Missing the required parameter 'resourceTenant' when calling listRolesFromGivenIdsWithResourceTenantasSuperAdmin");
    }

    // verify the required parameter 'apiIds' is set
    if (apiIds == null) {
      throw new ApiException(400, "Missing the required parameter 'apiIds' when calling listRolesFromGivenIdsWithResourceTenantasSuperAdmin");
    }

    // create path and map variables
    String localVarPath = "/api/v1/tenants/{resourceTenant}/roles/ids"
      .replaceAll("\\{" + "resourceTenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(resourceTenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    localVarHeaderParams.putAll(additionalHeaders);



    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<List<Role>> localVarReturnType = new TypeReference<List<Role>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   *
   * List roles by ids
   * @param apiIds The ids that must be present on results (required)
   * @return List&lt;Role&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Role> listRolesFromGivenIdsasSuperAdmin(@javax.annotation.Nonnull ApiIds apiIds) throws ApiException {
    return this.listRolesFromGivenIdsasSuperAdmin(apiIds, Collections.emptyMap());
  }


  /**
   *
   * List roles by ids
   * @param apiIds The ids that must be present on results (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return List&lt;Role&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Role> listRolesFromGivenIdsasSuperAdmin(@javax.annotation.Nonnull ApiIds apiIds, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = apiIds;

    // verify the required parameter 'apiIds' is set
    if (apiIds == null) {
      throw new ApiException(400, "Missing the required parameter 'apiIds' when calling listRolesFromGivenIdsasSuperAdmin");
    }

    // create path and map variables
    String localVarPath = "/api/v1/tenants/roles/ids";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    localVarHeaderParams.putAll(additionalHeaders);



    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<List<Role>> localVarReturnType = new TypeReference<List<Role>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Search for roles
   *
   * @param page The current page (required)
   * @param size The current page size (required)
   * @param tenant  (required)
   * @param q A string filter (optional)
   * @param sort The sort of current page (optional)
   * @return PagedResultsRole
   * @throws ApiException if fails to make API call
   */
  public PagedResultsRole searchRoles(@javax.annotation.Nonnull Integer page, @javax.annotation.Nonnull Integer size, @javax.annotation.Nonnull String tenant, @javax.annotation.Nullable String q, @javax.annotation.Nullable List<String> sort) throws ApiException {
    return this.searchRoles(page, size, tenant, q, sort, Collections.emptyMap());
  }


  /**
   * Search for roles
   *
   * @param page The current page (required)
   * @param size The current page size (required)
   * @param tenant  (required)
   * @param q A string filter (optional)
   * @param sort The sort of current page (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return PagedResultsRole
   * @throws ApiException if fails to make API call
   */
  public PagedResultsRole searchRoles(@javax.annotation.Nonnull Integer page, @javax.annotation.Nonnull Integer size, @javax.annotation.Nonnull String tenant, @javax.annotation.Nullable String q, @javax.annotation.Nullable List<String> sort, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;

    // verify the required parameter 'page' is set
    if (page == null) {
      throw new ApiException(400, "Missing the required parameter 'page' when calling searchRoles");
    }

    // verify the required parameter 'size' is set
    if (size == null) {
      throw new ApiException(400, "Missing the required parameter 'size' when calling searchRoles");
    }

    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling searchRoles");
    }

    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/roles/search"
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
    localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
    localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sort", sort));

    localVarHeaderParams.putAll(additionalHeaders);



    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<PagedResultsRole> localVarReturnType = new TypeReference<PagedResultsRole>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Search for roles
   *
   * @param page The current page (required)
   * @param size The current page size (required)
   * @param resourceTenant  (required)
   * @param q A string filter (optional)
   * @param sort The sort of current page (optional)
   * @return PagedResultsRole
   * @throws ApiException if fails to make API call
   */
  public PagedResultsRole searchRolesWithResourceTenantasSuperAdmin(@javax.annotation.Nonnull Integer page, @javax.annotation.Nonnull Integer size, @javax.annotation.Nonnull String resourceTenant, @javax.annotation.Nullable String q, @javax.annotation.Nullable List<String> sort) throws ApiException {
    return this.searchRolesWithResourceTenantasSuperAdmin(page, size, resourceTenant, q, sort, Collections.emptyMap());
  }


  /**
   * Search for roles
   *
   * @param page The current page (required)
   * @param size The current page size (required)
   * @param resourceTenant  (required)
   * @param q A string filter (optional)
   * @param sort The sort of current page (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return PagedResultsRole
   * @throws ApiException if fails to make API call
   */
  public PagedResultsRole searchRolesWithResourceTenantasSuperAdmin(@javax.annotation.Nonnull Integer page, @javax.annotation.Nonnull Integer size, @javax.annotation.Nonnull String resourceTenant, @javax.annotation.Nullable String q, @javax.annotation.Nullable List<String> sort, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;

    // verify the required parameter 'page' is set
    if (page == null) {
      throw new ApiException(400, "Missing the required parameter 'page' when calling searchRolesWithResourceTenantasSuperAdmin");
    }

    // verify the required parameter 'size' is set
    if (size == null) {
      throw new ApiException(400, "Missing the required parameter 'size' when calling searchRolesWithResourceTenantasSuperAdmin");
    }

    // verify the required parameter 'resourceTenant' is set
    if (resourceTenant == null) {
      throw new ApiException(400, "Missing the required parameter 'resourceTenant' when calling searchRolesWithResourceTenantasSuperAdmin");
    }

    // create path and map variables
    String localVarPath = "/api/v1/tenants/{resourceTenant}/roles/search"
      .replaceAll("\\{" + "resourceTenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(resourceTenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
    localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
    localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sort", sort));

    localVarHeaderParams.putAll(additionalHeaders);



    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<PagedResultsRole> localVarReturnType = new TypeReference<PagedResultsRole>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Search for roles
   *
   * @param page The current page (required)
   * @param size The current page size (required)
   * @param q A string filter (optional)
   * @param sort The sort of current page (optional)
   * @return PagedResultsRole
   * @throws ApiException if fails to make API call
   */
  public PagedResultsRole searchRolesasSuperAdmin(@javax.annotation.Nonnull Integer page, @javax.annotation.Nonnull Integer size, @javax.annotation.Nullable String q, @javax.annotation.Nullable List<String> sort) throws ApiException {
    return this.searchRolesasSuperAdmin(page, size, q, sort, Collections.emptyMap());
  }


  /**
   * Search for roles
   *
   * @param page The current page (required)
   * @param size The current page size (required)
   * @param q A string filter (optional)
   * @param sort The sort of current page (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return PagedResultsRole
   * @throws ApiException if fails to make API call
   */
  public PagedResultsRole searchRolesasSuperAdmin(@javax.annotation.Nonnull Integer page, @javax.annotation.Nonnull Integer size, @javax.annotation.Nullable String q, @javax.annotation.Nullable List<String> sort, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;

    // verify the required parameter 'page' is set
    if (page == null) {
      throw new ApiException(400, "Missing the required parameter 'page' when calling searchRolesasSuperAdmin");
    }

    // verify the required parameter 'size' is set
    if (size == null) {
      throw new ApiException(400, "Missing the required parameter 'size' when calling searchRolesasSuperAdmin");
    }

    // create path and map variables
    String localVarPath = "/api/v1/tenants/roles/search";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
    localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
    localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sort", sort));

    localVarHeaderParams.putAll(additionalHeaders);



    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<PagedResultsRole> localVarReturnType = new TypeReference<PagedResultsRole>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Update a role
   *
   * @param id The role id (required)
   * @param tenant  (required)
   * @param role  (required)
   * @return Role
   * @throws ApiException if fails to make API call
   */
  public Role updateRole(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String tenant, @javax.annotation.Nonnull Role role) throws ApiException {
    return this.updateRole(id, tenant, role, Collections.emptyMap());
  }


  /**
   * Update a role
   *
   * @param id The role id (required)
   * @param tenant  (required)
   * @param role  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Role
   * @throws ApiException if fails to make API call
   */
  public Role updateRole(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String tenant, @javax.annotation.Nonnull Role role, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = role;

    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling updateRole");
    }

    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling updateRole");
    }

    // verify the required parameter 'role' is set
    if (role == null) {
      throw new ApiException(400, "Missing the required parameter 'role' when calling updateRole");
    }

    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/roles/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    localVarHeaderParams.putAll(additionalHeaders);



    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<Role> localVarReturnType = new TypeReference<Role>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "PUT",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Update a role
   *
   * @param id The role id (required)
   * @param resourceTenant  (required)
   * @param role  (required)
   * @return Role
   * @throws ApiException if fails to make API call
   */
  public Role updateRoleWithResourceTenantasSuperAdmin(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String resourceTenant, @javax.annotation.Nonnull Role role) throws ApiException {
    return this.updateRoleWithResourceTenantasSuperAdmin(id, resourceTenant, role, Collections.emptyMap());
  }


  /**
   * Update a role
   *
   * @param id The role id (required)
   * @param resourceTenant  (required)
   * @param role  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Role
   * @throws ApiException if fails to make API call
   */
  public Role updateRoleWithResourceTenantasSuperAdmin(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String resourceTenant, @javax.annotation.Nonnull Role role, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = role;

    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling updateRoleWithResourceTenantasSuperAdmin");
    }

    // verify the required parameter 'resourceTenant' is set
    if (resourceTenant == null) {
      throw new ApiException(400, "Missing the required parameter 'resourceTenant' when calling updateRoleWithResourceTenantasSuperAdmin");
    }

    // verify the required parameter 'role' is set
    if (role == null) {
      throw new ApiException(400, "Missing the required parameter 'role' when calling updateRoleWithResourceTenantasSuperAdmin");
    }

    // create path and map variables
    String localVarPath = "/api/v1/tenants/{resourceTenant}/roles/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "resourceTenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(resourceTenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    localVarHeaderParams.putAll(additionalHeaders);



    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<Role> localVarReturnType = new TypeReference<Role>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "PUT",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Update a role
   *
   * @param id The role id (required)
   * @param role  (required)
   * @return Role
   * @throws ApiException if fails to make API call
   */
  public Role updateRoleasSuperAdmin(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull Role role) throws ApiException {
    return this.updateRoleasSuperAdmin(id, role, Collections.emptyMap());
  }


  /**
   * Update a role
   *
   * @param id The role id (required)
   * @param role  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Role
   * @throws ApiException if fails to make API call
   */
  public Role updateRoleasSuperAdmin(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull Role role, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = role;

    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling updateRoleasSuperAdmin");
    }

    // verify the required parameter 'role' is set
    if (role == null) {
      throw new ApiException(400, "Missing the required parameter 'role' when calling updateRoleasSuperAdmin");
    }

    // create path and map variables
    String localVarPath = "/api/v1/tenants/roles/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    localVarHeaderParams.putAll(additionalHeaders);



    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<Role> localVarReturnType = new TypeReference<Role>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "PUT",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  @Override
  public <T> T invokeAPI(String url, String method, Object request, TypeReference<T> returnType, Map<String, String> additionalHeaders) throws ApiException {
    String localVarPath = url.replace(apiClient.getBaseURL(), "");
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarHeaderParams.putAll(additionalHeaders);

    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    return apiClient.invokeAPI(
      localVarPath,
        method,
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        request,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        returnType
    );
  }
}
