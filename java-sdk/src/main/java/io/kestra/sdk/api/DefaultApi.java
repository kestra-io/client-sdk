/*
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package io.kestra.sdk.api;

import com.fasterxml.jackson.core.type.TypeReference;

import io.kestra.sdk.internal.ApiException;
import io.kestra.sdk.internal.ApiClient;
import io.kestra.sdk.internal.BaseApi;
import io.kestra.sdk.internal.Configuration;
import io.kestra.sdk.internal.Pair;

import io.kestra.sdk.model.AuthControllerInvitationUserRequest;
import io.kestra.sdk.model.AuthControllerResetPasswordRequest;
import java.time.LocalDate;


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-19T08:56:01.503545549Z[Etc/UTC]", comments = "Generator version: 7.14.0-SNAPSHOT")
public class DefaultApi extends BaseApi {

  public DefaultApi() {
    super(Configuration.getDefaultApiClient());
  }

  public DefaultApi(ApiClient apiClient) {
    super(apiClient);
  }

  /**
   * 
   * 
   * @param invitationId  (required)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object acceptInvitation(@javax.annotation.Nonnull String invitationId) throws ApiException {
    return this.acceptInvitation(invitationId, Collections.emptyMap());
  }


  /**
   * 
   * 
   * @param invitationId  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object acceptInvitation(@javax.annotation.Nonnull String invitationId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'invitationId' is set
    if (invitationId == null) {
      throw new ApiException(400, "Missing the required parameter 'invitationId' when calling acceptInvitation");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/invitation/accept/{invitationId}"
      .replaceAll("\\{" + "invitationId" + "\\}", apiClient.escapeString(apiClient.parameterToString(invitationId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * 
   * 
   * @param invitationId  (required)
   * @param authControllerInvitationUserRequest The basic information to create an account from an invitation (required)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object createFromInvitation(@javax.annotation.Nonnull String invitationId, @javax.annotation.Nonnull AuthControllerInvitationUserRequest authControllerInvitationUserRequest) throws ApiException {
    return this.createFromInvitation(invitationId, authControllerInvitationUserRequest, Collections.emptyMap());
  }


  /**
   * 
   * 
   * @param invitationId  (required)
   * @param authControllerInvitationUserRequest The basic information to create an account from an invitation (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object createFromInvitation(@javax.annotation.Nonnull String invitationId, @javax.annotation.Nonnull AuthControllerInvitationUserRequest authControllerInvitationUserRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = authControllerInvitationUserRequest;
    
    // verify the required parameter 'invitationId' is set
    if (invitationId == null) {
      throw new ApiException(400, "Missing the required parameter 'invitationId' when calling createFromInvitation");
    }
    
    // verify the required parameter 'authControllerInvitationUserRequest' is set
    if (authControllerInvitationUserRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'authControllerInvitationUserRequest' when calling createFromInvitation");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/invitation/create/{invitationId}"
      .replaceAll("\\{" + "invitationId" + "\\}", apiClient.escapeString(apiClient.parameterToString(invitationId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Sends an email to reset a password.
   * Sends an email to reset a password. Note that whatever the username is found or not, the response will always be 200 to avoid leaking information.
   * @param username User that has forgotten his password (required)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object forgottenPassword(@javax.annotation.Nonnull String username) throws ApiException {
    return this.forgottenPassword(username, Collections.emptyMap());
  }


  /**
   * Sends an email to reset a password.
   * Sends an email to reset a password. Note that whatever the username is found or not, the response will always be 200 to avoid leaking information.
   * @param username User that has forgotten his password (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object forgottenPassword(@javax.annotation.Nonnull String username, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'username' is set
    if (username == null) {
      throw new ApiException(400, "Missing the required parameter 'username' when calling forgottenPassword");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/forgotten-password";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("username", username));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * 
   * 
   * @param tenant  (required)
   * @param from The start date (optional)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] generate(@javax.annotation.Nonnull String tenant, @javax.annotation.Nullable LocalDate from) throws ApiException {
    return this.generate(tenant, from, Collections.emptyMap());
  }


  /**
   * 
   * 
   * @param tenant  (required)
   * @param from The start date (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] generate(@javax.annotation.Nonnull String tenant, @javax.annotation.Nullable LocalDate from, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling generate");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/stats/generate-reports"
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("from", from));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/octet-stream"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<byte[]> localVarReturnType = new TypeReference<byte[]>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * 
   * 
   * @param username  (required)
   * @param password  (required)
   * @param identity  (optional)
   * @param secret  (optional)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object login(@javax.annotation.Nonnull String username, @javax.annotation.Nonnull String password, @javax.annotation.Nullable String identity, @javax.annotation.Nullable String secret) throws ApiException {
    return this.login(username, password, identity, secret, Collections.emptyMap());
  }


  /**
   * 
   * 
   * @param username  (required)
   * @param password  (required)
   * @param identity  (optional)
   * @param secret  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object login(@javax.annotation.Nonnull String username, @javax.annotation.Nonnull String password, @javax.annotation.Nullable String identity, @javax.annotation.Nullable String secret, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'username' is set
    if (username == null) {
      throw new ApiException(400, "Missing the required parameter 'username' when calling login");
    }
    
    // verify the required parameter 'password' is set
    if (password == null) {
      throw new ApiException(400, "Missing the required parameter 'password' when calling login");
    }
    
    // create path and map variables
    String localVarPath = "/login";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    if (username != null)
      localVarFormParams.put("username", username);
if (password != null)
      localVarFormParams.put("password", password);
if (identity != null)
      localVarFormParams.put("identity", identity);
if (secret != null)
      localVarFormParams.put("secret", secret);

    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/x-www-form-urlencoded", "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Change a password for given token.
   * Change a password for given token. If password does not match password policy, use can still retry.
   * @param authControllerResetPasswordRequest The password (required)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object resetPassword(@javax.annotation.Nonnull AuthControllerResetPasswordRequest authControllerResetPasswordRequest) throws ApiException {
    return this.resetPassword(authControllerResetPasswordRequest, Collections.emptyMap());
  }


  /**
   * Change a password for given token.
   * Change a password for given token. If password does not match password policy, use can still retry.
   * @param authControllerResetPasswordRequest The password (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object resetPassword(@javax.annotation.Nonnull AuthControllerResetPasswordRequest authControllerResetPasswordRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = authControllerResetPasswordRequest;
    
    // verify the required parameter 'authControllerResetPasswordRequest' is set
    if (authControllerResetPasswordRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'authControllerResetPasswordRequest' when calling resetPassword");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/reset-password";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  @Override
  public <T> T invokeAPI(String url, String method, Object request, TypeReference<T> returnType, Map<String, String> additionalHeaders) throws ApiException {
    String localVarPath = url.replace(apiClient.getBaseURL(), "");
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarHeaderParams.putAll(additionalHeaders);

    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    return apiClient.invokeAPI(
      localVarPath,
        method,
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        request,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        returnType
    );
  }
}
