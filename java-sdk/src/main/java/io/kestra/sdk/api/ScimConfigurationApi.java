/*
 * Kestra EE
 * All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package io.kestra.sdk.api;

import com.fasterxml.jackson.core.type.TypeReference;

import io.kestra.sdk.internal.ApiException;
import io.kestra.sdk.internal.ApiClient;
import io.kestra.sdk.internal.BaseApi;
import io.kestra.sdk.internal.Configuration;
import io.kestra.sdk.internal.Pair;

import io.kestra.sdk.model.ResourceType;
import io.swagger.v3.oas.annotations.media.Schema;
import io.kestra.sdk.model.ServiceProviderConfiguration;


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-05T07:35:23.657005690Z[Etc/UTC]", comments = "Generator version: 7.14.0-SNAPSHOT")
public class ScimConfigurationApi extends BaseApi {

  public ScimConfigurationApi() {
    super(Configuration.getDefaultApiClient());
  }

  public ScimConfigurationApi(ApiClient apiClient) {
    super(apiClient);
  }

  /**
   *
   * Get All Resource Types
   * @param integration  (required)
   * @param tenant  (required)
   * @return List&lt;ResourceType&gt;
   * @throws ApiException if fails to make API call
   */
  public List<ResourceType> getAllResourceTypes(@javax.annotation.Nonnull String integration, @javax.annotation.Nonnull String tenant) throws ApiException {
    return this.getAllResourceTypes(integration, tenant, Collections.emptyMap());
  }


  /**
   *
   * Get All Resource Types
   * @param integration  (required)
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return List&lt;ResourceType&gt;
   * @throws ApiException if fails to make API call
   */
  public List<ResourceType> getAllResourceTypes(@javax.annotation.Nonnull String integration, @javax.annotation.Nonnull String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;

    // verify the required parameter 'integration' is set
    if (integration == null) {
      throw new ApiException(400, "Missing the required parameter 'integration' when calling getAllResourceTypes");
    }

    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling getAllResourceTypes");
    }

    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/integrations/{integration}/scim/v2/ResourceTypes"
      .replaceAll("\\{" + "integration" + "\\}", apiClient.escapeString(apiClient.parameterToString(integration)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    localVarHeaderParams.putAll(additionalHeaders);



    final String[] localVarAccepts = {
      "application/scim+json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<List<ResourceType>> localVarReturnType = new TypeReference<List<ResourceType>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   *
   * Get All Schemas
   * @param integration  (required)
   * @param tenant  (required)
   * @return List&lt;Schema&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Schema> getAllSchemas(@javax.annotation.Nonnull String integration, @javax.annotation.Nonnull String tenant) throws ApiException {
    return this.getAllSchemas(integration, tenant, Collections.emptyMap());
  }


  /**
   *
   * Get All Schemas
   * @param integration  (required)
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return List&lt;Schema&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Schema> getAllSchemas(@javax.annotation.Nonnull String integration, @javax.annotation.Nonnull String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;

    // verify the required parameter 'integration' is set
    if (integration == null) {
      throw new ApiException(400, "Missing the required parameter 'integration' when calling getAllSchemas");
    }

    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling getAllSchemas");
    }

    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/integrations/{integration}/scim/v2/Schemas"
      .replaceAll("\\{" + "integration" + "\\}", apiClient.escapeString(apiClient.parameterToString(integration)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    localVarHeaderParams.putAll(additionalHeaders);



    final String[] localVarAccepts = {
      "application/scim+json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<List<Schema>> localVarReturnType = new TypeReference<List<Schema>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   *
   * Get Resource Type by URN
   * @param name  (required)
   * @param integration  (required)
   * @param tenant  (required)
   * @return ResourceType
   * @throws ApiException if fails to make API call
   */
  public ResourceType getResourceType(@javax.annotation.Nonnull String name, @javax.annotation.Nonnull String integration, @javax.annotation.Nonnull String tenant) throws ApiException {
    return this.getResourceType(name, integration, tenant, Collections.emptyMap());
  }


  /**
   *
   * Get Resource Type by URN
   * @param name  (required)
   * @param integration  (required)
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return ResourceType
   * @throws ApiException if fails to make API call
   */
  public ResourceType getResourceType(@javax.annotation.Nonnull String name, @javax.annotation.Nonnull String integration, @javax.annotation.Nonnull String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;

    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling getResourceType");
    }

    // verify the required parameter 'integration' is set
    if (integration == null) {
      throw new ApiException(400, "Missing the required parameter 'integration' when calling getResourceType");
    }

    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling getResourceType");
    }

    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/integrations/{integration}/scim/v2/ResourceTypes/{name}"
      .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(apiClient.parameterToString(name)))
      .replaceAll("\\{" + "integration" + "\\}", apiClient.escapeString(apiClient.parameterToString(integration)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    localVarHeaderParams.putAll(additionalHeaders);



    final String[] localVarAccepts = {
      "application/scim+json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<ResourceType> localVarReturnType = new TypeReference<ResourceType>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   *
   * Get Schemas by URN
   * @param uri  (required)
   * @param integration  (required)
   * @param tenant  (required)
   * @return Schema
   * @throws ApiException if fails to make API call
   */
  public Schema getSchema(@javax.annotation.Nonnull String uri, @javax.annotation.Nonnull String integration, @javax.annotation.Nonnull String tenant) throws ApiException {
    return this.getSchema(uri, integration, tenant, Collections.emptyMap());
  }


  /**
   *
   * Get Schemas by URN
   * @param uri  (required)
   * @param integration  (required)
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Schema
   * @throws ApiException if fails to make API call
   */
  public Schema getSchema(@javax.annotation.Nonnull String uri, @javax.annotation.Nonnull String integration, @javax.annotation.Nonnull String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;

    // verify the required parameter 'uri' is set
    if (uri == null) {
      throw new ApiException(400, "Missing the required parameter 'uri' when calling getSchema");
    }

    // verify the required parameter 'integration' is set
    if (integration == null) {
      throw new ApiException(400, "Missing the required parameter 'integration' when calling getSchema");
    }

    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling getSchema");
    }

    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/integrations/{integration}/scim/v2/Schemas/{uri}"
      .replaceAll("\\{" + "uri" + "\\}", apiClient.escapeString(apiClient.parameterToString(uri)))
      .replaceAll("\\{" + "integration" + "\\}", apiClient.escapeString(apiClient.parameterToString(integration)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    localVarHeaderParams.putAll(additionalHeaders);



    final String[] localVarAccepts = {
      "application/scim+json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Schema> localVarReturnType = new TypeReference<Schema>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   *
   * Get Service Provider Configuration
   * @param integration  (required)
   * @param tenant  (required)
   * @return ServiceProviderConfiguration
   * @throws ApiException if fails to make API call
   */
  public ServiceProviderConfiguration getServiceProviderConfiguration(@javax.annotation.Nonnull String integration, @javax.annotation.Nonnull String tenant) throws ApiException {
    return this.getServiceProviderConfiguration(integration, tenant, Collections.emptyMap());
  }


  /**
   *
   * Get Service Provider Configuration
   * @param integration  (required)
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return ServiceProviderConfiguration
   * @throws ApiException if fails to make API call
   */
  public ServiceProviderConfiguration getServiceProviderConfiguration(@javax.annotation.Nonnull String integration, @javax.annotation.Nonnull String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;

    // verify the required parameter 'integration' is set
    if (integration == null) {
      throw new ApiException(400, "Missing the required parameter 'integration' when calling getServiceProviderConfiguration");
    }

    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling getServiceProviderConfiguration");
    }

    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/integrations/{integration}/scim/v2/ServiceProviderConfig"
      .replaceAll("\\{" + "integration" + "\\}", apiClient.escapeString(apiClient.parameterToString(integration)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    localVarHeaderParams.putAll(additionalHeaders);



    final String[] localVarAccepts = {
      "application/scim+json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<ServiceProviderConfiguration> localVarReturnType = new TypeReference<ServiceProviderConfiguration>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  @Override
  public <T> T invokeAPI(String url, String method, Object request, TypeReference<T> returnType, Map<String, String> additionalHeaders) throws ApiException {
    String localVarPath = url.replace(apiClient.getBaseURL(), "");
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarHeaderParams.putAll(additionalHeaders);

    final String[] localVarAccepts = {
      "application/scim+json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    return apiClient.invokeAPI(
      localVarPath,
        method,
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        request,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        returnType
    );
  }
}
