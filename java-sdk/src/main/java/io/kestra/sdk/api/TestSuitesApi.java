/*
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package io.kestra.sdk.api;

import com.fasterxml.jackson.core.type.TypeReference;

import io.kestra.sdk.internal.ApiException;
import io.kestra.sdk.internal.ApiClient;
import io.kestra.sdk.internal.BaseApi;
import io.kestra.sdk.internal.Configuration;
import io.kestra.sdk.internal.Pair;

import io.kestra.sdk.model.BulkResponse;
import io.kestra.sdk.model.PagedResultsTestSuite;
import io.kestra.sdk.model.TestSuite;
import io.kestra.sdk.model.TestSuiteControllerSearchTestsLastResult;
import io.kestra.sdk.model.TestSuiteControllerTestSuiteBulkRequest;
import io.kestra.sdk.model.TestSuiteControllerTestsLastResultResponse;
import io.kestra.sdk.model.TestSuiteRunResult;
import io.kestra.sdk.model.ValidateConstraintViolation;


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-03T07:32:20.514591171Z[Etc/UTC]", comments = "Generator version: 7.14.0-SNAPSHOT")
public class TestSuitesApi extends BaseApi {

  public TestSuitesApi() {
    super(Configuration.getDefaultApiClient());
  }

  public TestSuitesApi(ApiClient apiClient) {
    super(apiClient);
  }

  /**
   * Create a test from YAML source
   * Creates a new test from a YAML definition. Requires TEST permission with the CREATE action.
   * @param tenant  (required)
   * @param body The TestSuite source code (required)
   * @return TestSuite
   * @throws ApiException if fails to make API call
   */
  public TestSuite createTestSuite(@javax.annotation.Nonnull String tenant, @javax.annotation.Nonnull String body) throws ApiException {
    return this.createTestSuite(tenant, body, Collections.emptyMap());
  }


  /**
   * Create a test from YAML source
   * Creates a new test from a YAML definition. Requires TEST permission with the CREATE action.
   * @param tenant  (required)
   * @param body The TestSuite source code (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return TestSuite
   * @throws ApiException if fails to make API call
   */
  public TestSuite createTestSuite(@javax.annotation.Nonnull String tenant, @javax.annotation.Nonnull String body, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = body;
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling createTestSuite");
    }
    
    // verify the required parameter 'body' is set
    if (body == null) {
      throw new ApiException(400, "Missing the required parameter 'body' when calling createTestSuite");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/tests"
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/x-yaml"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<TestSuite> localVarReturnType = new TypeReference<TestSuite>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Delete a test
   * Deletes a test by namespace and ID. Requires TEST permission with the DELETE action.
   * @param namespace The TestSuite namespace (required)
   * @param id The TestSuite ID (required)
   * @param tenant  (required)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object deleteTestSuite(@javax.annotation.Nonnull String namespace, @javax.annotation.Nonnull String id, @javax.annotation.Nonnull String tenant) throws ApiException {
    return this.deleteTestSuite(namespace, id, tenant, Collections.emptyMap());
  }


  /**
   * Delete a test
   * Deletes a test by namespace and ID. Requires TEST permission with the DELETE action.
   * @param namespace The TestSuite namespace (required)
   * @param id The TestSuite ID (required)
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object deleteTestSuite(@javax.annotation.Nonnull String namespace, @javax.annotation.Nonnull String id, @javax.annotation.Nonnull String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'namespace' is set
    if (namespace == null) {
      throw new ApiException(400, "Missing the required parameter 'namespace' when calling deleteTestSuite");
    }
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteTestSuite");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling deleteTestSuite");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/tests/{namespace}/{id}"
      .replaceAll("\\{" + "namespace" + "\\}", apiClient.escapeString(apiClient.parameterToString(namespace)))
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Delete multiple tests by id
   * Deletes a test by namespace and ID. Requires TEST permission with the DELETE action.
   * @param tenant  (required)
   * @param testSuiteControllerTestSuiteBulkRequest  (required)
   * @return BulkResponse
   * @throws ApiException if fails to make API call
   */
  public BulkResponse deleteTestSuitesByIds(@javax.annotation.Nonnull String tenant, @javax.annotation.Nonnull TestSuiteControllerTestSuiteBulkRequest testSuiteControllerTestSuiteBulkRequest) throws ApiException {
    return this.deleteTestSuitesByIds(tenant, testSuiteControllerTestSuiteBulkRequest, Collections.emptyMap());
  }


  /**
   * Delete multiple tests by id
   * Deletes a test by namespace and ID. Requires TEST permission with the DELETE action.
   * @param tenant  (required)
   * @param testSuiteControllerTestSuiteBulkRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return BulkResponse
   * @throws ApiException if fails to make API call
   */
  public BulkResponse deleteTestSuitesByIds(@javax.annotation.Nonnull String tenant, @javax.annotation.Nonnull TestSuiteControllerTestSuiteBulkRequest testSuiteControllerTestSuiteBulkRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = testSuiteControllerTestSuiteBulkRequest;
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling deleteTestSuitesByIds");
    }
    
    // verify the required parameter 'testSuiteControllerTestSuiteBulkRequest' is set
    if (testSuiteControllerTestSuiteBulkRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'testSuiteControllerTestSuiteBulkRequest' when calling deleteTestSuitesByIds");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/tests/by-ids"
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<BulkResponse> localVarReturnType = new TypeReference<BulkResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Disable multiple tests by id
   * Disable a test by namespace and ID. Requires TEST permission with the UPDATE action.
   * @param tenant  (required)
   * @param testSuiteControllerTestSuiteBulkRequest  (required)
   * @return BulkResponse
   * @throws ApiException if fails to make API call
   */
  public BulkResponse disableTestSuitesByIds(@javax.annotation.Nonnull String tenant, @javax.annotation.Nonnull TestSuiteControllerTestSuiteBulkRequest testSuiteControllerTestSuiteBulkRequest) throws ApiException {
    return this.disableTestSuitesByIds(tenant, testSuiteControllerTestSuiteBulkRequest, Collections.emptyMap());
  }


  /**
   * Disable multiple tests by id
   * Disable a test by namespace and ID. Requires TEST permission with the UPDATE action.
   * @param tenant  (required)
   * @param testSuiteControllerTestSuiteBulkRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return BulkResponse
   * @throws ApiException if fails to make API call
   */
  public BulkResponse disableTestSuitesByIds(@javax.annotation.Nonnull String tenant, @javax.annotation.Nonnull TestSuiteControllerTestSuiteBulkRequest testSuiteControllerTestSuiteBulkRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = testSuiteControllerTestSuiteBulkRequest;
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling disableTestSuitesByIds");
    }
    
    // verify the required parameter 'testSuiteControllerTestSuiteBulkRequest' is set
    if (testSuiteControllerTestSuiteBulkRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'testSuiteControllerTestSuiteBulkRequest' when calling disableTestSuitesByIds");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/tests/disable/by-ids"
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<BulkResponse> localVarReturnType = new TypeReference<BulkResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Enable multiple tests by id
   * Enable a test by namespace and ID. Requires TEST permission with the UPDATE action.
   * @param tenant  (required)
   * @param testSuiteControllerTestSuiteBulkRequest  (required)
   * @return BulkResponse
   * @throws ApiException if fails to make API call
   */
  public BulkResponse enableTestSuitesByIds(@javax.annotation.Nonnull String tenant, @javax.annotation.Nonnull TestSuiteControllerTestSuiteBulkRequest testSuiteControllerTestSuiteBulkRequest) throws ApiException {
    return this.enableTestSuitesByIds(tenant, testSuiteControllerTestSuiteBulkRequest, Collections.emptyMap());
  }


  /**
   * Enable multiple tests by id
   * Enable a test by namespace and ID. Requires TEST permission with the UPDATE action.
   * @param tenant  (required)
   * @param testSuiteControllerTestSuiteBulkRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return BulkResponse
   * @throws ApiException if fails to make API call
   */
  public BulkResponse enableTestSuitesByIds(@javax.annotation.Nonnull String tenant, @javax.annotation.Nonnull TestSuiteControllerTestSuiteBulkRequest testSuiteControllerTestSuiteBulkRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = testSuiteControllerTestSuiteBulkRequest;
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling enableTestSuitesByIds");
    }
    
    // verify the required parameter 'testSuiteControllerTestSuiteBulkRequest' is set
    if (testSuiteControllerTestSuiteBulkRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'testSuiteControllerTestSuiteBulkRequest' when calling enableTestSuitesByIds");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/tests/enable/by-ids"
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<BulkResponse> localVarReturnType = new TypeReference<BulkResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get a test result
   * Get a test result once it was run.
   * @param id The test run ID (required)
   * @param tenant  (required)
   * @return TestSuiteRunResult
   * @throws ApiException if fails to make API call
   */
  public TestSuiteRunResult getTestResult(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String tenant) throws ApiException {
    return this.getTestResult(id, tenant, Collections.emptyMap());
  }


  /**
   * Get a test result
   * Get a test result once it was run.
   * @param id The test run ID (required)
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return TestSuiteRunResult
   * @throws ApiException if fails to make API call
   */
  public TestSuiteRunResult getTestResult(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getTestResult");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling getTestResult");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/tests/results/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<TestSuiteRunResult> localVarReturnType = new TypeReference<TestSuiteRunResult>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Retrieve a test
   * Retrieves a test by namespace and ID. Requires TEST permission with the READ action.
   * @param namespace The TestSuite namespace (required)
   * @param id The TestSuite ID (required)
   * @param tenant  (required)
   * @return TestSuite
   * @throws ApiException if fails to make API call
   */
  public TestSuite getTestSuite(@javax.annotation.Nonnull String namespace, @javax.annotation.Nonnull String id, @javax.annotation.Nonnull String tenant) throws ApiException {
    return this.getTestSuite(namespace, id, tenant, Collections.emptyMap());
  }


  /**
   * Retrieve a test
   * Retrieves a test by namespace and ID. Requires TEST permission with the READ action.
   * @param namespace The TestSuite namespace (required)
   * @param id The TestSuite ID (required)
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return TestSuite
   * @throws ApiException if fails to make API call
   */
  public TestSuite getTestSuite(@javax.annotation.Nonnull String namespace, @javax.annotation.Nonnull String id, @javax.annotation.Nonnull String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'namespace' is set
    if (namespace == null) {
      throw new ApiException(400, "Missing the required parameter 'namespace' when calling getTestSuite");
    }
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getTestSuite");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling getTestSuite");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/tests/{namespace}/{id}"
      .replaceAll("\\{" + "namespace" + "\\}", apiClient.escapeString(apiClient.parameterToString(namespace)))
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<TestSuite> localVarReturnType = new TypeReference<TestSuite>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get tests last result
   * Get multiple tests last result for a query.
   * @param tenant  (required)
   * @param testSuiteControllerSearchTestsLastResult  (required)
   * @return TestSuiteControllerTestsLastResultResponse
   * @throws ApiException if fails to make API call
   */
  public TestSuiteControllerTestsLastResultResponse getTestsLastResult(@javax.annotation.Nonnull String tenant, @javax.annotation.Nonnull TestSuiteControllerSearchTestsLastResult testSuiteControllerSearchTestsLastResult) throws ApiException {
    return this.getTestsLastResult(tenant, testSuiteControllerSearchTestsLastResult, Collections.emptyMap());
  }


  /**
   * Get tests last result
   * Get multiple tests last result for a query.
   * @param tenant  (required)
   * @param testSuiteControllerSearchTestsLastResult  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return TestSuiteControllerTestsLastResultResponse
   * @throws ApiException if fails to make API call
   */
  public TestSuiteControllerTestsLastResultResponse getTestsLastResult(@javax.annotation.Nonnull String tenant, @javax.annotation.Nonnull TestSuiteControllerSearchTestsLastResult testSuiteControllerSearchTestsLastResult, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = testSuiteControllerSearchTestsLastResult;
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling getTestsLastResult");
    }
    
    // verify the required parameter 'testSuiteControllerSearchTestsLastResult' is set
    if (testSuiteControllerSearchTestsLastResult == null) {
      throw new ApiException(400, "Missing the required parameter 'testSuiteControllerSearchTestsLastResult' when calling getTestsLastResult");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/tests/results/search/last"
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<TestSuiteControllerTestsLastResultResponse> localVarReturnType = new TypeReference<TestSuiteControllerTestsLastResultResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Run a full test
   * Executes all test cases in the specified test. Requires TEST permission with the CREATE action.
   * @param namespace The TestSuite namespace (required)
   * @param id The TestSuite ID (required)
   * @param tenant  (required)
   * @return List&lt;TestSuiteRunResult&gt;
   * @throws ApiException if fails to make API call
   */
  public List<TestSuiteRunResult> runTestSuite(@javax.annotation.Nonnull String namespace, @javax.annotation.Nonnull String id, @javax.annotation.Nonnull String tenant) throws ApiException {
    return this.runTestSuite(namespace, id, tenant, Collections.emptyMap());
  }


  /**
   * Run a full test
   * Executes all test cases in the specified test. Requires TEST permission with the CREATE action.
   * @param namespace The TestSuite namespace (required)
   * @param id The TestSuite ID (required)
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return List&lt;TestSuiteRunResult&gt;
   * @throws ApiException if fails to make API call
   */
  public List<TestSuiteRunResult> runTestSuite(@javax.annotation.Nonnull String namespace, @javax.annotation.Nonnull String id, @javax.annotation.Nonnull String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'namespace' is set
    if (namespace == null) {
      throw new ApiException(400, "Missing the required parameter 'namespace' when calling runTestSuite");
    }
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling runTestSuite");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling runTestSuite");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/tests/{namespace}/{id}/run"
      .replaceAll("\\{" + "namespace" + "\\}", apiClient.escapeString(apiClient.parameterToString(namespace)))
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<List<TestSuiteRunResult>> localVarReturnType = new TypeReference<List<TestSuiteRunResult>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Search for tests
   * Searches for tests with optional filtering by namespace and flow ID. Requires TEST permission with the READ action.
   * @param page The current page (required)
   * @param size The current page size (required)
   * @param tenant  (required)
   * @param sort The sort of current page (optional)
   * @param namespace The namespace to filter on (optional)
   * @param flowId The flow id to filter on (optional)
   * @return PagedResultsTestSuite
   * @throws ApiException if fails to make API call
   */
  public PagedResultsTestSuite searchTestSuites(@javax.annotation.Nonnull Integer page, @javax.annotation.Nonnull Integer size, @javax.annotation.Nonnull String tenant, @javax.annotation.Nullable List<String> sort, @javax.annotation.Nullable String namespace, @javax.annotation.Nullable String flowId) throws ApiException {
    return this.searchTestSuites(page, size, tenant, sort, namespace, flowId, Collections.emptyMap());
  }


  /**
   * Search for tests
   * Searches for tests with optional filtering by namespace and flow ID. Requires TEST permission with the READ action.
   * @param page The current page (required)
   * @param size The current page size (required)
   * @param tenant  (required)
   * @param sort The sort of current page (optional)
   * @param namespace The namespace to filter on (optional)
   * @param flowId The flow id to filter on (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return PagedResultsTestSuite
   * @throws ApiException if fails to make API call
   */
  public PagedResultsTestSuite searchTestSuites(@javax.annotation.Nonnull Integer page, @javax.annotation.Nonnull Integer size, @javax.annotation.Nonnull String tenant, @javax.annotation.Nullable List<String> sort, @javax.annotation.Nullable String namespace, @javax.annotation.Nullable String flowId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'page' is set
    if (page == null) {
      throw new ApiException(400, "Missing the required parameter 'page' when calling searchTestSuites");
    }
    
    // verify the required parameter 'size' is set
    if (size == null) {
      throw new ApiException(400, "Missing the required parameter 'size' when calling searchTestSuites");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling searchTestSuites");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/tests/search"
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
    localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "sort", sort));
    localVarQueryParams.addAll(apiClient.parameterToPair("namespace", namespace));
    localVarQueryParams.addAll(apiClient.parameterToPair("flowId", flowId));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<PagedResultsTestSuite> localVarReturnType = new TypeReference<PagedResultsTestSuite>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Update a test from YAML source
   * Updates an existing test with a new YAML definition. Requires TEST permission with the UPDATE action.
   * @param namespace The TestSuite namespace (required)
   * @param id The TestSuite ID (required)
   * @param tenant  (required)
   * @param body The TestSuite source code (required)
   * @return TestSuite
   * @throws ApiException if fails to make API call
   */
  public TestSuite updateTestSuite(@javax.annotation.Nonnull String namespace, @javax.annotation.Nonnull String id, @javax.annotation.Nonnull String tenant, @javax.annotation.Nonnull String body) throws ApiException {
    return this.updateTestSuite(namespace, id, tenant, body, Collections.emptyMap());
  }


  /**
   * Update a test from YAML source
   * Updates an existing test with a new YAML definition. Requires TEST permission with the UPDATE action.
   * @param namespace The TestSuite namespace (required)
   * @param id The TestSuite ID (required)
   * @param tenant  (required)
   * @param body The TestSuite source code (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return TestSuite
   * @throws ApiException if fails to make API call
   */
  public TestSuite updateTestSuite(@javax.annotation.Nonnull String namespace, @javax.annotation.Nonnull String id, @javax.annotation.Nonnull String tenant, @javax.annotation.Nonnull String body, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = body;
    
    // verify the required parameter 'namespace' is set
    if (namespace == null) {
      throw new ApiException(400, "Missing the required parameter 'namespace' when calling updateTestSuite");
    }
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling updateTestSuite");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling updateTestSuite");
    }
    
    // verify the required parameter 'body' is set
    if (body == null) {
      throw new ApiException(400, "Missing the required parameter 'body' when calling updateTestSuite");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/tests/{namespace}/{id}"
      .replaceAll("\\{" + "namespace" + "\\}", apiClient.escapeString(apiClient.parameterToString(namespace)))
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/x-yaml"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<TestSuite> localVarReturnType = new TypeReference<TestSuite>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "PUT",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Validate a test
   * Validates a test YAML definition without persisting it. Returns constraint violations if any. Requires TEST permission with the READ action.
   * @param tenant  (required)
   * @param body The TestSuite source code (required)
   * @return ValidateConstraintViolation
   * @throws ApiException if fails to make API call
   */
  public ValidateConstraintViolation validateTestSuite(@javax.annotation.Nonnull String tenant, @javax.annotation.Nonnull String body) throws ApiException {
    return this.validateTestSuite(tenant, body, Collections.emptyMap());
  }


  /**
   * Validate a test
   * Validates a test YAML definition without persisting it. Returns constraint violations if any. Requires TEST permission with the READ action.
   * @param tenant  (required)
   * @param body The TestSuite source code (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return ValidateConstraintViolation
   * @throws ApiException if fails to make API call
   */
  public ValidateConstraintViolation validateTestSuite(@javax.annotation.Nonnull String tenant, @javax.annotation.Nonnull String body, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = body;
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling validateTestSuite");
    }
    
    // verify the required parameter 'body' is set
    if (body == null) {
      throw new ApiException(400, "Missing the required parameter 'body' when calling validateTestSuite");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/tests/validate"
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/x-yaml"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<ValidateConstraintViolation> localVarReturnType = new TypeReference<ValidateConstraintViolation>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  @Override
  public <T> T invokeAPI(String url, String method, Object request, TypeReference<T> returnType, Map<String, String> additionalHeaders) throws ApiException {
    String localVarPath = url.replace(apiClient.getBaseURL(), "");
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarHeaderParams.putAll(additionalHeaders);

    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/x-yaml"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    return apiClient.invokeAPI(
      localVarPath,
        method,
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        request,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        returnType
    );
  }
}
