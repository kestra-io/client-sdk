/*
 * Kestra EE
 * All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package io.kestra.sdk.api;

import com.fasterxml.jackson.core.type.TypeReference;

import io.kestra.sdk.internal.ApiException;
import io.kestra.sdk.internal.ApiClient;
import io.kestra.sdk.internal.BaseApi;
import io.kestra.sdk.internal.Configuration;
import io.kestra.sdk.internal.Pair;

import io.kestra.sdk.model.Action;
import io.kestra.sdk.model.ApiUser;
import io.kestra.sdk.model.MiscControllerBasicAuthCredentials;
import io.kestra.sdk.model.MiscControllerEEConfiguration;
import io.kestra.sdk.model.MiscControllerLicenseInfo;
import io.kestra.sdk.model.Permission;
import io.kestra.sdk.model.SetupConfiguration;
import io.kestra.sdk.model.SetupConfigurationSetupData;
import io.kestra.sdk.model.Usage;
import io.kestra.sdk.model.UsageEE;


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-05T07:35:23.657005690Z[Etc/UTC]", comments = "Generator version: 7.14.0-SNAPSHOT")
public class MiscApi extends BaseApi {

  public MiscApi() {
    super(Configuration.getDefaultApiClient());
  }

  public MiscApi(ApiClient apiClient) {
    super(apiClient);
  }

  /**
   * Create basic auth for the current instance
   *
   * @param miscControllerBasicAuthCredentials  (required)
   * @throws ApiException if fails to make API call
   */
  public void createBasicAuth(@javax.annotation.Nonnull MiscControllerBasicAuthCredentials miscControllerBasicAuthCredentials) throws ApiException {
    this.createBasicAuth(miscControllerBasicAuthCredentials, Collections.emptyMap());
  }


  /**
   * Create basic auth for the current instance
   *
   * @param miscControllerBasicAuthCredentials  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void createBasicAuth(@javax.annotation.Nonnull MiscControllerBasicAuthCredentials miscControllerBasicAuthCredentials, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = miscControllerBasicAuthCredentials;

    // verify the required parameter 'miscControllerBasicAuthCredentials' is set
    if (miscControllerBasicAuthCredentials == null) {
      throw new ApiException(400, "Missing the required parameter 'miscControllerBasicAuthCredentials' when calling createBasicAuth");
    }

    // create path and map variables
    String localVarPath = "/api/v1/main/basicAuth";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    localVarHeaderParams.putAll(additionalHeaders);



    final String[] localVarAccepts = {

    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Get current configurations
   *
   * @return MiscControllerEEConfiguration
   * @throws ApiException if fails to make API call
   */
  public MiscControllerEEConfiguration getConfiguration() throws ApiException {
    return this.getConfiguration(Collections.emptyMap());
  }


  /**
   * Get current configurations
   *
   * @param additionalHeaders additionalHeaders for this call
   * @return MiscControllerEEConfiguration
   * @throws ApiException if fails to make API call
   */
  public MiscControllerEEConfiguration getConfiguration(Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/api/v1/configs";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    localVarHeaderParams.putAll(additionalHeaders);



    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<MiscControllerEEConfiguration> localVarReturnType = new TypeReference<MiscControllerEEConfiguration>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get instance usage information
   *
   * @param tenant  (required)
   * @return Usage
   * @throws ApiException if fails to make API call
   */
  public Usage getUsages(@javax.annotation.Nonnull String tenant) throws ApiException {
    return this.getUsages(tenant, Collections.emptyMap());
  }


  /**
   * Get instance usage information
   *
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Usage
   * @throws ApiException if fails to make API call
   */
  public Usage getUsages(@javax.annotation.Nonnull String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;

    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling getUsages");
    }

    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/usages/all"
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    localVarHeaderParams.putAll(additionalHeaders);



    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<Usage> localVarReturnType = new TypeReference<Usage>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get current license information
   *
   * @return MiscControllerLicenseInfo
   * @throws ApiException if fails to make API call
   */
  public MiscControllerLicenseInfo licenseInfo() throws ApiException {
    return this.licenseInfo(Collections.emptyMap());
  }


  /**
   * Get current license information
   *
   * @param additionalHeaders additionalHeaders for this call
   * @return MiscControllerLicenseInfo
   * @throws ApiException if fails to make API call
   */
  public MiscControllerLicenseInfo licenseInfo(Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/api/v1/license-info";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    localVarHeaderParams.putAll(additionalHeaders);



    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<MiscControllerLicenseInfo> localVarReturnType = new TypeReference<MiscControllerLicenseInfo>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get list of actions
   *
   * @param tenant  (required)
   * @return List&lt;Action&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Action> listActions(@javax.annotation.Nonnull String tenant) throws ApiException {
    return this.listActions(tenant, Collections.emptyMap());
  }


  /**
   * Get list of actions
   *
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return List&lt;Action&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Action> listActions(@javax.annotation.Nonnull String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;

    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling listActions");
    }

    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/acls/actions"
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    localVarHeaderParams.putAll(additionalHeaders);



    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<List<Action>> localVarReturnType = new TypeReference<List<Action>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get list of permissions
   *
   * @param tenant  (required)
   * @return List&lt;Permission&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Permission> listPermissions(@javax.annotation.Nonnull String tenant) throws ApiException {
    return this.listPermissions(tenant, Collections.emptyMap());
  }


  /**
   * Get list of permissions
   *
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return List&lt;Permission&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Permission> listPermissions(@javax.annotation.Nonnull String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;

    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling listPermissions");
    }

    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/acls/permissions"
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    localVarHeaderParams.putAll(additionalHeaders);



    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<List<Permission>> localVarReturnType = new TypeReference<List<Permission>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Currently running configuration
   *
   * @return SetupConfiguration
   * @throws ApiException if fails to make API call
   */
  public SetupConfiguration setupConfiguration() throws ApiException {
    return this.setupConfiguration(Collections.emptyMap());
  }


  /**
   * Currently running configuration
   *
   * @param additionalHeaders additionalHeaders for this call
   * @return SetupConfiguration
   * @throws ApiException if fails to make API call
   */
  public SetupConfiguration setupConfiguration(Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/api/v1/setup";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    localVarHeaderParams.putAll(additionalHeaders);



    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<SetupConfiguration> localVarReturnType = new TypeReference<SetupConfiguration>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Create the first user
   *
   * @param setupConfigurationSetupData  (required)
   * @return ApiUser
   * @throws ApiException if fails to make API call
   */
  public ApiUser setupKestra(@javax.annotation.Nonnull SetupConfigurationSetupData setupConfigurationSetupData) throws ApiException {
    return this.setupKestra(setupConfigurationSetupData, Collections.emptyMap());
  }


  /**
   * Create the first user
   *
   * @param setupConfigurationSetupData  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return ApiUser
   * @throws ApiException if fails to make API call
   */
  public ApiUser setupKestra(@javax.annotation.Nonnull SetupConfigurationSetupData setupConfigurationSetupData, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = setupConfigurationSetupData;

    // verify the required parameter 'setupConfigurationSetupData' is set
    if (setupConfigurationSetupData == null) {
      throw new ApiException(400, "Missing the required parameter 'setupConfigurationSetupData' when calling setupKestra");
    }

    // create path and map variables
    String localVarPath = "/api/v1/setup";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    localVarHeaderParams.putAll(additionalHeaders);



    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<ApiUser> localVarReturnType = new TypeReference<ApiUser>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get instance usage information for the current tenant
   *
   * @param tenant  (required)
   * @return UsageEE
   * @throws ApiException if fails to make API call
   */
  public UsageEE tenantUsage(@javax.annotation.Nonnull String tenant) throws ApiException {
    return this.tenantUsage(tenant, Collections.emptyMap());
  }


  /**
   * Get instance usage information for the current tenant
   *
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return UsageEE
   * @throws ApiException if fails to make API call
   */
  public UsageEE tenantUsage(@javax.annotation.Nonnull String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;

    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling tenantUsage");
    }

    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/usages"
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    localVarHeaderParams.putAll(additionalHeaders);



    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<UsageEE> localVarReturnType = new TypeReference<UsageEE>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  @Override
  public <T> T invokeAPI(String url, String method, Object request, TypeReference<T> returnType, Map<String, String> additionalHeaders) throws ApiException {
    String localVarPath = url.replace(apiClient.getBaseURL(), "");
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarHeaderParams.putAll(additionalHeaders);

    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    return apiClient.invokeAPI(
      localVarPath,
        method,
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        request,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        returnType
    );
  }
}
