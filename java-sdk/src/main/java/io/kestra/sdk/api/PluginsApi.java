/*
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package io.kestra.sdk.api;

import com.fasterxml.jackson.core.type.TypeReference;

import io.kestra.sdk.internal.ApiException;
import io.kestra.sdk.internal.ApiClient;
import io.kestra.sdk.internal.BaseApi;
import io.kestra.sdk.internal.Configuration;
import io.kestra.sdk.internal.Pair;

import io.kestra.sdk.model.DocumentationWithSchema;
import java.io.File;
import io.kestra.sdk.model.InputType;
import io.kestra.sdk.model.InstanceControllerApiPluginArtifactListPluginArtifact;
import io.kestra.sdk.model.InstanceControllerApiPluginArtifactListPluginResolutionResult;
import io.kestra.sdk.model.InstanceControllerApiPluginListRequest;
import io.kestra.sdk.model.InstanceControllerApiPluginVersionDetails;
import io.kestra.sdk.model.InstanceControllerApiPluginVersions;
import io.kestra.sdk.model.PagedResultsInstanceControllerApiPluginArtifact;
import io.kestra.sdk.model.Plugin;
import io.kestra.sdk.model.PluginArtifact;
import io.kestra.sdk.model.PluginControllerApiPluginVersions;
import io.kestra.sdk.model.PluginIcon;
import io.kestra.sdk.model.SchemaType;
import io.kestra.sdk.model.Type;


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.14.0-SNAPSHOT")
public class PluginsApi extends BaseApi {

  public PluginsApi() {
    super(Configuration.getDefaultApiClient());
  }

  public PluginsApi(ApiClient apiClient) {
    super(apiClient);
  }

  /**
   * Get all types for an inputs
   * 
   * @return List&lt;InputType&gt;
   * @throws ApiException if fails to make API call
   */
  public List<InputType> getAllInputTypes() throws ApiException {
    return this.getAllInputTypes(Collections.emptyMap());
  }


  /**
   * Get all types for an inputs
   * 
   * @param additionalHeaders additionalHeaders for this call
   * @return List&lt;InputType&gt;
   * @throws ApiException if fails to make API call
   */
  public List<InputType> getAllInputTypes(Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/api/v1/plugins/inputs";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<List<InputType>> localVarReturnType = new TypeReference<List<InputType>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get plugins group by subgroups
   * 
   * @return List&lt;Plugin&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Plugin> getPluginBySubgroups() throws ApiException {
    return this.getPluginBySubgroups(Collections.emptyMap());
  }


  /**
   * Get plugins group by subgroups
   * 
   * @param additionalHeaders additionalHeaders for this call
   * @return List&lt;Plugin&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Plugin> getPluginBySubgroups(Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/api/v1/plugins/groups/subgroups";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<List<Plugin>> localVarReturnType = new TypeReference<List<Plugin>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get plugin documentation
   * 
   * @param cls The plugin full class name (required)
   * @param all Include all the properties (required)
   * @return DocumentationWithSchema
   * @throws ApiException if fails to make API call
   */
  public DocumentationWithSchema getPluginDocumentation(@javax.annotation.Nonnull String cls, @javax.annotation.Nonnull Boolean all) throws ApiException {
    return this.getPluginDocumentation(cls, all, Collections.emptyMap());
  }


  /**
   * Get plugin documentation
   * 
   * @param cls The plugin full class name (required)
   * @param all Include all the properties (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return DocumentationWithSchema
   * @throws ApiException if fails to make API call
   */
  public DocumentationWithSchema getPluginDocumentation(@javax.annotation.Nonnull String cls, @javax.annotation.Nonnull Boolean all, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'cls' is set
    if (cls == null) {
      throw new ApiException(400, "Missing the required parameter 'cls' when calling getPluginDocumentation");
    }
    
    // verify the required parameter 'all' is set
    if (all == null) {
      throw new ApiException(400, "Missing the required parameter 'all' when calling getPluginDocumentation");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/plugins/{cls}"
      .replaceAll("\\{" + "cls" + "\\}", apiClient.escapeString(apiClient.parameterToString(cls)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("all", all));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<DocumentationWithSchema> localVarReturnType = new TypeReference<DocumentationWithSchema>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get plugin documentation
   * 
   * @param cls The plugin type (required)
   * @param version The plugin version (required)
   * @param all Include all the properties (required)
   * @return DocumentationWithSchema
   * @throws ApiException if fails to make API call
   */
  public DocumentationWithSchema getPluginDocumentationFromVersion(@javax.annotation.Nonnull String cls, @javax.annotation.Nonnull String version, @javax.annotation.Nonnull Boolean all) throws ApiException {
    return this.getPluginDocumentationFromVersion(cls, version, all, Collections.emptyMap());
  }


  /**
   * Get plugin documentation
   * 
   * @param cls The plugin type (required)
   * @param version The plugin version (required)
   * @param all Include all the properties (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return DocumentationWithSchema
   * @throws ApiException if fails to make API call
   */
  public DocumentationWithSchema getPluginDocumentationFromVersion(@javax.annotation.Nonnull String cls, @javax.annotation.Nonnull String version, @javax.annotation.Nonnull Boolean all, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'cls' is set
    if (cls == null) {
      throw new ApiException(400, "Missing the required parameter 'cls' when calling getPluginDocumentationFromVersion");
    }
    
    // verify the required parameter 'version' is set
    if (version == null) {
      throw new ApiException(400, "Missing the required parameter 'version' when calling getPluginDocumentationFromVersion");
    }
    
    // verify the required parameter 'all' is set
    if (all == null) {
      throw new ApiException(400, "Missing the required parameter 'all' when calling getPluginDocumentationFromVersion");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/plugins/{cls}/versions/{version}"
      .replaceAll("\\{" + "cls" + "\\}", apiClient.escapeString(apiClient.parameterToString(cls)))
      .replaceAll("\\{" + "version" + "\\}", apiClient.escapeString(apiClient.parameterToString(version)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("all", all));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<DocumentationWithSchema> localVarReturnType = new TypeReference<DocumentationWithSchema>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get plugins icons
   * 
   * @return Map&lt;String, PluginIcon&gt;
   * @throws ApiException if fails to make API call
   */
  public Map<String, PluginIcon> getPluginGroupIcons() throws ApiException {
    return this.getPluginGroupIcons(Collections.emptyMap());
  }


  /**
   * Get plugins icons
   * 
   * @param additionalHeaders additionalHeaders for this call
   * @return Map&lt;String, PluginIcon&gt;
   * @throws ApiException if fails to make API call
   */
  public Map<String, PluginIcon> getPluginGroupIcons(Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/api/v1/plugins/icons/groups";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<Map<String, PluginIcon>> localVarReturnType = new TypeReference<Map<String, PluginIcon>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get plugins icons
   * 
   * @return Map&lt;String, PluginIcon&gt;
   * @throws ApiException if fails to make API call
   */
  public Map<String, PluginIcon> getPluginIcons() throws ApiException {
    return this.getPluginIcons(Collections.emptyMap());
  }


  /**
   * Get plugins icons
   * 
   * @param additionalHeaders additionalHeaders for this call
   * @return Map&lt;String, PluginIcon&gt;
   * @throws ApiException if fails to make API call
   */
  public Map<String, PluginIcon> getPluginIcons(Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/api/v1/plugins/icons";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<Map<String, PluginIcon>> localVarReturnType = new TypeReference<Map<String, PluginIcon>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get all versions for a plugin
   * 
   * @param cls The plugin type (required)
   * @return PluginControllerApiPluginVersions
   * @throws ApiException if fails to make API call
   */
  public PluginControllerApiPluginVersions getPluginVersions(@javax.annotation.Nonnull String cls) throws ApiException {
    return this.getPluginVersions(cls, Collections.emptyMap());
  }


  /**
   * Get all versions for a plugin
   * 
   * @param cls The plugin type (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return PluginControllerApiPluginVersions
   * @throws ApiException if fails to make API call
   */
  public PluginControllerApiPluginVersions getPluginVersions(@javax.annotation.Nonnull String cls, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'cls' is set
    if (cls == null) {
      throw new ApiException(400, "Missing the required parameter 'cls' when calling getPluginVersions");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/plugins/{cls}/versions"
      .replaceAll("\\{" + "cls" + "\\}", apiClient.escapeString(apiClient.parameterToString(cls)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<PluginControllerApiPluginVersions> localVarReturnType = new TypeReference<PluginControllerApiPluginVersions>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get the properties part of the JSON schema for a type
   * The schema will be a [JSON Schema Draft 7](http://json-schema.org/draft-07/schema)
   * @param type The schema needed (required)
   * @return Map&lt;String, Object&gt;
   * @throws ApiException if fails to make API call
   */
  public Map<String, Object> getPropertiesFromType(@javax.annotation.Nonnull SchemaType type) throws ApiException {
    return this.getPropertiesFromType(type, Collections.emptyMap());
  }


  /**
   * Get the properties part of the JSON schema for a type
   * The schema will be a [JSON Schema Draft 7](http://json-schema.org/draft-07/schema)
   * @param type The schema needed (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Map&lt;String, Object&gt;
   * @throws ApiException if fails to make API call
   */
  public Map<String, Object> getPropertiesFromType(@javax.annotation.Nonnull SchemaType type, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'type' is set
    if (type == null) {
      throw new ApiException(400, "Missing the required parameter 'type' when calling getPropertiesFromType");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/plugins/properties/{type}"
      .replaceAll("\\{" + "type" + "\\}", apiClient.escapeString(apiClient.parameterToString(type)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<Map<String, Object>> localVarReturnType = new TypeReference<Map<String, Object>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get the JSON schema for an input type
   * The schema will be a [JSON Schema Draft 7](http://json-schema.org/draft-07/schema)
   * @param type The schema needed (required)
   * @return DocumentationWithSchema
   * @throws ApiException if fails to make API call
   */
  public DocumentationWithSchema getSchemaFromInputType(@javax.annotation.Nonnull Type type) throws ApiException {
    return this.getSchemaFromInputType(type, Collections.emptyMap());
  }


  /**
   * Get the JSON schema for an input type
   * The schema will be a [JSON Schema Draft 7](http://json-schema.org/draft-07/schema)
   * @param type The schema needed (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return DocumentationWithSchema
   * @throws ApiException if fails to make API call
   */
  public DocumentationWithSchema getSchemaFromInputType(@javax.annotation.Nonnull Type type, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'type' is set
    if (type == null) {
      throw new ApiException(400, "Missing the required parameter 'type' when calling getSchemaFromInputType");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/plugins/inputs/{type}"
      .replaceAll("\\{" + "type" + "\\}", apiClient.escapeString(apiClient.parameterToString(type)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<DocumentationWithSchema> localVarReturnType = new TypeReference<DocumentationWithSchema>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get the JSON schema for a type
   * The schema will be a [JSON Schema Draft 7](http://json-schema.org/draft-07/schema)
   * @param type The schema needed (required)
   * @param arrayOf If schema should be an array of requested type (required)
   * @return Map&lt;String, Object&gt;
   * @throws ApiException if fails to make API call
   */
  public Map<String, Object> getSchemasFromType(@javax.annotation.Nonnull SchemaType type, @javax.annotation.Nonnull Boolean arrayOf) throws ApiException {
    return this.getSchemasFromType(type, arrayOf, Collections.emptyMap());
  }


  /**
   * Get the JSON schema for a type
   * The schema will be a [JSON Schema Draft 7](http://json-schema.org/draft-07/schema)
   * @param type The schema needed (required)
   * @param arrayOf If schema should be an array of requested type (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Map&lt;String, Object&gt;
   * @throws ApiException if fails to make API call
   */
  public Map<String, Object> getSchemasFromType(@javax.annotation.Nonnull SchemaType type, @javax.annotation.Nonnull Boolean arrayOf, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'type' is set
    if (type == null) {
      throw new ApiException(400, "Missing the required parameter 'type' when calling getSchemasFromType");
    }
    
    // verify the required parameter 'arrayOf' is set
    if (arrayOf == null) {
      throw new ApiException(400, "Missing the required parameter 'arrayOf' when calling getSchemasFromType");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/plugins/schemas/{type}"
      .replaceAll("\\{" + "type" + "\\}", apiClient.escapeString(apiClient.parameterToString(type)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("arrayOf", arrayOf));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<Map<String, Object>> localVarReturnType = new TypeReference<Map<String, Object>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Retrieve details of a plugin artifact
   * Superadmin-only. Retrieves metadata and available versions for a given plugin artifact. Requires INFRASTRUCTURE permission.
   * @param groupId  (required)
   * @param artifactId  (required)
   * @return InstanceControllerApiPluginVersions
   * @throws ApiException if fails to make API call
   */
  public InstanceControllerApiPluginVersions getVersionedPluginDetails(@javax.annotation.Nonnull String groupId, @javax.annotation.Nonnull String artifactId) throws ApiException {
    return this.getVersionedPluginDetails(groupId, artifactId, Collections.emptyMap());
  }


  /**
   * Retrieve details of a plugin artifact
   * Superadmin-only. Retrieves metadata and available versions for a given plugin artifact. Requires INFRASTRUCTURE permission.
   * @param groupId  (required)
   * @param artifactId  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return InstanceControllerApiPluginVersions
   * @throws ApiException if fails to make API call
   */
  public InstanceControllerApiPluginVersions getVersionedPluginDetails(@javax.annotation.Nonnull String groupId, @javax.annotation.Nonnull String artifactId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'groupId' is set
    if (groupId == null) {
      throw new ApiException(400, "Missing the required parameter 'groupId' when calling getVersionedPluginDetails");
    }
    
    // verify the required parameter 'artifactId' is set
    if (artifactId == null) {
      throw new ApiException(400, "Missing the required parameter 'artifactId' when calling getVersionedPluginDetails");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/instance/versioned-plugins/{groupId}/{artifactId}"
      .replaceAll("\\{" + "groupId" + "\\}", apiClient.escapeString(apiClient.parameterToString(groupId)))
      .replaceAll("\\{" + "artifactId" + "\\}", apiClient.escapeString(apiClient.parameterToString(artifactId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<InstanceControllerApiPluginVersions> localVarReturnType = new TypeReference<InstanceControllerApiPluginVersions>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Retrieve details of a specific plugin artifact version
   * Superadmin-only. Retrieves metadata for a specific version of a plugin artifact. Requires INFRASTRUCTURE permission.
   * @param groupId  (required)
   * @param artifactId  (required)
   * @param version  (required)
   * @return InstanceControllerApiPluginVersionDetails
   * @throws ApiException if fails to make API call
   */
  public InstanceControllerApiPluginVersionDetails getVersionedPluginDetailsFromVersion(@javax.annotation.Nonnull String groupId, @javax.annotation.Nonnull String artifactId, @javax.annotation.Nonnull String version) throws ApiException {
    return this.getVersionedPluginDetailsFromVersion(groupId, artifactId, version, Collections.emptyMap());
  }


  /**
   * Retrieve details of a specific plugin artifact version
   * Superadmin-only. Retrieves metadata for a specific version of a plugin artifact. Requires INFRASTRUCTURE permission.
   * @param groupId  (required)
   * @param artifactId  (required)
   * @param version  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return InstanceControllerApiPluginVersionDetails
   * @throws ApiException if fails to make API call
   */
  public InstanceControllerApiPluginVersionDetails getVersionedPluginDetailsFromVersion(@javax.annotation.Nonnull String groupId, @javax.annotation.Nonnull String artifactId, @javax.annotation.Nonnull String version, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'groupId' is set
    if (groupId == null) {
      throw new ApiException(400, "Missing the required parameter 'groupId' when calling getVersionedPluginDetailsFromVersion");
    }
    
    // verify the required parameter 'artifactId' is set
    if (artifactId == null) {
      throw new ApiException(400, "Missing the required parameter 'artifactId' when calling getVersionedPluginDetailsFromVersion");
    }
    
    // verify the required parameter 'version' is set
    if (version == null) {
      throw new ApiException(400, "Missing the required parameter 'version' when calling getVersionedPluginDetailsFromVersion");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/instance/versioned-plugins/{groupId}/{artifactId}/{version}"
      .replaceAll("\\{" + "groupId" + "\\}", apiClient.escapeString(apiClient.parameterToString(groupId)))
      .replaceAll("\\{" + "artifactId" + "\\}", apiClient.escapeString(apiClient.parameterToString(artifactId)))
      .replaceAll("\\{" + "version" + "\\}", apiClient.escapeString(apiClient.parameterToString(version)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<InstanceControllerApiPluginVersionDetails> localVarReturnType = new TypeReference<InstanceControllerApiPluginVersionDetails>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Install specified plugin artifacts
   * Superadmin-only. Installs one or more plugin artifacts. Requires INFRASTRUCTURE permission.
   * @param instanceControllerApiPluginListRequest List of plugins (required)
   * @return InstanceControllerApiPluginArtifactListPluginArtifact
   * @throws ApiException if fails to make API call
   */
  public InstanceControllerApiPluginArtifactListPluginArtifact installVersionedPlugins(@javax.annotation.Nonnull InstanceControllerApiPluginListRequest instanceControllerApiPluginListRequest) throws ApiException {
    return this.installVersionedPlugins(instanceControllerApiPluginListRequest, Collections.emptyMap());
  }


  /**
   * Install specified plugin artifacts
   * Superadmin-only. Installs one or more plugin artifacts. Requires INFRASTRUCTURE permission.
   * @param instanceControllerApiPluginListRequest List of plugins (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return InstanceControllerApiPluginArtifactListPluginArtifact
   * @throws ApiException if fails to make API call
   */
  public InstanceControllerApiPluginArtifactListPluginArtifact installVersionedPlugins(@javax.annotation.Nonnull InstanceControllerApiPluginListRequest instanceControllerApiPluginListRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = instanceControllerApiPluginListRequest;
    
    // verify the required parameter 'instanceControllerApiPluginListRequest' is set
    if (instanceControllerApiPluginListRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'instanceControllerApiPluginListRequest' when calling installVersionedPlugins");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/instance/versioned-plugins/install";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<InstanceControllerApiPluginArtifactListPluginArtifact> localVarReturnType = new TypeReference<InstanceControllerApiPluginArtifactListPluginArtifact>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * List available plugin artifacts
   * Superadmin-only. Lists all plugin artifacts available for installation. Requires INFRASTRUCTURE permission.
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object listAvailableVersionedPlugins() throws ApiException {
    return this.listAvailableVersionedPlugins(Collections.emptyMap());
  }


  /**
   * List available plugin artifacts
   * Superadmin-only. Lists all plugin artifacts available for installation. Requires INFRASTRUCTURE permission.
   * @param additionalHeaders additionalHeaders for this call
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object listAvailableVersionedPlugins(Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/api/v1/instance/versioned-plugins/available";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * List available plugin artifacts for Kestra Secret Manager
   * Superadmin-only. Lists all secret managers available for installation. Requires INFRASTRUCTURE permission.
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object listAvailableVersionedPluginsForSecretManager() throws ApiException {
    return this.listAvailableVersionedPluginsForSecretManager(Collections.emptyMap());
  }


  /**
   * List available plugin artifacts for Kestra Secret Manager
   * Superadmin-only. Lists all secret managers available for installation. Requires INFRASTRUCTURE permission.
   * @param additionalHeaders additionalHeaders for this call
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object listAvailableVersionedPluginsForSecretManager(Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/api/v1/instance/versioned-plugins/available/secrets-managers";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * List available plugin artifacts for Kestra Internal Storage
   * Superadmin-only. Lists all internal storages available for installation. Requires INFRASTRUCTURE permission.
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object listAvailableVersionedPluginsForStorage() throws ApiException {
    return this.listAvailableVersionedPluginsForStorage(Collections.emptyMap());
  }


  /**
   * List available plugin artifacts for Kestra Internal Storage
   * Superadmin-only. Lists all internal storages available for installation. Requires INFRASTRUCTURE permission.
   * @param additionalHeaders additionalHeaders for this call
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object listAvailableVersionedPluginsForStorage(Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/api/v1/instance/versioned-plugins/available/storages";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get list of plugins
   * 
   * @return List&lt;Plugin&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Plugin> listPlugins() throws ApiException {
    return this.listPlugins(Collections.emptyMap());
  }


  /**
   * Get list of plugins
   * 
   * @param additionalHeaders additionalHeaders for this call
   * @return List&lt;Plugin&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Plugin> listPlugins(Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/api/v1/plugins";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<List<Plugin>> localVarReturnType = new TypeReference<List<Plugin>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * List installed plugin artifacts
   * Superadmin-only. Lists all currently installed plugin artifacts. Requires INFRASTRUCTURE permission.
   * @param page The current page (required)
   * @param size The current page size (required)
   * @param sort The sort of current page (optional)
   * @param q The query (optional)
   * @return PagedResultsInstanceControllerApiPluginArtifact
   * @throws ApiException if fails to make API call
   */
  public PagedResultsInstanceControllerApiPluginArtifact listVersionedPlugin(@javax.annotation.Nonnull Integer page, @javax.annotation.Nonnull Integer size, @javax.annotation.Nullable List<String> sort, @javax.annotation.Nullable String q) throws ApiException {
    return this.listVersionedPlugin(page, size, sort, q, Collections.emptyMap());
  }


  /**
   * List installed plugin artifacts
   * Superadmin-only. Lists all currently installed plugin artifacts. Requires INFRASTRUCTURE permission.
   * @param page The current page (required)
   * @param size The current page size (required)
   * @param sort The sort of current page (optional)
   * @param q The query (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return PagedResultsInstanceControllerApiPluginArtifact
   * @throws ApiException if fails to make API call
   */
  public PagedResultsInstanceControllerApiPluginArtifact listVersionedPlugin(@javax.annotation.Nonnull Integer page, @javax.annotation.Nonnull Integer size, @javax.annotation.Nullable List<String> sort, @javax.annotation.Nullable String q, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'page' is set
    if (page == null) {
      throw new ApiException(400, "Missing the required parameter 'page' when calling listVersionedPlugin");
    }
    
    // verify the required parameter 'size' is set
    if (size == null) {
      throw new ApiException(400, "Missing the required parameter 'size' when calling listVersionedPlugin");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/instance/versioned-plugins";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
    localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "sort", sort));
    localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<PagedResultsInstanceControllerApiPluginArtifact> localVarReturnType = new TypeReference<PagedResultsInstanceControllerApiPluginArtifact>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Resolve versions for specified plugin artifacts
   * Superadmin-only. Resolves compatible versions for a list of plugin artifacts. Requires INFRASTRUCTURE permission.
   * @param instanceControllerApiPluginListRequest List of plugins (required)
   * @return InstanceControllerApiPluginArtifactListPluginResolutionResult
   * @throws ApiException if fails to make API call
   */
  public InstanceControllerApiPluginArtifactListPluginResolutionResult resolveVersionedPlugins(@javax.annotation.Nonnull InstanceControllerApiPluginListRequest instanceControllerApiPluginListRequest) throws ApiException {
    return this.resolveVersionedPlugins(instanceControllerApiPluginListRequest, Collections.emptyMap());
  }


  /**
   * Resolve versions for specified plugin artifacts
   * Superadmin-only. Resolves compatible versions for a list of plugin artifacts. Requires INFRASTRUCTURE permission.
   * @param instanceControllerApiPluginListRequest List of plugins (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return InstanceControllerApiPluginArtifactListPluginResolutionResult
   * @throws ApiException if fails to make API call
   */
  public InstanceControllerApiPluginArtifactListPluginResolutionResult resolveVersionedPlugins(@javax.annotation.Nonnull InstanceControllerApiPluginListRequest instanceControllerApiPluginListRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = instanceControllerApiPluginListRequest;
    
    // verify the required parameter 'instanceControllerApiPluginListRequest' is set
    if (instanceControllerApiPluginListRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'instanceControllerApiPluginListRequest' when calling resolveVersionedPlugins");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/instance/versioned-plugins/resolve";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<InstanceControllerApiPluginArtifactListPluginResolutionResult> localVarReturnType = new TypeReference<InstanceControllerApiPluginArtifactListPluginResolutionResult>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Uninstall plugin artifacts
   * Superadmin-only. Uninstalls one or more plugin artifacts. Requires INFRASTRUCTURE permission.
   * @param instanceControllerApiPluginListRequest List of plugins (required)
   * @return InstanceControllerApiPluginArtifactListPluginArtifact
   * @throws ApiException if fails to make API call
   */
  public InstanceControllerApiPluginArtifactListPluginArtifact uninstallVersionedPlugins(@javax.annotation.Nonnull InstanceControllerApiPluginListRequest instanceControllerApiPluginListRequest) throws ApiException {
    return this.uninstallVersionedPlugins(instanceControllerApiPluginListRequest, Collections.emptyMap());
  }


  /**
   * Uninstall plugin artifacts
   * Superadmin-only. Uninstalls one or more plugin artifacts. Requires INFRASTRUCTURE permission.
   * @param instanceControllerApiPluginListRequest List of plugins (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return InstanceControllerApiPluginArtifactListPluginArtifact
   * @throws ApiException if fails to make API call
   */
  public InstanceControllerApiPluginArtifactListPluginArtifact uninstallVersionedPlugins(@javax.annotation.Nonnull InstanceControllerApiPluginListRequest instanceControllerApiPluginListRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = instanceControllerApiPluginListRequest;
    
    // verify the required parameter 'instanceControllerApiPluginListRequest' is set
    if (instanceControllerApiPluginListRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'instanceControllerApiPluginListRequest' when calling uninstallVersionedPlugins");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/instance/versioned-plugins/uninstall";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<InstanceControllerApiPluginArtifactListPluginArtifact> localVarReturnType = new TypeReference<InstanceControllerApiPluginArtifactListPluginArtifact>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Upload a plugin artifact JAR file
   * Superadmin-only. Uploads a plugin JAR file for installation. Requires INFRASTRUCTURE permission.
   * @param _file  (required)
   * @param forceInstallOnExistingVersions  (optional)
   * @return PluginArtifact
   * @throws ApiException if fails to make API call
   */
  public PluginArtifact uploadVersionedPlugins(@javax.annotation.Nonnull File _file, @javax.annotation.Nullable Boolean forceInstallOnExistingVersions) throws ApiException {
    return this.uploadVersionedPlugins(_file, forceInstallOnExistingVersions, Collections.emptyMap());
  }


  /**
   * Upload a plugin artifact JAR file
   * Superadmin-only. Uploads a plugin JAR file for installation. Requires INFRASTRUCTURE permission.
   * @param _file  (required)
   * @param forceInstallOnExistingVersions  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return PluginArtifact
   * @throws ApiException if fails to make API call
   */
  public PluginArtifact uploadVersionedPlugins(@javax.annotation.Nonnull File _file, @javax.annotation.Nullable Boolean forceInstallOnExistingVersions, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter '_file' is set
    if (_file == null) {
      throw new ApiException(400, "Missing the required parameter '_file' when calling uploadVersionedPlugins");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/instance/versioned-plugins/upload";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    if (_file != null)
      localVarFormParams.put("file", _file);
if (forceInstallOnExistingVersions != null)
      localVarFormParams.put("forceInstallOnExistingVersions", forceInstallOnExistingVersions);

    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "multipart/form-data"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<PluginArtifact> localVarReturnType = new TypeReference<PluginArtifact>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  @Override
  public <T> T invokeAPI(String url, String method, Object request, TypeReference<T> returnType, Map<String, String> additionalHeaders) throws ApiException {
    String localVarPath = url.replace(apiClient.getBaseURL(), "");
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarHeaderParams.putAll(additionalHeaders);

    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "multipart/form-data"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    return apiClient.invokeAPI(
      localVarPath,
        method,
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        request,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        returnType
    );
  }
}
