/*
 * Kestra EE
 * All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package io.kestra.sdk.api;

import com.fasterxml.jackson.core.type.TypeReference;

import io.kestra.sdk.internal.ApiException;
import io.kestra.sdk.internal.ApiClient;
import io.kestra.sdk.internal.BaseApi;
import io.kestra.sdk.internal.Configuration;
import io.kestra.sdk.internal.Pair;

import io.kestra.sdk.model.Invitation;
import io.kestra.sdk.model.InvitationInvitationStatus;
import io.kestra.sdk.model.PagedResultsInvitation;


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-05T07:35:23.657005690Z[Etc/UTC]", comments = "Generator version: 7.14.0-SNAPSHOT")
public class InvitationsApi extends BaseApi {

  public InvitationsApi() {
    super(Configuration.getDefaultApiClient());
  }

  public InvitationsApi(ApiClient apiClient) {
    super(apiClient);
  }

  /**
   * Create an invitation
   *
   * @param tenant  (required)
   * @param invitation Create a new invitation, send an email if the server-mail is enabled (required)
   * @return Invitation
   * @throws ApiException if fails to make API call
   */
  public Invitation createInvitation(@javax.annotation.Nonnull String tenant, @javax.annotation.Nonnull Invitation invitation) throws ApiException {
    return this.createInvitation(tenant, invitation, Collections.emptyMap());
  }


  /**
   * Create an invitation
   *
   * @param tenant  (required)
   * @param invitation Create a new invitation, send an email if the server-mail is enabled (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Invitation
   * @throws ApiException if fails to make API call
   */
  public Invitation createInvitation(@javax.annotation.Nonnull String tenant, @javax.annotation.Nonnull Invitation invitation, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = invitation;

    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling createInvitation");
    }

    // verify the required parameter 'invitation' is set
    if (invitation == null) {
      throw new ApiException(400, "Missing the required parameter 'invitation' when calling createInvitation");
    }

    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/invitations"
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    localVarHeaderParams.putAll(additionalHeaders);



    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<Invitation> localVarReturnType = new TypeReference<Invitation>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Create an invitation
   *
   * @param resourceTenant  (required)
   * @param invitation Create a new invitation, send an email if the server-mail is enabled (required)
   * @return Invitation
   * @throws ApiException if fails to make API call
   */
  public Invitation createInvitationWithResourceTenantasSuperAdmin(@javax.annotation.Nonnull String resourceTenant, @javax.annotation.Nonnull Invitation invitation) throws ApiException {
    return this.createInvitationWithResourceTenantasSuperAdmin(resourceTenant, invitation, Collections.emptyMap());
  }


  /**
   * Create an invitation
   *
   * @param resourceTenant  (required)
   * @param invitation Create a new invitation, send an email if the server-mail is enabled (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Invitation
   * @throws ApiException if fails to make API call
   */
  public Invitation createInvitationWithResourceTenantasSuperAdmin(@javax.annotation.Nonnull String resourceTenant, @javax.annotation.Nonnull Invitation invitation, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = invitation;

    // verify the required parameter 'resourceTenant' is set
    if (resourceTenant == null) {
      throw new ApiException(400, "Missing the required parameter 'resourceTenant' when calling createInvitationWithResourceTenantasSuperAdmin");
    }

    // verify the required parameter 'invitation' is set
    if (invitation == null) {
      throw new ApiException(400, "Missing the required parameter 'invitation' when calling createInvitationWithResourceTenantasSuperAdmin");
    }

    // create path and map variables
    String localVarPath = "/api/v1/tenants/{resourceTenant}/invitations"
      .replaceAll("\\{" + "resourceTenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(resourceTenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    localVarHeaderParams.putAll(additionalHeaders);



    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<Invitation> localVarReturnType = new TypeReference<Invitation>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Create an invitation
   *
   * @param invitation Create a new invitation, send an email if the server-mail is enabled (required)
   * @return Invitation
   * @throws ApiException if fails to make API call
   */
  public Invitation createInvitationasSuperAdmin(@javax.annotation.Nonnull Invitation invitation) throws ApiException {
    return this.createInvitationasSuperAdmin(invitation, Collections.emptyMap());
  }


  /**
   * Create an invitation
   *
   * @param invitation Create a new invitation, send an email if the server-mail is enabled (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Invitation
   * @throws ApiException if fails to make API call
   */
  public Invitation createInvitationasSuperAdmin(@javax.annotation.Nonnull Invitation invitation, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = invitation;

    // verify the required parameter 'invitation' is set
    if (invitation == null) {
      throw new ApiException(400, "Missing the required parameter 'invitation' when calling createInvitationasSuperAdmin");
    }

    // create path and map variables
    String localVarPath = "/api/v1/tenants/invitations";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    localVarHeaderParams.putAll(additionalHeaders);



    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<Invitation> localVarReturnType = new TypeReference<Invitation>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Delete an invitation
   *
   * @param id The id of the invitation (required)
   * @param tenant  (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteInvitation(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String tenant) throws ApiException {
    this.deleteInvitation(id, tenant, Collections.emptyMap());
  }


  /**
   * Delete an invitation
   *
   * @param id The id of the invitation (required)
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void deleteInvitation(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;

    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteInvitation");
    }

    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling deleteInvitation");
    }

    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/invitations/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    localVarHeaderParams.putAll(additionalHeaders);



    final String[] localVarAccepts = {

    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Delete an invitation
   *
   * @param id The id of the invitation (required)
   * @param resourceTenant  (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteInvitationWithResourceTenantasSuperAdmin(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String resourceTenant) throws ApiException {
    this.deleteInvitationWithResourceTenantasSuperAdmin(id, resourceTenant, Collections.emptyMap());
  }


  /**
   * Delete an invitation
   *
   * @param id The id of the invitation (required)
   * @param resourceTenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void deleteInvitationWithResourceTenantasSuperAdmin(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String resourceTenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;

    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteInvitationWithResourceTenantasSuperAdmin");
    }

    // verify the required parameter 'resourceTenant' is set
    if (resourceTenant == null) {
      throw new ApiException(400, "Missing the required parameter 'resourceTenant' when calling deleteInvitationWithResourceTenantasSuperAdmin");
    }

    // create path and map variables
    String localVarPath = "/api/v1/tenants/{resourceTenant}/invitations/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "resourceTenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(resourceTenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    localVarHeaderParams.putAll(additionalHeaders);



    final String[] localVarAccepts = {

    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Delete an invitation
   *
   * @param id The id of the invitation (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteInvitationasSuperAdmin(@javax.annotation.Nonnull String id) throws ApiException {
    this.deleteInvitationasSuperAdmin(id, Collections.emptyMap());
  }


  /**
   * Delete an invitation
   *
   * @param id The id of the invitation (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void deleteInvitationasSuperAdmin(@javax.annotation.Nonnull String id, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;

    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteInvitationasSuperAdmin");
    }

    // create path and map variables
    String localVarPath = "/api/v1/tenants/invitations/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    localVarHeaderParams.putAll(additionalHeaders);



    final String[] localVarAccepts = {

    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Get all invitations for a given email
   *
   * @param tenant  (required)
   * @return List&lt;Invitation&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Invitation> findAllInvitationsForCurrentUser(@javax.annotation.Nonnull String tenant) throws ApiException {
    return this.findAllInvitationsForCurrentUser(tenant, Collections.emptyMap());
  }


  /**
   * Get all invitations for a given email
   *
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return List&lt;Invitation&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Invitation> findAllInvitationsForCurrentUser(@javax.annotation.Nonnull String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;

    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling findAllInvitationsForCurrentUser");
    }

    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/me/invitations"
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    localVarHeaderParams.putAll(additionalHeaders);



    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<List<Invitation>> localVarReturnType = new TypeReference<List<Invitation>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get an invitation
   *
   * @param id The id of the invitation (required)
   * @param tenant  (required)
   * @return Invitation
   * @throws ApiException if fails to make API call
   */
  public Invitation getInvitation(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String tenant) throws ApiException {
    return this.getInvitation(id, tenant, Collections.emptyMap());
  }


  /**
   * Get an invitation
   *
   * @param id The id of the invitation (required)
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Invitation
   * @throws ApiException if fails to make API call
   */
  public Invitation getInvitation(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;

    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getInvitation");
    }

    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling getInvitation");
    }

    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/invitations/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    localVarHeaderParams.putAll(additionalHeaders);



    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<Invitation> localVarReturnType = new TypeReference<Invitation>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get an invitation
   *
   * @param id The id of the invitation (required)
   * @param resourceTenant  (required)
   * @return Invitation
   * @throws ApiException if fails to make API call
   */
  public Invitation getInvitationWithResourceTenantasSuperAdmin(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String resourceTenant) throws ApiException {
    return this.getInvitationWithResourceTenantasSuperAdmin(id, resourceTenant, Collections.emptyMap());
  }


  /**
   * Get an invitation
   *
   * @param id The id of the invitation (required)
   * @param resourceTenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Invitation
   * @throws ApiException if fails to make API call
   */
  public Invitation getInvitationWithResourceTenantasSuperAdmin(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String resourceTenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;

    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getInvitationWithResourceTenantasSuperAdmin");
    }

    // verify the required parameter 'resourceTenant' is set
    if (resourceTenant == null) {
      throw new ApiException(400, "Missing the required parameter 'resourceTenant' when calling getInvitationWithResourceTenantasSuperAdmin");
    }

    // create path and map variables
    String localVarPath = "/api/v1/tenants/{resourceTenant}/invitations/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "resourceTenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(resourceTenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    localVarHeaderParams.putAll(additionalHeaders);



    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<Invitation> localVarReturnType = new TypeReference<Invitation>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get an invitation
   *
   * @param id The id of the invitation (required)
   * @return Invitation
   * @throws ApiException if fails to make API call
   */
  public Invitation getInvitationasSuperAdmin(@javax.annotation.Nonnull String id) throws ApiException {
    return this.getInvitationasSuperAdmin(id, Collections.emptyMap());
  }


  /**
   * Get an invitation
   *
   * @param id The id of the invitation (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Invitation
   * @throws ApiException if fails to make API call
   */
  public Invitation getInvitationasSuperAdmin(@javax.annotation.Nonnull String id, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;

    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getInvitationasSuperAdmin");
    }

    // create path and map variables
    String localVarPath = "/api/v1/tenants/invitations/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    localVarHeaderParams.putAll(additionalHeaders);



    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<Invitation> localVarReturnType = new TypeReference<Invitation>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get all invitations for a given email
   *
   * @param email The email address of the invited (required)
   * @param tenant  (required)
   * @return List&lt;Invitation&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Invitation> listByEmail(@javax.annotation.Nonnull String email, @javax.annotation.Nonnull String tenant) throws ApiException {
    return this.listByEmail(email, tenant, Collections.emptyMap());
  }


  /**
   * Get all invitations for a given email
   *
   * @param email The email address of the invited (required)
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return List&lt;Invitation&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Invitation> listByEmail(@javax.annotation.Nonnull String email, @javax.annotation.Nonnull String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;

    // verify the required parameter 'email' is set
    if (email == null) {
      throw new ApiException(400, "Missing the required parameter 'email' when calling listByEmail");
    }

    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling listByEmail");
    }

    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/invitations/email/{email}"
      .replaceAll("\\{" + "email" + "\\}", apiClient.escapeString(apiClient.parameterToString(email)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    localVarHeaderParams.putAll(additionalHeaders);



    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<List<Invitation>> localVarReturnType = new TypeReference<List<Invitation>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get all invitations for a given email
   *
   * @param email The email address of the invited (required)
   * @param resourceTenant  (required)
   * @return List&lt;Invitation&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Invitation> listByEmailWithResourceTenantasSuperAdmin(@javax.annotation.Nonnull String email, @javax.annotation.Nonnull String resourceTenant) throws ApiException {
    return this.listByEmailWithResourceTenantasSuperAdmin(email, resourceTenant, Collections.emptyMap());
  }


  /**
   * Get all invitations for a given email
   *
   * @param email The email address of the invited (required)
   * @param resourceTenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return List&lt;Invitation&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Invitation> listByEmailWithResourceTenantasSuperAdmin(@javax.annotation.Nonnull String email, @javax.annotation.Nonnull String resourceTenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;

    // verify the required parameter 'email' is set
    if (email == null) {
      throw new ApiException(400, "Missing the required parameter 'email' when calling listByEmailWithResourceTenantasSuperAdmin");
    }

    // verify the required parameter 'resourceTenant' is set
    if (resourceTenant == null) {
      throw new ApiException(400, "Missing the required parameter 'resourceTenant' when calling listByEmailWithResourceTenantasSuperAdmin");
    }

    // create path and map variables
    String localVarPath = "/api/v1/tenants/{resourceTenant}/invitations/email/{email}"
      .replaceAll("\\{" + "email" + "\\}", apiClient.escapeString(apiClient.parameterToString(email)))
      .replaceAll("\\{" + "resourceTenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(resourceTenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    localVarHeaderParams.putAll(additionalHeaders);



    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<List<Invitation>> localVarReturnType = new TypeReference<List<Invitation>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get all invitations for a given email
   *
   * @param email The email address of the invited (required)
   * @return List&lt;Invitation&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Invitation> listByEmailasSuperAdmin(@javax.annotation.Nonnull String email) throws ApiException {
    return this.listByEmailasSuperAdmin(email, Collections.emptyMap());
  }


  /**
   * Get all invitations for a given email
   *
   * @param email The email address of the invited (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return List&lt;Invitation&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Invitation> listByEmailasSuperAdmin(@javax.annotation.Nonnull String email, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;

    // verify the required parameter 'email' is set
    if (email == null) {
      throw new ApiException(400, "Missing the required parameter 'email' when calling listByEmailasSuperAdmin");
    }

    // create path and map variables
    String localVarPath = "/api/v1/tenants/invitations/email/{email}"
      .replaceAll("\\{" + "email" + "\\}", apiClient.escapeString(apiClient.parameterToString(email)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    localVarHeaderParams.putAll(additionalHeaders);



    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<List<Invitation>> localVarReturnType = new TypeReference<List<Invitation>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Search for invitations
   *
   * @param page The current page (required)
   * @param size The current page size (required)
   * @param tenant  (required)
   * @param email The email address of the invited (optional)
   * @param status The current status of the invitations (optional)
   * @param sort The sort of current page (optional)
   * @return PagedResultsInvitation
   * @throws ApiException if fails to make API call
   */
  public PagedResultsInvitation searchInvitations(@javax.annotation.Nonnull Integer page, @javax.annotation.Nonnull Integer size, @javax.annotation.Nonnull String tenant, @javax.annotation.Nullable String email, @javax.annotation.Nullable InvitationInvitationStatus status, @javax.annotation.Nullable List<String> sort) throws ApiException {
    return this.searchInvitations(page, size, tenant, email, status, sort, Collections.emptyMap());
  }


  /**
   * Search for invitations
   *
   * @param page The current page (required)
   * @param size The current page size (required)
   * @param tenant  (required)
   * @param email The email address of the invited (optional)
   * @param status The current status of the invitations (optional)
   * @param sort The sort of current page (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return PagedResultsInvitation
   * @throws ApiException if fails to make API call
   */
  public PagedResultsInvitation searchInvitations(@javax.annotation.Nonnull Integer page, @javax.annotation.Nonnull Integer size, @javax.annotation.Nonnull String tenant, @javax.annotation.Nullable String email, @javax.annotation.Nullable InvitationInvitationStatus status, @javax.annotation.Nullable List<String> sort, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;

    // verify the required parameter 'page' is set
    if (page == null) {
      throw new ApiException(400, "Missing the required parameter 'page' when calling searchInvitations");
    }

    // verify the required parameter 'size' is set
    if (size == null) {
      throw new ApiException(400, "Missing the required parameter 'size' when calling searchInvitations");
    }

    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling searchInvitations");
    }

    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/invitations/search"
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("email", email));
    localVarQueryParams.addAll(apiClient.parameterToPair("status", status));
    localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
    localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sort", sort));

    localVarHeaderParams.putAll(additionalHeaders);



    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<PagedResultsInvitation> localVarReturnType = new TypeReference<PagedResultsInvitation>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Search for invitations
   *
   * @param page The current page (required)
   * @param size The current page size (required)
   * @param resourceTenant  (required)
   * @param email The email address of the invited (optional)
   * @param status The current status of the invitations (optional)
   * @param sort The sort of current page (optional)
   * @return PagedResultsInvitation
   * @throws ApiException if fails to make API call
   */
  public PagedResultsInvitation searchInvitationsWithResourceTenantasSuperAdmin(@javax.annotation.Nonnull Integer page, @javax.annotation.Nonnull Integer size, @javax.annotation.Nonnull String resourceTenant, @javax.annotation.Nullable String email, @javax.annotation.Nullable InvitationInvitationStatus status, @javax.annotation.Nullable List<String> sort) throws ApiException {
    return this.searchInvitationsWithResourceTenantasSuperAdmin(page, size, resourceTenant, email, status, sort, Collections.emptyMap());
  }


  /**
   * Search for invitations
   *
   * @param page The current page (required)
   * @param size The current page size (required)
   * @param resourceTenant  (required)
   * @param email The email address of the invited (optional)
   * @param status The current status of the invitations (optional)
   * @param sort The sort of current page (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return PagedResultsInvitation
   * @throws ApiException if fails to make API call
   */
  public PagedResultsInvitation searchInvitationsWithResourceTenantasSuperAdmin(@javax.annotation.Nonnull Integer page, @javax.annotation.Nonnull Integer size, @javax.annotation.Nonnull String resourceTenant, @javax.annotation.Nullable String email, @javax.annotation.Nullable InvitationInvitationStatus status, @javax.annotation.Nullable List<String> sort, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;

    // verify the required parameter 'page' is set
    if (page == null) {
      throw new ApiException(400, "Missing the required parameter 'page' when calling searchInvitationsWithResourceTenantasSuperAdmin");
    }

    // verify the required parameter 'size' is set
    if (size == null) {
      throw new ApiException(400, "Missing the required parameter 'size' when calling searchInvitationsWithResourceTenantasSuperAdmin");
    }

    // verify the required parameter 'resourceTenant' is set
    if (resourceTenant == null) {
      throw new ApiException(400, "Missing the required parameter 'resourceTenant' when calling searchInvitationsWithResourceTenantasSuperAdmin");
    }

    // create path and map variables
    String localVarPath = "/api/v1/tenants/{resourceTenant}/invitations/search"
      .replaceAll("\\{" + "resourceTenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(resourceTenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("email", email));
    localVarQueryParams.addAll(apiClient.parameterToPair("status", status));
    localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
    localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sort", sort));

    localVarHeaderParams.putAll(additionalHeaders);



    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<PagedResultsInvitation> localVarReturnType = new TypeReference<PagedResultsInvitation>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Search for invitations
   *
   * @param page The current page (required)
   * @param size The current page size (required)
   * @param email The email address of the invited (optional)
   * @param status The current status of the invitations (optional)
   * @param sort The sort of current page (optional)
   * @return PagedResultsInvitation
   * @throws ApiException if fails to make API call
   */
  public PagedResultsInvitation searchInvitationsasSuperAdmin(@javax.annotation.Nonnull Integer page, @javax.annotation.Nonnull Integer size, @javax.annotation.Nullable String email, @javax.annotation.Nullable InvitationInvitationStatus status, @javax.annotation.Nullable List<String> sort) throws ApiException {
    return this.searchInvitationsasSuperAdmin(page, size, email, status, sort, Collections.emptyMap());
  }


  /**
   * Search for invitations
   *
   * @param page The current page (required)
   * @param size The current page size (required)
   * @param email The email address of the invited (optional)
   * @param status The current status of the invitations (optional)
   * @param sort The sort of current page (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return PagedResultsInvitation
   * @throws ApiException if fails to make API call
   */
  public PagedResultsInvitation searchInvitationsasSuperAdmin(@javax.annotation.Nonnull Integer page, @javax.annotation.Nonnull Integer size, @javax.annotation.Nullable String email, @javax.annotation.Nullable InvitationInvitationStatus status, @javax.annotation.Nullable List<String> sort, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;

    // verify the required parameter 'page' is set
    if (page == null) {
      throw new ApiException(400, "Missing the required parameter 'page' when calling searchInvitationsasSuperAdmin");
    }

    // verify the required parameter 'size' is set
    if (size == null) {
      throw new ApiException(400, "Missing the required parameter 'size' when calling searchInvitationsasSuperAdmin");
    }

    // create path and map variables
    String localVarPath = "/api/v1/tenants/invitations/search";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("email", email));
    localVarQueryParams.addAll(apiClient.parameterToPair("status", status));
    localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
    localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sort", sort));

    localVarHeaderParams.putAll(additionalHeaders);



    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<PagedResultsInvitation> localVarReturnType = new TypeReference<PagedResultsInvitation>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  @Override
  public <T> T invokeAPI(String url, String method, Object request, TypeReference<T> returnType, Map<String, String> additionalHeaders) throws ApiException {
    String localVarPath = url.replace(apiClient.getBaseURL(), "");
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarHeaderParams.putAll(additionalHeaders);

    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    return apiClient.invokeAPI(
      localVarPath,
        method,
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        request,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        returnType
    );
  }
}
