/*
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package io.kestra.sdk.api;

import com.fasterxml.jackson.core.type.TypeReference;

import io.kestra.sdk.internal.ApiException;
import io.kestra.sdk.internal.ApiClient;
import io.kestra.sdk.internal.BaseApi;
import io.kestra.sdk.internal.Configuration;
import io.kestra.sdk.internal.Pair;

import io.kestra.sdk.model.IAMInvitationControllerApiInvitationCreateRequest;
import io.kestra.sdk.model.IAMInvitationControllerApiInvitationDetail;
import io.kestra.sdk.model.Invitation;
import io.kestra.sdk.model.InvitationInvitationStatus;
import io.kestra.sdk.model.PagedResultsIAMInvitationControllerApiInvitationDetail;


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-14T16:34:14.833468251Z[Etc/UTC]", comments = "Generator version: 7.14.0-SNAPSHOT")
public class InvitationsApi extends BaseApi {

  public InvitationsApi() {
    super(Configuration.getDefaultApiClient());
  }

  public InvitationsApi(ApiClient apiClient) {
    super(apiClient);
  }

  /**
   * Create an invitation
   * Creates a new invitation and sends an email if the mail server is enabled.
   * @param tenant  (required)
   * @param iaMInvitationControllerApiInvitationCreateRequest Create a new invitation, send an email if the server-mail is enabled (required)
   * @throws ApiException if fails to make API call
   */
  public void createInvitation(@javax.annotation.Nonnull String tenant, @javax.annotation.Nonnull IAMInvitationControllerApiInvitationCreateRequest iaMInvitationControllerApiInvitationCreateRequest) throws ApiException {
    this.createInvitation(tenant, iaMInvitationControllerApiInvitationCreateRequest, Collections.emptyMap());
  }


  /**
   * Create an invitation
   * Creates a new invitation and sends an email if the mail server is enabled.
   * @param tenant  (required)
   * @param iaMInvitationControllerApiInvitationCreateRequest Create a new invitation, send an email if the server-mail is enabled (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void createInvitation(@javax.annotation.Nonnull String tenant, @javax.annotation.Nonnull IAMInvitationControllerApiInvitationCreateRequest iaMInvitationControllerApiInvitationCreateRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = iaMInvitationControllerApiInvitationCreateRequest;
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling createInvitation");
    }
    
    // verify the required parameter 'iaMInvitationControllerApiInvitationCreateRequest' is set
    if (iaMInvitationControllerApiInvitationCreateRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'iaMInvitationControllerApiInvitationCreateRequest' when calling createInvitation");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/invitations"
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Delete an invitation
   * Deletes the invitation by its ID.
   * @param id The id of the invitation (required)
   * @param tenant  (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteInvitation(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String tenant) throws ApiException {
    this.deleteInvitation(id, tenant, Collections.emptyMap());
  }


  /**
   * Delete an invitation
   * Deletes the invitation by its ID.
   * @param id The id of the invitation (required)
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void deleteInvitation(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteInvitation");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling deleteInvitation");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/invitations/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * List invitations for the authenticated user
   * Returns all invitations for the authenticated user&#39;s email across all tenants.
   * @return List&lt;Invitation&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Invitation> findAllInvitationsForCurrentUser() throws ApiException {
    return this.findAllInvitationsForCurrentUser(Collections.emptyMap());
  }


  /**
   * List invitations for the authenticated user
   * Returns all invitations for the authenticated user&#39;s email across all tenants.
   * @param additionalHeaders additionalHeaders for this call
   * @return List&lt;Invitation&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Invitation> findAllInvitationsForCurrentUser(Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/api/v1/me/invitations";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<List<Invitation>> localVarReturnType = new TypeReference<List<Invitation>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Retrieve an invitation
   * Retrieves the invitation by its ID, including the invitation link.
   * @param id The id of the invitation (required)
   * @param tenant  (required)
   * @return IAMInvitationControllerApiInvitationDetail
   * @throws ApiException if fails to make API call
   */
  public IAMInvitationControllerApiInvitationDetail getInvitation(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String tenant) throws ApiException {
    return this.getInvitation(id, tenant, Collections.emptyMap());
  }


  /**
   * Retrieve an invitation
   * Retrieves the invitation by its ID, including the invitation link.
   * @param id The id of the invitation (required)
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return IAMInvitationControllerApiInvitationDetail
   * @throws ApiException if fails to make API call
   */
  public IAMInvitationControllerApiInvitationDetail getInvitation(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getInvitation");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling getInvitation");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/invitations/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<IAMInvitationControllerApiInvitationDetail> localVarReturnType = new TypeReference<IAMInvitationControllerApiInvitationDetail>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Retrieve all invitations for a given email
   * Returns all invitations created for a given email address in the current tenant.
   * @param email The email address of the invited (required)
   * @param tenant  (required)
   * @return List&lt;IAMInvitationControllerApiInvitationDetail&gt;
   * @throws ApiException if fails to make API call
   */
  public List<IAMInvitationControllerApiInvitationDetail> listInvitationsByEmail(@javax.annotation.Nonnull String email, @javax.annotation.Nonnull String tenant) throws ApiException {
    return this.listInvitationsByEmail(email, tenant, Collections.emptyMap());
  }


  /**
   * Retrieve all invitations for a given email
   * Returns all invitations created for a given email address in the current tenant.
   * @param email The email address of the invited (required)
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return List&lt;IAMInvitationControllerApiInvitationDetail&gt;
   * @throws ApiException if fails to make API call
   */
  public List<IAMInvitationControllerApiInvitationDetail> listInvitationsByEmail(@javax.annotation.Nonnull String email, @javax.annotation.Nonnull String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'email' is set
    if (email == null) {
      throw new ApiException(400, "Missing the required parameter 'email' when calling listInvitationsByEmail");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling listInvitationsByEmail");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/invitations/email/{email}"
      .replaceAll("\\{" + "email" + "\\}", apiClient.escapeString(apiClient.parameterToString(email)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<List<IAMInvitationControllerApiInvitationDetail>> localVarReturnType = new TypeReference<List<IAMInvitationControllerApiInvitationDetail>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Search for invitations
   * Search and filter invitations by email, status, and pagination.
   * @param page The current page (required)
   * @param size The current page size (required)
   * @param tenant  (required)
   * @param email The email address of the invited (optional)
   * @param status The current status of the invitations (optional)
   * @param sort The sort of current page (optional)
   * @return PagedResultsIAMInvitationControllerApiInvitationDetail
   * @throws ApiException if fails to make API call
   */
  public PagedResultsIAMInvitationControllerApiInvitationDetail searchInvitations(@javax.annotation.Nonnull Integer page, @javax.annotation.Nonnull Integer size, @javax.annotation.Nonnull String tenant, @javax.annotation.Nullable String email, @javax.annotation.Nullable InvitationInvitationStatus status, @javax.annotation.Nullable List<String> sort) throws ApiException {
    return this.searchInvitations(page, size, tenant, email, status, sort, Collections.emptyMap());
  }


  /**
   * Search for invitations
   * Search and filter invitations by email, status, and pagination.
   * @param page The current page (required)
   * @param size The current page size (required)
   * @param tenant  (required)
   * @param email The email address of the invited (optional)
   * @param status The current status of the invitations (optional)
   * @param sort The sort of current page (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return PagedResultsIAMInvitationControllerApiInvitationDetail
   * @throws ApiException if fails to make API call
   */
  public PagedResultsIAMInvitationControllerApiInvitationDetail searchInvitations(@javax.annotation.Nonnull Integer page, @javax.annotation.Nonnull Integer size, @javax.annotation.Nonnull String tenant, @javax.annotation.Nullable String email, @javax.annotation.Nullable InvitationInvitationStatus status, @javax.annotation.Nullable List<String> sort, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'page' is set
    if (page == null) {
      throw new ApiException(400, "Missing the required parameter 'page' when calling searchInvitations");
    }
    
    // verify the required parameter 'size' is set
    if (size == null) {
      throw new ApiException(400, "Missing the required parameter 'size' when calling searchInvitations");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling searchInvitations");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/invitations/search"
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("email", email));
    localVarQueryParams.addAll(apiClient.parameterToPair("status", status));
    localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
    localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "sort", sort));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<PagedResultsIAMInvitationControllerApiInvitationDetail> localVarReturnType = new TypeReference<PagedResultsIAMInvitationControllerApiInvitationDetail>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  @Override
  public <T> T invokeAPI(String url, String method, Object request, TypeReference<T> returnType, Map<String, String> additionalHeaders) throws ApiException {
    String localVarPath = url.replace(apiClient.getBaseURL(), "");
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarHeaderParams.putAll(additionalHeaders);

    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    return apiClient.invokeAPI(
      localVarPath,
        method,
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        request,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        returnType
    );
  }
}
