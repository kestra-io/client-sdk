/*
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package io.kestra.sdk.api;

import com.fasterxml.jackson.core.type.TypeReference;

import io.kestra.sdk.internal.ApiException;
import io.kestra.sdk.internal.ApiClient;
import io.kestra.sdk.internal.BaseApi;
import io.kestra.sdk.internal.Configuration;
import io.kestra.sdk.internal.Pair;

import io.kestra.sdk.model.ApiAutocomplete;
import io.kestra.sdk.model.ApiGroupSummary;
import io.kestra.sdk.model.ApiIds;
import io.kestra.sdk.model.GroupIdentifierMembership;
import io.kestra.sdk.model.IAMGroupControllerApiCreateGroupRequest;
import io.kestra.sdk.model.IAMGroupControllerApiGroupDetail;
import io.kestra.sdk.model.IAMGroupControllerApiGroupMember;
import io.kestra.sdk.model.IAMGroupControllerApiUpdateGroupRequest;
import io.kestra.sdk.model.PagedResultsApiGroupSummary;
import io.kestra.sdk.model.PagedResultsIAMGroupControllerApiGroupMember;


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.14.0-SNAPSHOT")
public class GroupsApi extends BaseApi {

  public GroupsApi() {
    super(Configuration.getDefaultApiClient());
  }

  public GroupsApi(ApiClient apiClient) {
    super(apiClient);
  }

  /**
   * Add a user to a group
   * Adds the specified user to the given group. If the user does not already have access to the tenant, tenant access will be created automatically.
   * @param id The ID of the group (required)
   * @param userId The ID of the user to add to the group (required)
   * @param tenant  (required)
   * @return IAMGroupControllerApiGroupMember
   * @throws ApiException if fails to make API call
   */
  public IAMGroupControllerApiGroupMember addUserToGroup(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String userId, @javax.annotation.Nonnull String tenant) throws ApiException {
    return this.addUserToGroup(id, userId, tenant, Collections.emptyMap());
  }


  /**
   * Add a user to a group
   * Adds the specified user to the given group. If the user does not already have access to the tenant, tenant access will be created automatically.
   * @param id The ID of the group (required)
   * @param userId The ID of the user to add to the group (required)
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return IAMGroupControllerApiGroupMember
   * @throws ApiException if fails to make API call
   */
  public IAMGroupControllerApiGroupMember addUserToGroup(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String userId, @javax.annotation.Nonnull String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling addUserToGroup");
    }
    
    // verify the required parameter 'userId' is set
    if (userId == null) {
      throw new ApiException(400, "Missing the required parameter 'userId' when calling addUserToGroup");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling addUserToGroup");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/groups/{id}/members/{userId}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "userId" + "\\}", apiClient.escapeString(apiClient.parameterToString(userId)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<IAMGroupControllerApiGroupMember> localVarReturnType = new TypeReference<IAMGroupControllerApiGroupMember>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "PUT",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * List groups for autocomplete
   * 
   * @param tenant  (required)
   * @param apiAutocomplete Autocomplete request (required)
   * @return List&lt;ApiGroupSummary&gt;
   * @throws ApiException if fails to make API call
   */
  public List<ApiGroupSummary> autocompleteGroups(@javax.annotation.Nonnull String tenant, @javax.annotation.Nonnull ApiAutocomplete apiAutocomplete) throws ApiException {
    return this.autocompleteGroups(tenant, apiAutocomplete, Collections.emptyMap());
  }


  /**
   * List groups for autocomplete
   * 
   * @param tenant  (required)
   * @param apiAutocomplete Autocomplete request (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return List&lt;ApiGroupSummary&gt;
   * @throws ApiException if fails to make API call
   */
  public List<ApiGroupSummary> autocompleteGroups(@javax.annotation.Nonnull String tenant, @javax.annotation.Nonnull ApiAutocomplete apiAutocomplete, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = apiAutocomplete;
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling autocompleteGroups");
    }
    
    // verify the required parameter 'apiAutocomplete' is set
    if (apiAutocomplete == null) {
      throw new ApiException(400, "Missing the required parameter 'apiAutocomplete' when calling autocompleteGroups");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/groups/autocomplete"
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<List<ApiGroupSummary>> localVarReturnType = new TypeReference<List<ApiGroupSummary>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Create a group
   * 
   * @param tenant  (required)
   * @param iaMGroupControllerApiCreateGroupRequest The group (required)
   * @return IAMGroupControllerApiGroupDetail
   * @throws ApiException if fails to make API call
   */
  public IAMGroupControllerApiGroupDetail createGroup(@javax.annotation.Nonnull String tenant, @javax.annotation.Nonnull IAMGroupControllerApiCreateGroupRequest iaMGroupControllerApiCreateGroupRequest) throws ApiException {
    return this.createGroup(tenant, iaMGroupControllerApiCreateGroupRequest, Collections.emptyMap());
  }


  /**
   * Create a group
   * 
   * @param tenant  (required)
   * @param iaMGroupControllerApiCreateGroupRequest The group (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return IAMGroupControllerApiGroupDetail
   * @throws ApiException if fails to make API call
   */
  public IAMGroupControllerApiGroupDetail createGroup(@javax.annotation.Nonnull String tenant, @javax.annotation.Nonnull IAMGroupControllerApiCreateGroupRequest iaMGroupControllerApiCreateGroupRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = iaMGroupControllerApiCreateGroupRequest;
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling createGroup");
    }
    
    // verify the required parameter 'iaMGroupControllerApiCreateGroupRequest' is set
    if (iaMGroupControllerApiCreateGroupRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'iaMGroupControllerApiCreateGroupRequest' when calling createGroup");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/groups"
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<IAMGroupControllerApiGroupDetail> localVarReturnType = new TypeReference<IAMGroupControllerApiGroupDetail>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Delete a group
   * 
   * @param id The group id (required)
   * @param tenant  (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteGroup(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String tenant) throws ApiException {
    this.deleteGroup(id, tenant, Collections.emptyMap());
  }


  /**
   * Delete a group
   * 
   * @param id The group id (required)
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void deleteGroup(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteGroup");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling deleteGroup");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/groups/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Remove a user from a group
   * Removes the specified user from the given group. If the user has no other group bindings within the tenant, their access to the tenant will also be revoked.
   * @param id The ID of the group (required)
   * @param userId The ID of the user to remove from the group (required)
   * @param tenant  (required)
   * @return IAMGroupControllerApiGroupMember
   * @throws ApiException if fails to make API call
   */
  public IAMGroupControllerApiGroupMember deleteUserFromGroup(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String userId, @javax.annotation.Nonnull String tenant) throws ApiException {
    return this.deleteUserFromGroup(id, userId, tenant, Collections.emptyMap());
  }


  /**
   * Remove a user from a group
   * Removes the specified user from the given group. If the user has no other group bindings within the tenant, their access to the tenant will also be revoked.
   * @param id The ID of the group (required)
   * @param userId The ID of the user to remove from the group (required)
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return IAMGroupControllerApiGroupMember
   * @throws ApiException if fails to make API call
   */
  public IAMGroupControllerApiGroupMember deleteUserFromGroup(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String userId, @javax.annotation.Nonnull String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteUserFromGroup");
    }
    
    // verify the required parameter 'userId' is set
    if (userId == null) {
      throw new ApiException(400, "Missing the required parameter 'userId' when calling deleteUserFromGroup");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling deleteUserFromGroup");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/groups/{id}/members/{userId}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "userId" + "\\}", apiClient.escapeString(apiClient.parameterToString(userId)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<IAMGroupControllerApiGroupMember> localVarReturnType = new TypeReference<IAMGroupControllerApiGroupMember>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Retrieve a group
   * Retrieves details of a specific group by its ID within the current tenant.
   * @param id The group id (required)
   * @param tenant  (required)
   * @return IAMGroupControllerApiGroupDetail
   * @throws ApiException if fails to make API call
   */
  public IAMGroupControllerApiGroupDetail getGroup(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String tenant) throws ApiException {
    return this.getGroup(id, tenant, Collections.emptyMap());
  }


  /**
   * Retrieve a group
   * Retrieves details of a specific group by its ID within the current tenant.
   * @param id The group id (required)
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return IAMGroupControllerApiGroupDetail
   * @throws ApiException if fails to make API call
   */
  public IAMGroupControllerApiGroupDetail getGroup(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getGroup");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling getGroup");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/groups/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<IAMGroupControllerApiGroupDetail> localVarReturnType = new TypeReference<IAMGroupControllerApiGroupDetail>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * List groups by ids
   * 
   * @param tenant  (required)
   * @param apiIds The ids that must be present on results (required)
   * @return List&lt;ApiGroupSummary&gt;
   * @throws ApiException if fails to make API call
   */
  public List<ApiGroupSummary> listGroupIds(@javax.annotation.Nonnull String tenant, @javax.annotation.Nonnull ApiIds apiIds) throws ApiException {
    return this.listGroupIds(tenant, apiIds, Collections.emptyMap());
  }


  /**
   * List groups by ids
   * 
   * @param tenant  (required)
   * @param apiIds The ids that must be present on results (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return List&lt;ApiGroupSummary&gt;
   * @throws ApiException if fails to make API call
   */
  public List<ApiGroupSummary> listGroupIds(@javax.annotation.Nonnull String tenant, @javax.annotation.Nonnull ApiIds apiIds, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = apiIds;
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling listGroupIds");
    }
    
    // verify the required parameter 'apiIds' is set
    if (apiIds == null) {
      throw new ApiException(400, "Missing the required parameter 'apiIds' when calling listGroupIds");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/groups/ids"
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<List<ApiGroupSummary>> localVarReturnType = new TypeReference<List<ApiGroupSummary>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Search for users in a group
   * 
   * @param id The group id (required)
   * @param page The current page (required)
   * @param size The current page size (required)
   * @param tenant  (required)
   * @param q A string filter (optional)
   * @param sort The sort of current page (optional)
   * @return PagedResultsIAMGroupControllerApiGroupMember
   * @throws ApiException if fails to make API call
   */
  public PagedResultsIAMGroupControllerApiGroupMember searchGroupMembers(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull Integer page, @javax.annotation.Nonnull Integer size, @javax.annotation.Nonnull String tenant, @javax.annotation.Nullable String q, @javax.annotation.Nullable List<String> sort) throws ApiException {
    return this.searchGroupMembers(id, page, size, tenant, q, sort, Collections.emptyMap());
  }


  /**
   * Search for users in a group
   * 
   * @param id The group id (required)
   * @param page The current page (required)
   * @param size The current page size (required)
   * @param tenant  (required)
   * @param q A string filter (optional)
   * @param sort The sort of current page (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return PagedResultsIAMGroupControllerApiGroupMember
   * @throws ApiException if fails to make API call
   */
  public PagedResultsIAMGroupControllerApiGroupMember searchGroupMembers(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull Integer page, @javax.annotation.Nonnull Integer size, @javax.annotation.Nonnull String tenant, @javax.annotation.Nullable String q, @javax.annotation.Nullable List<String> sort, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling searchGroupMembers");
    }
    
    // verify the required parameter 'page' is set
    if (page == null) {
      throw new ApiException(400, "Missing the required parameter 'page' when calling searchGroupMembers");
    }
    
    // verify the required parameter 'size' is set
    if (size == null) {
      throw new ApiException(400, "Missing the required parameter 'size' when calling searchGroupMembers");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling searchGroupMembers");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/groups/{id}/members"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
    localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
    localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "sort", sort));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<PagedResultsIAMGroupControllerApiGroupMember> localVarReturnType = new TypeReference<PagedResultsIAMGroupControllerApiGroupMember>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Search for groups
   * 
   * @param page The current page (required)
   * @param size The current page size (required)
   * @param tenant  (required)
   * @param q A string filter (optional)
   * @param sort The sort of current page (optional)
   * @return PagedResultsApiGroupSummary
   * @throws ApiException if fails to make API call
   */
  public PagedResultsApiGroupSummary searchGroups(@javax.annotation.Nonnull Integer page, @javax.annotation.Nonnull Integer size, @javax.annotation.Nonnull String tenant, @javax.annotation.Nullable String q, @javax.annotation.Nullable List<String> sort) throws ApiException {
    return this.searchGroups(page, size, tenant, q, sort, Collections.emptyMap());
  }


  /**
   * Search for groups
   * 
   * @param page The current page (required)
   * @param size The current page size (required)
   * @param tenant  (required)
   * @param q A string filter (optional)
   * @param sort The sort of current page (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return PagedResultsApiGroupSummary
   * @throws ApiException if fails to make API call
   */
  public PagedResultsApiGroupSummary searchGroups(@javax.annotation.Nonnull Integer page, @javax.annotation.Nonnull Integer size, @javax.annotation.Nonnull String tenant, @javax.annotation.Nullable String q, @javax.annotation.Nullable List<String> sort, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'page' is set
    if (page == null) {
      throw new ApiException(400, "Missing the required parameter 'page' when calling searchGroups");
    }
    
    // verify the required parameter 'size' is set
    if (size == null) {
      throw new ApiException(400, "Missing the required parameter 'size' when calling searchGroups");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling searchGroups");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/groups/search"
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
    localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
    localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "sort", sort));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<PagedResultsApiGroupSummary> localVarReturnType = new TypeReference<PagedResultsApiGroupSummary>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Update a user&#39;s membership type in a group
   * Allows a group owner or an authorized user to change the role of a user within a group to OWNER or MEMBER.
   * @param id The ID of the group (required)
   * @param userId The ID of the user whose membership is being updated (required)
   * @param membership The new membership type to assign to the user. (required)
   * @param tenant  (required)
   * @return IAMGroupControllerApiGroupMember
   * @throws ApiException if fails to make API call
   */
  public IAMGroupControllerApiGroupMember setUserMembershipForGroup(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String userId, @javax.annotation.Nonnull GroupIdentifierMembership membership, @javax.annotation.Nonnull String tenant) throws ApiException {
    return this.setUserMembershipForGroup(id, userId, membership, tenant, Collections.emptyMap());
  }


  /**
   * Update a user&#39;s membership type in a group
   * Allows a group owner or an authorized user to change the role of a user within a group to OWNER or MEMBER.
   * @param id The ID of the group (required)
   * @param userId The ID of the user whose membership is being updated (required)
   * @param membership The new membership type to assign to the user. (required)
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return IAMGroupControllerApiGroupMember
   * @throws ApiException if fails to make API call
   */
  public IAMGroupControllerApiGroupMember setUserMembershipForGroup(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String userId, @javax.annotation.Nonnull GroupIdentifierMembership membership, @javax.annotation.Nonnull String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling setUserMembershipForGroup");
    }
    
    // verify the required parameter 'userId' is set
    if (userId == null) {
      throw new ApiException(400, "Missing the required parameter 'userId' when calling setUserMembershipForGroup");
    }
    
    // verify the required parameter 'membership' is set
    if (membership == null) {
      throw new ApiException(400, "Missing the required parameter 'membership' when calling setUserMembershipForGroup");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling setUserMembershipForGroup");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/groups/{id}/members/membership/{userId}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "userId" + "\\}", apiClient.escapeString(apiClient.parameterToString(userId)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("membership", membership));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<IAMGroupControllerApiGroupMember> localVarReturnType = new TypeReference<IAMGroupControllerApiGroupMember>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "PUT",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Update a group
   * 
   * @param id The group id (required)
   * @param tenant  (required)
   * @param iaMGroupControllerApiUpdateGroupRequest The group (required)
   * @return IAMGroupControllerApiGroupDetail
   * @throws ApiException if fails to make API call
   */
  public IAMGroupControllerApiGroupDetail updateGroup(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String tenant, @javax.annotation.Nonnull IAMGroupControllerApiUpdateGroupRequest iaMGroupControllerApiUpdateGroupRequest) throws ApiException {
    return this.updateGroup(id, tenant, iaMGroupControllerApiUpdateGroupRequest, Collections.emptyMap());
  }


  /**
   * Update a group
   * 
   * @param id The group id (required)
   * @param tenant  (required)
   * @param iaMGroupControllerApiUpdateGroupRequest The group (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return IAMGroupControllerApiGroupDetail
   * @throws ApiException if fails to make API call
   */
  public IAMGroupControllerApiGroupDetail updateGroup(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String tenant, @javax.annotation.Nonnull IAMGroupControllerApiUpdateGroupRequest iaMGroupControllerApiUpdateGroupRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = iaMGroupControllerApiUpdateGroupRequest;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling updateGroup");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling updateGroup");
    }
    
    // verify the required parameter 'iaMGroupControllerApiUpdateGroupRequest' is set
    if (iaMGroupControllerApiUpdateGroupRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'iaMGroupControllerApiUpdateGroupRequest' when calling updateGroup");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/groups/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<IAMGroupControllerApiGroupDetail> localVarReturnType = new TypeReference<IAMGroupControllerApiGroupDetail>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "PUT",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  @Override
  public <T> T invokeAPI(String url, String method, Object request, TypeReference<T> returnType, Map<String, String> additionalHeaders) throws ApiException {
    String localVarPath = url.replace(apiClient.getBaseURL(), "");
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarHeaderParams.putAll(additionalHeaders);

    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    return apiClient.invokeAPI(
      localVarPath,
        method,
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        request,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        returnType
    );
  }
}
