/*
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kestra.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.kestra.sdk.model.PluginPluginElementMetadata;
import io.kestra.sdk.model.PluginSubGroupPluginCategory;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * Plugin
 */
@JsonPropertyOrder({
  Plugin.JSON_PROPERTY_NAME,
  Plugin.JSON_PROPERTY_TITLE,
  Plugin.JSON_PROPERTY_DESCRIPTION,
  Plugin.JSON_PROPERTY_LICENSE,
  Plugin.JSON_PROPERTY_LONG_DESCRIPTION,
  Plugin.JSON_PROPERTY_GROUP,
  Plugin.JSON_PROPERTY_VERSION,
  Plugin.JSON_PROPERTY_MANIFEST,
  Plugin.JSON_PROPERTY_GUIDES,
  Plugin.JSON_PROPERTY_ALIASES,
  Plugin.JSON_PROPERTY_TASKS,
  Plugin.JSON_PROPERTY_TRIGGERS,
  Plugin.JSON_PROPERTY_CONDITIONS,
  Plugin.JSON_PROPERTY_CONTROLLERS,
  Plugin.JSON_PROPERTY_STORAGES,
  Plugin.JSON_PROPERTY_SECRETS,
  Plugin.JSON_PROPERTY_TASK_RUNNERS,
  Plugin.JSON_PROPERTY_APPS,
  Plugin.JSON_PROPERTY_APP_BLOCKS,
  Plugin.JSON_PROPERTY_CHARTS,
  Plugin.JSON_PROPERTY_DATA_FILTERS,
  Plugin.JSON_PROPERTY_LOG_EXPORTERS,
  Plugin.JSON_PROPERTY_ADDITIONAL_PLUGINS,
  Plugin.JSON_PROPERTY_CATEGORIES,
  Plugin.JSON_PROPERTY_SUB_GROUP
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-05T13:38:05.347663356Z[Etc/UTC]", comments = "Generator version: 7.14.0-SNAPSHOT")
public class Plugin {
  public static final String JSON_PROPERTY_NAME = "name";
  @javax.annotation.Nullable
  private String name;

  public static final String JSON_PROPERTY_TITLE = "title";
  @javax.annotation.Nullable
  private String title;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  @javax.annotation.Nullable
  private String description;

  public static final String JSON_PROPERTY_LICENSE = "license";
  @javax.annotation.Nullable
  private String license;

  public static final String JSON_PROPERTY_LONG_DESCRIPTION = "longDescription";
  @javax.annotation.Nullable
  private String longDescription;

  public static final String JSON_PROPERTY_GROUP = "group";
  @javax.annotation.Nullable
  private String group;

  public static final String JSON_PROPERTY_VERSION = "version";
  @javax.annotation.Nullable
  private String version;

  public static final String JSON_PROPERTY_MANIFEST = "manifest";
  @javax.annotation.Nullable
  private Map<String, String> manifest = new HashMap<>();

  public static final String JSON_PROPERTY_GUIDES = "guides";
  @javax.annotation.Nullable
  private List<String> guides = new ArrayList<>();

  public static final String JSON_PROPERTY_ALIASES = "aliases";
  @javax.annotation.Nullable
  private List<String> aliases = new ArrayList<>();

  public static final String JSON_PROPERTY_TASKS = "tasks";
  @javax.annotation.Nullable
  private List<PluginPluginElementMetadata> tasks = new ArrayList<>();

  public static final String JSON_PROPERTY_TRIGGERS = "triggers";
  @javax.annotation.Nullable
  private List<PluginPluginElementMetadata> triggers = new ArrayList<>();

  public static final String JSON_PROPERTY_CONDITIONS = "conditions";
  @javax.annotation.Nullable
  private List<PluginPluginElementMetadata> conditions = new ArrayList<>();

  public static final String JSON_PROPERTY_CONTROLLERS = "controllers";
  @javax.annotation.Nullable
  private List<PluginPluginElementMetadata> controllers = new ArrayList<>();

  public static final String JSON_PROPERTY_STORAGES = "storages";
  @javax.annotation.Nullable
  private List<PluginPluginElementMetadata> storages = new ArrayList<>();

  public static final String JSON_PROPERTY_SECRETS = "secrets";
  @javax.annotation.Nullable
  private List<PluginPluginElementMetadata> secrets = new ArrayList<>();

  public static final String JSON_PROPERTY_TASK_RUNNERS = "taskRunners";
  @javax.annotation.Nullable
  private List<PluginPluginElementMetadata> taskRunners = new ArrayList<>();

  public static final String JSON_PROPERTY_APPS = "apps";
  @javax.annotation.Nullable
  private List<PluginPluginElementMetadata> apps = new ArrayList<>();

  public static final String JSON_PROPERTY_APP_BLOCKS = "appBlocks";
  @javax.annotation.Nullable
  private List<PluginPluginElementMetadata> appBlocks = new ArrayList<>();

  public static final String JSON_PROPERTY_CHARTS = "charts";
  @javax.annotation.Nullable
  private List<PluginPluginElementMetadata> charts = new ArrayList<>();

  public static final String JSON_PROPERTY_DATA_FILTERS = "dataFilters";
  @javax.annotation.Nullable
  private List<PluginPluginElementMetadata> dataFilters = new ArrayList<>();

  public static final String JSON_PROPERTY_LOG_EXPORTERS = "logExporters";
  @javax.annotation.Nullable
  private List<PluginPluginElementMetadata> logExporters = new ArrayList<>();

  public static final String JSON_PROPERTY_ADDITIONAL_PLUGINS = "additionalPlugins";
  @javax.annotation.Nullable
  private List<PluginPluginElementMetadata> additionalPlugins = new ArrayList<>();

  public static final String JSON_PROPERTY_CATEGORIES = "categories";
  @javax.annotation.Nullable
  private List<PluginSubGroupPluginCategory> categories = new ArrayList<>();

  public static final String JSON_PROPERTY_SUB_GROUP = "subGroup";
  @javax.annotation.Nullable
  private String subGroup;

  public Plugin() {
  }

  public Plugin name(@javax.annotation.Nullable String name) {
    
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }

  public Plugin title(@javax.annotation.Nullable String title) {
    
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TITLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTitle() {
    return title;
  }


  @JsonProperty(JSON_PROPERTY_TITLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTitle(@javax.annotation.Nullable String title) {
    this.title = title;
  }

  public Plugin description(@javax.annotation.Nullable String description) {
    
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }

  public Plugin license(@javax.annotation.Nullable String license) {
    
    this.license = license;
    return this;
  }

  /**
   * Get license
   * @return license
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LICENSE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLicense() {
    return license;
  }


  @JsonProperty(JSON_PROPERTY_LICENSE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLicense(@javax.annotation.Nullable String license) {
    this.license = license;
  }

  public Plugin longDescription(@javax.annotation.Nullable String longDescription) {
    
    this.longDescription = longDescription;
    return this;
  }

  /**
   * Get longDescription
   * @return longDescription
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LONG_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLongDescription() {
    return longDescription;
  }


  @JsonProperty(JSON_PROPERTY_LONG_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLongDescription(@javax.annotation.Nullable String longDescription) {
    this.longDescription = longDescription;
  }

  public Plugin group(@javax.annotation.Nullable String group) {
    
    this.group = group;
    return this;
  }

  /**
   * Get group
   * @return group
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_GROUP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getGroup() {
    return group;
  }


  @JsonProperty(JSON_PROPERTY_GROUP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGroup(@javax.annotation.Nullable String group) {
    this.group = group;
  }

  public Plugin version(@javax.annotation.Nullable String version) {
    
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getVersion() {
    return version;
  }


  @JsonProperty(JSON_PROPERTY_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVersion(@javax.annotation.Nullable String version) {
    this.version = version;
  }

  public Plugin manifest(@javax.annotation.Nullable Map<String, String> manifest) {
    
    this.manifest = manifest;
    return this;
  }

  public Plugin putManifestItem(String key, String manifestItem) {
    if (this.manifest == null) {
      this.manifest = new HashMap<>();
    }
    this.manifest.put(key, manifestItem);
    return this;
  }

  /**
   * Get manifest
   * @return manifest
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MANIFEST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, String> getManifest() {
    return manifest;
  }


  @JsonProperty(JSON_PROPERTY_MANIFEST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setManifest(@javax.annotation.Nullable Map<String, String> manifest) {
    this.manifest = manifest;
  }

  public Plugin guides(@javax.annotation.Nullable List<String> guides) {
    
    this.guides = guides;
    return this;
  }

  public Plugin addGuidesItem(String guidesItem) {
    if (this.guides == null) {
      this.guides = new ArrayList<>();
    }
    this.guides.add(guidesItem);
    return this;
  }

  /**
   * Get guides
   * @return guides
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_GUIDES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getGuides() {
    return guides;
  }


  @JsonProperty(JSON_PROPERTY_GUIDES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGuides(@javax.annotation.Nullable List<String> guides) {
    this.guides = guides;
  }

  public Plugin aliases(@javax.annotation.Nullable List<String> aliases) {
    
    this.aliases = aliases;
    return this;
  }

  public Plugin addAliasesItem(String aliasesItem) {
    if (this.aliases == null) {
      this.aliases = new ArrayList<>();
    }
    this.aliases.add(aliasesItem);
    return this;
  }

  /**
   * Get aliases
   * @return aliases
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ALIASES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getAliases() {
    return aliases;
  }


  @JsonProperty(JSON_PROPERTY_ALIASES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAliases(@javax.annotation.Nullable List<String> aliases) {
    this.aliases = aliases;
  }

  public Plugin tasks(@javax.annotation.Nullable List<PluginPluginElementMetadata> tasks) {
    
    this.tasks = tasks;
    return this;
  }

  public Plugin addTasksItem(PluginPluginElementMetadata tasksItem) {
    if (this.tasks == null) {
      this.tasks = new ArrayList<>();
    }
    this.tasks.add(tasksItem);
    return this;
  }

  /**
   * Get tasks
   * @return tasks
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TASKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<PluginPluginElementMetadata> getTasks() {
    return tasks;
  }


  @JsonProperty(JSON_PROPERTY_TASKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTasks(@javax.annotation.Nullable List<PluginPluginElementMetadata> tasks) {
    this.tasks = tasks;
  }

  public Plugin triggers(@javax.annotation.Nullable List<PluginPluginElementMetadata> triggers) {
    
    this.triggers = triggers;
    return this;
  }

  public Plugin addTriggersItem(PluginPluginElementMetadata triggersItem) {
    if (this.triggers == null) {
      this.triggers = new ArrayList<>();
    }
    this.triggers.add(triggersItem);
    return this;
  }

  /**
   * Get triggers
   * @return triggers
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TRIGGERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<PluginPluginElementMetadata> getTriggers() {
    return triggers;
  }


  @JsonProperty(JSON_PROPERTY_TRIGGERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTriggers(@javax.annotation.Nullable List<PluginPluginElementMetadata> triggers) {
    this.triggers = triggers;
  }

  public Plugin conditions(@javax.annotation.Nullable List<PluginPluginElementMetadata> conditions) {
    
    this.conditions = conditions;
    return this;
  }

  public Plugin addConditionsItem(PluginPluginElementMetadata conditionsItem) {
    if (this.conditions == null) {
      this.conditions = new ArrayList<>();
    }
    this.conditions.add(conditionsItem);
    return this;
  }

  /**
   * Get conditions
   * @return conditions
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONDITIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<PluginPluginElementMetadata> getConditions() {
    return conditions;
  }


  @JsonProperty(JSON_PROPERTY_CONDITIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConditions(@javax.annotation.Nullable List<PluginPluginElementMetadata> conditions) {
    this.conditions = conditions;
  }

  public Plugin controllers(@javax.annotation.Nullable List<PluginPluginElementMetadata> controllers) {
    
    this.controllers = controllers;
    return this;
  }

  public Plugin addControllersItem(PluginPluginElementMetadata controllersItem) {
    if (this.controllers == null) {
      this.controllers = new ArrayList<>();
    }
    this.controllers.add(controllersItem);
    return this;
  }

  /**
   * Get controllers
   * @return controllers
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONTROLLERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<PluginPluginElementMetadata> getControllers() {
    return controllers;
  }


  @JsonProperty(JSON_PROPERTY_CONTROLLERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setControllers(@javax.annotation.Nullable List<PluginPluginElementMetadata> controllers) {
    this.controllers = controllers;
  }

  public Plugin storages(@javax.annotation.Nullable List<PluginPluginElementMetadata> storages) {
    
    this.storages = storages;
    return this;
  }

  public Plugin addStoragesItem(PluginPluginElementMetadata storagesItem) {
    if (this.storages == null) {
      this.storages = new ArrayList<>();
    }
    this.storages.add(storagesItem);
    return this;
  }

  /**
   * Get storages
   * @return storages
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STORAGES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<PluginPluginElementMetadata> getStorages() {
    return storages;
  }


  @JsonProperty(JSON_PROPERTY_STORAGES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStorages(@javax.annotation.Nullable List<PluginPluginElementMetadata> storages) {
    this.storages = storages;
  }

  public Plugin secrets(@javax.annotation.Nullable List<PluginPluginElementMetadata> secrets) {
    
    this.secrets = secrets;
    return this;
  }

  public Plugin addSecretsItem(PluginPluginElementMetadata secretsItem) {
    if (this.secrets == null) {
      this.secrets = new ArrayList<>();
    }
    this.secrets.add(secretsItem);
    return this;
  }

  /**
   * Get secrets
   * @return secrets
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SECRETS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<PluginPluginElementMetadata> getSecrets() {
    return secrets;
  }


  @JsonProperty(JSON_PROPERTY_SECRETS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSecrets(@javax.annotation.Nullable List<PluginPluginElementMetadata> secrets) {
    this.secrets = secrets;
  }

  public Plugin taskRunners(@javax.annotation.Nullable List<PluginPluginElementMetadata> taskRunners) {
    
    this.taskRunners = taskRunners;
    return this;
  }

  public Plugin addTaskRunnersItem(PluginPluginElementMetadata taskRunnersItem) {
    if (this.taskRunners == null) {
      this.taskRunners = new ArrayList<>();
    }
    this.taskRunners.add(taskRunnersItem);
    return this;
  }

  /**
   * Get taskRunners
   * @return taskRunners
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TASK_RUNNERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<PluginPluginElementMetadata> getTaskRunners() {
    return taskRunners;
  }


  @JsonProperty(JSON_PROPERTY_TASK_RUNNERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTaskRunners(@javax.annotation.Nullable List<PluginPluginElementMetadata> taskRunners) {
    this.taskRunners = taskRunners;
  }

  public Plugin apps(@javax.annotation.Nullable List<PluginPluginElementMetadata> apps) {
    
    this.apps = apps;
    return this;
  }

  public Plugin addAppsItem(PluginPluginElementMetadata appsItem) {
    if (this.apps == null) {
      this.apps = new ArrayList<>();
    }
    this.apps.add(appsItem);
    return this;
  }

  /**
   * Get apps
   * @return apps
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_APPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<PluginPluginElementMetadata> getApps() {
    return apps;
  }


  @JsonProperty(JSON_PROPERTY_APPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setApps(@javax.annotation.Nullable List<PluginPluginElementMetadata> apps) {
    this.apps = apps;
  }

  public Plugin appBlocks(@javax.annotation.Nullable List<PluginPluginElementMetadata> appBlocks) {
    
    this.appBlocks = appBlocks;
    return this;
  }

  public Plugin addAppBlocksItem(PluginPluginElementMetadata appBlocksItem) {
    if (this.appBlocks == null) {
      this.appBlocks = new ArrayList<>();
    }
    this.appBlocks.add(appBlocksItem);
    return this;
  }

  /**
   * Get appBlocks
   * @return appBlocks
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_APP_BLOCKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<PluginPluginElementMetadata> getAppBlocks() {
    return appBlocks;
  }


  @JsonProperty(JSON_PROPERTY_APP_BLOCKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAppBlocks(@javax.annotation.Nullable List<PluginPluginElementMetadata> appBlocks) {
    this.appBlocks = appBlocks;
  }

  public Plugin charts(@javax.annotation.Nullable List<PluginPluginElementMetadata> charts) {
    
    this.charts = charts;
    return this;
  }

  public Plugin addChartsItem(PluginPluginElementMetadata chartsItem) {
    if (this.charts == null) {
      this.charts = new ArrayList<>();
    }
    this.charts.add(chartsItem);
    return this;
  }

  /**
   * Get charts
   * @return charts
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CHARTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<PluginPluginElementMetadata> getCharts() {
    return charts;
  }


  @JsonProperty(JSON_PROPERTY_CHARTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCharts(@javax.annotation.Nullable List<PluginPluginElementMetadata> charts) {
    this.charts = charts;
  }

  public Plugin dataFilters(@javax.annotation.Nullable List<PluginPluginElementMetadata> dataFilters) {
    
    this.dataFilters = dataFilters;
    return this;
  }

  public Plugin addDataFiltersItem(PluginPluginElementMetadata dataFiltersItem) {
    if (this.dataFilters == null) {
      this.dataFilters = new ArrayList<>();
    }
    this.dataFilters.add(dataFiltersItem);
    return this;
  }

  /**
   * Get dataFilters
   * @return dataFilters
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DATA_FILTERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<PluginPluginElementMetadata> getDataFilters() {
    return dataFilters;
  }


  @JsonProperty(JSON_PROPERTY_DATA_FILTERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDataFilters(@javax.annotation.Nullable List<PluginPluginElementMetadata> dataFilters) {
    this.dataFilters = dataFilters;
  }

  public Plugin logExporters(@javax.annotation.Nullable List<PluginPluginElementMetadata> logExporters) {
    
    this.logExporters = logExporters;
    return this;
  }

  public Plugin addLogExportersItem(PluginPluginElementMetadata logExportersItem) {
    if (this.logExporters == null) {
      this.logExporters = new ArrayList<>();
    }
    this.logExporters.add(logExportersItem);
    return this;
  }

  /**
   * Get logExporters
   * @return logExporters
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LOG_EXPORTERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<PluginPluginElementMetadata> getLogExporters() {
    return logExporters;
  }


  @JsonProperty(JSON_PROPERTY_LOG_EXPORTERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLogExporters(@javax.annotation.Nullable List<PluginPluginElementMetadata> logExporters) {
    this.logExporters = logExporters;
  }

  public Plugin additionalPlugins(@javax.annotation.Nullable List<PluginPluginElementMetadata> additionalPlugins) {
    
    this.additionalPlugins = additionalPlugins;
    return this;
  }

  public Plugin addAdditionalPluginsItem(PluginPluginElementMetadata additionalPluginsItem) {
    if (this.additionalPlugins == null) {
      this.additionalPlugins = new ArrayList<>();
    }
    this.additionalPlugins.add(additionalPluginsItem);
    return this;
  }

  /**
   * Get additionalPlugins
   * @return additionalPlugins
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ADDITIONAL_PLUGINS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<PluginPluginElementMetadata> getAdditionalPlugins() {
    return additionalPlugins;
  }


  @JsonProperty(JSON_PROPERTY_ADDITIONAL_PLUGINS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAdditionalPlugins(@javax.annotation.Nullable List<PluginPluginElementMetadata> additionalPlugins) {
    this.additionalPlugins = additionalPlugins;
  }

  public Plugin categories(@javax.annotation.Nullable List<PluginSubGroupPluginCategory> categories) {
    
    this.categories = categories;
    return this;
  }

  public Plugin addCategoriesItem(PluginSubGroupPluginCategory categoriesItem) {
    if (this.categories == null) {
      this.categories = new ArrayList<>();
    }
    this.categories.add(categoriesItem);
    return this;
  }

  /**
   * Get categories
   * @return categories
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CATEGORIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<PluginSubGroupPluginCategory> getCategories() {
    return categories;
  }


  @JsonProperty(JSON_PROPERTY_CATEGORIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCategories(@javax.annotation.Nullable List<PluginSubGroupPluginCategory> categories) {
    this.categories = categories;
  }

  public Plugin subGroup(@javax.annotation.Nullable String subGroup) {
    
    this.subGroup = subGroup;
    return this;
  }

  /**
   * Get subGroup
   * @return subGroup
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SUB_GROUP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSubGroup() {
    return subGroup;
  }


  @JsonProperty(JSON_PROPERTY_SUB_GROUP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSubGroup(@javax.annotation.Nullable String subGroup) {
    this.subGroup = subGroup;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Plugin plugin = (Plugin) o;
    return Objects.equals(this.name, plugin.name) &&
        Objects.equals(this.title, plugin.title) &&
        Objects.equals(this.description, plugin.description) &&
        Objects.equals(this.license, plugin.license) &&
        Objects.equals(this.longDescription, plugin.longDescription) &&
        Objects.equals(this.group, plugin.group) &&
        Objects.equals(this.version, plugin.version) &&
        Objects.equals(this.manifest, plugin.manifest) &&
        Objects.equals(this.guides, plugin.guides) &&
        Objects.equals(this.aliases, plugin.aliases) &&
        Objects.equals(this.tasks, plugin.tasks) &&
        Objects.equals(this.triggers, plugin.triggers) &&
        Objects.equals(this.conditions, plugin.conditions) &&
        Objects.equals(this.controllers, plugin.controllers) &&
        Objects.equals(this.storages, plugin.storages) &&
        Objects.equals(this.secrets, plugin.secrets) &&
        Objects.equals(this.taskRunners, plugin.taskRunners) &&
        Objects.equals(this.apps, plugin.apps) &&
        Objects.equals(this.appBlocks, plugin.appBlocks) &&
        Objects.equals(this.charts, plugin.charts) &&
        Objects.equals(this.dataFilters, plugin.dataFilters) &&
        Objects.equals(this.logExporters, plugin.logExporters) &&
        Objects.equals(this.additionalPlugins, plugin.additionalPlugins) &&
        Objects.equals(this.categories, plugin.categories) &&
        Objects.equals(this.subGroup, plugin.subGroup);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, title, description, license, longDescription, group, version, manifest, guides, aliases, tasks, triggers, conditions, controllers, storages, secrets, taskRunners, apps, appBlocks, charts, dataFilters, logExporters, additionalPlugins, categories, subGroup);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Plugin {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    license: ").append(toIndentedString(license)).append("\n");
    sb.append("    longDescription: ").append(toIndentedString(longDescription)).append("\n");
    sb.append("    group: ").append(toIndentedString(group)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    manifest: ").append(toIndentedString(manifest)).append("\n");
    sb.append("    guides: ").append(toIndentedString(guides)).append("\n");
    sb.append("    aliases: ").append(toIndentedString(aliases)).append("\n");
    sb.append("    tasks: ").append(toIndentedString(tasks)).append("\n");
    sb.append("    triggers: ").append(toIndentedString(triggers)).append("\n");
    sb.append("    conditions: ").append(toIndentedString(conditions)).append("\n");
    sb.append("    controllers: ").append(toIndentedString(controllers)).append("\n");
    sb.append("    storages: ").append(toIndentedString(storages)).append("\n");
    sb.append("    secrets: ").append(toIndentedString(secrets)).append("\n");
    sb.append("    taskRunners: ").append(toIndentedString(taskRunners)).append("\n");
    sb.append("    apps: ").append(toIndentedString(apps)).append("\n");
    sb.append("    appBlocks: ").append(toIndentedString(appBlocks)).append("\n");
    sb.append("    charts: ").append(toIndentedString(charts)).append("\n");
    sb.append("    dataFilters: ").append(toIndentedString(dataFilters)).append("\n");
    sb.append("    logExporters: ").append(toIndentedString(logExporters)).append("\n");
    sb.append("    additionalPlugins: ").append(toIndentedString(additionalPlugins)).append("\n");
    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
    sb.append("    subGroup: ").append(toIndentedString(subGroup)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `name` to the URL query string
    if (getName() != null) {
      try {
        joiner.add(String.format("%sname%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getName()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `title` to the URL query string
    if (getTitle() != null) {
      try {
        joiner.add(String.format("%stitle%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTitle()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `description` to the URL query string
    if (getDescription() != null) {
      try {
        joiner.add(String.format("%sdescription%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDescription()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `license` to the URL query string
    if (getLicense() != null) {
      try {
        joiner.add(String.format("%slicense%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getLicense()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `longDescription` to the URL query string
    if (getLongDescription() != null) {
      try {
        joiner.add(String.format("%slongDescription%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getLongDescription()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `group` to the URL query string
    if (getGroup() != null) {
      try {
        joiner.add(String.format("%sgroup%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getGroup()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `version` to the URL query string
    if (getVersion() != null) {
      try {
        joiner.add(String.format("%sversion%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getVersion()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `manifest` to the URL query string
    if (getManifest() != null) {
      for (String _key : getManifest().keySet()) {
        try {
          joiner.add(String.format("%smanifest%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix),
              getManifest().get(_key), URLEncoder.encode(String.valueOf(getManifest().get(_key)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    // add `guides` to the URL query string
    if (getGuides() != null) {
      for (int i = 0; i < getGuides().size(); i++) {
        try {
          joiner.add(String.format("%sguides%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(String.valueOf(getGuides().get(i)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    // add `aliases` to the URL query string
    if (getAliases() != null) {
      for (int i = 0; i < getAliases().size(); i++) {
        try {
          joiner.add(String.format("%saliases%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(String.valueOf(getAliases().get(i)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    // add `tasks` to the URL query string
    if (getTasks() != null) {
      for (int i = 0; i < getTasks().size(); i++) {
        if (getTasks().get(i) != null) {
          joiner.add(getTasks().get(i).toUrlQueryString(String.format("%stasks%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `triggers` to the URL query string
    if (getTriggers() != null) {
      for (int i = 0; i < getTriggers().size(); i++) {
        if (getTriggers().get(i) != null) {
          joiner.add(getTriggers().get(i).toUrlQueryString(String.format("%striggers%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `conditions` to the URL query string
    if (getConditions() != null) {
      for (int i = 0; i < getConditions().size(); i++) {
        if (getConditions().get(i) != null) {
          joiner.add(getConditions().get(i).toUrlQueryString(String.format("%sconditions%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `controllers` to the URL query string
    if (getControllers() != null) {
      for (int i = 0; i < getControllers().size(); i++) {
        if (getControllers().get(i) != null) {
          joiner.add(getControllers().get(i).toUrlQueryString(String.format("%scontrollers%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `storages` to the URL query string
    if (getStorages() != null) {
      for (int i = 0; i < getStorages().size(); i++) {
        if (getStorages().get(i) != null) {
          joiner.add(getStorages().get(i).toUrlQueryString(String.format("%sstorages%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `secrets` to the URL query string
    if (getSecrets() != null) {
      for (int i = 0; i < getSecrets().size(); i++) {
        if (getSecrets().get(i) != null) {
          joiner.add(getSecrets().get(i).toUrlQueryString(String.format("%ssecrets%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `taskRunners` to the URL query string
    if (getTaskRunners() != null) {
      for (int i = 0; i < getTaskRunners().size(); i++) {
        if (getTaskRunners().get(i) != null) {
          joiner.add(getTaskRunners().get(i).toUrlQueryString(String.format("%staskRunners%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `apps` to the URL query string
    if (getApps() != null) {
      for (int i = 0; i < getApps().size(); i++) {
        if (getApps().get(i) != null) {
          joiner.add(getApps().get(i).toUrlQueryString(String.format("%sapps%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `appBlocks` to the URL query string
    if (getAppBlocks() != null) {
      for (int i = 0; i < getAppBlocks().size(); i++) {
        if (getAppBlocks().get(i) != null) {
          joiner.add(getAppBlocks().get(i).toUrlQueryString(String.format("%sappBlocks%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `charts` to the URL query string
    if (getCharts() != null) {
      for (int i = 0; i < getCharts().size(); i++) {
        if (getCharts().get(i) != null) {
          joiner.add(getCharts().get(i).toUrlQueryString(String.format("%scharts%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `dataFilters` to the URL query string
    if (getDataFilters() != null) {
      for (int i = 0; i < getDataFilters().size(); i++) {
        if (getDataFilters().get(i) != null) {
          joiner.add(getDataFilters().get(i).toUrlQueryString(String.format("%sdataFilters%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `logExporters` to the URL query string
    if (getLogExporters() != null) {
      for (int i = 0; i < getLogExporters().size(); i++) {
        if (getLogExporters().get(i) != null) {
          joiner.add(getLogExporters().get(i).toUrlQueryString(String.format("%slogExporters%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `additionalPlugins` to the URL query string
    if (getAdditionalPlugins() != null) {
      for (int i = 0; i < getAdditionalPlugins().size(); i++) {
        if (getAdditionalPlugins().get(i) != null) {
          joiner.add(getAdditionalPlugins().get(i).toUrlQueryString(String.format("%sadditionalPlugins%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `categories` to the URL query string
    if (getCategories() != null) {
      for (int i = 0; i < getCategories().size(); i++) {
        if (getCategories().get(i) != null) {
          try {
            joiner.add(String.format("%scategories%s%s=%s", prefix, suffix,
                "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
                URLEncoder.encode(String.valueOf(getCategories().get(i)), "UTF-8").replaceAll("\\+", "%20")));
          } catch (UnsupportedEncodingException e) {
            // Should never happen, UTF-8 is always supported
            throw new RuntimeException(e);
          }
        }
      }
    }

    // add `subGroup` to the URL query string
    if (getSubGroup() != null) {
      try {
        joiner.add(String.format("%ssubGroup%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSubGroup()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

