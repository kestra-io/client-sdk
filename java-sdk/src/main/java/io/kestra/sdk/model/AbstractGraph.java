/*
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kestra.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.kestra.sdk.model.AbstractGraphBranchType;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * AbstractGraph
 */
@JsonPropertyOrder({
  AbstractGraph.JSON_PROPERTY_UID,
  AbstractGraph.JSON_PROPERTY_TYPE,
  AbstractGraph.JSON_PROPERTY_BRANCH_TYPE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-19T08:56:01.503545549Z[Etc/UTC]", comments = "Generator version: 7.14.0-SNAPSHOT")
public class AbstractGraph {
  public static final String JSON_PROPERTY_UID = "uid";
  @javax.annotation.Nullable
  private String uid;

  public static final String JSON_PROPERTY_TYPE = "type";
  @javax.annotation.Nullable
  private String type;

  public static final String JSON_PROPERTY_BRANCH_TYPE = "branchType";
  @javax.annotation.Nullable
  private AbstractGraphBranchType branchType;

  public AbstractGraph() {
  }

  public AbstractGraph uid(@javax.annotation.Nullable String uid) {
    
    this.uid = uid;
    return this;
  }

  /**
   * Get uid
   * @return uid
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_UID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUid() {
    return uid;
  }


  @JsonProperty(JSON_PROPERTY_UID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUid(@javax.annotation.Nullable String uid) {
    this.uid = uid;
  }

  public AbstractGraph type(@javax.annotation.Nullable String type) {
    
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(@javax.annotation.Nullable String type) {
    this.type = type;
  }

  public AbstractGraph branchType(@javax.annotation.Nullable AbstractGraphBranchType branchType) {
    
    this.branchType = branchType;
    return this;
  }

  /**
   * Get branchType
   * @return branchType
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BRANCH_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public AbstractGraphBranchType getBranchType() {
    return branchType;
  }


  @JsonProperty(JSON_PROPERTY_BRANCH_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBranchType(@javax.annotation.Nullable AbstractGraphBranchType branchType) {
    this.branchType = branchType;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AbstractGraph abstractGraph = (AbstractGraph) o;
    return Objects.equals(this.uid, abstractGraph.uid) &&
        Objects.equals(this.type, abstractGraph.type) &&
        Objects.equals(this.branchType, abstractGraph.branchType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(uid, type, branchType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AbstractGraph {\n");
    sb.append("    uid: ").append(toIndentedString(uid)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    branchType: ").append(toIndentedString(branchType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

