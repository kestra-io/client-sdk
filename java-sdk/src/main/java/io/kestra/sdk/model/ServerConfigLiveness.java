/*
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kestra.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * ServerConfigLiveness
 */
@JsonPropertyOrder({
  ServerConfigLiveness.JSON_PROPERTY_ENABLED,
  ServerConfigLiveness.JSON_PROPERTY_INTERVAL,
  ServerConfigLiveness.JSON_PROPERTY_TIMEOUT,
  ServerConfigLiveness.JSON_PROPERTY_INITIAL_DELAY,
  ServerConfigLiveness.JSON_PROPERTY_HEARTBEAT_INTERVAL
})
@JsonTypeName("ServerConfig.Liveness")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-28T12:15:52.743487342Z[Etc/UTC]", comments = "Generator version: 7.14.0-SNAPSHOT")
public class ServerConfigLiveness {
  public static final String JSON_PROPERTY_ENABLED = "enabled";
  @javax.annotation.Nonnull
  private Boolean enabled = true;

  public static final String JSON_PROPERTY_INTERVAL = "interval";
  @javax.annotation.Nonnull
  private String interval = "5s";

  public static final String JSON_PROPERTY_TIMEOUT = "timeout";
  @javax.annotation.Nonnull
  private String timeout = "45s";

  public static final String JSON_PROPERTY_INITIAL_DELAY = "initialDelay";
  @javax.annotation.Nonnull
  private String initialDelay = "45s";

  public static final String JSON_PROPERTY_HEARTBEAT_INTERVAL = "heartbeatInterval";
  @javax.annotation.Nonnull
  private String heartbeatInterval = "3s";

  public ServerConfigLiveness() {
  }

  public ServerConfigLiveness enabled(@javax.annotation.Nonnull Boolean enabled) {
    
    this.enabled = enabled;
    return this;
  }

  /**
   * Get enabled
   * @return enabled
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ENABLED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getEnabled() {
    return enabled;
  }


  @JsonProperty(JSON_PROPERTY_ENABLED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEnabled(@javax.annotation.Nonnull Boolean enabled) {
    this.enabled = enabled;
  }

  public ServerConfigLiveness interval(@javax.annotation.Nonnull String interval) {
    
    this.interval = interval;
    return this;
  }

  /**
   * Get interval
   * @return interval
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_INTERVAL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getInterval() {
    return interval;
  }


  @JsonProperty(JSON_PROPERTY_INTERVAL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setInterval(@javax.annotation.Nonnull String interval) {
    this.interval = interval;
  }

  public ServerConfigLiveness timeout(@javax.annotation.Nonnull String timeout) {
    
    this.timeout = timeout;
    return this;
  }

  /**
   * Get timeout
   * @return timeout
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TIMEOUT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getTimeout() {
    return timeout;
  }


  @JsonProperty(JSON_PROPERTY_TIMEOUT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTimeout(@javax.annotation.Nonnull String timeout) {
    this.timeout = timeout;
  }

  public ServerConfigLiveness initialDelay(@javax.annotation.Nonnull String initialDelay) {
    
    this.initialDelay = initialDelay;
    return this;
  }

  /**
   * Get initialDelay
   * @return initialDelay
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_INITIAL_DELAY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getInitialDelay() {
    return initialDelay;
  }


  @JsonProperty(JSON_PROPERTY_INITIAL_DELAY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setInitialDelay(@javax.annotation.Nonnull String initialDelay) {
    this.initialDelay = initialDelay;
  }

  public ServerConfigLiveness heartbeatInterval(@javax.annotation.Nonnull String heartbeatInterval) {
    
    this.heartbeatInterval = heartbeatInterval;
    return this;
  }

  /**
   * Get heartbeatInterval
   * @return heartbeatInterval
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_HEARTBEAT_INTERVAL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getHeartbeatInterval() {
    return heartbeatInterval;
  }


  @JsonProperty(JSON_PROPERTY_HEARTBEAT_INTERVAL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setHeartbeatInterval(@javax.annotation.Nonnull String heartbeatInterval) {
    this.heartbeatInterval = heartbeatInterval;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServerConfigLiveness serverConfigLiveness = (ServerConfigLiveness) o;
    return Objects.equals(this.enabled, serverConfigLiveness.enabled) &&
        Objects.equals(this.interval, serverConfigLiveness.interval) &&
        Objects.equals(this.timeout, serverConfigLiveness.timeout) &&
        Objects.equals(this.initialDelay, serverConfigLiveness.initialDelay) &&
        Objects.equals(this.heartbeatInterval, serverConfigLiveness.heartbeatInterval);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enabled, interval, timeout, initialDelay, heartbeatInterval);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServerConfigLiveness {\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    interval: ").append(toIndentedString(interval)).append("\n");
    sb.append("    timeout: ").append(toIndentedString(timeout)).append("\n");
    sb.append("    initialDelay: ").append(toIndentedString(initialDelay)).append("\n");
    sb.append("    heartbeatInterval: ").append(toIndentedString(heartbeatInterval)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `enabled` to the URL query string
    if (getEnabled() != null) {
      try {
        joiner.add(String.format("%senabled%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getEnabled()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `interval` to the URL query string
    if (getInterval() != null) {
      try {
        joiner.add(String.format("%sinterval%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getInterval()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `timeout` to the URL query string
    if (getTimeout() != null) {
      try {
        joiner.add(String.format("%stimeout%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTimeout()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `initialDelay` to the URL query string
    if (getInitialDelay() != null) {
      try {
        joiner.add(String.format("%sinitialDelay%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getInitialDelay()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `heartbeatInterval` to the URL query string
    if (getHeartbeatInterval() != null) {
      try {
        joiner.add(String.format("%sheartbeatInterval%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getHeartbeatInterval()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

