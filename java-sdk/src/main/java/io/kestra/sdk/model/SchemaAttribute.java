/*
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kestra.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.kestra.sdk.model.SchemaAttributeMutability;
import io.kestra.sdk.model.SchemaAttributeReturned;
import io.kestra.sdk.model.SchemaAttributeType;
import io.kestra.sdk.model.SchemaAttributeUniqueness;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * SchemaAttribute
 */
@JsonPropertyOrder({
  SchemaAttribute.JSON_PROPERTY_ATTRIBUTES,
  SchemaAttribute.JSON_PROPERTY_URN,
  SchemaAttribute.JSON_PROPERTY_NAME,
  SchemaAttribute.JSON_PROPERTY_TYPE,
  SchemaAttribute.JSON_PROPERTY_SUB_ATTRIBUTES,
  SchemaAttribute.JSON_PROPERTY_MULTI_VALUED,
  SchemaAttribute.JSON_PROPERTY_DESCRIPTION,
  SchemaAttribute.JSON_PROPERTY_REQUIRED,
  SchemaAttribute.JSON_PROPERTY_CANONICAL_VALUES,
  SchemaAttribute.JSON_PROPERTY_CASE_EXACT,
  SchemaAttribute.JSON_PROPERTY_MUTABILITY,
  SchemaAttribute.JSON_PROPERTY_RETURNED,
  SchemaAttribute.JSON_PROPERTY_UNIQUENESS,
  SchemaAttribute.JSON_PROPERTY_REFERENCE_TYPES,
  SchemaAttribute.JSON_PROPERTY_ACCESSOR,
  SchemaAttribute.JSON_PROPERTY_SCIM_RESOURCE_ID_REFERENCE
})
@JsonTypeName("Schema.Attribute")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-05T13:38:05.347663356Z[Etc/UTC]", comments = "Generator version: 7.14.0-SNAPSHOT")
public class SchemaAttribute {
  public static final String JSON_PROPERTY_ATTRIBUTES = "attributes";
  @javax.annotation.Nullable
  private List<SchemaAttribute> attributes = new ArrayList<>();

  public static final String JSON_PROPERTY_URN = "urn";
  @javax.annotation.Nullable
  private String urn;

  public static final String JSON_PROPERTY_NAME = "name";
  @javax.annotation.Nullable
  private String name;

  public static final String JSON_PROPERTY_TYPE = "type";
  @javax.annotation.Nullable
  private SchemaAttributeType type;

  public static final String JSON_PROPERTY_SUB_ATTRIBUTES = "subAttributes";
  @javax.annotation.Nullable
  private List<SchemaAttribute> subAttributes = new ArrayList<>();

  public static final String JSON_PROPERTY_MULTI_VALUED = "multiValued";
  @javax.annotation.Nullable
  private Boolean multiValued;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  @javax.annotation.Nullable
  private String description;

  public static final String JSON_PROPERTY_REQUIRED = "required";
  @javax.annotation.Nullable
  private Boolean required;

  public static final String JSON_PROPERTY_CANONICAL_VALUES = "canonicalValues";
  @javax.annotation.Nullable
  private List<String> canonicalValues = new ArrayList<>();

  public static final String JSON_PROPERTY_CASE_EXACT = "caseExact";
  @javax.annotation.Nullable
  private Boolean caseExact;

  public static final String JSON_PROPERTY_MUTABILITY = "mutability";
  @javax.annotation.Nullable
  private SchemaAttributeMutability mutability;

  public static final String JSON_PROPERTY_RETURNED = "returned";
  @javax.annotation.Nullable
  private SchemaAttributeReturned returned;

  public static final String JSON_PROPERTY_UNIQUENESS = "uniqueness";
  @javax.annotation.Nullable
  private SchemaAttributeUniqueness uniqueness;

  public static final String JSON_PROPERTY_REFERENCE_TYPES = "referenceTypes";
  @javax.annotation.Nullable
  private List<String> referenceTypes = new ArrayList<>();

  public static final String JSON_PROPERTY_ACCESSOR = "accessor";
  @javax.annotation.Nullable
  private Object accessor;

  public static final String JSON_PROPERTY_SCIM_RESOURCE_ID_REFERENCE = "scimResourceIdReference";
  @javax.annotation.Nullable
  private Boolean scimResourceIdReference;

  public SchemaAttribute() {
  }

  public SchemaAttribute attributes(@javax.annotation.Nullable List<SchemaAttribute> attributes) {
    
    this.attributes = attributes;
    return this;
  }

  public SchemaAttribute addAttributesItem(SchemaAttribute attributesItem) {
    if (this.attributes == null) {
      this.attributes = new ArrayList<>();
    }
    this.attributes.add(attributesItem);
    return this;
  }

  /**
   * Get attributes
   * @return attributes
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ATTRIBUTES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<SchemaAttribute> getAttributes() {
    return attributes;
  }


  @JsonProperty(JSON_PROPERTY_ATTRIBUTES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAttributes(@javax.annotation.Nullable List<SchemaAttribute> attributes) {
    this.attributes = attributes;
  }

  public SchemaAttribute urn(@javax.annotation.Nullable String urn) {
    
    this.urn = urn;
    return this;
  }

  /**
   * Get urn
   * @return urn
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_URN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUrn() {
    return urn;
  }


  @JsonProperty(JSON_PROPERTY_URN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUrn(@javax.annotation.Nullable String urn) {
    this.urn = urn;
  }

  public SchemaAttribute name(@javax.annotation.Nullable String name) {
    
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }

  public SchemaAttribute type(@javax.annotation.Nullable SchemaAttributeType type) {
    
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SchemaAttributeType getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(@javax.annotation.Nullable SchemaAttributeType type) {
    this.type = type;
  }

  public SchemaAttribute subAttributes(@javax.annotation.Nullable List<SchemaAttribute> subAttributes) {
    
    this.subAttributes = subAttributes;
    return this;
  }

  public SchemaAttribute addSubAttributesItem(SchemaAttribute subAttributesItem) {
    if (this.subAttributes == null) {
      this.subAttributes = new ArrayList<>();
    }
    this.subAttributes.add(subAttributesItem);
    return this;
  }

  /**
   * Get subAttributes
   * @return subAttributes
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SUB_ATTRIBUTES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<SchemaAttribute> getSubAttributes() {
    return subAttributes;
  }


  @JsonProperty(JSON_PROPERTY_SUB_ATTRIBUTES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSubAttributes(@javax.annotation.Nullable List<SchemaAttribute> subAttributes) {
    this.subAttributes = subAttributes;
  }

  public SchemaAttribute multiValued(@javax.annotation.Nullable Boolean multiValued) {
    
    this.multiValued = multiValued;
    return this;
  }

  /**
   * Get multiValued
   * @return multiValued
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MULTI_VALUED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getMultiValued() {
    return multiValued;
  }


  @JsonProperty(JSON_PROPERTY_MULTI_VALUED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMultiValued(@javax.annotation.Nullable Boolean multiValued) {
    this.multiValued = multiValued;
  }

  public SchemaAttribute description(@javax.annotation.Nullable String description) {
    
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }

  public SchemaAttribute required(@javax.annotation.Nullable Boolean required) {
    
    this.required = required;
    return this;
  }

  /**
   * Get required
   * @return required
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REQUIRED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getRequired() {
    return required;
  }


  @JsonProperty(JSON_PROPERTY_REQUIRED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRequired(@javax.annotation.Nullable Boolean required) {
    this.required = required;
  }

  public SchemaAttribute canonicalValues(@javax.annotation.Nullable List<String> canonicalValues) {
    
    this.canonicalValues = canonicalValues;
    return this;
  }

  public SchemaAttribute addCanonicalValuesItem(String canonicalValuesItem) {
    if (this.canonicalValues == null) {
      this.canonicalValues = new ArrayList<>();
    }
    this.canonicalValues.add(canonicalValuesItem);
    return this;
  }

  /**
   * Get canonicalValues
   * @return canonicalValues
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CANONICAL_VALUES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getCanonicalValues() {
    return canonicalValues;
  }


  @JsonProperty(JSON_PROPERTY_CANONICAL_VALUES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCanonicalValues(@javax.annotation.Nullable List<String> canonicalValues) {
    this.canonicalValues = canonicalValues;
  }

  public SchemaAttribute caseExact(@javax.annotation.Nullable Boolean caseExact) {
    
    this.caseExact = caseExact;
    return this;
  }

  /**
   * Get caseExact
   * @return caseExact
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CASE_EXACT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getCaseExact() {
    return caseExact;
  }


  @JsonProperty(JSON_PROPERTY_CASE_EXACT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCaseExact(@javax.annotation.Nullable Boolean caseExact) {
    this.caseExact = caseExact;
  }

  public SchemaAttribute mutability(@javax.annotation.Nullable SchemaAttributeMutability mutability) {
    
    this.mutability = mutability;
    return this;
  }

  /**
   * Get mutability
   * @return mutability
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MUTABILITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SchemaAttributeMutability getMutability() {
    return mutability;
  }


  @JsonProperty(JSON_PROPERTY_MUTABILITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMutability(@javax.annotation.Nullable SchemaAttributeMutability mutability) {
    this.mutability = mutability;
  }

  public SchemaAttribute returned(@javax.annotation.Nullable SchemaAttributeReturned returned) {
    
    this.returned = returned;
    return this;
  }

  /**
   * Get returned
   * @return returned
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RETURNED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SchemaAttributeReturned getReturned() {
    return returned;
  }


  @JsonProperty(JSON_PROPERTY_RETURNED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setReturned(@javax.annotation.Nullable SchemaAttributeReturned returned) {
    this.returned = returned;
  }

  public SchemaAttribute uniqueness(@javax.annotation.Nullable SchemaAttributeUniqueness uniqueness) {
    
    this.uniqueness = uniqueness;
    return this;
  }

  /**
   * Get uniqueness
   * @return uniqueness
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_UNIQUENESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SchemaAttributeUniqueness getUniqueness() {
    return uniqueness;
  }


  @JsonProperty(JSON_PROPERTY_UNIQUENESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUniqueness(@javax.annotation.Nullable SchemaAttributeUniqueness uniqueness) {
    this.uniqueness = uniqueness;
  }

  public SchemaAttribute referenceTypes(@javax.annotation.Nullable List<String> referenceTypes) {
    
    this.referenceTypes = referenceTypes;
    return this;
  }

  public SchemaAttribute addReferenceTypesItem(String referenceTypesItem) {
    if (this.referenceTypes == null) {
      this.referenceTypes = new ArrayList<>();
    }
    this.referenceTypes.add(referenceTypesItem);
    return this;
  }

  /**
   * Get referenceTypes
   * @return referenceTypes
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REFERENCE_TYPES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getReferenceTypes() {
    return referenceTypes;
  }


  @JsonProperty(JSON_PROPERTY_REFERENCE_TYPES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setReferenceTypes(@javax.annotation.Nullable List<String> referenceTypes) {
    this.referenceTypes = referenceTypes;
  }

  public SchemaAttribute accessor(@javax.annotation.Nullable Object accessor) {
    
    this.accessor = accessor;
    return this;
  }

  /**
   * Get accessor
   * @return accessor
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ACCESSOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Object getAccessor() {
    return accessor;
  }


  @JsonProperty(JSON_PROPERTY_ACCESSOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAccessor(@javax.annotation.Nullable Object accessor) {
    this.accessor = accessor;
  }

  public SchemaAttribute scimResourceIdReference(@javax.annotation.Nullable Boolean scimResourceIdReference) {
    
    this.scimResourceIdReference = scimResourceIdReference;
    return this;
  }

  /**
   * Get scimResourceIdReference
   * @return scimResourceIdReference
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SCIM_RESOURCE_ID_REFERENCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getScimResourceIdReference() {
    return scimResourceIdReference;
  }


  @JsonProperty(JSON_PROPERTY_SCIM_RESOURCE_ID_REFERENCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setScimResourceIdReference(@javax.annotation.Nullable Boolean scimResourceIdReference) {
    this.scimResourceIdReference = scimResourceIdReference;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SchemaAttribute schemaAttribute = (SchemaAttribute) o;
    return Objects.equals(this.attributes, schemaAttribute.attributes) &&
        Objects.equals(this.urn, schemaAttribute.urn) &&
        Objects.equals(this.name, schemaAttribute.name) &&
        Objects.equals(this.type, schemaAttribute.type) &&
        Objects.equals(this.subAttributes, schemaAttribute.subAttributes) &&
        Objects.equals(this.multiValued, schemaAttribute.multiValued) &&
        Objects.equals(this.description, schemaAttribute.description) &&
        Objects.equals(this.required, schemaAttribute.required) &&
        Objects.equals(this.canonicalValues, schemaAttribute.canonicalValues) &&
        Objects.equals(this.caseExact, schemaAttribute.caseExact) &&
        Objects.equals(this.mutability, schemaAttribute.mutability) &&
        Objects.equals(this.returned, schemaAttribute.returned) &&
        Objects.equals(this.uniqueness, schemaAttribute.uniqueness) &&
        Objects.equals(this.referenceTypes, schemaAttribute.referenceTypes) &&
        Objects.equals(this.accessor, schemaAttribute.accessor) &&
        Objects.equals(this.scimResourceIdReference, schemaAttribute.scimResourceIdReference);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attributes, urn, name, type, subAttributes, multiValued, description, required, canonicalValues, caseExact, mutability, returned, uniqueness, referenceTypes, accessor, scimResourceIdReference);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SchemaAttribute {\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    urn: ").append(toIndentedString(urn)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    subAttributes: ").append(toIndentedString(subAttributes)).append("\n");
    sb.append("    multiValued: ").append(toIndentedString(multiValued)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    required: ").append(toIndentedString(required)).append("\n");
    sb.append("    canonicalValues: ").append(toIndentedString(canonicalValues)).append("\n");
    sb.append("    caseExact: ").append(toIndentedString(caseExact)).append("\n");
    sb.append("    mutability: ").append(toIndentedString(mutability)).append("\n");
    sb.append("    returned: ").append(toIndentedString(returned)).append("\n");
    sb.append("    uniqueness: ").append(toIndentedString(uniqueness)).append("\n");
    sb.append("    referenceTypes: ").append(toIndentedString(referenceTypes)).append("\n");
    sb.append("    accessor: ").append(toIndentedString(accessor)).append("\n");
    sb.append("    scimResourceIdReference: ").append(toIndentedString(scimResourceIdReference)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `attributes` to the URL query string
    if (getAttributes() != null) {
      for (int i = 0; i < getAttributes().size(); i++) {
        if (getAttributes().get(i) != null) {
          joiner.add(getAttributes().get(i).toUrlQueryString(String.format("%sattributes%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `urn` to the URL query string
    if (getUrn() != null) {
      try {
        joiner.add(String.format("%surn%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUrn()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `name` to the URL query string
    if (getName() != null) {
      try {
        joiner.add(String.format("%sname%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getName()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `type` to the URL query string
    if (getType() != null) {
      try {
        joiner.add(String.format("%stype%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getType()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `subAttributes` to the URL query string
    if (getSubAttributes() != null) {
      for (int i = 0; i < getSubAttributes().size(); i++) {
        if (getSubAttributes().get(i) != null) {
          joiner.add(getSubAttributes().get(i).toUrlQueryString(String.format("%ssubAttributes%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `multiValued` to the URL query string
    if (getMultiValued() != null) {
      try {
        joiner.add(String.format("%smultiValued%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getMultiValued()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `description` to the URL query string
    if (getDescription() != null) {
      try {
        joiner.add(String.format("%sdescription%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDescription()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `required` to the URL query string
    if (getRequired() != null) {
      try {
        joiner.add(String.format("%srequired%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getRequired()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `canonicalValues` to the URL query string
    if (getCanonicalValues() != null) {
      for (int i = 0; i < getCanonicalValues().size(); i++) {
        try {
          joiner.add(String.format("%scanonicalValues%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(String.valueOf(getCanonicalValues().get(i)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    // add `caseExact` to the URL query string
    if (getCaseExact() != null) {
      try {
        joiner.add(String.format("%scaseExact%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCaseExact()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `mutability` to the URL query string
    if (getMutability() != null) {
      try {
        joiner.add(String.format("%smutability%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getMutability()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `returned` to the URL query string
    if (getReturned() != null) {
      try {
        joiner.add(String.format("%sreturned%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getReturned()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `uniqueness` to the URL query string
    if (getUniqueness() != null) {
      try {
        joiner.add(String.format("%suniqueness%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUniqueness()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `referenceTypes` to the URL query string
    if (getReferenceTypes() != null) {
      for (int i = 0; i < getReferenceTypes().size(); i++) {
        try {
          joiner.add(String.format("%sreferenceTypes%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(String.valueOf(getReferenceTypes().get(i)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    // add `accessor` to the URL query string
    if (getAccessor() != null) {
      try {
        joiner.add(String.format("%saccessor%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getAccessor()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `scimResourceIdReference` to the URL query string
    if (getScimResourceIdReference() != null) {
      try {
        joiner.add(String.format("%sscimResourceIdReference%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getScimResourceIdReference()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

