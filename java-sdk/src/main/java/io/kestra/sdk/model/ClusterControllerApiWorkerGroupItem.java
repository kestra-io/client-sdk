/*
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kestra.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * ApiWorkerGroup.
 */
@JsonPropertyOrder({
  ClusterControllerApiWorkerGroupItem.JSON_PROPERTY_ID,
  ClusterControllerApiWorkerGroupItem.JSON_PROPERTY_KEY,
  ClusterControllerApiWorkerGroupItem.JSON_PROPERTY_DESCRIPTION,
  ClusterControllerApiWorkerGroupItem.JSON_PROPERTY_ACTIVE_WORKERS
})
@JsonTypeName("ClusterController.ApiWorkerGroupItem")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-28T12:07:17.548591265Z[Etc/UTC]", comments = "Generator version: 7.14.0-SNAPSHOT")
public class ClusterControllerApiWorkerGroupItem {
  public static final String JSON_PROPERTY_ID = "id";
  @javax.annotation.Nonnull
  private String id;

  public static final String JSON_PROPERTY_KEY = "key";
  @javax.annotation.Nonnull
  private String key;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  @javax.annotation.Nonnull
  private String description;

  public static final String JSON_PROPERTY_ACTIVE_WORKERS = "activeWorkers";
  @javax.annotation.Nonnull
  private Integer activeWorkers;

  public ClusterControllerApiWorkerGroupItem() {
  }

  public ClusterControllerApiWorkerGroupItem id(@javax.annotation.Nonnull String id) {
    
    this.id = id;
    return this;
  }

  /**
   * The ID of worker group.
   * @return id
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(@javax.annotation.Nonnull String id) {
    this.id = id;
  }

  public ClusterControllerApiWorkerGroupItem key(@javax.annotation.Nonnull String key) {
    
    this.key = key;
    return this;
  }

  /**
   * The key of the worker group.
   * @return key
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_KEY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getKey() {
    return key;
  }


  @JsonProperty(JSON_PROPERTY_KEY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setKey(@javax.annotation.Nonnull String key) {
    this.key = key;
  }

  public ClusterControllerApiWorkerGroupItem description(@javax.annotation.Nonnull String description) {
    
    this.description = description;
    return this;
  }

  /**
   * The description of the worker group.
   * @return description
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDescription(@javax.annotation.Nonnull String description) {
    this.description = description;
  }

  public ClusterControllerApiWorkerGroupItem activeWorkers(@javax.annotation.Nonnull Integer activeWorkers) {
    
    this.activeWorkers = activeWorkers;
    return this;
  }

  /**
   * The number of active workers for the group.
   * @return activeWorkers
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ACTIVE_WORKERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getActiveWorkers() {
    return activeWorkers;
  }


  @JsonProperty(JSON_PROPERTY_ACTIVE_WORKERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setActiveWorkers(@javax.annotation.Nonnull Integer activeWorkers) {
    this.activeWorkers = activeWorkers;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClusterControllerApiWorkerGroupItem clusterControllerApiWorkerGroupItem = (ClusterControllerApiWorkerGroupItem) o;
    return Objects.equals(this.id, clusterControllerApiWorkerGroupItem.id) &&
        Objects.equals(this.key, clusterControllerApiWorkerGroupItem.key) &&
        Objects.equals(this.description, clusterControllerApiWorkerGroupItem.description) &&
        Objects.equals(this.activeWorkers, clusterControllerApiWorkerGroupItem.activeWorkers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, key, description, activeWorkers);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClusterControllerApiWorkerGroupItem {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    activeWorkers: ").append(toIndentedString(activeWorkers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `id` to the URL query string
    if (getId() != null) {
      try {
        joiner.add(String.format("%sid%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `key` to the URL query string
    if (getKey() != null) {
      try {
        joiner.add(String.format("%skey%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getKey()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `description` to the URL query string
    if (getDescription() != null) {
      try {
        joiner.add(String.format("%sdescription%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDescription()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `activeWorkers` to the URL query string
    if (getActiveWorkers() != null) {
      try {
        joiner.add(String.format("%sactiveWorkers%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getActiveWorkers()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

