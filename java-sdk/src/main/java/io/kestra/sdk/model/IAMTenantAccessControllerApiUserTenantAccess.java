/*
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kestra.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.kestra.sdk.model.IAMTenantAccessControllerApiAuthentication;
import io.kestra.sdk.model.IAMTenantAccessControllerApiGroup;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * IAMTenantAccessControllerApiUserTenantAccess
 */
@JsonPropertyOrder({
  IAMTenantAccessControllerApiUserTenantAccess.JSON_PROPERTY_ID,
  IAMTenantAccessControllerApiUserTenantAccess.JSON_PROPERTY_USERNAME,
  IAMTenantAccessControllerApiUserTenantAccess.JSON_PROPERTY_DISPLAY_NAME,
  IAMTenantAccessControllerApiUserTenantAccess.JSON_PROPERTY_DESCRIPTION,
  IAMTenantAccessControllerApiUserTenantAccess.JSON_PROPERTY_GROUPS,
  IAMTenantAccessControllerApiUserTenantAccess.JSON_PROPERTY_AUTHS
})
@JsonTypeName("IAMTenantAccessController.ApiUserTenantAccess")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-05T13:38:05.347663356Z[Etc/UTC]", comments = "Generator version: 7.14.0-SNAPSHOT")
public class IAMTenantAccessControllerApiUserTenantAccess {
  public static final String JSON_PROPERTY_ID = "id";
  @javax.annotation.Nullable
  private String id;

  public static final String JSON_PROPERTY_USERNAME = "username";
  @javax.annotation.Nullable
  private String username;

  public static final String JSON_PROPERTY_DISPLAY_NAME = "displayName";
  @javax.annotation.Nullable
  private String displayName;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  @javax.annotation.Nullable
  private String description;

  public static final String JSON_PROPERTY_GROUPS = "groups";
  @javax.annotation.Nullable
  private List<IAMTenantAccessControllerApiGroup> groups = new ArrayList<>();

  public static final String JSON_PROPERTY_AUTHS = "auths";
  @javax.annotation.Nullable
  private List<IAMTenantAccessControllerApiAuthentication> auths = new ArrayList<>();

  public IAMTenantAccessControllerApiUserTenantAccess() {
  }

  public IAMTenantAccessControllerApiUserTenantAccess id(@javax.annotation.Nullable String id) {
    
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(@javax.annotation.Nullable String id) {
    this.id = id;
  }

  public IAMTenantAccessControllerApiUserTenantAccess username(@javax.annotation.Nullable String username) {
    
    this.username = username;
    return this;
  }

  /**
   * Get username
   * @return username
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USERNAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUsername() {
    return username;
  }


  @JsonProperty(JSON_PROPERTY_USERNAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUsername(@javax.annotation.Nullable String username) {
    this.username = username;
  }

  public IAMTenantAccessControllerApiUserTenantAccess displayName(@javax.annotation.Nullable String displayName) {
    
    this.displayName = displayName;
    return this;
  }

  /**
   * Get displayName
   * @return displayName
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DISPLAY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDisplayName() {
    return displayName;
  }


  @JsonProperty(JSON_PROPERTY_DISPLAY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDisplayName(@javax.annotation.Nullable String displayName) {
    this.displayName = displayName;
  }

  public IAMTenantAccessControllerApiUserTenantAccess description(@javax.annotation.Nullable String description) {
    
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }

  public IAMTenantAccessControllerApiUserTenantAccess groups(@javax.annotation.Nullable List<IAMTenantAccessControllerApiGroup> groups) {
    
    this.groups = groups;
    return this;
  }

  public IAMTenantAccessControllerApiUserTenantAccess addGroupsItem(IAMTenantAccessControllerApiGroup groupsItem) {
    if (this.groups == null) {
      this.groups = new ArrayList<>();
    }
    this.groups.add(groupsItem);
    return this;
  }

  /**
   * Get groups
   * @return groups
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_GROUPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<IAMTenantAccessControllerApiGroup> getGroups() {
    return groups;
  }


  @JsonProperty(JSON_PROPERTY_GROUPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGroups(@javax.annotation.Nullable List<IAMTenantAccessControllerApiGroup> groups) {
    this.groups = groups;
  }

  public IAMTenantAccessControllerApiUserTenantAccess auths(@javax.annotation.Nullable List<IAMTenantAccessControllerApiAuthentication> auths) {
    
    this.auths = auths;
    return this;
  }

  public IAMTenantAccessControllerApiUserTenantAccess addAuthsItem(IAMTenantAccessControllerApiAuthentication authsItem) {
    if (this.auths == null) {
      this.auths = new ArrayList<>();
    }
    this.auths.add(authsItem);
    return this;
  }

  /**
   * Get auths
   * @return auths
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AUTHS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<IAMTenantAccessControllerApiAuthentication> getAuths() {
    return auths;
  }


  @JsonProperty(JSON_PROPERTY_AUTHS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAuths(@javax.annotation.Nullable List<IAMTenantAccessControllerApiAuthentication> auths) {
    this.auths = auths;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IAMTenantAccessControllerApiUserTenantAccess iaMTenantAccessControllerApiUserTenantAccess = (IAMTenantAccessControllerApiUserTenantAccess) o;
    return Objects.equals(this.id, iaMTenantAccessControllerApiUserTenantAccess.id) &&
        Objects.equals(this.username, iaMTenantAccessControllerApiUserTenantAccess.username) &&
        Objects.equals(this.displayName, iaMTenantAccessControllerApiUserTenantAccess.displayName) &&
        Objects.equals(this.description, iaMTenantAccessControllerApiUserTenantAccess.description) &&
        Objects.equals(this.groups, iaMTenantAccessControllerApiUserTenantAccess.groups) &&
        Objects.equals(this.auths, iaMTenantAccessControllerApiUserTenantAccess.auths);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, username, displayName, description, groups, auths);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IAMTenantAccessControllerApiUserTenantAccess {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    groups: ").append(toIndentedString(groups)).append("\n");
    sb.append("    auths: ").append(toIndentedString(auths)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `id` to the URL query string
    if (getId() != null) {
      try {
        joiner.add(String.format("%sid%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `username` to the URL query string
    if (getUsername() != null) {
      try {
        joiner.add(String.format("%susername%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUsername()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `displayName` to the URL query string
    if (getDisplayName() != null) {
      try {
        joiner.add(String.format("%sdisplayName%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDisplayName()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `description` to the URL query string
    if (getDescription() != null) {
      try {
        joiner.add(String.format("%sdescription%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDescription()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `groups` to the URL query string
    if (getGroups() != null) {
      for (int i = 0; i < getGroups().size(); i++) {
        if (getGroups().get(i) != null) {
          joiner.add(getGroups().get(i).toUrlQueryString(String.format("%sgroups%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `auths` to the URL query string
    if (getAuths() != null) {
      for (int i = 0; i < getAuths().size(); i++) {
        if (getAuths().get(i) != null) {
          joiner.add(getAuths().get(i).toUrlQueryString(String.format("%sauths%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    return joiner.toString();
  }

}

