/*
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kestra.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.io.File;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * UploadVersionedPluginsRequest
 */
@JsonPropertyOrder({
  UploadVersionedPluginsRequest.JSON_PROPERTY_FILE,
  UploadVersionedPluginsRequest.JSON_PROPERTY_FORCE_INSTALL_ON_EXISTING_VERSIONS
})
@JsonTypeName("uploadVersionedPlugins_request")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.16.0")
public class UploadVersionedPluginsRequest {
  public static final String JSON_PROPERTY_FILE = "file";
  @javax.annotation.Nonnull  private File _file;

  public static final String JSON_PROPERTY_FORCE_INSTALL_ON_EXISTING_VERSIONS = "forceInstallOnExistingVersions";
  @javax.annotation.Nullable  private JsonNullable<Boolean> forceInstallOnExistingVersions = JsonNullable.<Boolean>undefined();

  public UploadVersionedPluginsRequest() {
  }

  public UploadVersionedPluginsRequest _file(@javax.annotation.Nonnull File _file) {
    
    this._file = _file;
    return this;
  }

  /**
   * Get _file
   * @return _file
   */
  @javax.annotation.Nonnull  @JsonProperty(JSON_PROPERTY_FILE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public File getFile() {
    return _file;
  }


  @JsonProperty(JSON_PROPERTY_FILE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFile(@javax.annotation.Nonnull File _file) {
    this._file = _file;
  }

  public UploadVersionedPluginsRequest forceInstallOnExistingVersions(@javax.annotation.Nullable Boolean forceInstallOnExistingVersions) {
    this.forceInstallOnExistingVersions = JsonNullable.<Boolean>of(forceInstallOnExistingVersions);
    
    return this;
  }

  /**
   * Get forceInstallOnExistingVersions
   * @return forceInstallOnExistingVersions
   */
  @javax.annotation.Nullable  @JsonIgnore

  public Boolean getForceInstallOnExistingVersions() {
        return forceInstallOnExistingVersions.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_FORCE_INSTALL_ON_EXISTING_VERSIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public JsonNullable<Boolean> getForceInstallOnExistingVersions_JsonNullable() {
    return forceInstallOnExistingVersions;
  }
  
  @JsonProperty(JSON_PROPERTY_FORCE_INSTALL_ON_EXISTING_VERSIONS)
  public void setForceInstallOnExistingVersions_JsonNullable(JsonNullable<Boolean> forceInstallOnExistingVersions) {
    this.forceInstallOnExistingVersions = forceInstallOnExistingVersions;
  }

  public void setForceInstallOnExistingVersions(@javax.annotation.Nullable Boolean forceInstallOnExistingVersions) {
    this.forceInstallOnExistingVersions = JsonNullable.<Boolean>of(forceInstallOnExistingVersions);
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UploadVersionedPluginsRequest uploadVersionedPluginsRequest = (UploadVersionedPluginsRequest) o;
    return Objects.equals(this._file, uploadVersionedPluginsRequest._file) &&
        equalsNullable(this.forceInstallOnExistingVersions, uploadVersionedPluginsRequest.forceInstallOnExistingVersions);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(_file, hashCodeNullable(forceInstallOnExistingVersions));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UploadVersionedPluginsRequest {\n");
    sb.append("    _file: ").append(toIndentedString(_file)).append("\n");
    sb.append("    forceInstallOnExistingVersions: ").append(toIndentedString(forceInstallOnExistingVersions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

