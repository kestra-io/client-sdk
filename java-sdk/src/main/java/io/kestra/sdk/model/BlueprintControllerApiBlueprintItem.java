/*
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kestra.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * BlueprintControllerApiBlueprintItem
 */
@JsonPropertyOrder({
  BlueprintControllerApiBlueprintItem.JSON_PROPERTY_ID,
  BlueprintControllerApiBlueprintItem.JSON_PROPERTY_TITLE,
  BlueprintControllerApiBlueprintItem.JSON_PROPERTY_DESCRIPTION,
  BlueprintControllerApiBlueprintItem.JSON_PROPERTY_INCLUDED_TASKS,
  BlueprintControllerApiBlueprintItem.JSON_PROPERTY_TAGS,
  BlueprintControllerApiBlueprintItem.JSON_PROPERTY_PUBLISHED_AT
})
@JsonTypeName("BlueprintController.ApiBlueprintItem")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.14.0-SNAPSHOT")
public class BlueprintControllerApiBlueprintItem {
  public static final String JSON_PROPERTY_ID = "id";
  @javax.annotation.Nonnull
  private String id;

  public static final String JSON_PROPERTY_TITLE = "title";
  @javax.annotation.Nonnull
  private String title;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  @javax.annotation.Nonnull
  private String description;

  public static final String JSON_PROPERTY_INCLUDED_TASKS = "includedTasks";
  @javax.annotation.Nonnull
  private List<String> includedTasks = new ArrayList<>();

  public static final String JSON_PROPERTY_TAGS = "tags";
  @javax.annotation.Nonnull
  private List<String> tags = new ArrayList<>();

  public static final String JSON_PROPERTY_PUBLISHED_AT = "publishedAt";
  @javax.annotation.Nonnull
  private OffsetDateTime publishedAt;

  public BlueprintControllerApiBlueprintItem() {
  }

  public BlueprintControllerApiBlueprintItem id(@javax.annotation.Nonnull String id) {
    
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(@javax.annotation.Nonnull String id) {
    this.id = id;
  }

  public BlueprintControllerApiBlueprintItem title(@javax.annotation.Nonnull String title) {
    
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TITLE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getTitle() {
    return title;
  }


  @JsonProperty(JSON_PROPERTY_TITLE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTitle(@javax.annotation.Nonnull String title) {
    this.title = title;
  }

  public BlueprintControllerApiBlueprintItem description(@javax.annotation.Nonnull String description) {
    
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDescription(@javax.annotation.Nonnull String description) {
    this.description = description;
  }

  public BlueprintControllerApiBlueprintItem includedTasks(@javax.annotation.Nonnull List<String> includedTasks) {
    
    this.includedTasks = includedTasks;
    return this;
  }

  public BlueprintControllerApiBlueprintItem addIncludedTasksItem(String includedTasksItem) {
    if (this.includedTasks == null) {
      this.includedTasks = new ArrayList<>();
    }
    this.includedTasks.add(includedTasksItem);
    return this;
  }

  /**
   * Get includedTasks
   * @return includedTasks
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_INCLUDED_TASKS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<String> getIncludedTasks() {
    return includedTasks;
  }


  @JsonProperty(JSON_PROPERTY_INCLUDED_TASKS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIncludedTasks(@javax.annotation.Nonnull List<String> includedTasks) {
    this.includedTasks = includedTasks;
  }

  public BlueprintControllerApiBlueprintItem tags(@javax.annotation.Nonnull List<String> tags) {
    
    this.tags = tags;
    return this;
  }

  public BlueprintControllerApiBlueprintItem addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TAGS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<String> getTags() {
    return tags;
  }


  @JsonProperty(JSON_PROPERTY_TAGS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTags(@javax.annotation.Nonnull List<String> tags) {
    this.tags = tags;
  }

  public BlueprintControllerApiBlueprintItem publishedAt(@javax.annotation.Nonnull OffsetDateTime publishedAt) {
    
    this.publishedAt = publishedAt;
    return this;
  }

  /**
   * Get publishedAt
   * @return publishedAt
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PUBLISHED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public OffsetDateTime getPublishedAt() {
    return publishedAt;
  }


  @JsonProperty(JSON_PROPERTY_PUBLISHED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPublishedAt(@javax.annotation.Nonnull OffsetDateTime publishedAt) {
    this.publishedAt = publishedAt;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BlueprintControllerApiBlueprintItem blueprintControllerApiBlueprintItem = (BlueprintControllerApiBlueprintItem) o;
    return Objects.equals(this.id, blueprintControllerApiBlueprintItem.id) &&
        Objects.equals(this.title, blueprintControllerApiBlueprintItem.title) &&
        Objects.equals(this.description, blueprintControllerApiBlueprintItem.description) &&
        Objects.equals(this.includedTasks, blueprintControllerApiBlueprintItem.includedTasks) &&
        Objects.equals(this.tags, blueprintControllerApiBlueprintItem.tags) &&
        Objects.equals(this.publishedAt, blueprintControllerApiBlueprintItem.publishedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, title, description, includedTasks, tags, publishedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BlueprintControllerApiBlueprintItem {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    includedTasks: ").append(toIndentedString(includedTasks)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    publishedAt: ").append(toIndentedString(publishedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

