/*
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kestra.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Locale;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * SetupConfiguration
 */
@JsonPropertyOrder({
  SetupConfiguration.JSON_PROPERTY_DONE,
  SetupConfiguration.JSON_PROPERTY_REPOSITORY_TYPE,
  SetupConfiguration.JSON_PROPERTY_QUEUE_TYPE,
  SetupConfiguration.JSON_PROPERTY_STORAGE_TYPE,
  SetupConfiguration.JSON_PROPERTY_SECRET_TYPE,
  SetupConfiguration.JSON_PROPERTY_PASSWORD_REGEXP,
  SetupConfiguration.JSON_PROPERTY_HAVE_AUTH_NOT_BASIC
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.16.0")
public class SetupConfiguration {
  public static final String JSON_PROPERTY_DONE = "done";
  @javax.annotation.Nullable
  private Boolean done;

  public static final String JSON_PROPERTY_REPOSITORY_TYPE = "repositoryType";
  @javax.annotation.Nullable
  private String repositoryType;

  public static final String JSON_PROPERTY_QUEUE_TYPE = "queueType";
  @javax.annotation.Nullable
  private String queueType;

  public static final String JSON_PROPERTY_STORAGE_TYPE = "storageType";
  @javax.annotation.Nullable
  private String storageType;

  public static final String JSON_PROPERTY_SECRET_TYPE = "secretType";
  @javax.annotation.Nullable
  private String secretType;

  public static final String JSON_PROPERTY_PASSWORD_REGEXP = "passwordRegexp";
  @javax.annotation.Nullable
  private String passwordRegexp;

  public static final String JSON_PROPERTY_HAVE_AUTH_NOT_BASIC = "haveAuthNotBasic";
  @javax.annotation.Nullable
  private Boolean haveAuthNotBasic;

  public SetupConfiguration() {
  }

  public SetupConfiguration done(@javax.annotation.Nullable Boolean done) {
    
    this.done = done;
    return this;
  }

  /**
   * Get done
   * @return done
   */
  @javax.annotation.Nullable
  @JsonProperty(value = JSON_PROPERTY_DONE, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getDone() {
    return done;
  }


  @JsonProperty(value = JSON_PROPERTY_DONE, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDone(@javax.annotation.Nullable Boolean done) {
    this.done = done;
  }

  public SetupConfiguration repositoryType(@javax.annotation.Nullable String repositoryType) {
    
    this.repositoryType = repositoryType;
    return this;
  }

  /**
   * Get repositoryType
   * @return repositoryType
   */
  @javax.annotation.Nullable
  @JsonProperty(value = JSON_PROPERTY_REPOSITORY_TYPE, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getRepositoryType() {
    return repositoryType;
  }


  @JsonProperty(value = JSON_PROPERTY_REPOSITORY_TYPE, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRepositoryType(@javax.annotation.Nullable String repositoryType) {
    this.repositoryType = repositoryType;
  }

  public SetupConfiguration queueType(@javax.annotation.Nullable String queueType) {
    
    this.queueType = queueType;
    return this;
  }

  /**
   * Get queueType
   * @return queueType
   */
  @javax.annotation.Nullable
  @JsonProperty(value = JSON_PROPERTY_QUEUE_TYPE, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getQueueType() {
    return queueType;
  }


  @JsonProperty(value = JSON_PROPERTY_QUEUE_TYPE, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setQueueType(@javax.annotation.Nullable String queueType) {
    this.queueType = queueType;
  }

  public SetupConfiguration storageType(@javax.annotation.Nullable String storageType) {
    
    this.storageType = storageType;
    return this;
  }

  /**
   * Get storageType
   * @return storageType
   */
  @javax.annotation.Nullable
  @JsonProperty(value = JSON_PROPERTY_STORAGE_TYPE, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getStorageType() {
    return storageType;
  }


  @JsonProperty(value = JSON_PROPERTY_STORAGE_TYPE, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStorageType(@javax.annotation.Nullable String storageType) {
    this.storageType = storageType;
  }

  public SetupConfiguration secretType(@javax.annotation.Nullable String secretType) {
    
    this.secretType = secretType;
    return this;
  }

  /**
   * Get secretType
   * @return secretType
   */
  @javax.annotation.Nullable
  @JsonProperty(value = JSON_PROPERTY_SECRET_TYPE, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSecretType() {
    return secretType;
  }


  @JsonProperty(value = JSON_PROPERTY_SECRET_TYPE, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSecretType(@javax.annotation.Nullable String secretType) {
    this.secretType = secretType;
  }

  public SetupConfiguration passwordRegexp(@javax.annotation.Nullable String passwordRegexp) {
    
    this.passwordRegexp = passwordRegexp;
    return this;
  }

  /**
   * Get passwordRegexp
   * @return passwordRegexp
   */
  @javax.annotation.Nullable
  @JsonProperty(value = JSON_PROPERTY_PASSWORD_REGEXP, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPasswordRegexp() {
    return passwordRegexp;
  }


  @JsonProperty(value = JSON_PROPERTY_PASSWORD_REGEXP, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPasswordRegexp(@javax.annotation.Nullable String passwordRegexp) {
    this.passwordRegexp = passwordRegexp;
  }

  public SetupConfiguration haveAuthNotBasic(@javax.annotation.Nullable Boolean haveAuthNotBasic) {
    
    this.haveAuthNotBasic = haveAuthNotBasic;
    return this;
  }

  /**
   * Get haveAuthNotBasic
   * @return haveAuthNotBasic
   */
  @javax.annotation.Nullable
  @JsonProperty(value = JSON_PROPERTY_HAVE_AUTH_NOT_BASIC, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getHaveAuthNotBasic() {
    return haveAuthNotBasic;
  }


  @JsonProperty(value = JSON_PROPERTY_HAVE_AUTH_NOT_BASIC, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHaveAuthNotBasic(@javax.annotation.Nullable Boolean haveAuthNotBasic) {
    this.haveAuthNotBasic = haveAuthNotBasic;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SetupConfiguration setupConfiguration = (SetupConfiguration) o;
    return Objects.equals(this.done, setupConfiguration.done) &&
        Objects.equals(this.repositoryType, setupConfiguration.repositoryType) &&
        Objects.equals(this.queueType, setupConfiguration.queueType) &&
        Objects.equals(this.storageType, setupConfiguration.storageType) &&
        Objects.equals(this.secretType, setupConfiguration.secretType) &&
        Objects.equals(this.passwordRegexp, setupConfiguration.passwordRegexp) &&
        Objects.equals(this.haveAuthNotBasic, setupConfiguration.haveAuthNotBasic);
  }

  @Override
  public int hashCode() {
    return Objects.hash(done, repositoryType, queueType, storageType, secretType, passwordRegexp, haveAuthNotBasic);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SetupConfiguration {\n");
    sb.append("    done: ").append(toIndentedString(done)).append("\n");
    sb.append("    repositoryType: ").append(toIndentedString(repositoryType)).append("\n");
    sb.append("    queueType: ").append(toIndentedString(queueType)).append("\n");
    sb.append("    storageType: ").append(toIndentedString(storageType)).append("\n");
    sb.append("    secretType: ").append(toIndentedString(secretType)).append("\n");
    sb.append("    passwordRegexp: ").append(toIndentedString(passwordRegexp)).append("\n");
    sb.append("    haveAuthNotBasic: ").append(toIndentedString(haveAuthNotBasic)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

