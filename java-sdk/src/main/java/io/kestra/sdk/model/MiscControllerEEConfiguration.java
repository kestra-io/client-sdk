/*
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kestra.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.kestra.sdk.model.Banner;
import io.kestra.sdk.model.CustomLink;
import io.kestra.sdk.model.MiscControllerEnvironment;
import io.kestra.sdk.model.MiscControllerPluginIdAndVersion;
import io.kestra.sdk.model.MiscControllerPreview;
import io.kestra.sdk.model.MiscControllerTenantConfigurationInfo;
import io.kestra.sdk.model.QueryFilterResourceField;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * MiscControllerEEConfiguration
 */
@JsonPropertyOrder({
  MiscControllerEEConfiguration.JSON_PROPERTY_UUID,
  MiscControllerEEConfiguration.JSON_PROPERTY_VERSION,
  MiscControllerEEConfiguration.JSON_PROPERTY_COMMIT_ID,
  MiscControllerEEConfiguration.JSON_PROPERTY_COMMIT_DATE,
  MiscControllerEEConfiguration.JSON_PROPERTY_IS_CUSTOM_DASHBOARDS_ENABLED,
  MiscControllerEEConfiguration.JSON_PROPERTY_IS_TASK_RUN_ENABLED,
  MiscControllerEEConfiguration.JSON_PROPERTY_IS_ANONYMOUS_USAGE_ENABLED,
  MiscControllerEEConfiguration.JSON_PROPERTY_IS_TEMPLATE_ENABLED,
  MiscControllerEEConfiguration.JSON_PROPERTY_ENVIRONMENT,
  MiscControllerEEConfiguration.JSON_PROPERTY_URL,
  MiscControllerEEConfiguration.JSON_PROPERTY_PREVIEW,
  MiscControllerEEConfiguration.JSON_PROPERTY_SYSTEM_NAMESPACE,
  MiscControllerEEConfiguration.JSON_PROPERTY_HIDDEN_LABELS_PREFIXES,
  MiscControllerEEConfiguration.JSON_PROPERTY_RESOURCE_TO_FILTERS,
  MiscControllerEEConfiguration.JSON_PROPERTY_IS_AI_ENABLED,
  MiscControllerEEConfiguration.JSON_PROPERTY_IS_BASIC_AUTH_INITIALIZED,
  MiscControllerEEConfiguration.JSON_PROPERTY_TENANTS,
  MiscControllerEEConfiguration.JSON_PROPERTY_SECRETS_ENABLED,
  MiscControllerEEConfiguration.JSON_PROPERTY_SUPPORTED_STORAGES,
  MiscControllerEEConfiguration.JSON_PROPERTY_SUPPORTED_SECRETS,
  MiscControllerEEConfiguration.JSON_PROPERTY_PLUGIN_MANAGEMENT_ENABLED,
  MiscControllerEEConfiguration.JSON_PROPERTY_PLUGIN_CUSTOM_ENABLED,
  MiscControllerEEConfiguration.JSON_PROPERTY_BANNER,
  MiscControllerEEConfiguration.JSON_PROPERTY_MAIL_SERVICE_ENABLED,
  MiscControllerEEConfiguration.JSON_PROPERTY_OUTPUTS_IN_INTERNAL_STORAGE_ENABLED,
  MiscControllerEEConfiguration.JSON_PROPERTY_CONTEXT_CUSTOM_LINKS,
  MiscControllerEEConfiguration.JSON_PROPERTY_IN_MAINTENANCE,
  MiscControllerEEConfiguration.JSON_PROPERTY_PASSWORD_REGEXP
})
@JsonTypeName("MiscController.EEConfiguration")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-14T16:34:14.833468251Z[Etc/UTC]", comments = "Generator version: 7.14.0-SNAPSHOT")
public class MiscControllerEEConfiguration {
  public static final String JSON_PROPERTY_UUID = "uuid";
  @javax.annotation.Nullable
  private String uuid;

  public static final String JSON_PROPERTY_VERSION = "version";
  @javax.annotation.Nullable
  private String version;

  public static final String JSON_PROPERTY_COMMIT_ID = "commitId";
  @javax.annotation.Nullable
  private String commitId;

  public static final String JSON_PROPERTY_COMMIT_DATE = "commitDate";
  @javax.annotation.Nullable
  private OffsetDateTime commitDate;

  public static final String JSON_PROPERTY_IS_CUSTOM_DASHBOARDS_ENABLED = "isCustomDashboardsEnabled";
  @javax.annotation.Nullable
  private Boolean isCustomDashboardsEnabled;

  public static final String JSON_PROPERTY_IS_TASK_RUN_ENABLED = "isTaskRunEnabled";
  @javax.annotation.Nullable
  private Boolean isTaskRunEnabled;

  public static final String JSON_PROPERTY_IS_ANONYMOUS_USAGE_ENABLED = "isAnonymousUsageEnabled";
  @javax.annotation.Nullable
  private Boolean isAnonymousUsageEnabled;

  public static final String JSON_PROPERTY_IS_TEMPLATE_ENABLED = "isTemplateEnabled";
  @javax.annotation.Nullable
  private Boolean isTemplateEnabled;

  public static final String JSON_PROPERTY_ENVIRONMENT = "environment";
  @javax.annotation.Nullable
  private MiscControllerEnvironment environment;

  public static final String JSON_PROPERTY_URL = "url";
  @javax.annotation.Nullable
  private String url;

  public static final String JSON_PROPERTY_PREVIEW = "preview";
  @javax.annotation.Nullable
  private MiscControllerPreview preview;

  public static final String JSON_PROPERTY_SYSTEM_NAMESPACE = "systemNamespace";
  @javax.annotation.Nullable
  private String systemNamespace;

  public static final String JSON_PROPERTY_HIDDEN_LABELS_PREFIXES = "hiddenLabelsPrefixes";
  @javax.annotation.Nullable
  private List<String> hiddenLabelsPrefixes = new ArrayList<>();

  public static final String JSON_PROPERTY_RESOURCE_TO_FILTERS = "resourceToFilters";
  @javax.annotation.Nullable
  private List<QueryFilterResourceField> resourceToFilters = new ArrayList<>();

  public static final String JSON_PROPERTY_IS_AI_ENABLED = "isAiEnabled";
  @javax.annotation.Nullable
  private Boolean isAiEnabled;

  public static final String JSON_PROPERTY_IS_BASIC_AUTH_INITIALIZED = "isBasicAuthInitialized";
  @javax.annotation.Nullable
  private Boolean isBasicAuthInitialized;

  public static final String JSON_PROPERTY_TENANTS = "tenants";
  @javax.annotation.Nullable
  private MiscControllerTenantConfigurationInfo tenants;

  public static final String JSON_PROPERTY_SECRETS_ENABLED = "secretsEnabled";
  @javax.annotation.Nullable
  private Boolean secretsEnabled;

  public static final String JSON_PROPERTY_SUPPORTED_STORAGES = "supportedStorages";
  @javax.annotation.Nullable
  private List<MiscControllerPluginIdAndVersion> supportedStorages = new ArrayList<>();

  public static final String JSON_PROPERTY_SUPPORTED_SECRETS = "supportedSecrets";
  @javax.annotation.Nullable
  private List<MiscControllerPluginIdAndVersion> supportedSecrets = new ArrayList<>();

  public static final String JSON_PROPERTY_PLUGIN_MANAGEMENT_ENABLED = "pluginManagementEnabled";
  @javax.annotation.Nullable
  private Boolean pluginManagementEnabled;

  public static final String JSON_PROPERTY_PLUGIN_CUSTOM_ENABLED = "pluginCustomEnabled";
  @javax.annotation.Nullable
  private Boolean pluginCustomEnabled;

  public static final String JSON_PROPERTY_BANNER = "banner";
  @javax.annotation.Nullable
  private Banner banner;

  public static final String JSON_PROPERTY_MAIL_SERVICE_ENABLED = "mailServiceEnabled";
  @javax.annotation.Nullable
  private Boolean mailServiceEnabled;

  public static final String JSON_PROPERTY_OUTPUTS_IN_INTERNAL_STORAGE_ENABLED = "outputsInInternalStorageEnabled";
  @javax.annotation.Nullable
  private Boolean outputsInInternalStorageEnabled;

  public static final String JSON_PROPERTY_CONTEXT_CUSTOM_LINKS = "contextCustomLinks";
  @javax.annotation.Nullable
  private Map<String, CustomLink> contextCustomLinks = new HashMap<>();

  public static final String JSON_PROPERTY_IN_MAINTENANCE = "inMaintenance";
  @javax.annotation.Nullable
  private Boolean inMaintenance;

  public static final String JSON_PROPERTY_PASSWORD_REGEXP = "passwordRegexp";
  @javax.annotation.Nullable
  private String passwordRegexp;

  public MiscControllerEEConfiguration() {
  }

  public MiscControllerEEConfiguration uuid(@javax.annotation.Nullable String uuid) {
    
    this.uuid = uuid;
    return this;
  }

  /**
   * Get uuid
   * @return uuid
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_UUID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUuid() {
    return uuid;
  }


  @JsonProperty(JSON_PROPERTY_UUID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUuid(@javax.annotation.Nullable String uuid) {
    this.uuid = uuid;
  }

  public MiscControllerEEConfiguration version(@javax.annotation.Nullable String version) {
    
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getVersion() {
    return version;
  }


  @JsonProperty(JSON_PROPERTY_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVersion(@javax.annotation.Nullable String version) {
    this.version = version;
  }

  public MiscControllerEEConfiguration commitId(@javax.annotation.Nullable String commitId) {
    
    this.commitId = commitId;
    return this;
  }

  /**
   * Get commitId
   * @return commitId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COMMIT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCommitId() {
    return commitId;
  }


  @JsonProperty(JSON_PROPERTY_COMMIT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCommitId(@javax.annotation.Nullable String commitId) {
    this.commitId = commitId;
  }

  public MiscControllerEEConfiguration commitDate(@javax.annotation.Nullable OffsetDateTime commitDate) {
    
    this.commitDate = commitDate;
    return this;
  }

  /**
   * Get commitDate
   * @return commitDate
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COMMIT_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getCommitDate() {
    return commitDate;
  }


  @JsonProperty(JSON_PROPERTY_COMMIT_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCommitDate(@javax.annotation.Nullable OffsetDateTime commitDate) {
    this.commitDate = commitDate;
  }

  public MiscControllerEEConfiguration isCustomDashboardsEnabled(@javax.annotation.Nullable Boolean isCustomDashboardsEnabled) {
    
    this.isCustomDashboardsEnabled = isCustomDashboardsEnabled;
    return this;
  }

  /**
   * Get isCustomDashboardsEnabled
   * @return isCustomDashboardsEnabled
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IS_CUSTOM_DASHBOARDS_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIsCustomDashboardsEnabled() {
    return isCustomDashboardsEnabled;
  }


  @JsonProperty(JSON_PROPERTY_IS_CUSTOM_DASHBOARDS_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsCustomDashboardsEnabled(@javax.annotation.Nullable Boolean isCustomDashboardsEnabled) {
    this.isCustomDashboardsEnabled = isCustomDashboardsEnabled;
  }

  public MiscControllerEEConfiguration isTaskRunEnabled(@javax.annotation.Nullable Boolean isTaskRunEnabled) {
    
    this.isTaskRunEnabled = isTaskRunEnabled;
    return this;
  }

  /**
   * Get isTaskRunEnabled
   * @return isTaskRunEnabled
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IS_TASK_RUN_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIsTaskRunEnabled() {
    return isTaskRunEnabled;
  }


  @JsonProperty(JSON_PROPERTY_IS_TASK_RUN_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsTaskRunEnabled(@javax.annotation.Nullable Boolean isTaskRunEnabled) {
    this.isTaskRunEnabled = isTaskRunEnabled;
  }

  public MiscControllerEEConfiguration isAnonymousUsageEnabled(@javax.annotation.Nullable Boolean isAnonymousUsageEnabled) {
    
    this.isAnonymousUsageEnabled = isAnonymousUsageEnabled;
    return this;
  }

  /**
   * Get isAnonymousUsageEnabled
   * @return isAnonymousUsageEnabled
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IS_ANONYMOUS_USAGE_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIsAnonymousUsageEnabled() {
    return isAnonymousUsageEnabled;
  }


  @JsonProperty(JSON_PROPERTY_IS_ANONYMOUS_USAGE_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsAnonymousUsageEnabled(@javax.annotation.Nullable Boolean isAnonymousUsageEnabled) {
    this.isAnonymousUsageEnabled = isAnonymousUsageEnabled;
  }

  public MiscControllerEEConfiguration isTemplateEnabled(@javax.annotation.Nullable Boolean isTemplateEnabled) {
    
    this.isTemplateEnabled = isTemplateEnabled;
    return this;
  }

  /**
   * Get isTemplateEnabled
   * @return isTemplateEnabled
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IS_TEMPLATE_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIsTemplateEnabled() {
    return isTemplateEnabled;
  }


  @JsonProperty(JSON_PROPERTY_IS_TEMPLATE_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsTemplateEnabled(@javax.annotation.Nullable Boolean isTemplateEnabled) {
    this.isTemplateEnabled = isTemplateEnabled;
  }

  public MiscControllerEEConfiguration environment(@javax.annotation.Nullable MiscControllerEnvironment environment) {
    
    this.environment = environment;
    return this;
  }

  /**
   * Get environment
   * @return environment
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENVIRONMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public MiscControllerEnvironment getEnvironment() {
    return environment;
  }


  @JsonProperty(JSON_PROPERTY_ENVIRONMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnvironment(@javax.annotation.Nullable MiscControllerEnvironment environment) {
    this.environment = environment;
  }

  public MiscControllerEEConfiguration url(@javax.annotation.Nullable String url) {
    
    this.url = url;
    return this;
  }

  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUrl() {
    return url;
  }


  @JsonProperty(JSON_PROPERTY_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUrl(@javax.annotation.Nullable String url) {
    this.url = url;
  }

  public MiscControllerEEConfiguration preview(@javax.annotation.Nullable MiscControllerPreview preview) {
    
    this.preview = preview;
    return this;
  }

  /**
   * Get preview
   * @return preview
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PREVIEW)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public MiscControllerPreview getPreview() {
    return preview;
  }


  @JsonProperty(JSON_PROPERTY_PREVIEW)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPreview(@javax.annotation.Nullable MiscControllerPreview preview) {
    this.preview = preview;
  }

  public MiscControllerEEConfiguration systemNamespace(@javax.annotation.Nullable String systemNamespace) {
    
    this.systemNamespace = systemNamespace;
    return this;
  }

  /**
   * Get systemNamespace
   * @return systemNamespace
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SYSTEM_NAMESPACE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSystemNamespace() {
    return systemNamespace;
  }


  @JsonProperty(JSON_PROPERTY_SYSTEM_NAMESPACE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSystemNamespace(@javax.annotation.Nullable String systemNamespace) {
    this.systemNamespace = systemNamespace;
  }

  public MiscControllerEEConfiguration hiddenLabelsPrefixes(@javax.annotation.Nullable List<String> hiddenLabelsPrefixes) {
    
    this.hiddenLabelsPrefixes = hiddenLabelsPrefixes;
    return this;
  }

  public MiscControllerEEConfiguration addHiddenLabelsPrefixesItem(String hiddenLabelsPrefixesItem) {
    if (this.hiddenLabelsPrefixes == null) {
      this.hiddenLabelsPrefixes = new ArrayList<>();
    }
    this.hiddenLabelsPrefixes.add(hiddenLabelsPrefixesItem);
    return this;
  }

  /**
   * Get hiddenLabelsPrefixes
   * @return hiddenLabelsPrefixes
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HIDDEN_LABELS_PREFIXES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getHiddenLabelsPrefixes() {
    return hiddenLabelsPrefixes;
  }


  @JsonProperty(JSON_PROPERTY_HIDDEN_LABELS_PREFIXES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHiddenLabelsPrefixes(@javax.annotation.Nullable List<String> hiddenLabelsPrefixes) {
    this.hiddenLabelsPrefixes = hiddenLabelsPrefixes;
  }

  public MiscControllerEEConfiguration resourceToFilters(@javax.annotation.Nullable List<QueryFilterResourceField> resourceToFilters) {
    
    this.resourceToFilters = resourceToFilters;
    return this;
  }

  public MiscControllerEEConfiguration addResourceToFiltersItem(QueryFilterResourceField resourceToFiltersItem) {
    if (this.resourceToFilters == null) {
      this.resourceToFilters = new ArrayList<>();
    }
    this.resourceToFilters.add(resourceToFiltersItem);
    return this;
  }

  /**
   * Get resourceToFilters
   * @return resourceToFilters
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RESOURCE_TO_FILTERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<QueryFilterResourceField> getResourceToFilters() {
    return resourceToFilters;
  }


  @JsonProperty(JSON_PROPERTY_RESOURCE_TO_FILTERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setResourceToFilters(@javax.annotation.Nullable List<QueryFilterResourceField> resourceToFilters) {
    this.resourceToFilters = resourceToFilters;
  }

  public MiscControllerEEConfiguration isAiEnabled(@javax.annotation.Nullable Boolean isAiEnabled) {
    
    this.isAiEnabled = isAiEnabled;
    return this;
  }

  /**
   * Get isAiEnabled
   * @return isAiEnabled
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IS_AI_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIsAiEnabled() {
    return isAiEnabled;
  }


  @JsonProperty(JSON_PROPERTY_IS_AI_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsAiEnabled(@javax.annotation.Nullable Boolean isAiEnabled) {
    this.isAiEnabled = isAiEnabled;
  }

  public MiscControllerEEConfiguration isBasicAuthInitialized(@javax.annotation.Nullable Boolean isBasicAuthInitialized) {
    
    this.isBasicAuthInitialized = isBasicAuthInitialized;
    return this;
  }

  /**
   * Get isBasicAuthInitialized
   * @return isBasicAuthInitialized
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IS_BASIC_AUTH_INITIALIZED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIsBasicAuthInitialized() {
    return isBasicAuthInitialized;
  }


  @JsonProperty(JSON_PROPERTY_IS_BASIC_AUTH_INITIALIZED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsBasicAuthInitialized(@javax.annotation.Nullable Boolean isBasicAuthInitialized) {
    this.isBasicAuthInitialized = isBasicAuthInitialized;
  }

  public MiscControllerEEConfiguration tenants(@javax.annotation.Nullable MiscControllerTenantConfigurationInfo tenants) {
    
    this.tenants = tenants;
    return this;
  }

  /**
   * Get tenants
   * @return tenants
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TENANTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public MiscControllerTenantConfigurationInfo getTenants() {
    return tenants;
  }


  @JsonProperty(JSON_PROPERTY_TENANTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTenants(@javax.annotation.Nullable MiscControllerTenantConfigurationInfo tenants) {
    this.tenants = tenants;
  }

  public MiscControllerEEConfiguration secretsEnabled(@javax.annotation.Nullable Boolean secretsEnabled) {
    
    this.secretsEnabled = secretsEnabled;
    return this;
  }

  /**
   * Get secretsEnabled
   * @return secretsEnabled
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SECRETS_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getSecretsEnabled() {
    return secretsEnabled;
  }


  @JsonProperty(JSON_PROPERTY_SECRETS_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSecretsEnabled(@javax.annotation.Nullable Boolean secretsEnabled) {
    this.secretsEnabled = secretsEnabled;
  }

  public MiscControllerEEConfiguration supportedStorages(@javax.annotation.Nullable List<MiscControllerPluginIdAndVersion> supportedStorages) {
    
    this.supportedStorages = supportedStorages;
    return this;
  }

  public MiscControllerEEConfiguration addSupportedStoragesItem(MiscControllerPluginIdAndVersion supportedStoragesItem) {
    if (this.supportedStorages == null) {
      this.supportedStorages = new ArrayList<>();
    }
    this.supportedStorages.add(supportedStoragesItem);
    return this;
  }

  /**
   * Get supportedStorages
   * @return supportedStorages
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SUPPORTED_STORAGES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<MiscControllerPluginIdAndVersion> getSupportedStorages() {
    return supportedStorages;
  }


  @JsonProperty(JSON_PROPERTY_SUPPORTED_STORAGES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSupportedStorages(@javax.annotation.Nullable List<MiscControllerPluginIdAndVersion> supportedStorages) {
    this.supportedStorages = supportedStorages;
  }

  public MiscControllerEEConfiguration supportedSecrets(@javax.annotation.Nullable List<MiscControllerPluginIdAndVersion> supportedSecrets) {
    
    this.supportedSecrets = supportedSecrets;
    return this;
  }

  public MiscControllerEEConfiguration addSupportedSecretsItem(MiscControllerPluginIdAndVersion supportedSecretsItem) {
    if (this.supportedSecrets == null) {
      this.supportedSecrets = new ArrayList<>();
    }
    this.supportedSecrets.add(supportedSecretsItem);
    return this;
  }

  /**
   * Get supportedSecrets
   * @return supportedSecrets
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SUPPORTED_SECRETS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<MiscControllerPluginIdAndVersion> getSupportedSecrets() {
    return supportedSecrets;
  }


  @JsonProperty(JSON_PROPERTY_SUPPORTED_SECRETS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSupportedSecrets(@javax.annotation.Nullable List<MiscControllerPluginIdAndVersion> supportedSecrets) {
    this.supportedSecrets = supportedSecrets;
  }

  public MiscControllerEEConfiguration pluginManagementEnabled(@javax.annotation.Nullable Boolean pluginManagementEnabled) {
    
    this.pluginManagementEnabled = pluginManagementEnabled;
    return this;
  }

  /**
   * Get pluginManagementEnabled
   * @return pluginManagementEnabled
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PLUGIN_MANAGEMENT_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getPluginManagementEnabled() {
    return pluginManagementEnabled;
  }


  @JsonProperty(JSON_PROPERTY_PLUGIN_MANAGEMENT_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPluginManagementEnabled(@javax.annotation.Nullable Boolean pluginManagementEnabled) {
    this.pluginManagementEnabled = pluginManagementEnabled;
  }

  public MiscControllerEEConfiguration pluginCustomEnabled(@javax.annotation.Nullable Boolean pluginCustomEnabled) {
    
    this.pluginCustomEnabled = pluginCustomEnabled;
    return this;
  }

  /**
   * Get pluginCustomEnabled
   * @return pluginCustomEnabled
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PLUGIN_CUSTOM_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getPluginCustomEnabled() {
    return pluginCustomEnabled;
  }


  @JsonProperty(JSON_PROPERTY_PLUGIN_CUSTOM_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPluginCustomEnabled(@javax.annotation.Nullable Boolean pluginCustomEnabled) {
    this.pluginCustomEnabled = pluginCustomEnabled;
  }

  public MiscControllerEEConfiguration banner(@javax.annotation.Nullable Banner banner) {
    
    this.banner = banner;
    return this;
  }

  /**
   * Get banner
   * @return banner
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BANNER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Banner getBanner() {
    return banner;
  }


  @JsonProperty(JSON_PROPERTY_BANNER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBanner(@javax.annotation.Nullable Banner banner) {
    this.banner = banner;
  }

  public MiscControllerEEConfiguration mailServiceEnabled(@javax.annotation.Nullable Boolean mailServiceEnabled) {
    
    this.mailServiceEnabled = mailServiceEnabled;
    return this;
  }

  /**
   * Get mailServiceEnabled
   * @return mailServiceEnabled
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MAIL_SERVICE_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getMailServiceEnabled() {
    return mailServiceEnabled;
  }


  @JsonProperty(JSON_PROPERTY_MAIL_SERVICE_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMailServiceEnabled(@javax.annotation.Nullable Boolean mailServiceEnabled) {
    this.mailServiceEnabled = mailServiceEnabled;
  }

  public MiscControllerEEConfiguration outputsInInternalStorageEnabled(@javax.annotation.Nullable Boolean outputsInInternalStorageEnabled) {
    
    this.outputsInInternalStorageEnabled = outputsInInternalStorageEnabled;
    return this;
  }

  /**
   * Get outputsInInternalStorageEnabled
   * @return outputsInInternalStorageEnabled
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OUTPUTS_IN_INTERNAL_STORAGE_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getOutputsInInternalStorageEnabled() {
    return outputsInInternalStorageEnabled;
  }


  @JsonProperty(JSON_PROPERTY_OUTPUTS_IN_INTERNAL_STORAGE_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOutputsInInternalStorageEnabled(@javax.annotation.Nullable Boolean outputsInInternalStorageEnabled) {
    this.outputsInInternalStorageEnabled = outputsInInternalStorageEnabled;
  }

  public MiscControllerEEConfiguration contextCustomLinks(@javax.annotation.Nullable Map<String, CustomLink> contextCustomLinks) {
    
    this.contextCustomLinks = contextCustomLinks;
    return this;
  }

  public MiscControllerEEConfiguration putContextCustomLinksItem(String key, CustomLink contextCustomLinksItem) {
    if (this.contextCustomLinks == null) {
      this.contextCustomLinks = new HashMap<>();
    }
    this.contextCustomLinks.put(key, contextCustomLinksItem);
    return this;
  }

  /**
   * Get contextCustomLinks
   * @return contextCustomLinks
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONTEXT_CUSTOM_LINKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, CustomLink> getContextCustomLinks() {
    return contextCustomLinks;
  }


  @JsonProperty(JSON_PROPERTY_CONTEXT_CUSTOM_LINKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setContextCustomLinks(@javax.annotation.Nullable Map<String, CustomLink> contextCustomLinks) {
    this.contextCustomLinks = contextCustomLinks;
  }

  public MiscControllerEEConfiguration inMaintenance(@javax.annotation.Nullable Boolean inMaintenance) {
    
    this.inMaintenance = inMaintenance;
    return this;
  }

  /**
   * Get inMaintenance
   * @return inMaintenance
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IN_MAINTENANCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getInMaintenance() {
    return inMaintenance;
  }


  @JsonProperty(JSON_PROPERTY_IN_MAINTENANCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInMaintenance(@javax.annotation.Nullable Boolean inMaintenance) {
    this.inMaintenance = inMaintenance;
  }

  public MiscControllerEEConfiguration passwordRegexp(@javax.annotation.Nullable String passwordRegexp) {
    
    this.passwordRegexp = passwordRegexp;
    return this;
  }

  /**
   * Get passwordRegexp
   * @return passwordRegexp
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PASSWORD_REGEXP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPasswordRegexp() {
    return passwordRegexp;
  }


  @JsonProperty(JSON_PROPERTY_PASSWORD_REGEXP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPasswordRegexp(@javax.annotation.Nullable String passwordRegexp) {
    this.passwordRegexp = passwordRegexp;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MiscControllerEEConfiguration miscControllerEEConfiguration = (MiscControllerEEConfiguration) o;
    return Objects.equals(this.uuid, miscControllerEEConfiguration.uuid) &&
        Objects.equals(this.version, miscControllerEEConfiguration.version) &&
        Objects.equals(this.commitId, miscControllerEEConfiguration.commitId) &&
        Objects.equals(this.commitDate, miscControllerEEConfiguration.commitDate) &&
        Objects.equals(this.isCustomDashboardsEnabled, miscControllerEEConfiguration.isCustomDashboardsEnabled) &&
        Objects.equals(this.isTaskRunEnabled, miscControllerEEConfiguration.isTaskRunEnabled) &&
        Objects.equals(this.isAnonymousUsageEnabled, miscControllerEEConfiguration.isAnonymousUsageEnabled) &&
        Objects.equals(this.isTemplateEnabled, miscControllerEEConfiguration.isTemplateEnabled) &&
        Objects.equals(this.environment, miscControllerEEConfiguration.environment) &&
        Objects.equals(this.url, miscControllerEEConfiguration.url) &&
        Objects.equals(this.preview, miscControllerEEConfiguration.preview) &&
        Objects.equals(this.systemNamespace, miscControllerEEConfiguration.systemNamespace) &&
        Objects.equals(this.hiddenLabelsPrefixes, miscControllerEEConfiguration.hiddenLabelsPrefixes) &&
        Objects.equals(this.resourceToFilters, miscControllerEEConfiguration.resourceToFilters) &&
        Objects.equals(this.isAiEnabled, miscControllerEEConfiguration.isAiEnabled) &&
        Objects.equals(this.isBasicAuthInitialized, miscControllerEEConfiguration.isBasicAuthInitialized) &&
        Objects.equals(this.tenants, miscControllerEEConfiguration.tenants) &&
        Objects.equals(this.secretsEnabled, miscControllerEEConfiguration.secretsEnabled) &&
        Objects.equals(this.supportedStorages, miscControllerEEConfiguration.supportedStorages) &&
        Objects.equals(this.supportedSecrets, miscControllerEEConfiguration.supportedSecrets) &&
        Objects.equals(this.pluginManagementEnabled, miscControllerEEConfiguration.pluginManagementEnabled) &&
        Objects.equals(this.pluginCustomEnabled, miscControllerEEConfiguration.pluginCustomEnabled) &&
        Objects.equals(this.banner, miscControllerEEConfiguration.banner) &&
        Objects.equals(this.mailServiceEnabled, miscControllerEEConfiguration.mailServiceEnabled) &&
        Objects.equals(this.outputsInInternalStorageEnabled, miscControllerEEConfiguration.outputsInInternalStorageEnabled) &&
        Objects.equals(this.contextCustomLinks, miscControllerEEConfiguration.contextCustomLinks) &&
        Objects.equals(this.inMaintenance, miscControllerEEConfiguration.inMaintenance) &&
        Objects.equals(this.passwordRegexp, miscControllerEEConfiguration.passwordRegexp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(uuid, version, commitId, commitDate, isCustomDashboardsEnabled, isTaskRunEnabled, isAnonymousUsageEnabled, isTemplateEnabled, environment, url, preview, systemNamespace, hiddenLabelsPrefixes, resourceToFilters, isAiEnabled, isBasicAuthInitialized, tenants, secretsEnabled, supportedStorages, supportedSecrets, pluginManagementEnabled, pluginCustomEnabled, banner, mailServiceEnabled, outputsInInternalStorageEnabled, contextCustomLinks, inMaintenance, passwordRegexp);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MiscControllerEEConfiguration {\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    commitId: ").append(toIndentedString(commitId)).append("\n");
    sb.append("    commitDate: ").append(toIndentedString(commitDate)).append("\n");
    sb.append("    isCustomDashboardsEnabled: ").append(toIndentedString(isCustomDashboardsEnabled)).append("\n");
    sb.append("    isTaskRunEnabled: ").append(toIndentedString(isTaskRunEnabled)).append("\n");
    sb.append("    isAnonymousUsageEnabled: ").append(toIndentedString(isAnonymousUsageEnabled)).append("\n");
    sb.append("    isTemplateEnabled: ").append(toIndentedString(isTemplateEnabled)).append("\n");
    sb.append("    environment: ").append(toIndentedString(environment)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    preview: ").append(toIndentedString(preview)).append("\n");
    sb.append("    systemNamespace: ").append(toIndentedString(systemNamespace)).append("\n");
    sb.append("    hiddenLabelsPrefixes: ").append(toIndentedString(hiddenLabelsPrefixes)).append("\n");
    sb.append("    resourceToFilters: ").append(toIndentedString(resourceToFilters)).append("\n");
    sb.append("    isAiEnabled: ").append(toIndentedString(isAiEnabled)).append("\n");
    sb.append("    isBasicAuthInitialized: ").append(toIndentedString(isBasicAuthInitialized)).append("\n");
    sb.append("    tenants: ").append(toIndentedString(tenants)).append("\n");
    sb.append("    secretsEnabled: ").append(toIndentedString(secretsEnabled)).append("\n");
    sb.append("    supportedStorages: ").append(toIndentedString(supportedStorages)).append("\n");
    sb.append("    supportedSecrets: ").append(toIndentedString(supportedSecrets)).append("\n");
    sb.append("    pluginManagementEnabled: ").append(toIndentedString(pluginManagementEnabled)).append("\n");
    sb.append("    pluginCustomEnabled: ").append(toIndentedString(pluginCustomEnabled)).append("\n");
    sb.append("    banner: ").append(toIndentedString(banner)).append("\n");
    sb.append("    mailServiceEnabled: ").append(toIndentedString(mailServiceEnabled)).append("\n");
    sb.append("    outputsInInternalStorageEnabled: ").append(toIndentedString(outputsInInternalStorageEnabled)).append("\n");
    sb.append("    contextCustomLinks: ").append(toIndentedString(contextCustomLinks)).append("\n");
    sb.append("    inMaintenance: ").append(toIndentedString(inMaintenance)).append("\n");
    sb.append("    passwordRegexp: ").append(toIndentedString(passwordRegexp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `uuid` to the URL query string
    if (getUuid() != null) {
      try {
        joiner.add(String.format("%suuid%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUuid()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `version` to the URL query string
    if (getVersion() != null) {
      try {
        joiner.add(String.format("%sversion%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getVersion()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `commitId` to the URL query string
    if (getCommitId() != null) {
      try {
        joiner.add(String.format("%scommitId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCommitId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `commitDate` to the URL query string
    if (getCommitDate() != null) {
      try {
        joiner.add(String.format("%scommitDate%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCommitDate()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `isCustomDashboardsEnabled` to the URL query string
    if (getIsCustomDashboardsEnabled() != null) {
      try {
        joiner.add(String.format("%sisCustomDashboardsEnabled%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getIsCustomDashboardsEnabled()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `isTaskRunEnabled` to the URL query string
    if (getIsTaskRunEnabled() != null) {
      try {
        joiner.add(String.format("%sisTaskRunEnabled%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getIsTaskRunEnabled()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `isAnonymousUsageEnabled` to the URL query string
    if (getIsAnonymousUsageEnabled() != null) {
      try {
        joiner.add(String.format("%sisAnonymousUsageEnabled%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getIsAnonymousUsageEnabled()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `isTemplateEnabled` to the URL query string
    if (getIsTemplateEnabled() != null) {
      try {
        joiner.add(String.format("%sisTemplateEnabled%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getIsTemplateEnabled()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `environment` to the URL query string
    if (getEnvironment() != null) {
      joiner.add(getEnvironment().toUrlQueryString(prefix + "environment" + suffix));
    }

    // add `url` to the URL query string
    if (getUrl() != null) {
      try {
        joiner.add(String.format("%surl%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUrl()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `preview` to the URL query string
    if (getPreview() != null) {
      joiner.add(getPreview().toUrlQueryString(prefix + "preview" + suffix));
    }

    // add `systemNamespace` to the URL query string
    if (getSystemNamespace() != null) {
      try {
        joiner.add(String.format("%ssystemNamespace%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSystemNamespace()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `hiddenLabelsPrefixes` to the URL query string
    if (getHiddenLabelsPrefixes() != null) {
      for (int i = 0; i < getHiddenLabelsPrefixes().size(); i++) {
        try {
          joiner.add(String.format("%shiddenLabelsPrefixes%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(String.valueOf(getHiddenLabelsPrefixes().get(i)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    // add `resourceToFilters` to the URL query string
    if (getResourceToFilters() != null) {
      for (int i = 0; i < getResourceToFilters().size(); i++) {
        if (getResourceToFilters().get(i) != null) {
          joiner.add(getResourceToFilters().get(i).toUrlQueryString(String.format("%sresourceToFilters%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `isAiEnabled` to the URL query string
    if (getIsAiEnabled() != null) {
      try {
        joiner.add(String.format("%sisAiEnabled%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getIsAiEnabled()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `isBasicAuthInitialized` to the URL query string
    if (getIsBasicAuthInitialized() != null) {
      try {
        joiner.add(String.format("%sisBasicAuthInitialized%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getIsBasicAuthInitialized()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `tenants` to the URL query string
    if (getTenants() != null) {
      joiner.add(getTenants().toUrlQueryString(prefix + "tenants" + suffix));
    }

    // add `secretsEnabled` to the URL query string
    if (getSecretsEnabled() != null) {
      try {
        joiner.add(String.format("%ssecretsEnabled%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSecretsEnabled()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `supportedStorages` to the URL query string
    if (getSupportedStorages() != null) {
      for (int i = 0; i < getSupportedStorages().size(); i++) {
        if (getSupportedStorages().get(i) != null) {
          joiner.add(getSupportedStorages().get(i).toUrlQueryString(String.format("%ssupportedStorages%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `supportedSecrets` to the URL query string
    if (getSupportedSecrets() != null) {
      for (int i = 0; i < getSupportedSecrets().size(); i++) {
        if (getSupportedSecrets().get(i) != null) {
          joiner.add(getSupportedSecrets().get(i).toUrlQueryString(String.format("%ssupportedSecrets%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `pluginManagementEnabled` to the URL query string
    if (getPluginManagementEnabled() != null) {
      try {
        joiner.add(String.format("%spluginManagementEnabled%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPluginManagementEnabled()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `pluginCustomEnabled` to the URL query string
    if (getPluginCustomEnabled() != null) {
      try {
        joiner.add(String.format("%spluginCustomEnabled%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPluginCustomEnabled()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `banner` to the URL query string
    if (getBanner() != null) {
      joiner.add(getBanner().toUrlQueryString(prefix + "banner" + suffix));
    }

    // add `mailServiceEnabled` to the URL query string
    if (getMailServiceEnabled() != null) {
      try {
        joiner.add(String.format("%smailServiceEnabled%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getMailServiceEnabled()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `outputsInInternalStorageEnabled` to the URL query string
    if (getOutputsInInternalStorageEnabled() != null) {
      try {
        joiner.add(String.format("%soutputsInInternalStorageEnabled%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getOutputsInInternalStorageEnabled()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `contextCustomLinks` to the URL query string
    if (getContextCustomLinks() != null) {
      for (String _key : getContextCustomLinks().keySet()) {
        if (getContextCustomLinks().get(_key) != null) {
          joiner.add(getContextCustomLinks().get(_key).toUrlQueryString(String.format("%scontextCustomLinks%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix))));
        }
      }
    }

    // add `inMaintenance` to the URL query string
    if (getInMaintenance() != null) {
      try {
        joiner.add(String.format("%sinMaintenance%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getInMaintenance()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `passwordRegexp` to the URL query string
    if (getPasswordRegexp() != null) {
      try {
        joiner.add(String.format("%spasswordRegexp%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPasswordRegexp()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

