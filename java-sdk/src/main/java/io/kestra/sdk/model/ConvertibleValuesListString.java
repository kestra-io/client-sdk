/*
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kestra.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * ConvertibleValuesListString
 */
@JsonPropertyOrder({
  ConvertibleValuesListString.JSON_PROPERTY_CONVERSION_SERVICE,
  ConvertibleValuesListString.JSON_PROPERTY_EMPTY
})
@JsonTypeName("ConvertibleValues_List_String__")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.14.0-SNAPSHOT")
public class ConvertibleValuesListString {
  public static final String JSON_PROPERTY_CONVERSION_SERVICE = "conversionService";
  @javax.annotation.Nonnull
  private Object conversionService;

  public static final String JSON_PROPERTY_EMPTY = "empty";
  @javax.annotation.Nullable
  private Boolean empty;

  public ConvertibleValuesListString() {
  }

  public ConvertibleValuesListString conversionService(@javax.annotation.Nonnull Object conversionService) {
    
    this.conversionService = conversionService;
    return this;
  }

  /**
   * Get conversionService
   * @return conversionService
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CONVERSION_SERVICE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Object getConversionService() {
    return conversionService;
  }


  @JsonProperty(JSON_PROPERTY_CONVERSION_SERVICE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setConversionService(@javax.annotation.Nonnull Object conversionService) {
    this.conversionService = conversionService;
  }

  public ConvertibleValuesListString empty(@javax.annotation.Nullable Boolean empty) {
    
    this.empty = empty;
    return this;
  }

  /**
   * Get empty
   * @return empty
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EMPTY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getEmpty() {
    return empty;
  }


  @JsonProperty(JSON_PROPERTY_EMPTY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEmpty(@javax.annotation.Nullable Boolean empty) {
    this.empty = empty;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConvertibleValuesListString convertibleValuesListString = (ConvertibleValuesListString) o;
    return Objects.equals(this.conversionService, convertibleValuesListString.conversionService) &&
        Objects.equals(this.empty, convertibleValuesListString.empty);
  }

  @Override
  public int hashCode() {
    return Objects.hash(conversionService, empty);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConvertibleValuesListString {\n");
    sb.append("    conversionService: ").append(toIndentedString(conversionService)).append("\n");
    sb.append("    empty: ").append(toIndentedString(empty)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

