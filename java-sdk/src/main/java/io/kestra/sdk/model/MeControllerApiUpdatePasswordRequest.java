/*
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kestra.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Locale;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * MeControllerApiUpdatePasswordRequest
 */
@JsonPropertyOrder({
  MeControllerApiUpdatePasswordRequest.JSON_PROPERTY_OLD_PASSWORD,
  MeControllerApiUpdatePasswordRequest.JSON_PROPERTY_NEW_PASSWORD
})
@JsonTypeName("MeController.ApiUpdatePasswordRequest")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.16.0")
public class MeControllerApiUpdatePasswordRequest {
  public static final String JSON_PROPERTY_OLD_PASSWORD = "oldPassword";
  @javax.annotation.Nullable
  private String oldPassword;

  public static final String JSON_PROPERTY_NEW_PASSWORD = "newPassword";
  @javax.annotation.Nullable
  private String newPassword;

  public MeControllerApiUpdatePasswordRequest() {
  }

  public MeControllerApiUpdatePasswordRequest oldPassword(@javax.annotation.Nullable String oldPassword) {
    
    this.oldPassword = oldPassword;
    return this;
  }

  /**
   * Get oldPassword
   * @return oldPassword
   */
  @javax.annotation.Nullable
  @JsonProperty(value = JSON_PROPERTY_OLD_PASSWORD, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getOldPassword() {
    return oldPassword;
  }


  @JsonProperty(value = JSON_PROPERTY_OLD_PASSWORD, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOldPassword(@javax.annotation.Nullable String oldPassword) {
    this.oldPassword = oldPassword;
  }

  public MeControllerApiUpdatePasswordRequest newPassword(@javax.annotation.Nullable String newPassword) {
    
    this.newPassword = newPassword;
    return this;
  }

  /**
   * Get newPassword
   * @return newPassword
   */
  @javax.annotation.Nullable
  @JsonProperty(value = JSON_PROPERTY_NEW_PASSWORD, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getNewPassword() {
    return newPassword;
  }


  @JsonProperty(value = JSON_PROPERTY_NEW_PASSWORD, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNewPassword(@javax.annotation.Nullable String newPassword) {
    this.newPassword = newPassword;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MeControllerApiUpdatePasswordRequest meControllerApiUpdatePasswordRequest = (MeControllerApiUpdatePasswordRequest) o;
    return Objects.equals(this.oldPassword, meControllerApiUpdatePasswordRequest.oldPassword) &&
        Objects.equals(this.newPassword, meControllerApiUpdatePasswordRequest.newPassword);
  }

  @Override
  public int hashCode() {
    return Objects.hash(oldPassword, newPassword);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MeControllerApiUpdatePasswordRequest {\n");
    sb.append("    oldPassword: ").append(toIndentedString(oldPassword)).append("\n");
    sb.append("    newPassword: ").append(toIndentedString(newPassword)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

