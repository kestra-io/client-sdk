/*
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kestra.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.kestra.sdk.model.QueryFilter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * DeleteExecutionsByQueryRequest
 */
@JsonPropertyOrder({
  DeleteExecutionsByQueryRequest.JSON_PROPERTY_FILTERS
})
@JsonTypeName("deleteExecutionsByQuery_request")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-03T07:32:20.514591171Z[Etc/UTC]", comments = "Generator version: 7.14.0-SNAPSHOT")
public class DeleteExecutionsByQueryRequest {
  public static final String JSON_PROPERTY_FILTERS = "filters";
  @javax.annotation.Nullable
  private JsonNullable<List<QueryFilter>> filters = JsonNullable.<List<QueryFilter>>undefined();

  public DeleteExecutionsByQueryRequest() {
  }

  public DeleteExecutionsByQueryRequest filters(@javax.annotation.Nullable List<QueryFilter> filters) {
    this.filters = JsonNullable.<List<QueryFilter>>of(filters);
    
    return this;
  }

  public DeleteExecutionsByQueryRequest addFiltersItem(QueryFilter filtersItem) {
    if (this.filters == null || !this.filters.isPresent()) {
      this.filters = JsonNullable.<List<QueryFilter>>of(new ArrayList<>());
    }
    try {
      this.filters.get().add(filtersItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

  /**
   * Filters
   * @return filters
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public List<QueryFilter> getFilters() {
        return filters.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_FILTERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<List<QueryFilter>> getFilters_JsonNullable() {
    return filters;
  }
  
  @JsonProperty(JSON_PROPERTY_FILTERS)
  public void setFilters_JsonNullable(JsonNullable<List<QueryFilter>> filters) {
    this.filters = filters;
  }

  public void setFilters(@javax.annotation.Nullable List<QueryFilter> filters) {
    this.filters = JsonNullable.<List<QueryFilter>>of(filters);
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeleteExecutionsByQueryRequest deleteExecutionsByQueryRequest = (DeleteExecutionsByQueryRequest) o;
    return equalsNullable(this.filters, deleteExecutionsByQueryRequest.filters);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(filters));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeleteExecutionsByQueryRequest {\n");
    sb.append("    filters: ").append(toIndentedString(filters)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `filters` to the URL query string
    if (getFilters() != null) {
      for (int i = 0; i < getFilters().size(); i++) {
        if (getFilters().get(i) != null) {
          joiner.add(getFilters().get(i).toUrlQueryString(String.format("%sfilters%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    return joiner.toString();
  }

}

