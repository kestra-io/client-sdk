/*
 * Kestra EE
 * All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kestra.sdk.model;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * AppResponse
 */
@JsonPropertyOrder({
  AppResponse.JSON_PROPERTY_DISPATCH,
  AppResponse.JSON_PROPERTY_STREAM,
  AppResponse.JSON_PROPERTY_LAYOUT
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-05T07:35:23.657005690Z[Etc/UTC]", comments = "Generator version: 7.14.0-SNAPSHOT")
public class AppResponse {
  public static final String JSON_PROPERTY_DISPATCH = "dispatch";
  @javax.annotation.Nonnull
  private String dispatch;

  public static final String JSON_PROPERTY_STREAM = "stream";
  @javax.annotation.Nonnull
  private String stream;

  public static final String JSON_PROPERTY_LAYOUT = "layout";
  @javax.annotation.Nonnull
  private AppResponseUILayout layout;

  public AppResponse() {
  }

  public AppResponse dispatch(@javax.annotation.Nonnull String dispatch) {

    this.dispatch = dispatch;
    return this;
  }

  /**
   * Get dispatch
   * @return dispatch
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DISPATCH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getDispatch() {
    return dispatch;
  }


  @JsonProperty(JSON_PROPERTY_DISPATCH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDispatch(@javax.annotation.Nonnull String dispatch) {
    this.dispatch = dispatch;
  }

  public AppResponse stream(@javax.annotation.Nonnull String stream) {

    this.stream = stream;
    return this;
  }

  /**
   * Get stream
   * @return stream
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_STREAM)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getStream() {
    return stream;
  }


  @JsonProperty(JSON_PROPERTY_STREAM)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStream(@javax.annotation.Nonnull String stream) {
    this.stream = stream;
  }

  public AppResponse layout(@javax.annotation.Nonnull AppResponseUILayout layout) {

    this.layout = layout;
    return this;
  }

  /**
   * Get layout
   * @return layout
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_LAYOUT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public AppResponseUILayout getLayout() {
    return layout;
  }


  @JsonProperty(JSON_PROPERTY_LAYOUT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLayout(@javax.annotation.Nonnull AppResponseUILayout layout) {
    this.layout = layout;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppResponse appResponse = (AppResponse) o;
    return Objects.equals(this.dispatch, appResponse.dispatch) &&
        Objects.equals(this.stream, appResponse.stream) &&
        Objects.equals(this.layout, appResponse.layout);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dispatch, stream, layout);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AppResponse {\n");
    sb.append("    dispatch: ").append(toIndentedString(dispatch)).append("\n");
    sb.append("    stream: ").append(toIndentedString(stream)).append("\n");
    sb.append("    layout: ").append(toIndentedString(layout)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `dispatch` to the URL query string
    if (getDispatch() != null) {
      try {
        joiner.add(String.format("%sdispatch%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDispatch()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `stream` to the URL query string
    if (getStream() != null) {
      try {
        joiner.add(String.format("%sstream%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getStream()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `layout` to the URL query string
    if (getLayout() != null) {
      joiner.add(getLayout().toUrlQueryString(prefix + "layout" + suffix));
    }

    return joiner.toString();
  }

}

