/*
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kestra.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * TestSuiteServiceRunByQueryRequest
 */
@JsonPropertyOrder({
  TestSuiteServiceRunByQueryRequest.JSON_PROPERTY_NAMESPACE,
  TestSuiteServiceRunByQueryRequest.JSON_PROPERTY_FLOW_ID,
  TestSuiteServiceRunByQueryRequest.JSON_PROPERTY_INCLUDE_CHILD_NAMESPACES
})
@JsonTypeName("TestSuiteService.RunByQueryRequest")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.14.0-SNAPSHOT")
public class TestSuiteServiceRunByQueryRequest {
  public static final String JSON_PROPERTY_NAMESPACE = "namespace";
  @javax.annotation.Nullable
  private String namespace;

  public static final String JSON_PROPERTY_FLOW_ID = "flowId";
  @javax.annotation.Nullable
  private String flowId;

  public static final String JSON_PROPERTY_INCLUDE_CHILD_NAMESPACES = "includeChildNamespaces";
  @javax.annotation.Nonnull
  private Boolean includeChildNamespaces = true;

  public TestSuiteServiceRunByQueryRequest() {
  }

  public TestSuiteServiceRunByQueryRequest namespace(@javax.annotation.Nullable String namespace) {
    
    this.namespace = namespace;
    return this;
  }

  /**
   * Get namespace
   * @return namespace
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NAMESPACE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getNamespace() {
    return namespace;
  }


  @JsonProperty(JSON_PROPERTY_NAMESPACE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setNamespace(@javax.annotation.Nullable String namespace) {
    this.namespace = namespace;
  }

  public TestSuiteServiceRunByQueryRequest flowId(@javax.annotation.Nullable String flowId) {
    
    this.flowId = flowId;
    return this;
  }

  /**
   * Get flowId
   * @return flowId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FLOW_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getFlowId() {
    return flowId;
  }


  @JsonProperty(JSON_PROPERTY_FLOW_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFlowId(@javax.annotation.Nullable String flowId) {
    this.flowId = flowId;
  }

  public TestSuiteServiceRunByQueryRequest includeChildNamespaces(@javax.annotation.Nonnull Boolean includeChildNamespaces) {
    
    this.includeChildNamespaces = includeChildNamespaces;
    return this;
  }

  /**
   * Should child namespaces be included or not
   * @return includeChildNamespaces
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_INCLUDE_CHILD_NAMESPACES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getIncludeChildNamespaces() {
    return includeChildNamespaces;
  }


  @JsonProperty(JSON_PROPERTY_INCLUDE_CHILD_NAMESPACES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIncludeChildNamespaces(@javax.annotation.Nonnull Boolean includeChildNamespaces) {
    this.includeChildNamespaces = includeChildNamespaces;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestSuiteServiceRunByQueryRequest testSuiteServiceRunByQueryRequest = (TestSuiteServiceRunByQueryRequest) o;
    return Objects.equals(this.namespace, testSuiteServiceRunByQueryRequest.namespace) &&
        Objects.equals(this.flowId, testSuiteServiceRunByQueryRequest.flowId) &&
        Objects.equals(this.includeChildNamespaces, testSuiteServiceRunByQueryRequest.includeChildNamespaces);
  }

  @Override
  public int hashCode() {
    return Objects.hash(namespace, flowId, includeChildNamespaces);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestSuiteServiceRunByQueryRequest {\n");
    sb.append("    namespace: ").append(toIndentedString(namespace)).append("\n");
    sb.append("    flowId: ").append(toIndentedString(flowId)).append("\n");
    sb.append("    includeChildNamespaces: ").append(toIndentedString(includeChildNamespaces)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

