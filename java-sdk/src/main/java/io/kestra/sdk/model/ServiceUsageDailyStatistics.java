/*
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kestra.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.time.LocalDate;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * ServiceUsageDailyStatistics
 */
@JsonPropertyOrder({
  ServiceUsageDailyStatistics.JSON_PROPERTY_DATE,
  ServiceUsageDailyStatistics.JSON_PROPERTY_MIN,
  ServiceUsageDailyStatistics.JSON_PROPERTY_MAX,
  ServiceUsageDailyStatistics.JSON_PROPERTY_AVG
})
@JsonTypeName("ServiceUsage.DailyStatistics")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-28T12:15:52.743487342Z[Etc/UTC]", comments = "Generator version: 7.14.0-SNAPSHOT")
public class ServiceUsageDailyStatistics {
  public static final String JSON_PROPERTY_DATE = "date";
  @javax.annotation.Nullable
  private LocalDate date;

  public static final String JSON_PROPERTY_MIN = "min";
  @javax.annotation.Nullable
  private Long min;

  public static final String JSON_PROPERTY_MAX = "max";
  @javax.annotation.Nullable
  private Long max;

  public static final String JSON_PROPERTY_AVG = "avg";
  @javax.annotation.Nullable
  private Long avg;

  public ServiceUsageDailyStatistics() {
  }

  public ServiceUsageDailyStatistics date(@javax.annotation.Nullable LocalDate date) {
    
    this.date = date;
    return this;
  }

  /**
   * Get date
   * @return date
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public LocalDate getDate() {
    return date;
  }


  @JsonProperty(JSON_PROPERTY_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDate(@javax.annotation.Nullable LocalDate date) {
    this.date = date;
  }

  public ServiceUsageDailyStatistics min(@javax.annotation.Nullable Long min) {
    
    this.min = min;
    return this;
  }

  /**
   * Get min
   * @return min
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MIN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getMin() {
    return min;
  }


  @JsonProperty(JSON_PROPERTY_MIN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMin(@javax.annotation.Nullable Long min) {
    this.min = min;
  }

  public ServiceUsageDailyStatistics max(@javax.annotation.Nullable Long max) {
    
    this.max = max;
    return this;
  }

  /**
   * Get max
   * @return max
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MAX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getMax() {
    return max;
  }


  @JsonProperty(JSON_PROPERTY_MAX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMax(@javax.annotation.Nullable Long max) {
    this.max = max;
  }

  public ServiceUsageDailyStatistics avg(@javax.annotation.Nullable Long avg) {
    
    this.avg = avg;
    return this;
  }

  /**
   * Get avg
   * @return avg
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AVG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getAvg() {
    return avg;
  }


  @JsonProperty(JSON_PROPERTY_AVG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAvg(@javax.annotation.Nullable Long avg) {
    this.avg = avg;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServiceUsageDailyStatistics serviceUsageDailyStatistics = (ServiceUsageDailyStatistics) o;
    return Objects.equals(this.date, serviceUsageDailyStatistics.date) &&
        Objects.equals(this.min, serviceUsageDailyStatistics.min) &&
        Objects.equals(this.max, serviceUsageDailyStatistics.max) &&
        Objects.equals(this.avg, serviceUsageDailyStatistics.avg);
  }

  @Override
  public int hashCode() {
    return Objects.hash(date, min, max, avg);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServiceUsageDailyStatistics {\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    min: ").append(toIndentedString(min)).append("\n");
    sb.append("    max: ").append(toIndentedString(max)).append("\n");
    sb.append("    avg: ").append(toIndentedString(avg)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `date` to the URL query string
    if (getDate() != null) {
      try {
        joiner.add(String.format("%sdate%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDate()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `min` to the URL query string
    if (getMin() != null) {
      try {
        joiner.add(String.format("%smin%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getMin()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `max` to the URL query string
    if (getMax() != null) {
      try {
        joiner.add(String.format("%smax%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getMax()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `avg` to the URL query string
    if (getAvg() != null) {
      try {
        joiner.add(String.format("%savg%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getAvg()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

