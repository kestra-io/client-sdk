/*
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kestra.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.kestra.sdk.model.IAMTenantAccessControllerApiGroup;
import io.kestra.sdk.model.IAMTenantAccessControllerApiRoleAssignment;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * IAMTenantAccessControllerApiTenantAccess
 */
@JsonPropertyOrder({
  IAMTenantAccessControllerApiTenantAccess.JSON_PROPERTY_TENANT_ID,
  IAMTenantAccessControllerApiTenantAccess.JSON_PROPERTY_USER_ID,
  IAMTenantAccessControllerApiTenantAccess.JSON_PROPERTY_USERNAME,
  IAMTenantAccessControllerApiTenantAccess.JSON_PROPERTY_DISPLAY_NAME,
  IAMTenantAccessControllerApiTenantAccess.JSON_PROPERTY_GROUPS,
  IAMTenantAccessControllerApiTenantAccess.JSON_PROPERTY_ROLES,
  IAMTenantAccessControllerApiTenantAccess.JSON_PROPERTY_SUPER_ADMIN
})
@JsonTypeName("IAMTenantAccessController.ApiTenantAccess")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-28T12:15:52.743487342Z[Etc/UTC]", comments = "Generator version: 7.14.0-SNAPSHOT")
public class IAMTenantAccessControllerApiTenantAccess {
  public static final String JSON_PROPERTY_TENANT_ID = "tenantId";
  @javax.annotation.Nullable
  private String tenantId;

  public static final String JSON_PROPERTY_USER_ID = "userId";
  @javax.annotation.Nullable
  private String userId;

  public static final String JSON_PROPERTY_USERNAME = "username";
  @javax.annotation.Nullable
  private String username;

  public static final String JSON_PROPERTY_DISPLAY_NAME = "displayName";
  @javax.annotation.Nullable
  private String displayName;

  public static final String JSON_PROPERTY_GROUPS = "groups";
  @javax.annotation.Nullable
  private List<IAMTenantAccessControllerApiGroup> groups = new ArrayList<>();

  public static final String JSON_PROPERTY_ROLES = "roles";
  @javax.annotation.Nullable
  private List<IAMTenantAccessControllerApiRoleAssignment> roles = new ArrayList<>();

  public static final String JSON_PROPERTY_SUPER_ADMIN = "superAdmin";
  @javax.annotation.Nullable
  private Boolean superAdmin;

  public IAMTenantAccessControllerApiTenantAccess() {
  }

  public IAMTenantAccessControllerApiTenantAccess tenantId(@javax.annotation.Nullable String tenantId) {
    
    this.tenantId = tenantId;
    return this;
  }

  /**
   * Get tenantId
   * @return tenantId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TENANT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTenantId() {
    return tenantId;
  }


  @JsonProperty(JSON_PROPERTY_TENANT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTenantId(@javax.annotation.Nullable String tenantId) {
    this.tenantId = tenantId;
  }

  public IAMTenantAccessControllerApiTenantAccess userId(@javax.annotation.Nullable String userId) {
    
    this.userId = userId;
    return this;
  }

  /**
   * Get userId
   * @return userId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUserId() {
    return userId;
  }


  @JsonProperty(JSON_PROPERTY_USER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUserId(@javax.annotation.Nullable String userId) {
    this.userId = userId;
  }

  public IAMTenantAccessControllerApiTenantAccess username(@javax.annotation.Nullable String username) {
    
    this.username = username;
    return this;
  }

  /**
   * Get username
   * @return username
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USERNAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUsername() {
    return username;
  }


  @JsonProperty(JSON_PROPERTY_USERNAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUsername(@javax.annotation.Nullable String username) {
    this.username = username;
  }

  public IAMTenantAccessControllerApiTenantAccess displayName(@javax.annotation.Nullable String displayName) {
    
    this.displayName = displayName;
    return this;
  }

  /**
   * Get displayName
   * @return displayName
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DISPLAY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDisplayName() {
    return displayName;
  }


  @JsonProperty(JSON_PROPERTY_DISPLAY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDisplayName(@javax.annotation.Nullable String displayName) {
    this.displayName = displayName;
  }

  public IAMTenantAccessControllerApiTenantAccess groups(@javax.annotation.Nullable List<IAMTenantAccessControllerApiGroup> groups) {
    
    this.groups = groups;
    return this;
  }

  public IAMTenantAccessControllerApiTenantAccess addGroupsItem(IAMTenantAccessControllerApiGroup groupsItem) {
    if (this.groups == null) {
      this.groups = new ArrayList<>();
    }
    this.groups.add(groupsItem);
    return this;
  }

  /**
   * Get groups
   * @return groups
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_GROUPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<IAMTenantAccessControllerApiGroup> getGroups() {
    return groups;
  }


  @JsonProperty(JSON_PROPERTY_GROUPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGroups(@javax.annotation.Nullable List<IAMTenantAccessControllerApiGroup> groups) {
    this.groups = groups;
  }

  public IAMTenantAccessControllerApiTenantAccess roles(@javax.annotation.Nullable List<IAMTenantAccessControllerApiRoleAssignment> roles) {
    
    this.roles = roles;
    return this;
  }

  public IAMTenantAccessControllerApiTenantAccess addRolesItem(IAMTenantAccessControllerApiRoleAssignment rolesItem) {
    if (this.roles == null) {
      this.roles = new ArrayList<>();
    }
    this.roles.add(rolesItem);
    return this;
  }

  /**
   * Get roles
   * @return roles
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ROLES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<IAMTenantAccessControllerApiRoleAssignment> getRoles() {
    return roles;
  }


  @JsonProperty(JSON_PROPERTY_ROLES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRoles(@javax.annotation.Nullable List<IAMTenantAccessControllerApiRoleAssignment> roles) {
    this.roles = roles;
  }

  public IAMTenantAccessControllerApiTenantAccess superAdmin(@javax.annotation.Nullable Boolean superAdmin) {
    
    this.superAdmin = superAdmin;
    return this;
  }

  /**
   * Get superAdmin
   * @return superAdmin
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SUPER_ADMIN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getSuperAdmin() {
    return superAdmin;
  }


  @JsonProperty(JSON_PROPERTY_SUPER_ADMIN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSuperAdmin(@javax.annotation.Nullable Boolean superAdmin) {
    this.superAdmin = superAdmin;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IAMTenantAccessControllerApiTenantAccess iaMTenantAccessControllerApiTenantAccess = (IAMTenantAccessControllerApiTenantAccess) o;
    return Objects.equals(this.tenantId, iaMTenantAccessControllerApiTenantAccess.tenantId) &&
        Objects.equals(this.userId, iaMTenantAccessControllerApiTenantAccess.userId) &&
        Objects.equals(this.username, iaMTenantAccessControllerApiTenantAccess.username) &&
        Objects.equals(this.displayName, iaMTenantAccessControllerApiTenantAccess.displayName) &&
        Objects.equals(this.groups, iaMTenantAccessControllerApiTenantAccess.groups) &&
        Objects.equals(this.roles, iaMTenantAccessControllerApiTenantAccess.roles) &&
        Objects.equals(this.superAdmin, iaMTenantAccessControllerApiTenantAccess.superAdmin);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tenantId, userId, username, displayName, groups, roles, superAdmin);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IAMTenantAccessControllerApiTenantAccess {\n");
    sb.append("    tenantId: ").append(toIndentedString(tenantId)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    groups: ").append(toIndentedString(groups)).append("\n");
    sb.append("    roles: ").append(toIndentedString(roles)).append("\n");
    sb.append("    superAdmin: ").append(toIndentedString(superAdmin)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `tenantId` to the URL query string
    if (getTenantId() != null) {
      try {
        joiner.add(String.format("%stenantId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTenantId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `userId` to the URL query string
    if (getUserId() != null) {
      try {
        joiner.add(String.format("%suserId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUserId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `username` to the URL query string
    if (getUsername() != null) {
      try {
        joiner.add(String.format("%susername%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUsername()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `displayName` to the URL query string
    if (getDisplayName() != null) {
      try {
        joiner.add(String.format("%sdisplayName%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDisplayName()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `groups` to the URL query string
    if (getGroups() != null) {
      for (int i = 0; i < getGroups().size(); i++) {
        if (getGroups().get(i) != null) {
          joiner.add(getGroups().get(i).toUrlQueryString(String.format("%sgroups%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `roles` to the URL query string
    if (getRoles() != null) {
      for (int i = 0; i < getRoles().size(); i++) {
        if (getRoles().get(i) != null) {
          joiner.add(getRoles().get(i).toUrlQueryString(String.format("%sroles%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `superAdmin` to the URL query string
    if (getSuperAdmin() != null) {
      try {
        joiner.add(String.format("%ssuperAdmin%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSuperAdmin()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

