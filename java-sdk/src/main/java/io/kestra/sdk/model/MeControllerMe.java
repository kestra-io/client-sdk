/*
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kestra.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.kestra.sdk.model.AclServiceNamespaceRole;
import io.kestra.sdk.model.ApiTenant;
import io.kestra.sdk.model.ApiUser;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * MeControllerMe
 */
@JsonPropertyOrder({
  MeControllerMe.JSON_PROPERTY_USER,
  MeControllerMe.JSON_PROPERTY_ROLES,
  MeControllerMe.JSON_PROPERTY_TENANTS
})
@JsonTypeName("MeController.Me")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-28T12:07:17.548591265Z[Etc/UTC]", comments = "Generator version: 7.14.0-SNAPSHOT")
public class MeControllerMe {
  public static final String JSON_PROPERTY_USER = "user";
  @javax.annotation.Nonnull
  private ApiUser user;

  public static final String JSON_PROPERTY_ROLES = "roles";
  @javax.annotation.Nonnull
  private List<AclServiceNamespaceRole> roles = new ArrayList<>();

  public static final String JSON_PROPERTY_TENANTS = "tenants";
  @javax.annotation.Nonnull
  private List<ApiTenant> tenants = new ArrayList<>();

  public MeControllerMe() {
  }

  public MeControllerMe user(@javax.annotation.Nonnull ApiUser user) {
    
    this.user = user;
    return this;
  }

  /**
   * Get user
   * @return user
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_USER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public ApiUser getUser() {
    return user;
  }


  @JsonProperty(JSON_PROPERTY_USER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUser(@javax.annotation.Nonnull ApiUser user) {
    this.user = user;
  }

  public MeControllerMe roles(@javax.annotation.Nonnull List<AclServiceNamespaceRole> roles) {
    
    this.roles = roles;
    return this;
  }

  public MeControllerMe addRolesItem(AclServiceNamespaceRole rolesItem) {
    if (this.roles == null) {
      this.roles = new ArrayList<>();
    }
    this.roles.add(rolesItem);
    return this;
  }

  /**
   * Get roles
   * @return roles
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ROLES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<AclServiceNamespaceRole> getRoles() {
    return roles;
  }


  @JsonProperty(JSON_PROPERTY_ROLES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRoles(@javax.annotation.Nonnull List<AclServiceNamespaceRole> roles) {
    this.roles = roles;
  }

  public MeControllerMe tenants(@javax.annotation.Nonnull List<ApiTenant> tenants) {
    
    this.tenants = tenants;
    return this;
  }

  public MeControllerMe addTenantsItem(ApiTenant tenantsItem) {
    if (this.tenants == null) {
      this.tenants = new ArrayList<>();
    }
    this.tenants.add(tenantsItem);
    return this;
  }

  /**
   * Get tenants
   * @return tenants
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TENANTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<ApiTenant> getTenants() {
    return tenants;
  }


  @JsonProperty(JSON_PROPERTY_TENANTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTenants(@javax.annotation.Nonnull List<ApiTenant> tenants) {
    this.tenants = tenants;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MeControllerMe meControllerMe = (MeControllerMe) o;
    return Objects.equals(this.user, meControllerMe.user) &&
        Objects.equals(this.roles, meControllerMe.roles) &&
        Objects.equals(this.tenants, meControllerMe.tenants);
  }

  @Override
  public int hashCode() {
    return Objects.hash(user, roles, tenants);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MeControllerMe {\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    roles: ").append(toIndentedString(roles)).append("\n");
    sb.append("    tenants: ").append(toIndentedString(tenants)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `user` to the URL query string
    if (getUser() != null) {
      joiner.add(getUser().toUrlQueryString(prefix + "user" + suffix));
    }

    // add `roles` to the URL query string
    if (getRoles() != null) {
      for (int i = 0; i < getRoles().size(); i++) {
        if (getRoles().get(i) != null) {
          joiner.add(getRoles().get(i).toUrlQueryString(String.format("%sroles%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `tenants` to the URL query string
    if (getTenants() != null) {
      for (int i = 0; i < getTenants().size(); i++) {
        if (getTenants().get(i) != null) {
          joiner.add(getTenants().get(i).toUrlQueryString(String.format("%stenants%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    return joiner.toString();
  }

}

