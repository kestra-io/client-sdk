/*
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kestra.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.kestra.sdk.model.State;
import io.kestra.sdk.model.TaskRunAttempt;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * TaskRun
 */
@JsonPropertyOrder({
  TaskRun.JSON_PROPERTY_ITEMS,
  TaskRun.JSON_PROPERTY_ID,
  TaskRun.JSON_PROPERTY_EXECUTION_ID,
  TaskRun.JSON_PROPERTY_NAMESPACE,
  TaskRun.JSON_PROPERTY_FLOW_ID,
  TaskRun.JSON_PROPERTY_TASK_ID,
  TaskRun.JSON_PROPERTY_PARENT_TASK_RUN_ID,
  TaskRun.JSON_PROPERTY_VALUE,
  TaskRun.JSON_PROPERTY_ATTEMPTS,
  TaskRun.JSON_PROPERTY_OUTPUTS,
  TaskRun.JSON_PROPERTY_STATE,
  TaskRun.JSON_PROPERTY_ITERATION,
  TaskRun.JSON_PROPERTY_DYNAMIC,
  TaskRun.JSON_PROPERTY_FORCE_EXECUTION
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.14.0-SNAPSHOT")
public class TaskRun {
  public static final String JSON_PROPERTY_ITEMS = "items";
  @javax.annotation.Nullable
  private String items;

  public static final String JSON_PROPERTY_ID = "id";
  @javax.annotation.Nonnull
  private String id;

  public static final String JSON_PROPERTY_EXECUTION_ID = "executionId";
  @javax.annotation.Nonnull
  private String executionId;

  public static final String JSON_PROPERTY_NAMESPACE = "namespace";
  @javax.annotation.Nonnull
  private String namespace;

  public static final String JSON_PROPERTY_FLOW_ID = "flowId";
  @javax.annotation.Nonnull
  private String flowId;

  public static final String JSON_PROPERTY_TASK_ID = "taskId";
  @javax.annotation.Nonnull
  private String taskId;

  public static final String JSON_PROPERTY_PARENT_TASK_RUN_ID = "parentTaskRunId";
  @javax.annotation.Nonnull
  private String parentTaskRunId;

  public static final String JSON_PROPERTY_VALUE = "value";
  @javax.annotation.Nonnull
  private String value;

  public static final String JSON_PROPERTY_ATTEMPTS = "attempts";
  @javax.annotation.Nonnull
  private List<TaskRunAttempt> attempts = new ArrayList<>();

  public static final String JSON_PROPERTY_OUTPUTS = "outputs";
  @javax.annotation.Nonnull
  private Map<String, Object> outputs = new HashMap<>();

  public static final String JSON_PROPERTY_STATE = "state";
  @javax.annotation.Nonnull
  private State state;

  public static final String JSON_PROPERTY_ITERATION = "iteration";
  @javax.annotation.Nonnull
  private Integer iteration;

  public static final String JSON_PROPERTY_DYNAMIC = "dynamic";
  @javax.annotation.Nonnull
  private Boolean dynamic;

  public static final String JSON_PROPERTY_FORCE_EXECUTION = "forceExecution";
  @javax.annotation.Nullable
  private JsonNullable<Boolean> forceExecution = JsonNullable.<Boolean>undefined();

  public TaskRun() {
  }

  public TaskRun items(@javax.annotation.Nullable String items) {
    
    this.items = items;
    return this;
  }

  /**
   * Get items
   * @return items
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ITEMS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getItems() {
    return items;
  }


  @JsonProperty(JSON_PROPERTY_ITEMS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setItems(@javax.annotation.Nullable String items) {
    this.items = items;
  }

  public TaskRun id(@javax.annotation.Nonnull String id) {
    
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(@javax.annotation.Nonnull String id) {
    this.id = id;
  }

  public TaskRun executionId(@javax.annotation.Nonnull String executionId) {
    
    this.executionId = executionId;
    return this;
  }

  /**
   * Get executionId
   * @return executionId
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_EXECUTION_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getExecutionId() {
    return executionId;
  }


  @JsonProperty(JSON_PROPERTY_EXECUTION_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setExecutionId(@javax.annotation.Nonnull String executionId) {
    this.executionId = executionId;
  }

  public TaskRun namespace(@javax.annotation.Nonnull String namespace) {
    
    this.namespace = namespace;
    return this;
  }

  /**
   * Get namespace
   * @return namespace
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NAMESPACE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getNamespace() {
    return namespace;
  }


  @JsonProperty(JSON_PROPERTY_NAMESPACE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setNamespace(@javax.annotation.Nonnull String namespace) {
    this.namespace = namespace;
  }

  public TaskRun flowId(@javax.annotation.Nonnull String flowId) {
    
    this.flowId = flowId;
    return this;
  }

  /**
   * Get flowId
   * @return flowId
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_FLOW_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getFlowId() {
    return flowId;
  }


  @JsonProperty(JSON_PROPERTY_FLOW_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFlowId(@javax.annotation.Nonnull String flowId) {
    this.flowId = flowId;
  }

  public TaskRun taskId(@javax.annotation.Nonnull String taskId) {
    
    this.taskId = taskId;
    return this;
  }

  /**
   * Get taskId
   * @return taskId
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TASK_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getTaskId() {
    return taskId;
  }


  @JsonProperty(JSON_PROPERTY_TASK_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTaskId(@javax.annotation.Nonnull String taskId) {
    this.taskId = taskId;
  }

  public TaskRun parentTaskRunId(@javax.annotation.Nonnull String parentTaskRunId) {
    
    this.parentTaskRunId = parentTaskRunId;
    return this;
  }

  /**
   * Get parentTaskRunId
   * @return parentTaskRunId
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PARENT_TASK_RUN_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getParentTaskRunId() {
    return parentTaskRunId;
  }


  @JsonProperty(JSON_PROPERTY_PARENT_TASK_RUN_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setParentTaskRunId(@javax.annotation.Nonnull String parentTaskRunId) {
    this.parentTaskRunId = parentTaskRunId;
  }

  public TaskRun value(@javax.annotation.Nonnull String value) {
    
    this.value = value;
    return this;
  }

  /**
   * Get value
   * @return value
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_VALUE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getValue() {
    return value;
  }


  @JsonProperty(JSON_PROPERTY_VALUE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setValue(@javax.annotation.Nonnull String value) {
    this.value = value;
  }

  public TaskRun attempts(@javax.annotation.Nonnull List<TaskRunAttempt> attempts) {
    
    this.attempts = attempts;
    return this;
  }

  public TaskRun addAttemptsItem(TaskRunAttempt attemptsItem) {
    if (this.attempts == null) {
      this.attempts = new ArrayList<>();
    }
    this.attempts.add(attemptsItem);
    return this;
  }

  /**
   * Get attempts
   * @return attempts
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ATTEMPTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<TaskRunAttempt> getAttempts() {
    return attempts;
  }


  @JsonProperty(JSON_PROPERTY_ATTEMPTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAttempts(@javax.annotation.Nonnull List<TaskRunAttempt> attempts) {
    this.attempts = attempts;
  }

  public TaskRun outputs(@javax.annotation.Nonnull Map<String, Object> outputs) {
    
    this.outputs = outputs;
    return this;
  }

  public TaskRun putOutputsItem(String key, Object outputsItem) {
    this.outputs.put(key, outputsItem);
    return this;
  }

  /**
   * Get outputs
   * @return outputs
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_OUTPUTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Map<String, Object> getOutputs() {
    return outputs;
  }


  @JsonProperty(JSON_PROPERTY_OUTPUTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setOutputs(@javax.annotation.Nonnull Map<String, Object> outputs) {
    this.outputs = outputs;
  }

  public TaskRun state(@javax.annotation.Nonnull State state) {
    
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_STATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public State getState() {
    return state;
  }


  @JsonProperty(JSON_PROPERTY_STATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setState(@javax.annotation.Nonnull State state) {
    this.state = state;
  }

  public TaskRun iteration(@javax.annotation.Nonnull Integer iteration) {
    
    this.iteration = iteration;
    return this;
  }

  /**
   * Get iteration
   * @return iteration
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ITERATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getIteration() {
    return iteration;
  }


  @JsonProperty(JSON_PROPERTY_ITERATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIteration(@javax.annotation.Nonnull Integer iteration) {
    this.iteration = iteration;
  }

  public TaskRun dynamic(@javax.annotation.Nonnull Boolean dynamic) {
    
    this.dynamic = dynamic;
    return this;
  }

  /**
   * Get dynamic
   * @return dynamic
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DYNAMIC)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getDynamic() {
    return dynamic;
  }


  @JsonProperty(JSON_PROPERTY_DYNAMIC)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDynamic(@javax.annotation.Nonnull Boolean dynamic) {
    this.dynamic = dynamic;
  }

  public TaskRun forceExecution(@javax.annotation.Nullable Boolean forceExecution) {
    this.forceExecution = JsonNullable.<Boolean>of(forceExecution);
    
    return this;
  }

  /**
   * Get forceExecution
   * @return forceExecution
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public Boolean getForceExecution() {
        return forceExecution.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_FORCE_EXECUTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Boolean> getForceExecution_JsonNullable() {
    return forceExecution;
  }
  
  @JsonProperty(JSON_PROPERTY_FORCE_EXECUTION)
  public void setForceExecution_JsonNullable(JsonNullable<Boolean> forceExecution) {
    this.forceExecution = forceExecution;
  }

  public void setForceExecution(@javax.annotation.Nullable Boolean forceExecution) {
    this.forceExecution = JsonNullable.<Boolean>of(forceExecution);
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TaskRun taskRun = (TaskRun) o;
    return Objects.equals(this.items, taskRun.items) &&
        Objects.equals(this.id, taskRun.id) &&
        Objects.equals(this.executionId, taskRun.executionId) &&
        Objects.equals(this.namespace, taskRun.namespace) &&
        Objects.equals(this.flowId, taskRun.flowId) &&
        Objects.equals(this.taskId, taskRun.taskId) &&
        Objects.equals(this.parentTaskRunId, taskRun.parentTaskRunId) &&
        Objects.equals(this.value, taskRun.value) &&
        Objects.equals(this.attempts, taskRun.attempts) &&
        Objects.equals(this.outputs, taskRun.outputs) &&
        Objects.equals(this.state, taskRun.state) &&
        Objects.equals(this.iteration, taskRun.iteration) &&
        Objects.equals(this.dynamic, taskRun.dynamic) &&
        equalsNullable(this.forceExecution, taskRun.forceExecution);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(items, id, executionId, namespace, flowId, taskId, parentTaskRunId, value, attempts, outputs, state, iteration, dynamic, hashCodeNullable(forceExecution));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TaskRun {\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    executionId: ").append(toIndentedString(executionId)).append("\n");
    sb.append("    namespace: ").append(toIndentedString(namespace)).append("\n");
    sb.append("    flowId: ").append(toIndentedString(flowId)).append("\n");
    sb.append("    taskId: ").append(toIndentedString(taskId)).append("\n");
    sb.append("    parentTaskRunId: ").append(toIndentedString(parentTaskRunId)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    attempts: ").append(toIndentedString(attempts)).append("\n");
    sb.append("    outputs: ").append(toIndentedString(outputs)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    iteration: ").append(toIndentedString(iteration)).append("\n");
    sb.append("    dynamic: ").append(toIndentedString(dynamic)).append("\n");
    sb.append("    forceExecution: ").append(toIndentedString(forceExecution)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

