/*
 * Kestra EE
 * All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kestra.sdk.model;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

import java.net.URI;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * PluginArtifact
 */
@JsonPropertyOrder({
  PluginArtifact.JSON_PROPERTY_GROUP_ID,
  PluginArtifact.JSON_PROPERTY_ARTIFACT_ID,
  PluginArtifact.JSON_PROPERTY_EXTENSION,
  PluginArtifact.JSON_PROPERTY_CLASSIFIER,
  PluginArtifact.JSON_PROPERTY_VERSION,
  PluginArtifact.JSON_PROPERTY_URI
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-05T07:35:23.657005690Z[Etc/UTC]", comments = "Generator version: 7.14.0-SNAPSHOT")
public class PluginArtifact {
  public static final String JSON_PROPERTY_GROUP_ID = "groupId";
  @javax.annotation.Nonnull
  private String groupId;

  public static final String JSON_PROPERTY_ARTIFACT_ID = "artifactId";
  @javax.annotation.Nonnull
  private String artifactId;

  public static final String JSON_PROPERTY_EXTENSION = "extension";
  @javax.annotation.Nonnull
  private String extension;

  public static final String JSON_PROPERTY_CLASSIFIER = "classifier";
  @javax.annotation.Nonnull
  private String classifier;

  public static final String JSON_PROPERTY_VERSION = "version";
  @javax.annotation.Nonnull
  private String version;

  public static final String JSON_PROPERTY_URI = "uri";
  @javax.annotation.Nonnull
  private URI uri;

  public PluginArtifact() {
  }

  public PluginArtifact groupId(@javax.annotation.Nonnull String groupId) {

    this.groupId = groupId;
    return this;
  }

  /**
   * Get groupId
   * @return groupId
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_GROUP_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getGroupId() {
    return groupId;
  }


  @JsonProperty(JSON_PROPERTY_GROUP_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setGroupId(@javax.annotation.Nonnull String groupId) {
    this.groupId = groupId;
  }

  public PluginArtifact artifactId(@javax.annotation.Nonnull String artifactId) {

    this.artifactId = artifactId;
    return this;
  }

  /**
   * Get artifactId
   * @return artifactId
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ARTIFACT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getArtifactId() {
    return artifactId;
  }


  @JsonProperty(JSON_PROPERTY_ARTIFACT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setArtifactId(@javax.annotation.Nonnull String artifactId) {
    this.artifactId = artifactId;
  }

  public PluginArtifact extension(@javax.annotation.Nonnull String extension) {

    this.extension = extension;
    return this;
  }

  /**
   * Get extension
   * @return extension
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_EXTENSION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getExtension() {
    return extension;
  }


  @JsonProperty(JSON_PROPERTY_EXTENSION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setExtension(@javax.annotation.Nonnull String extension) {
    this.extension = extension;
  }

  public PluginArtifact classifier(@javax.annotation.Nonnull String classifier) {

    this.classifier = classifier;
    return this;
  }

  /**
   * Get classifier
   * @return classifier
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CLASSIFIER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getClassifier() {
    return classifier;
  }


  @JsonProperty(JSON_PROPERTY_CLASSIFIER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setClassifier(@javax.annotation.Nonnull String classifier) {
    this.classifier = classifier;
  }

  public PluginArtifact version(@javax.annotation.Nonnull String version) {

    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_VERSION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getVersion() {
    return version;
  }


  @JsonProperty(JSON_PROPERTY_VERSION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setVersion(@javax.annotation.Nonnull String version) {
    this.version = version;
  }

  public PluginArtifact uri(@javax.annotation.Nonnull URI uri) {

    this.uri = uri;
    return this;
  }

  /**
   * Get uri
   * @return uri
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_URI)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public URI getUri() {
    return uri;
  }


  @JsonProperty(JSON_PROPERTY_URI)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUri(@javax.annotation.Nonnull URI uri) {
    this.uri = uri;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PluginArtifact pluginArtifact = (PluginArtifact) o;
    return Objects.equals(this.groupId, pluginArtifact.groupId) &&
        Objects.equals(this.artifactId, pluginArtifact.artifactId) &&
        Objects.equals(this.extension, pluginArtifact.extension) &&
        Objects.equals(this.classifier, pluginArtifact.classifier) &&
        Objects.equals(this.version, pluginArtifact.version) &&
        Objects.equals(this.uri, pluginArtifact.uri);
  }

  @Override
  public int hashCode() {
    return Objects.hash(groupId, artifactId, extension, classifier, version, uri);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PluginArtifact {\n");
    sb.append("    groupId: ").append(toIndentedString(groupId)).append("\n");
    sb.append("    artifactId: ").append(toIndentedString(artifactId)).append("\n");
    sb.append("    extension: ").append(toIndentedString(extension)).append("\n");
    sb.append("    classifier: ").append(toIndentedString(classifier)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `groupId` to the URL query string
    if (getGroupId() != null) {
      try {
        joiner.add(String.format("%sgroupId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getGroupId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `artifactId` to the URL query string
    if (getArtifactId() != null) {
      try {
        joiner.add(String.format("%sartifactId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getArtifactId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `extension` to the URL query string
    if (getExtension() != null) {
      try {
        joiner.add(String.format("%sextension%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getExtension()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `classifier` to the URL query string
    if (getClassifier() != null) {
      try {
        joiner.add(String.format("%sclassifier%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getClassifier()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `version` to the URL query string
    if (getVersion() != null) {
      try {
        joiner.add(String.format("%sversion%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getVersion()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `uri` to the URL query string
    if (getUri() != null) {
      try {
        joiner.add(String.format("%suri%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUri()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

