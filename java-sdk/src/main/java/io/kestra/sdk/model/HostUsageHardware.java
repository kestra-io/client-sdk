/*
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kestra.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * HostUsageHardware
 */
@JsonPropertyOrder({
  HostUsageHardware.JSON_PROPERTY_LOGICAL_PROCESSOR_COUNT,
  HostUsageHardware.JSON_PROPERTY_PHYSICAL_PROCESSOR_COUNT,
  HostUsageHardware.JSON_PROPERTY_MAX_FREQ,
  HostUsageHardware.JSON_PROPERTY_MEMORY,
  HostUsageHardware.JSON_PROPERTY_KNOWN_VM_MAC_ADDR,
  HostUsageHardware.JSON_PROPERTY_KNOWN_DOCKER_MAC_ADDR
})
@JsonTypeName("HostUsage.Hardware")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-28T12:15:52.743487342Z[Etc/UTC]", comments = "Generator version: 7.14.0-SNAPSHOT")
public class HostUsageHardware {
  public static final String JSON_PROPERTY_LOGICAL_PROCESSOR_COUNT = "logicalProcessorCount";
  @javax.annotation.Nullable
  private Integer logicalProcessorCount;

  public static final String JSON_PROPERTY_PHYSICAL_PROCESSOR_COUNT = "physicalProcessorCount";
  @javax.annotation.Nullable
  private Long physicalProcessorCount;

  public static final String JSON_PROPERTY_MAX_FREQ = "maxFreq";
  @javax.annotation.Nullable
  private Long maxFreq;

  public static final String JSON_PROPERTY_MEMORY = "memory";
  @javax.annotation.Nullable
  private Long memory;

  public static final String JSON_PROPERTY_KNOWN_VM_MAC_ADDR = "knownVmMacAddr";
  @javax.annotation.Nullable
  private Boolean knownVmMacAddr;

  public static final String JSON_PROPERTY_KNOWN_DOCKER_MAC_ADDR = "knownDockerMacAddr";
  @javax.annotation.Nullable
  private Boolean knownDockerMacAddr;

  public HostUsageHardware() {
  }

  public HostUsageHardware logicalProcessorCount(@javax.annotation.Nullable Integer logicalProcessorCount) {
    
    this.logicalProcessorCount = logicalProcessorCount;
    return this;
  }

  /**
   * Get logicalProcessorCount
   * @return logicalProcessorCount
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LOGICAL_PROCESSOR_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getLogicalProcessorCount() {
    return logicalProcessorCount;
  }


  @JsonProperty(JSON_PROPERTY_LOGICAL_PROCESSOR_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLogicalProcessorCount(@javax.annotation.Nullable Integer logicalProcessorCount) {
    this.logicalProcessorCount = logicalProcessorCount;
  }

  public HostUsageHardware physicalProcessorCount(@javax.annotation.Nullable Long physicalProcessorCount) {
    
    this.physicalProcessorCount = physicalProcessorCount;
    return this;
  }

  /**
   * Get physicalProcessorCount
   * @return physicalProcessorCount
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PHYSICAL_PROCESSOR_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getPhysicalProcessorCount() {
    return physicalProcessorCount;
  }


  @JsonProperty(JSON_PROPERTY_PHYSICAL_PROCESSOR_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPhysicalProcessorCount(@javax.annotation.Nullable Long physicalProcessorCount) {
    this.physicalProcessorCount = physicalProcessorCount;
  }

  public HostUsageHardware maxFreq(@javax.annotation.Nullable Long maxFreq) {
    
    this.maxFreq = maxFreq;
    return this;
  }

  /**
   * Get maxFreq
   * @return maxFreq
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MAX_FREQ)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getMaxFreq() {
    return maxFreq;
  }


  @JsonProperty(JSON_PROPERTY_MAX_FREQ)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMaxFreq(@javax.annotation.Nullable Long maxFreq) {
    this.maxFreq = maxFreq;
  }

  public HostUsageHardware memory(@javax.annotation.Nullable Long memory) {
    
    this.memory = memory;
    return this;
  }

  /**
   * Get memory
   * @return memory
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MEMORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getMemory() {
    return memory;
  }


  @JsonProperty(JSON_PROPERTY_MEMORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMemory(@javax.annotation.Nullable Long memory) {
    this.memory = memory;
  }

  public HostUsageHardware knownVmMacAddr(@javax.annotation.Nullable Boolean knownVmMacAddr) {
    
    this.knownVmMacAddr = knownVmMacAddr;
    return this;
  }

  /**
   * Get knownVmMacAddr
   * @return knownVmMacAddr
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_KNOWN_VM_MAC_ADDR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getKnownVmMacAddr() {
    return knownVmMacAddr;
  }


  @JsonProperty(JSON_PROPERTY_KNOWN_VM_MAC_ADDR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setKnownVmMacAddr(@javax.annotation.Nullable Boolean knownVmMacAddr) {
    this.knownVmMacAddr = knownVmMacAddr;
  }

  public HostUsageHardware knownDockerMacAddr(@javax.annotation.Nullable Boolean knownDockerMacAddr) {
    
    this.knownDockerMacAddr = knownDockerMacAddr;
    return this;
  }

  /**
   * Get knownDockerMacAddr
   * @return knownDockerMacAddr
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_KNOWN_DOCKER_MAC_ADDR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getKnownDockerMacAddr() {
    return knownDockerMacAddr;
  }


  @JsonProperty(JSON_PROPERTY_KNOWN_DOCKER_MAC_ADDR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setKnownDockerMacAddr(@javax.annotation.Nullable Boolean knownDockerMacAddr) {
    this.knownDockerMacAddr = knownDockerMacAddr;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HostUsageHardware hostUsageHardware = (HostUsageHardware) o;
    return Objects.equals(this.logicalProcessorCount, hostUsageHardware.logicalProcessorCount) &&
        Objects.equals(this.physicalProcessorCount, hostUsageHardware.physicalProcessorCount) &&
        Objects.equals(this.maxFreq, hostUsageHardware.maxFreq) &&
        Objects.equals(this.memory, hostUsageHardware.memory) &&
        Objects.equals(this.knownVmMacAddr, hostUsageHardware.knownVmMacAddr) &&
        Objects.equals(this.knownDockerMacAddr, hostUsageHardware.knownDockerMacAddr);
  }

  @Override
  public int hashCode() {
    return Objects.hash(logicalProcessorCount, physicalProcessorCount, maxFreq, memory, knownVmMacAddr, knownDockerMacAddr);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HostUsageHardware {\n");
    sb.append("    logicalProcessorCount: ").append(toIndentedString(logicalProcessorCount)).append("\n");
    sb.append("    physicalProcessorCount: ").append(toIndentedString(physicalProcessorCount)).append("\n");
    sb.append("    maxFreq: ").append(toIndentedString(maxFreq)).append("\n");
    sb.append("    memory: ").append(toIndentedString(memory)).append("\n");
    sb.append("    knownVmMacAddr: ").append(toIndentedString(knownVmMacAddr)).append("\n");
    sb.append("    knownDockerMacAddr: ").append(toIndentedString(knownDockerMacAddr)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `logicalProcessorCount` to the URL query string
    if (getLogicalProcessorCount() != null) {
      try {
        joiner.add(String.format("%slogicalProcessorCount%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getLogicalProcessorCount()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `physicalProcessorCount` to the URL query string
    if (getPhysicalProcessorCount() != null) {
      try {
        joiner.add(String.format("%sphysicalProcessorCount%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPhysicalProcessorCount()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `maxFreq` to the URL query string
    if (getMaxFreq() != null) {
      try {
        joiner.add(String.format("%smaxFreq%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getMaxFreq()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `memory` to the URL query string
    if (getMemory() != null) {
      try {
        joiner.add(String.format("%smemory%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getMemory()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `knownVmMacAddr` to the URL query string
    if (getKnownVmMacAddr() != null) {
      try {
        joiner.add(String.format("%sknownVmMacAddr%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getKnownVmMacAddr()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `knownDockerMacAddr` to the URL query string
    if (getKnownDockerMacAddr() != null) {
      try {
        joiner.add(String.format("%sknownDockerMacAddr%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getKnownDockerMacAddr()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

