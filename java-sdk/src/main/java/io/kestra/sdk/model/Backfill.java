/*
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kestra.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.kestra.sdk.model.Label;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * Backfill
 */
@JsonPropertyOrder({
  Backfill.JSON_PROPERTY_START,
  Backfill.JSON_PROPERTY_END,
  Backfill.JSON_PROPERTY_CURRENT_DATE,
  Backfill.JSON_PROPERTY_PAUSED,
  Backfill.JSON_PROPERTY_INPUTS,
  Backfill.JSON_PROPERTY_LABELS,
  Backfill.JSON_PROPERTY_PREVIOUS_NEXT_EXECUTION_DATE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-14T16:34:14.833468251Z[Etc/UTC]", comments = "Generator version: 7.14.0-SNAPSHOT")
public class Backfill {
  public static final String JSON_PROPERTY_START = "start";
  @javax.annotation.Nonnull
  private OffsetDateTime start;

  public static final String JSON_PROPERTY_END = "end";
  @javax.annotation.Nullable
  private OffsetDateTime end;

  public static final String JSON_PROPERTY_CURRENT_DATE = "currentDate";
  @javax.annotation.Nullable
  private OffsetDateTime currentDate;

  public static final String JSON_PROPERTY_PAUSED = "paused";
  @javax.annotation.Nullable
  private Boolean paused;

  public static final String JSON_PROPERTY_INPUTS = "inputs";
  @javax.annotation.Nullable
  private Map<String, Object> inputs = new HashMap<>();

  public static final String JSON_PROPERTY_LABELS = "labels";
  @javax.annotation.Nullable
  private List<Label> labels = new ArrayList<>();

  public static final String JSON_PROPERTY_PREVIOUS_NEXT_EXECUTION_DATE = "previousNextExecutionDate";
  @javax.annotation.Nullable
  private OffsetDateTime previousNextExecutionDate;

  public Backfill() {
  }

  public Backfill start(@javax.annotation.Nonnull OffsetDateTime start) {
    
    this.start = start;
    return this;
  }

  /**
   * Get start
   * @return start
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_START)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public OffsetDateTime getStart() {
    return start;
  }


  @JsonProperty(JSON_PROPERTY_START)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStart(@javax.annotation.Nonnull OffsetDateTime start) {
    this.start = start;
  }

  public Backfill end(@javax.annotation.Nullable OffsetDateTime end) {
    
    this.end = end;
    return this;
  }

  /**
   * Get end
   * @return end
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_END)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getEnd() {
    return end;
  }


  @JsonProperty(JSON_PROPERTY_END)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnd(@javax.annotation.Nullable OffsetDateTime end) {
    this.end = end;
  }

  public Backfill currentDate(@javax.annotation.Nullable OffsetDateTime currentDate) {
    
    this.currentDate = currentDate;
    return this;
  }

  /**
   * Get currentDate
   * @return currentDate
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CURRENT_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getCurrentDate() {
    return currentDate;
  }


  @JsonProperty(JSON_PROPERTY_CURRENT_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCurrentDate(@javax.annotation.Nullable OffsetDateTime currentDate) {
    this.currentDate = currentDate;
  }

  public Backfill paused(@javax.annotation.Nullable Boolean paused) {
    
    this.paused = paused;
    return this;
  }

  /**
   * Get paused
   * @return paused
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PAUSED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getPaused() {
    return paused;
  }


  @JsonProperty(JSON_PROPERTY_PAUSED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPaused(@javax.annotation.Nullable Boolean paused) {
    this.paused = paused;
  }

  public Backfill inputs(@javax.annotation.Nullable Map<String, Object> inputs) {
    
    this.inputs = inputs;
    return this;
  }

  public Backfill putInputsItem(String key, Object inputsItem) {
    if (this.inputs == null) {
      this.inputs = new HashMap<>();
    }
    this.inputs.put(key, inputsItem);
    return this;
  }

  /**
   * Get inputs
   * @return inputs
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INPUTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, Object> getInputs() {
    return inputs;
  }


  @JsonProperty(JSON_PROPERTY_INPUTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInputs(@javax.annotation.Nullable Map<String, Object> inputs) {
    this.inputs = inputs;
  }

  public Backfill labels(@javax.annotation.Nullable List<Label> labels) {
    
    this.labels = labels;
    return this;
  }

  public Backfill addLabelsItem(Label labelsItem) {
    if (this.labels == null) {
      this.labels = new ArrayList<>();
    }
    this.labels.add(labelsItem);
    return this;
  }

  /**
   * Get labels
   * @return labels
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LABELS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Label> getLabels() {
    return labels;
  }


  @JsonProperty(JSON_PROPERTY_LABELS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLabels(@javax.annotation.Nullable List<Label> labels) {
    this.labels = labels;
  }

  public Backfill previousNextExecutionDate(@javax.annotation.Nullable OffsetDateTime previousNextExecutionDate) {
    
    this.previousNextExecutionDate = previousNextExecutionDate;
    return this;
  }

  /**
   * Get previousNextExecutionDate
   * @return previousNextExecutionDate
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PREVIOUS_NEXT_EXECUTION_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getPreviousNextExecutionDate() {
    return previousNextExecutionDate;
  }


  @JsonProperty(JSON_PROPERTY_PREVIOUS_NEXT_EXECUTION_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPreviousNextExecutionDate(@javax.annotation.Nullable OffsetDateTime previousNextExecutionDate) {
    this.previousNextExecutionDate = previousNextExecutionDate;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Backfill backfill = (Backfill) o;
    return Objects.equals(this.start, backfill.start) &&
        Objects.equals(this.end, backfill.end) &&
        Objects.equals(this.currentDate, backfill.currentDate) &&
        Objects.equals(this.paused, backfill.paused) &&
        Objects.equals(this.inputs, backfill.inputs) &&
        Objects.equals(this.labels, backfill.labels) &&
        Objects.equals(this.previousNextExecutionDate, backfill.previousNextExecutionDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(start, end, currentDate, paused, inputs, labels, previousNextExecutionDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Backfill {\n");
    sb.append("    start: ").append(toIndentedString(start)).append("\n");
    sb.append("    end: ").append(toIndentedString(end)).append("\n");
    sb.append("    currentDate: ").append(toIndentedString(currentDate)).append("\n");
    sb.append("    paused: ").append(toIndentedString(paused)).append("\n");
    sb.append("    inputs: ").append(toIndentedString(inputs)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    previousNextExecutionDate: ").append(toIndentedString(previousNextExecutionDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `start` to the URL query string
    if (getStart() != null) {
      try {
        joiner.add(String.format("%sstart%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getStart()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `end` to the URL query string
    if (getEnd() != null) {
      try {
        joiner.add(String.format("%send%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getEnd()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `currentDate` to the URL query string
    if (getCurrentDate() != null) {
      try {
        joiner.add(String.format("%scurrentDate%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCurrentDate()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `paused` to the URL query string
    if (getPaused() != null) {
      try {
        joiner.add(String.format("%spaused%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPaused()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `inputs` to the URL query string
    if (getInputs() != null) {
      for (String _key : getInputs().keySet()) {
        try {
          joiner.add(String.format("%sinputs%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix),
              getInputs().get(_key), URLEncoder.encode(String.valueOf(getInputs().get(_key)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    // add `labels` to the URL query string
    if (getLabels() != null) {
      for (int i = 0; i < getLabels().size(); i++) {
        if (getLabels().get(i) != null) {
          joiner.add(getLabels().get(i).toUrlQueryString(String.format("%slabels%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `previousNextExecutionDate` to the URL query string
    if (getPreviousNextExecutionDate() != null) {
      try {
        joiner.add(String.format("%spreviousNextExecutionDate%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPreviousNextExecutionDate()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

