/*
 * Kestra EE
 * All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kestra.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeName;

import java.net.URI;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * ExecutionControllerExecutionResponse
 */
@JsonPropertyOrder({
  ExecutionControllerExecutionResponse.JSON_PROPERTY_LABELS,
  ExecutionControllerExecutionResponse.JSON_PROPERTY_ID,
  ExecutionControllerExecutionResponse.JSON_PROPERTY_NAMESPACE,
  ExecutionControllerExecutionResponse.JSON_PROPERTY_FLOW_ID,
  ExecutionControllerExecutionResponse.JSON_PROPERTY_FLOW_REVISION,
  ExecutionControllerExecutionResponse.JSON_PROPERTY_TASK_RUN_LIST,
  ExecutionControllerExecutionResponse.JSON_PROPERTY_INPUTS,
  ExecutionControllerExecutionResponse.JSON_PROPERTY_OUTPUTS,
  ExecutionControllerExecutionResponse.JSON_PROPERTY_VARIABLES,
  ExecutionControllerExecutionResponse.JSON_PROPERTY_STATE,
  ExecutionControllerExecutionResponse.JSON_PROPERTY_PARENT_ID,
  ExecutionControllerExecutionResponse.JSON_PROPERTY_ORIGINAL_ID,
  ExecutionControllerExecutionResponse.JSON_PROPERTY_TRIGGER,
  ExecutionControllerExecutionResponse.JSON_PROPERTY_DELETED,
  ExecutionControllerExecutionResponse.JSON_PROPERTY_METADATA,
  ExecutionControllerExecutionResponse.JSON_PROPERTY_SCHEDULE_DATE,
  ExecutionControllerExecutionResponse.JSON_PROPERTY_TRACE_PARENT,
  ExecutionControllerExecutionResponse.JSON_PROPERTY_FIXTURES,
  ExecutionControllerExecutionResponse.JSON_PROPERTY_KIND,
  ExecutionControllerExecutionResponse.JSON_PROPERTY_URL
})
@JsonTypeName("ExecutionController.ExecutionResponse")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-05T07:35:23.657005690Z[Etc/UTC]", comments = "Generator version: 7.14.0-SNAPSHOT")
public class ExecutionControllerExecutionResponse {
  public static final String JSON_PROPERTY_LABELS = "labels";
  @javax.annotation.Nonnull
  private List<Label> labels = new ArrayList<>();

  public static final String JSON_PROPERTY_ID = "id";
  @javax.annotation.Nonnull
  private String id;

  public static final String JSON_PROPERTY_NAMESPACE = "namespace";
  @javax.annotation.Nonnull
  private String namespace;

  public static final String JSON_PROPERTY_FLOW_ID = "flowId";
  @javax.annotation.Nonnull
  private String flowId;

  public static final String JSON_PROPERTY_FLOW_REVISION = "flowRevision";
  @javax.annotation.Nonnull
  private Integer flowRevision;

  public static final String JSON_PROPERTY_TASK_RUN_LIST = "taskRunList";
  @javax.annotation.Nonnull
  private List<TaskRun> taskRunList = new ArrayList<>();

  public static final String JSON_PROPERTY_INPUTS = "inputs";
  @javax.annotation.Nonnull
  private Map<String, Object> inputs = new HashMap<>();

  public static final String JSON_PROPERTY_OUTPUTS = "outputs";
  @javax.annotation.Nonnull
  private Map<String, Object> outputs = new HashMap<>();

  public static final String JSON_PROPERTY_VARIABLES = "variables";
  @javax.annotation.Nonnull
  private Map<String, Object> variables = new HashMap<>();

  public static final String JSON_PROPERTY_STATE = "state";
  @javax.annotation.Nonnull
  private State state;

  public static final String JSON_PROPERTY_PARENT_ID = "parentId";
  @javax.annotation.Nonnull
  private String parentId;

  public static final String JSON_PROPERTY_ORIGINAL_ID = "originalId";
  @javax.annotation.Nonnull
  private String originalId;

  public static final String JSON_PROPERTY_TRIGGER = "trigger";
  @javax.annotation.Nonnull
  private ExecutionTrigger trigger;

  public static final String JSON_PROPERTY_DELETED = "deleted";
  @javax.annotation.Nonnull
  private Boolean deleted;

  public static final String JSON_PROPERTY_METADATA = "metadata";
  @javax.annotation.Nonnull
  private ExecutionMetadata metadata;

  public static final String JSON_PROPERTY_SCHEDULE_DATE = "scheduleDate";
  @javax.annotation.Nullable
  private JsonNullable<OffsetDateTime> scheduleDate = JsonNullable.<OffsetDateTime>undefined();

  public static final String JSON_PROPERTY_TRACE_PARENT = "traceParent";
  @javax.annotation.Nonnull
  private String traceParent;

  public static final String JSON_PROPERTY_FIXTURES = "fixtures";
  @javax.annotation.Nullable
  private JsonNullable<List<TaskFixture>> fixtures = JsonNullable.<List<TaskFixture>>undefined();

  public static final String JSON_PROPERTY_KIND = "kind";
  @javax.annotation.Nullable
  private JsonNullable<ExecutionKind> kind = JsonNullable.<ExecutionKind>undefined();

  public static final String JSON_PROPERTY_URL = "url";
  @javax.annotation.Nonnull
  private URI url;

  public ExecutionControllerExecutionResponse() {
  }

  public ExecutionControllerExecutionResponse labels(@javax.annotation.Nonnull List<Label> labels) {

    this.labels = labels;
    return this;
  }

  public ExecutionControllerExecutionResponse addLabelsItem(Label labelsItem) {
    if (this.labels == null) {
      this.labels = new ArrayList<>();
    }
    this.labels.add(labelsItem);
    return this;
  }

  /**
   * Get labels
   * @return labels
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_LABELS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<Label> getLabels() {
    return labels;
  }


  @JsonProperty(JSON_PROPERTY_LABELS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLabels(@javax.annotation.Nonnull List<Label> labels) {
    this.labels = labels;
  }

  public ExecutionControllerExecutionResponse id(@javax.annotation.Nonnull String id) {

    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(@javax.annotation.Nonnull String id) {
    this.id = id;
  }

  public ExecutionControllerExecutionResponse namespace(@javax.annotation.Nonnull String namespace) {

    this.namespace = namespace;
    return this;
  }

  /**
   * Get namespace
   * @return namespace
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NAMESPACE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getNamespace() {
    return namespace;
  }


  @JsonProperty(JSON_PROPERTY_NAMESPACE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setNamespace(@javax.annotation.Nonnull String namespace) {
    this.namespace = namespace;
  }

  public ExecutionControllerExecutionResponse flowId(@javax.annotation.Nonnull String flowId) {

    this.flowId = flowId;
    return this;
  }

  /**
   * Get flowId
   * @return flowId
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_FLOW_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getFlowId() {
    return flowId;
  }


  @JsonProperty(JSON_PROPERTY_FLOW_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFlowId(@javax.annotation.Nonnull String flowId) {
    this.flowId = flowId;
  }

  public ExecutionControllerExecutionResponse flowRevision(@javax.annotation.Nonnull Integer flowRevision) {

    this.flowRevision = flowRevision;
    return this;
  }

  /**
   * Get flowRevision
   * @return flowRevision
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_FLOW_REVISION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getFlowRevision() {
    return flowRevision;
  }


  @JsonProperty(JSON_PROPERTY_FLOW_REVISION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFlowRevision(@javax.annotation.Nonnull Integer flowRevision) {
    this.flowRevision = flowRevision;
  }

  public ExecutionControllerExecutionResponse taskRunList(@javax.annotation.Nonnull List<TaskRun> taskRunList) {

    this.taskRunList = taskRunList;
    return this;
  }

  public ExecutionControllerExecutionResponse addTaskRunListItem(TaskRun taskRunListItem) {
    if (this.taskRunList == null) {
      this.taskRunList = new ArrayList<>();
    }
    this.taskRunList.add(taskRunListItem);
    return this;
  }

  /**
   * Get taskRunList
   * @return taskRunList
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TASK_RUN_LIST)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<TaskRun> getTaskRunList() {
    return taskRunList;
  }


  @JsonProperty(JSON_PROPERTY_TASK_RUN_LIST)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTaskRunList(@javax.annotation.Nonnull List<TaskRun> taskRunList) {
    this.taskRunList = taskRunList;
  }

  public ExecutionControllerExecutionResponse inputs(@javax.annotation.Nonnull Map<String, Object> inputs) {

    this.inputs = inputs;
    return this;
  }

  public ExecutionControllerExecutionResponse putInputsItem(String key, Object inputsItem) {
    this.inputs.put(key, inputsItem);
    return this;
  }

  /**
   * Get inputs
   * @return inputs
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_INPUTS)
  @JsonInclude(content = JsonInclude.Include.ALWAYS, value = JsonInclude.Include.ALWAYS)

  public Map<String, Object> getInputs() {
    return inputs;
  }


  @JsonProperty(JSON_PROPERTY_INPUTS)
  @JsonInclude(content = JsonInclude.Include.ALWAYS, value = JsonInclude.Include.ALWAYS)
  public void setInputs(@javax.annotation.Nonnull Map<String, Object> inputs) {
    this.inputs = inputs;
  }

  public ExecutionControllerExecutionResponse outputs(@javax.annotation.Nonnull Map<String, Object> outputs) {

    this.outputs = outputs;
    return this;
  }

  public ExecutionControllerExecutionResponse putOutputsItem(String key, Object outputsItem) {
    this.outputs.put(key, outputsItem);
    return this;
  }

  /**
   * Get outputs
   * @return outputs
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_OUTPUTS)
  @JsonInclude(content = JsonInclude.Include.ALWAYS, value = JsonInclude.Include.ALWAYS)

  public Map<String, Object> getOutputs() {
    return outputs;
  }


  @JsonProperty(JSON_PROPERTY_OUTPUTS)
  @JsonInclude(content = JsonInclude.Include.ALWAYS, value = JsonInclude.Include.ALWAYS)
  public void setOutputs(@javax.annotation.Nonnull Map<String, Object> outputs) {
    this.outputs = outputs;
  }

  public ExecutionControllerExecutionResponse variables(@javax.annotation.Nonnull Map<String, Object> variables) {

    this.variables = variables;
    return this;
  }

  public ExecutionControllerExecutionResponse putVariablesItem(String key, Object variablesItem) {
    this.variables.put(key, variablesItem);
    return this;
  }

  /**
   * Get variables
   * @return variables
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_VARIABLES)
  @JsonInclude(content = JsonInclude.Include.ALWAYS, value = JsonInclude.Include.ALWAYS)

  public Map<String, Object> getVariables() {
    return variables;
  }


  @JsonProperty(JSON_PROPERTY_VARIABLES)
  @JsonInclude(content = JsonInclude.Include.ALWAYS, value = JsonInclude.Include.ALWAYS)
  public void setVariables(@javax.annotation.Nonnull Map<String, Object> variables) {
    this.variables = variables;
  }

  public ExecutionControllerExecutionResponse state(@javax.annotation.Nonnull State state) {

    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_STATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public State getState() {
    return state;
  }


  @JsonProperty(JSON_PROPERTY_STATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setState(@javax.annotation.Nonnull State state) {
    this.state = state;
  }

  public ExecutionControllerExecutionResponse parentId(@javax.annotation.Nonnull String parentId) {

    this.parentId = parentId;
    return this;
  }

  /**
   * Get parentId
   * @return parentId
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PARENT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getParentId() {
    return parentId;
  }


  @JsonProperty(JSON_PROPERTY_PARENT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setParentId(@javax.annotation.Nonnull String parentId) {
    this.parentId = parentId;
  }

  public ExecutionControllerExecutionResponse originalId(@javax.annotation.Nonnull String originalId) {

    this.originalId = originalId;
    return this;
  }

  /**
   * Get originalId
   * @return originalId
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ORIGINAL_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getOriginalId() {
    return originalId;
  }


  @JsonProperty(JSON_PROPERTY_ORIGINAL_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setOriginalId(@javax.annotation.Nonnull String originalId) {
    this.originalId = originalId;
  }

  public ExecutionControllerExecutionResponse trigger(@javax.annotation.Nonnull ExecutionTrigger trigger) {

    this.trigger = trigger;
    return this;
  }

  /**
   * Get trigger
   * @return trigger
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TRIGGER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public ExecutionTrigger getTrigger() {
    return trigger;
  }


  @JsonProperty(JSON_PROPERTY_TRIGGER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTrigger(@javax.annotation.Nonnull ExecutionTrigger trigger) {
    this.trigger = trigger;
  }

  public ExecutionControllerExecutionResponse deleted(@javax.annotation.Nonnull Boolean deleted) {

    this.deleted = deleted;
    return this;
  }

  /**
   * Get deleted
   * @return deleted
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DELETED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getDeleted() {
    return deleted;
  }


  @JsonProperty(JSON_PROPERTY_DELETED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDeleted(@javax.annotation.Nonnull Boolean deleted) {
    this.deleted = deleted;
  }

  public ExecutionControllerExecutionResponse metadata(@javax.annotation.Nonnull ExecutionMetadata metadata) {

    this.metadata = metadata;
    return this;
  }

  /**
   * Get metadata
   * @return metadata
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_METADATA)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public ExecutionMetadata getMetadata() {
    return metadata;
  }


  @JsonProperty(JSON_PROPERTY_METADATA)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMetadata(@javax.annotation.Nonnull ExecutionMetadata metadata) {
    this.metadata = metadata;
  }

  public ExecutionControllerExecutionResponse scheduleDate(@javax.annotation.Nullable OffsetDateTime scheduleDate) {
    this.scheduleDate = JsonNullable.<OffsetDateTime>of(scheduleDate);

    return this;
  }

  /**
   * Get scheduleDate
   * @return scheduleDate
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public OffsetDateTime getScheduleDate() {
        return scheduleDate.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_SCHEDULE_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<OffsetDateTime> getScheduleDate_JsonNullable() {
    return scheduleDate;
  }

  @JsonProperty(JSON_PROPERTY_SCHEDULE_DATE)
  public void setScheduleDate_JsonNullable(JsonNullable<OffsetDateTime> scheduleDate) {
    this.scheduleDate = scheduleDate;
  }

  public void setScheduleDate(@javax.annotation.Nullable OffsetDateTime scheduleDate) {
    this.scheduleDate = JsonNullable.<OffsetDateTime>of(scheduleDate);
  }

  public ExecutionControllerExecutionResponse traceParent(@javax.annotation.Nonnull String traceParent) {

    this.traceParent = traceParent;
    return this;
  }

  /**
   * Get traceParent
   * @return traceParent
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TRACE_PARENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getTraceParent() {
    return traceParent;
  }


  @JsonProperty(JSON_PROPERTY_TRACE_PARENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTraceParent(@javax.annotation.Nonnull String traceParent) {
    this.traceParent = traceParent;
  }

  public ExecutionControllerExecutionResponse fixtures(@javax.annotation.Nullable List<TaskFixture> fixtures) {
    this.fixtures = JsonNullable.<List<TaskFixture>>of(fixtures);

    return this;
  }

  public ExecutionControllerExecutionResponse addFixturesItem(TaskFixture fixturesItem) {
    if (this.fixtures == null || !this.fixtures.isPresent()) {
      this.fixtures = JsonNullable.<List<TaskFixture>>of(new ArrayList<>());
    }
    try {
      this.fixtures.get().add(fixturesItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

  /**
   * Get fixtures
   * @return fixtures
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public List<TaskFixture> getFixtures() {
        return fixtures.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_FIXTURES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<List<TaskFixture>> getFixtures_JsonNullable() {
    return fixtures;
  }

  @JsonProperty(JSON_PROPERTY_FIXTURES)
  public void setFixtures_JsonNullable(JsonNullable<List<TaskFixture>> fixtures) {
    this.fixtures = fixtures;
  }

  public void setFixtures(@javax.annotation.Nullable List<TaskFixture> fixtures) {
    this.fixtures = JsonNullable.<List<TaskFixture>>of(fixtures);
  }

  public ExecutionControllerExecutionResponse kind(@javax.annotation.Nullable ExecutionKind kind) {
    this.kind = JsonNullable.<ExecutionKind>of(kind);

    return this;
  }

  /**
   * Get kind
   * @return kind
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public ExecutionKind getKind() {
        return kind.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_KIND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<ExecutionKind> getKind_JsonNullable() {
    return kind;
  }

  @JsonProperty(JSON_PROPERTY_KIND)
  public void setKind_JsonNullable(JsonNullable<ExecutionKind> kind) {
    this.kind = kind;
  }

  public void setKind(@javax.annotation.Nullable ExecutionKind kind) {
    this.kind = JsonNullable.<ExecutionKind>of(kind);
  }

  public ExecutionControllerExecutionResponse url(@javax.annotation.Nonnull URI url) {

    this.url = url;
    return this;
  }

  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_URL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public URI getUrl() {
    return url;
  }


  @JsonProperty(JSON_PROPERTY_URL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUrl(@javax.annotation.Nonnull URI url) {
    this.url = url;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExecutionControllerExecutionResponse executionControllerExecutionResponse = (ExecutionControllerExecutionResponse) o;
    return Objects.equals(this.labels, executionControllerExecutionResponse.labels) &&
        Objects.equals(this.id, executionControllerExecutionResponse.id) &&
        Objects.equals(this.namespace, executionControllerExecutionResponse.namespace) &&
        Objects.equals(this.flowId, executionControllerExecutionResponse.flowId) &&
        Objects.equals(this.flowRevision, executionControllerExecutionResponse.flowRevision) &&
        Objects.equals(this.taskRunList, executionControllerExecutionResponse.taskRunList) &&
        Objects.equals(this.inputs, executionControllerExecutionResponse.inputs) &&
        Objects.equals(this.outputs, executionControllerExecutionResponse.outputs) &&
        Objects.equals(this.variables, executionControllerExecutionResponse.variables) &&
        Objects.equals(this.state, executionControllerExecutionResponse.state) &&
        Objects.equals(this.parentId, executionControllerExecutionResponse.parentId) &&
        Objects.equals(this.originalId, executionControllerExecutionResponse.originalId) &&
        Objects.equals(this.trigger, executionControllerExecutionResponse.trigger) &&
        Objects.equals(this.deleted, executionControllerExecutionResponse.deleted) &&
        Objects.equals(this.metadata, executionControllerExecutionResponse.metadata) &&
        equalsNullable(this.scheduleDate, executionControllerExecutionResponse.scheduleDate) &&
        Objects.equals(this.traceParent, executionControllerExecutionResponse.traceParent) &&
        equalsNullable(this.fixtures, executionControllerExecutionResponse.fixtures) &&
        equalsNullable(this.kind, executionControllerExecutionResponse.kind) &&
        Objects.equals(this.url, executionControllerExecutionResponse.url);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(labels, id, namespace, flowId, flowRevision, taskRunList, inputs, outputs, variables, state, parentId, originalId, trigger, deleted, metadata, hashCodeNullable(scheduleDate), traceParent, hashCodeNullable(fixtures), hashCodeNullable(kind), url);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExecutionControllerExecutionResponse {\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    namespace: ").append(toIndentedString(namespace)).append("\n");
    sb.append("    flowId: ").append(toIndentedString(flowId)).append("\n");
    sb.append("    flowRevision: ").append(toIndentedString(flowRevision)).append("\n");
    sb.append("    taskRunList: ").append(toIndentedString(taskRunList)).append("\n");
    sb.append("    inputs: ").append(toIndentedString(inputs)).append("\n");
    sb.append("    outputs: ").append(toIndentedString(outputs)).append("\n");
    sb.append("    variables: ").append(toIndentedString(variables)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    parentId: ").append(toIndentedString(parentId)).append("\n");
    sb.append("    originalId: ").append(toIndentedString(originalId)).append("\n");
    sb.append("    trigger: ").append(toIndentedString(trigger)).append("\n");
    sb.append("    deleted: ").append(toIndentedString(deleted)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    scheduleDate: ").append(toIndentedString(scheduleDate)).append("\n");
    sb.append("    traceParent: ").append(toIndentedString(traceParent)).append("\n");
    sb.append("    fixtures: ").append(toIndentedString(fixtures)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `labels` to the URL query string
    if (getLabels() != null) {
      for (int i = 0; i < getLabels().size(); i++) {
        if (getLabels().get(i) != null) {
          joiner.add(getLabels().get(i).toUrlQueryString(String.format("%slabels%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `id` to the URL query string
    if (getId() != null) {
      try {
        joiner.add(String.format("%sid%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `namespace` to the URL query string
    if (getNamespace() != null) {
      try {
        joiner.add(String.format("%snamespace%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getNamespace()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `flowId` to the URL query string
    if (getFlowId() != null) {
      try {
        joiner.add(String.format("%sflowId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getFlowId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `flowRevision` to the URL query string
    if (getFlowRevision() != null) {
      try {
        joiner.add(String.format("%sflowRevision%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getFlowRevision()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `taskRunList` to the URL query string
    if (getTaskRunList() != null) {
      for (int i = 0; i < getTaskRunList().size(); i++) {
        if (getTaskRunList().get(i) != null) {
          joiner.add(getTaskRunList().get(i).toUrlQueryString(String.format("%staskRunList%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `inputs` to the URL query string
    if (getInputs() != null) {
      for (String _key : getInputs().keySet()) {
        try {
          joiner.add(String.format("%sinputs%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix),
              getInputs().get(_key), URLEncoder.encode(String.valueOf(getInputs().get(_key)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    // add `outputs` to the URL query string
    if (getOutputs() != null) {
      for (String _key : getOutputs().keySet()) {
        try {
          joiner.add(String.format("%soutputs%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix),
              getOutputs().get(_key), URLEncoder.encode(String.valueOf(getOutputs().get(_key)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    // add `variables` to the URL query string
    if (getVariables() != null) {
      for (String _key : getVariables().keySet()) {
        try {
          joiner.add(String.format("%svariables%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix),
              getVariables().get(_key), URLEncoder.encode(String.valueOf(getVariables().get(_key)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    // add `state` to the URL query string
    if (getState() != null) {
      joiner.add(getState().toUrlQueryString(prefix + "state" + suffix));
    }

    // add `parentId` to the URL query string
    if (getParentId() != null) {
      try {
        joiner.add(String.format("%sparentId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getParentId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `originalId` to the URL query string
    if (getOriginalId() != null) {
      try {
        joiner.add(String.format("%soriginalId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getOriginalId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `trigger` to the URL query string
    if (getTrigger() != null) {
      joiner.add(getTrigger().toUrlQueryString(prefix + "trigger" + suffix));
    }

    // add `deleted` to the URL query string
    if (getDeleted() != null) {
      try {
        joiner.add(String.format("%sdeleted%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDeleted()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `metadata` to the URL query string
    if (getMetadata() != null) {
      joiner.add(getMetadata().toUrlQueryString(prefix + "metadata" + suffix));
    }

    // add `scheduleDate` to the URL query string
    if (getScheduleDate() != null) {
      try {
        joiner.add(String.format("%sscheduleDate%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getScheduleDate()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `traceParent` to the URL query string
    if (getTraceParent() != null) {
      try {
        joiner.add(String.format("%straceParent%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTraceParent()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `fixtures` to the URL query string
    if (getFixtures() != null) {
      for (int i = 0; i < getFixtures().size(); i++) {
        if (getFixtures().get(i) != null) {
          joiner.add(getFixtures().get(i).toUrlQueryString(String.format("%sfixtures%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `kind` to the URL query string
    if (getKind() != null) {
      try {
        joiner.add(String.format("%skind%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getKind()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `url` to the URL query string
    if (getUrl() != null) {
      try {
        joiner.add(String.format("%surl%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUrl()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

