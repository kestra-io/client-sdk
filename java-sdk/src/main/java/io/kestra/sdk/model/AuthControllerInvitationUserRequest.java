/*
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kestra.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Locale;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * AuthControllerInvitationUserRequest
 */
@JsonPropertyOrder({
  AuthControllerInvitationUserRequest.JSON_PROPERTY_FIRST_NAME,
  AuthControllerInvitationUserRequest.JSON_PROPERTY_LAST_NAME,
  AuthControllerInvitationUserRequest.JSON_PROPERTY_PASSWORD
})
@JsonTypeName("AuthController.InvitationUserRequest")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.16.0")
public class AuthControllerInvitationUserRequest {
  public static final String JSON_PROPERTY_FIRST_NAME = "firstName";
  @javax.annotation.Nonnull
  private String firstName;

  public static final String JSON_PROPERTY_LAST_NAME = "lastName";
  @javax.annotation.Nonnull
  private String lastName;

  public static final String JSON_PROPERTY_PASSWORD = "password";
  @javax.annotation.Nonnull
  private String password;

  public AuthControllerInvitationUserRequest() {
  }

  public AuthControllerInvitationUserRequest firstName(@javax.annotation.Nonnull String firstName) {
    
    this.firstName = firstName;
    return this;
  }

  /**
   * Get firstName
   * @return firstName
   */
  @javax.annotation.Nonnull
  @JsonProperty(value = JSON_PROPERTY_FIRST_NAME, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getFirstName() {
    return firstName;
  }


  @JsonProperty(value = JSON_PROPERTY_FIRST_NAME, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFirstName(@javax.annotation.Nonnull String firstName) {
    this.firstName = firstName;
  }

  public AuthControllerInvitationUserRequest lastName(@javax.annotation.Nonnull String lastName) {
    
    this.lastName = lastName;
    return this;
  }

  /**
   * Get lastName
   * @return lastName
   */
  @javax.annotation.Nonnull
  @JsonProperty(value = JSON_PROPERTY_LAST_NAME, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getLastName() {
    return lastName;
  }


  @JsonProperty(value = JSON_PROPERTY_LAST_NAME, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLastName(@javax.annotation.Nonnull String lastName) {
    this.lastName = lastName;
  }

  public AuthControllerInvitationUserRequest password(@javax.annotation.Nonnull String password) {
    
    this.password = password;
    return this;
  }

  /**
   * Get password
   * @return password
   */
  @javax.annotation.Nonnull
  @JsonProperty(value = JSON_PROPERTY_PASSWORD, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getPassword() {
    return password;
  }


  @JsonProperty(value = JSON_PROPERTY_PASSWORD, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPassword(@javax.annotation.Nonnull String password) {
    this.password = password;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AuthControllerInvitationUserRequest authControllerInvitationUserRequest = (AuthControllerInvitationUserRequest) o;
    return Objects.equals(this.firstName, authControllerInvitationUserRequest.firstName) &&
        Objects.equals(this.lastName, authControllerInvitationUserRequest.lastName) &&
        Objects.equals(this.password, authControllerInvitationUserRequest.password);
  }

  @Override
  public int hashCode() {
    return Objects.hash(firstName, lastName, password);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AuthControllerInvitationUserRequest {\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

