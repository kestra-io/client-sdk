/*
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kestra.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.kestra.sdk.model.Role;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * AclServiceNamespaceRole
 */
@JsonPropertyOrder({
  AclServiceNamespaceRole.JSON_PROPERTY_ROLE,
  AclServiceNamespaceRole.JSON_PROPERTY_NAMESPACE_ID
})
@JsonTypeName("AclService.NamespaceRole")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-28T12:07:17.548591265Z[Etc/UTC]", comments = "Generator version: 7.14.0-SNAPSHOT")
public class AclServiceNamespaceRole {
  public static final String JSON_PROPERTY_ROLE = "role";
  @javax.annotation.Nonnull
  private Role role;

  public static final String JSON_PROPERTY_NAMESPACE_ID = "namespaceId";
  @javax.annotation.Nonnull
  private String namespaceId;

  public AclServiceNamespaceRole() {
  }

  public AclServiceNamespaceRole role(@javax.annotation.Nonnull Role role) {
    
    this.role = role;
    return this;
  }

  /**
   * Get role
   * @return role
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ROLE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Role getRole() {
    return role;
  }


  @JsonProperty(JSON_PROPERTY_ROLE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRole(@javax.annotation.Nonnull Role role) {
    this.role = role;
  }

  public AclServiceNamespaceRole namespaceId(@javax.annotation.Nonnull String namespaceId) {
    
    this.namespaceId = namespaceId;
    return this;
  }

  /**
   * Get namespaceId
   * @return namespaceId
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NAMESPACE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getNamespaceId() {
    return namespaceId;
  }


  @JsonProperty(JSON_PROPERTY_NAMESPACE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setNamespaceId(@javax.annotation.Nonnull String namespaceId) {
    this.namespaceId = namespaceId;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AclServiceNamespaceRole aclServiceNamespaceRole = (AclServiceNamespaceRole) o;
    return Objects.equals(this.role, aclServiceNamespaceRole.role) &&
        Objects.equals(this.namespaceId, aclServiceNamespaceRole.namespaceId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(role, namespaceId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AclServiceNamespaceRole {\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("    namespaceId: ").append(toIndentedString(namespaceId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `role` to the URL query string
    if (getRole() != null) {
      joiner.add(getRole().toUrlQueryString(prefix + "role" + suffix));
    }

    // add `namespaceId` to the URL query string
    if (getNamespaceId() != null) {
      try {
        joiner.add(String.format("%snamespaceId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getNamespaceId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

