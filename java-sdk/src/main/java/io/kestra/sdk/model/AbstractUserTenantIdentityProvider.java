/*
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kestra.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * AbstractUserTenantIdentityProvider
 */
@JsonPropertyOrder({
  AbstractUserTenantIdentityProvider.JSON_PROPERTY_ATTRIBUTES,
  AbstractUserTenantIdentityProvider.JSON_PROPERTY_EXTERNAL_ID,
  AbstractUserTenantIdentityProvider.JSON_PROPERTY_SECURITY_INTEGRATION_ID,
  AbstractUserTenantIdentityProvider.JSON_PROPERTY_SECURITY_INTEGRATION_NAME,
  AbstractUserTenantIdentityProvider.JSON_PROPERTY_TENANT_ID
})
@JsonTypeName("AbstractUser.TenantIdentityProvider")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-28T12:15:52.743487342Z[Etc/UTC]", comments = "Generator version: 7.14.0-SNAPSHOT")
public class AbstractUserTenantIdentityProvider {
  public static final String JSON_PROPERTY_ATTRIBUTES = "attributes";
  @javax.annotation.Nullable
  private Map<String, Object> attributes = new HashMap<>();

  public static final String JSON_PROPERTY_EXTERNAL_ID = "externalId";
  @javax.annotation.Nullable
  private String externalId;

  public static final String JSON_PROPERTY_SECURITY_INTEGRATION_ID = "securityIntegrationId";
  @javax.annotation.Nullable
  private String securityIntegrationId;

  public static final String JSON_PROPERTY_SECURITY_INTEGRATION_NAME = "securityIntegrationName";
  @javax.annotation.Nullable
  private String securityIntegrationName;

  public static final String JSON_PROPERTY_TENANT_ID = "tenantId";
  @javax.annotation.Nullable
  private JsonNullable<String> tenantId = JsonNullable.<String>undefined();

  public AbstractUserTenantIdentityProvider() {
  }

  public AbstractUserTenantIdentityProvider attributes(@javax.annotation.Nullable Map<String, Object> attributes) {
    
    this.attributes = attributes;
    return this;
  }

  public AbstractUserTenantIdentityProvider putAttributesItem(String key, Object attributesItem) {
    if (this.attributes == null) {
      this.attributes = new HashMap<>();
    }
    this.attributes.put(key, attributesItem);
    return this;
  }

  /**
   * Get attributes
   * @return attributes
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ATTRIBUTES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, Object> getAttributes() {
    return attributes;
  }


  @JsonProperty(JSON_PROPERTY_ATTRIBUTES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAttributes(@javax.annotation.Nullable Map<String, Object> attributes) {
    this.attributes = attributes;
  }

  public AbstractUserTenantIdentityProvider externalId(@javax.annotation.Nullable String externalId) {
    
    this.externalId = externalId;
    return this;
  }

  /**
   * Get externalId
   * @return externalId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXTERNAL_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getExternalId() {
    return externalId;
  }


  @JsonProperty(JSON_PROPERTY_EXTERNAL_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExternalId(@javax.annotation.Nullable String externalId) {
    this.externalId = externalId;
  }

  public AbstractUserTenantIdentityProvider securityIntegrationId(@javax.annotation.Nullable String securityIntegrationId) {
    
    this.securityIntegrationId = securityIntegrationId;
    return this;
  }

  /**
   * Get securityIntegrationId
   * @return securityIntegrationId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SECURITY_INTEGRATION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSecurityIntegrationId() {
    return securityIntegrationId;
  }


  @JsonProperty(JSON_PROPERTY_SECURITY_INTEGRATION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSecurityIntegrationId(@javax.annotation.Nullable String securityIntegrationId) {
    this.securityIntegrationId = securityIntegrationId;
  }

  public AbstractUserTenantIdentityProvider securityIntegrationName(@javax.annotation.Nullable String securityIntegrationName) {
    
    this.securityIntegrationName = securityIntegrationName;
    return this;
  }

  /**
   * Get securityIntegrationName
   * @return securityIntegrationName
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SECURITY_INTEGRATION_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSecurityIntegrationName() {
    return securityIntegrationName;
  }


  @JsonProperty(JSON_PROPERTY_SECURITY_INTEGRATION_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSecurityIntegrationName(@javax.annotation.Nullable String securityIntegrationName) {
    this.securityIntegrationName = securityIntegrationName;
  }

  public AbstractUserTenantIdentityProvider tenantId(@javax.annotation.Nullable String tenantId) {
    this.tenantId = JsonNullable.<String>of(tenantId);
    
    return this;
  }

  /**
   * Get tenantId
   * @return tenantId
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public String getTenantId() {
        return tenantId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TENANT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getTenantId_JsonNullable() {
    return tenantId;
  }
  
  @JsonProperty(JSON_PROPERTY_TENANT_ID)
  public void setTenantId_JsonNullable(JsonNullable<String> tenantId) {
    this.tenantId = tenantId;
  }

  public void setTenantId(@javax.annotation.Nullable String tenantId) {
    this.tenantId = JsonNullable.<String>of(tenantId);
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AbstractUserTenantIdentityProvider abstractUserTenantIdentityProvider = (AbstractUserTenantIdentityProvider) o;
    return Objects.equals(this.attributes, abstractUserTenantIdentityProvider.attributes) &&
        Objects.equals(this.externalId, abstractUserTenantIdentityProvider.externalId) &&
        Objects.equals(this.securityIntegrationId, abstractUserTenantIdentityProvider.securityIntegrationId) &&
        Objects.equals(this.securityIntegrationName, abstractUserTenantIdentityProvider.securityIntegrationName) &&
        equalsNullable(this.tenantId, abstractUserTenantIdentityProvider.tenantId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(attributes, externalId, securityIntegrationId, securityIntegrationName, hashCodeNullable(tenantId));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AbstractUserTenantIdentityProvider {\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("    securityIntegrationId: ").append(toIndentedString(securityIntegrationId)).append("\n");
    sb.append("    securityIntegrationName: ").append(toIndentedString(securityIntegrationName)).append("\n");
    sb.append("    tenantId: ").append(toIndentedString(tenantId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `attributes` to the URL query string
    if (getAttributes() != null) {
      for (String _key : getAttributes().keySet()) {
        try {
          joiner.add(String.format("%sattributes%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix),
              getAttributes().get(_key), URLEncoder.encode(String.valueOf(getAttributes().get(_key)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    // add `externalId` to the URL query string
    if (getExternalId() != null) {
      try {
        joiner.add(String.format("%sexternalId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getExternalId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `securityIntegrationId` to the URL query string
    if (getSecurityIntegrationId() != null) {
      try {
        joiner.add(String.format("%ssecurityIntegrationId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSecurityIntegrationId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `securityIntegrationName` to the URL query string
    if (getSecurityIntegrationName() != null) {
      try {
        joiner.add(String.format("%ssecurityIntegrationName%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSecurityIntegrationName()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `tenantId` to the URL query string
    if (getTenantId() != null) {
      try {
        joiner.add(String.format("%stenantId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTenantId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

