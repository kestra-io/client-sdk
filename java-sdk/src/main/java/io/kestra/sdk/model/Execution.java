/*
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kestra.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.kestra.sdk.model.Breakpoint;
import io.kestra.sdk.model.ExecutionKind;
import io.kestra.sdk.model.ExecutionMetadata;
import io.kestra.sdk.model.ExecutionTrigger;
import io.kestra.sdk.model.Label;
import io.kestra.sdk.model.State;
import io.kestra.sdk.model.TaskFixture;
import io.kestra.sdk.model.TaskRun;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Execution
 */
@JsonPropertyOrder({
  Execution.JSON_PROPERTY_LABELS,
  Execution.JSON_PROPERTY_ID,
  Execution.JSON_PROPERTY_NAMESPACE,
  Execution.JSON_PROPERTY_FLOW_ID,
  Execution.JSON_PROPERTY_FLOW_REVISION,
  Execution.JSON_PROPERTY_TASK_RUN_LIST,
  Execution.JSON_PROPERTY_INPUTS,
  Execution.JSON_PROPERTY_OUTPUTS,
  Execution.JSON_PROPERTY_VARIABLES,
  Execution.JSON_PROPERTY_STATE,
  Execution.JSON_PROPERTY_PARENT_ID,
  Execution.JSON_PROPERTY_ORIGINAL_ID,
  Execution.JSON_PROPERTY_TRIGGER,
  Execution.JSON_PROPERTY_DELETED,
  Execution.JSON_PROPERTY_METADATA,
  Execution.JSON_PROPERTY_SCHEDULE_DATE,
  Execution.JSON_PROPERTY_TRACE_PARENT,
  Execution.JSON_PROPERTY_FIXTURES,
  Execution.JSON_PROPERTY_KIND,
  Execution.JSON_PROPERTY_BREAKPOINTS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.16.0")
public class Execution {
  public static final String JSON_PROPERTY_LABELS = "labels";
  @javax.annotation.Nullable  private List<Label> labels = new ArrayList<>();

  public static final String JSON_PROPERTY_ID = "id";
  @javax.annotation.Nonnull  private String id;

  public static final String JSON_PROPERTY_NAMESPACE = "namespace";
  @javax.annotation.Nonnull  private String namespace;

  public static final String JSON_PROPERTY_FLOW_ID = "flowId";
  @javax.annotation.Nonnull  private String flowId;

  public static final String JSON_PROPERTY_FLOW_REVISION = "flowRevision";
  @javax.annotation.Nonnull  private Integer flowRevision;

  public static final String JSON_PROPERTY_TASK_RUN_LIST = "taskRunList";
  @javax.annotation.Nullable  private List<TaskRun> taskRunList = new ArrayList<>();

  public static final String JSON_PROPERTY_INPUTS = "inputs";
  @javax.annotation.Nullable  private Object inputs;

  public static final String JSON_PROPERTY_OUTPUTS = "outputs";
  @javax.annotation.Nullable  private Object outputs;

  public static final String JSON_PROPERTY_VARIABLES = "variables";
  @javax.annotation.Nullable  private Object variables;

  public static final String JSON_PROPERTY_STATE = "state";
  @javax.annotation.Nonnull  private State state;

  public static final String JSON_PROPERTY_PARENT_ID = "parentId";
  @javax.annotation.Nullable  private String parentId;

  public static final String JSON_PROPERTY_ORIGINAL_ID = "originalId";
  @javax.annotation.Nullable  private String originalId;

  public static final String JSON_PROPERTY_TRIGGER = "trigger";
  @javax.annotation.Nullable  private ExecutionTrigger trigger;

  public static final String JSON_PROPERTY_DELETED = "deleted";
  @javax.annotation.Nonnull  private Boolean deleted;

  public static final String JSON_PROPERTY_METADATA = "metadata";
  @javax.annotation.Nullable  private ExecutionMetadata metadata;

  public static final String JSON_PROPERTY_SCHEDULE_DATE = "scheduleDate";
  @javax.annotation.Nullable  private JsonNullable<OffsetDateTime> scheduleDate = JsonNullable.<OffsetDateTime>undefined();

  public static final String JSON_PROPERTY_TRACE_PARENT = "traceParent";
  @javax.annotation.Nullable  private String traceParent;

  public static final String JSON_PROPERTY_FIXTURES = "fixtures";
  @javax.annotation.Nullable  private JsonNullable<List<TaskFixture>> fixtures = JsonNullable.<List<TaskFixture>>undefined();

  public static final String JSON_PROPERTY_KIND = "kind";
  @javax.annotation.Nullable  private JsonNullable<ExecutionKind> kind = JsonNullable.<ExecutionKind>undefined();

  public static final String JSON_PROPERTY_BREAKPOINTS = "breakpoints";
  @javax.annotation.Nullable  private JsonNullable<List<Breakpoint>> breakpoints = JsonNullable.<List<Breakpoint>>undefined();

  public Execution() {
  }

  public Execution labels(@javax.annotation.Nullable List<Label> labels) {
    
    this.labels = labels;
    return this;
  }

  public Execution addLabelsItem(Label labelsItem) {
    if (this.labels == null) {
      this.labels = new ArrayList<>();
    }
    this.labels.add(labelsItem);
    return this;
  }

  /**
   * Get labels
   * @return labels
   */
  @javax.annotation.Nullable  @JsonProperty(JSON_PROPERTY_LABELS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Label> getLabels() {
    return labels;
  }


  @JsonProperty(JSON_PROPERTY_LABELS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLabels(@javax.annotation.Nullable List<Label> labels) {
    this.labels = labels;
  }

  public Execution id(@javax.annotation.Nonnull String id) {
    
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(@javax.annotation.Nonnull String id) {
    this.id = id;
  }

  public Execution namespace(@javax.annotation.Nonnull String namespace) {
    
    this.namespace = namespace;
    return this;
  }

  /**
   * Get namespace
   * @return namespace
   */
  @javax.annotation.Nonnull  @JsonProperty(JSON_PROPERTY_NAMESPACE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getNamespace() {
    return namespace;
  }


  @JsonProperty(JSON_PROPERTY_NAMESPACE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setNamespace(@javax.annotation.Nonnull String namespace) {
    this.namespace = namespace;
  }

  public Execution flowId(@javax.annotation.Nonnull String flowId) {
    
    this.flowId = flowId;
    return this;
  }

  /**
   * Get flowId
   * @return flowId
   */
  @javax.annotation.Nonnull  @JsonProperty(JSON_PROPERTY_FLOW_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getFlowId() {
    return flowId;
  }


  @JsonProperty(JSON_PROPERTY_FLOW_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFlowId(@javax.annotation.Nonnull String flowId) {
    this.flowId = flowId;
  }

  public Execution flowRevision(@javax.annotation.Nonnull Integer flowRevision) {
    
    this.flowRevision = flowRevision;
    return this;
  }

  /**
   * Get flowRevision
   * @return flowRevision
   */
  @javax.annotation.Nonnull  @JsonProperty(JSON_PROPERTY_FLOW_REVISION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getFlowRevision() {
    return flowRevision;
  }


  @JsonProperty(JSON_PROPERTY_FLOW_REVISION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFlowRevision(@javax.annotation.Nonnull Integer flowRevision) {
    this.flowRevision = flowRevision;
  }

  public Execution taskRunList(@javax.annotation.Nullable List<TaskRun> taskRunList) {
    
    this.taskRunList = taskRunList;
    return this;
  }

  public Execution addTaskRunListItem(TaskRun taskRunListItem) {
    if (this.taskRunList == null) {
      this.taskRunList = new ArrayList<>();
    }
    this.taskRunList.add(taskRunListItem);
    return this;
  }

  /**
   * Get taskRunList
   * @return taskRunList
   */
  @javax.annotation.Nullable  @JsonProperty(JSON_PROPERTY_TASK_RUN_LIST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<TaskRun> getTaskRunList() {
    return taskRunList;
  }


  @JsonProperty(JSON_PROPERTY_TASK_RUN_LIST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTaskRunList(@javax.annotation.Nullable List<TaskRun> taskRunList) {
    this.taskRunList = taskRunList;
  }

  public Execution inputs(@javax.annotation.Nullable Object inputs) {
    
    this.inputs = inputs;
    return this;
  }

  /**
   * Get inputs
   * @return inputs
   */
  @javax.annotation.Nullable  @JsonProperty(JSON_PROPERTY_INPUTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Object getInputs() {
    return inputs;
  }


  @JsonProperty(JSON_PROPERTY_INPUTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInputs(@javax.annotation.Nullable Object inputs) {
    this.inputs = inputs;
  }

  public Execution outputs(@javax.annotation.Nullable Object outputs) {
    
    this.outputs = outputs;
    return this;
  }

  /**
   * Get outputs
   * @return outputs
   */
  @javax.annotation.Nullable  @JsonProperty(JSON_PROPERTY_OUTPUTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Object getOutputs() {
    return outputs;
  }


  @JsonProperty(JSON_PROPERTY_OUTPUTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOutputs(@javax.annotation.Nullable Object outputs) {
    this.outputs = outputs;
  }

  public Execution variables(@javax.annotation.Nullable Object variables) {
    
    this.variables = variables;
    return this;
  }

  /**
   * Get variables
   * @return variables
   */
  @javax.annotation.Nullable  @JsonProperty(JSON_PROPERTY_VARIABLES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Object getVariables() {
    return variables;
  }


  @JsonProperty(JSON_PROPERTY_VARIABLES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVariables(@javax.annotation.Nullable Object variables) {
    this.variables = variables;
  }

  public Execution state(@javax.annotation.Nonnull State state) {
    
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nonnull  @JsonProperty(JSON_PROPERTY_STATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public State getState() {
    return state;
  }


  @JsonProperty(JSON_PROPERTY_STATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setState(@javax.annotation.Nonnull State state) {
    this.state = state;
  }

  public Execution parentId(@javax.annotation.Nullable String parentId) {
    
    this.parentId = parentId;
    return this;
  }

  /**
   * Get parentId
   * @return parentId
   */
  @javax.annotation.Nullable  @JsonProperty(JSON_PROPERTY_PARENT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getParentId() {
    return parentId;
  }


  @JsonProperty(JSON_PROPERTY_PARENT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setParentId(@javax.annotation.Nullable String parentId) {
    this.parentId = parentId;
  }

  public Execution originalId(@javax.annotation.Nullable String originalId) {
    
    this.originalId = originalId;
    return this;
  }

  /**
   * Get originalId
   * @return originalId
   */
  @javax.annotation.Nullable  @JsonProperty(JSON_PROPERTY_ORIGINAL_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getOriginalId() {
    return originalId;
  }


  @JsonProperty(JSON_PROPERTY_ORIGINAL_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOriginalId(@javax.annotation.Nullable String originalId) {
    this.originalId = originalId;
  }

  public Execution trigger(@javax.annotation.Nullable ExecutionTrigger trigger) {
    
    this.trigger = trigger;
    return this;
  }

  /**
   * Get trigger
   * @return trigger
   */
  @javax.annotation.Nullable  @JsonProperty(JSON_PROPERTY_TRIGGER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ExecutionTrigger getTrigger() {
    return trigger;
  }


  @JsonProperty(JSON_PROPERTY_TRIGGER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTrigger(@javax.annotation.Nullable ExecutionTrigger trigger) {
    this.trigger = trigger;
  }

  public Execution deleted(@javax.annotation.Nonnull Boolean deleted) {
    
    this.deleted = deleted;
    return this;
  }

  /**
   * Get deleted
   * @return deleted
   */
  @javax.annotation.Nonnull  @JsonProperty(JSON_PROPERTY_DELETED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getDeleted() {
    return deleted;
  }


  @JsonProperty(JSON_PROPERTY_DELETED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDeleted(@javax.annotation.Nonnull Boolean deleted) {
    this.deleted = deleted;
  }

  public Execution metadata(@javax.annotation.Nullable ExecutionMetadata metadata) {
    
    this.metadata = metadata;
    return this;
  }

  /**
   * Get metadata
   * @return metadata
   */
  @javax.annotation.Nullable  @JsonProperty(JSON_PROPERTY_METADATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ExecutionMetadata getMetadata() {
    return metadata;
  }


  @JsonProperty(JSON_PROPERTY_METADATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMetadata(@javax.annotation.Nullable ExecutionMetadata metadata) {
    this.metadata = metadata;
  }

  public Execution scheduleDate(@javax.annotation.Nullable OffsetDateTime scheduleDate) {
    this.scheduleDate = JsonNullable.<OffsetDateTime>of(scheduleDate);
    
    return this;
  }

  /**
   * Get scheduleDate
   * @return scheduleDate
   */
  @javax.annotation.Nullable  @JsonIgnore

  public OffsetDateTime getScheduleDate() {
        return scheduleDate.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_SCHEDULE_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public JsonNullable<OffsetDateTime> getScheduleDate_JsonNullable() {
    return scheduleDate;
  }
  
  @JsonProperty(JSON_PROPERTY_SCHEDULE_DATE)
  public void setScheduleDate_JsonNullable(JsonNullable<OffsetDateTime> scheduleDate) {
    this.scheduleDate = scheduleDate;
  }

  public void setScheduleDate(@javax.annotation.Nullable OffsetDateTime scheduleDate) {
    this.scheduleDate = JsonNullable.<OffsetDateTime>of(scheduleDate);
  }

  public Execution traceParent(@javax.annotation.Nullable String traceParent) {
    
    this.traceParent = traceParent;
    return this;
  }

  /**
   * Get traceParent
   * @return traceParent
   */
  @javax.annotation.Nullable  @JsonProperty(JSON_PROPERTY_TRACE_PARENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTraceParent() {
    return traceParent;
  }


  @JsonProperty(JSON_PROPERTY_TRACE_PARENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTraceParent(@javax.annotation.Nullable String traceParent) {
    this.traceParent = traceParent;
  }

  public Execution fixtures(@javax.annotation.Nullable List<TaskFixture> fixtures) {
    this.fixtures = JsonNullable.<List<TaskFixture>>of(fixtures);
    
    return this;
  }

  public Execution addFixturesItem(TaskFixture fixturesItem) {
    if (this.fixtures == null || !this.fixtures.isPresent()) {
      this.fixtures = JsonNullable.<List<TaskFixture>>of(new ArrayList<>());
    }
    try {
      this.fixtures.get().add(fixturesItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

  /**
   * Get fixtures
   * @return fixtures
   */
  @javax.annotation.Nullable  @JsonIgnore

  public List<TaskFixture> getFixtures() {
        return fixtures.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_FIXTURES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public JsonNullable<List<TaskFixture>> getFixtures_JsonNullable() {
    return fixtures;
  }
  
  @JsonProperty(JSON_PROPERTY_FIXTURES)
  public void setFixtures_JsonNullable(JsonNullable<List<TaskFixture>> fixtures) {
    this.fixtures = fixtures;
  }

  public void setFixtures(@javax.annotation.Nullable List<TaskFixture> fixtures) {
    this.fixtures = JsonNullable.<List<TaskFixture>>of(fixtures);
  }

  public Execution kind(@javax.annotation.Nullable ExecutionKind kind) {
    this.kind = JsonNullable.<ExecutionKind>of(kind);
    
    return this;
  }

  /**
   * Get kind
   * @return kind
   */
  @javax.annotation.Nullable  @JsonIgnore

  public ExecutionKind getKind() {
        return kind.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_KIND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public JsonNullable<ExecutionKind> getKind_JsonNullable() {
    return kind;
  }
  
  @JsonProperty(JSON_PROPERTY_KIND)
  public void setKind_JsonNullable(JsonNullable<ExecutionKind> kind) {
    this.kind = kind;
  }

  public void setKind(@javax.annotation.Nullable ExecutionKind kind) {
    this.kind = JsonNullable.<ExecutionKind>of(kind);
  }

  public Execution breakpoints(@javax.annotation.Nullable List<Breakpoint> breakpoints) {
    this.breakpoints = JsonNullable.<List<Breakpoint>>of(breakpoints);
    
    return this;
  }

  public Execution addBreakpointsItem(Breakpoint breakpointsItem) {
    if (this.breakpoints == null || !this.breakpoints.isPresent()) {
      this.breakpoints = JsonNullable.<List<Breakpoint>>of(new ArrayList<>());
    }
    try {
      this.breakpoints.get().add(breakpointsItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

  /**
   * Get breakpoints
   * @return breakpoints
   */
  @javax.annotation.Nullable  @JsonIgnore

  public List<Breakpoint> getBreakpoints() {
        return breakpoints.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_BREAKPOINTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public JsonNullable<List<Breakpoint>> getBreakpoints_JsonNullable() {
    return breakpoints;
  }
  
  @JsonProperty(JSON_PROPERTY_BREAKPOINTS)
  public void setBreakpoints_JsonNullable(JsonNullable<List<Breakpoint>> breakpoints) {
    this.breakpoints = breakpoints;
  }

  public void setBreakpoints(@javax.annotation.Nullable List<Breakpoint> breakpoints) {
    this.breakpoints = JsonNullable.<List<Breakpoint>>of(breakpoints);
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Execution execution = (Execution) o;
    return Objects.equals(this.labels, execution.labels) &&
        Objects.equals(this.id, execution.id) &&
        Objects.equals(this.namespace, execution.namespace) &&
        Objects.equals(this.flowId, execution.flowId) &&
        Objects.equals(this.flowRevision, execution.flowRevision) &&
        Objects.equals(this.taskRunList, execution.taskRunList) &&
        Objects.equals(this.inputs, execution.inputs) &&
        Objects.equals(this.outputs, execution.outputs) &&
        Objects.equals(this.variables, execution.variables) &&
        Objects.equals(this.state, execution.state) &&
        Objects.equals(this.parentId, execution.parentId) &&
        Objects.equals(this.originalId, execution.originalId) &&
        Objects.equals(this.trigger, execution.trigger) &&
        Objects.equals(this.deleted, execution.deleted) &&
        Objects.equals(this.metadata, execution.metadata) &&
        equalsNullable(this.scheduleDate, execution.scheduleDate) &&
        Objects.equals(this.traceParent, execution.traceParent) &&
        equalsNullable(this.fixtures, execution.fixtures) &&
        equalsNullable(this.kind, execution.kind) &&
        equalsNullable(this.breakpoints, execution.breakpoints);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(labels, id, namespace, flowId, flowRevision, taskRunList, inputs, outputs, variables, state, parentId, originalId, trigger, deleted, metadata, hashCodeNullable(scheduleDate), traceParent, hashCodeNullable(fixtures), hashCodeNullable(kind), hashCodeNullable(breakpoints));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Execution {\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    namespace: ").append(toIndentedString(namespace)).append("\n");
    sb.append("    flowId: ").append(toIndentedString(flowId)).append("\n");
    sb.append("    flowRevision: ").append(toIndentedString(flowRevision)).append("\n");
    sb.append("    taskRunList: ").append(toIndentedString(taskRunList)).append("\n");
    sb.append("    inputs: ").append(toIndentedString(inputs)).append("\n");
    sb.append("    outputs: ").append(toIndentedString(outputs)).append("\n");
    sb.append("    variables: ").append(toIndentedString(variables)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    parentId: ").append(toIndentedString(parentId)).append("\n");
    sb.append("    originalId: ").append(toIndentedString(originalId)).append("\n");
    sb.append("    trigger: ").append(toIndentedString(trigger)).append("\n");
    sb.append("    deleted: ").append(toIndentedString(deleted)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    scheduleDate: ").append(toIndentedString(scheduleDate)).append("\n");
    sb.append("    traceParent: ").append(toIndentedString(traceParent)).append("\n");
    sb.append("    fixtures: ").append(toIndentedString(fixtures)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    breakpoints: ").append(toIndentedString(breakpoints)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

