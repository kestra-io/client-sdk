/*
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kestra.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * ValidateConstraintViolation
 */
@JsonPropertyOrder({
  ValidateConstraintViolation.JSON_PROPERTY_FLOW,
  ValidateConstraintViolation.JSON_PROPERTY_NAMESPACE,
  ValidateConstraintViolation.JSON_PROPERTY_INDEX,
  ValidateConstraintViolation.JSON_PROPERTY_CONSTRAINTS,
  ValidateConstraintViolation.JSON_PROPERTY_OUTDATED,
  ValidateConstraintViolation.JSON_PROPERTY_DEPRECATION_PATHS,
  ValidateConstraintViolation.JSON_PROPERTY_WARNINGS,
  ValidateConstraintViolation.JSON_PROPERTY_INFOS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-03T07:32:20.514591171Z[Etc/UTC]", comments = "Generator version: 7.14.0-SNAPSHOT")
public class ValidateConstraintViolation {
  public static final String JSON_PROPERTY_FLOW = "flow";
  @javax.annotation.Nullable
  private String flow;

  public static final String JSON_PROPERTY_NAMESPACE = "namespace";
  @javax.annotation.Nullable
  private String namespace;

  public static final String JSON_PROPERTY_INDEX = "index";
  @javax.annotation.Nonnull
  private Integer index;

  public static final String JSON_PROPERTY_CONSTRAINTS = "constraints";
  @javax.annotation.Nullable
  private String constraints;

  public static final String JSON_PROPERTY_OUTDATED = "outdated";
  @javax.annotation.Nullable
  private Boolean outdated;

  public static final String JSON_PROPERTY_DEPRECATION_PATHS = "deprecationPaths";
  @javax.annotation.Nullable
  private List<String> deprecationPaths = new ArrayList<>();

  public static final String JSON_PROPERTY_WARNINGS = "warnings";
  @javax.annotation.Nullable
  private List<String> warnings = new ArrayList<>();

  public static final String JSON_PROPERTY_INFOS = "infos";
  @javax.annotation.Nullable
  private List<String> infos = new ArrayList<>();

  public ValidateConstraintViolation() {
  }

  public ValidateConstraintViolation flow(@javax.annotation.Nullable String flow) {
    
    this.flow = flow;
    return this;
  }

  /**
   * Get flow
   * @return flow
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FLOW)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFlow() {
    return flow;
  }


  @JsonProperty(JSON_PROPERTY_FLOW)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFlow(@javax.annotation.Nullable String flow) {
    this.flow = flow;
  }

  public ValidateConstraintViolation namespace(@javax.annotation.Nullable String namespace) {
    
    this.namespace = namespace;
    return this;
  }

  /**
   * Get namespace
   * @return namespace
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NAMESPACE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getNamespace() {
    return namespace;
  }


  @JsonProperty(JSON_PROPERTY_NAMESPACE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNamespace(@javax.annotation.Nullable String namespace) {
    this.namespace = namespace;
  }

  public ValidateConstraintViolation index(@javax.annotation.Nonnull Integer index) {
    
    this.index = index;
    return this;
  }

  /**
   * Get index
   * @return index
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_INDEX)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getIndex() {
    return index;
  }


  @JsonProperty(JSON_PROPERTY_INDEX)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIndex(@javax.annotation.Nonnull Integer index) {
    this.index = index;
  }

  public ValidateConstraintViolation constraints(@javax.annotation.Nullable String constraints) {
    
    this.constraints = constraints;
    return this;
  }

  /**
   * Get constraints
   * @return constraints
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONSTRAINTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getConstraints() {
    return constraints;
  }


  @JsonProperty(JSON_PROPERTY_CONSTRAINTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConstraints(@javax.annotation.Nullable String constraints) {
    this.constraints = constraints;
  }

  public ValidateConstraintViolation outdated(@javax.annotation.Nullable Boolean outdated) {
    
    this.outdated = outdated;
    return this;
  }

  /**
   * Get outdated
   * @return outdated
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OUTDATED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getOutdated() {
    return outdated;
  }


  @JsonProperty(JSON_PROPERTY_OUTDATED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOutdated(@javax.annotation.Nullable Boolean outdated) {
    this.outdated = outdated;
  }

  public ValidateConstraintViolation deprecationPaths(@javax.annotation.Nullable List<String> deprecationPaths) {
    
    this.deprecationPaths = deprecationPaths;
    return this;
  }

  public ValidateConstraintViolation addDeprecationPathsItem(String deprecationPathsItem) {
    if (this.deprecationPaths == null) {
      this.deprecationPaths = new ArrayList<>();
    }
    this.deprecationPaths.add(deprecationPathsItem);
    return this;
  }

  /**
   * Get deprecationPaths
   * @return deprecationPaths
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DEPRECATION_PATHS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getDeprecationPaths() {
    return deprecationPaths;
  }


  @JsonProperty(JSON_PROPERTY_DEPRECATION_PATHS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDeprecationPaths(@javax.annotation.Nullable List<String> deprecationPaths) {
    this.deprecationPaths = deprecationPaths;
  }

  public ValidateConstraintViolation warnings(@javax.annotation.Nullable List<String> warnings) {
    
    this.warnings = warnings;
    return this;
  }

  public ValidateConstraintViolation addWarningsItem(String warningsItem) {
    if (this.warnings == null) {
      this.warnings = new ArrayList<>();
    }
    this.warnings.add(warningsItem);
    return this;
  }

  /**
   * Get warnings
   * @return warnings
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_WARNINGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getWarnings() {
    return warnings;
  }


  @JsonProperty(JSON_PROPERTY_WARNINGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWarnings(@javax.annotation.Nullable List<String> warnings) {
    this.warnings = warnings;
  }

  public ValidateConstraintViolation infos(@javax.annotation.Nullable List<String> infos) {
    
    this.infos = infos;
    return this;
  }

  public ValidateConstraintViolation addInfosItem(String infosItem) {
    if (this.infos == null) {
      this.infos = new ArrayList<>();
    }
    this.infos.add(infosItem);
    return this;
  }

  /**
   * Get infos
   * @return infos
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INFOS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getInfos() {
    return infos;
  }


  @JsonProperty(JSON_PROPERTY_INFOS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInfos(@javax.annotation.Nullable List<String> infos) {
    this.infos = infos;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ValidateConstraintViolation validateConstraintViolation = (ValidateConstraintViolation) o;
    return Objects.equals(this.flow, validateConstraintViolation.flow) &&
        Objects.equals(this.namespace, validateConstraintViolation.namespace) &&
        Objects.equals(this.index, validateConstraintViolation.index) &&
        Objects.equals(this.constraints, validateConstraintViolation.constraints) &&
        Objects.equals(this.outdated, validateConstraintViolation.outdated) &&
        Objects.equals(this.deprecationPaths, validateConstraintViolation.deprecationPaths) &&
        Objects.equals(this.warnings, validateConstraintViolation.warnings) &&
        Objects.equals(this.infos, validateConstraintViolation.infos);
  }

  @Override
  public int hashCode() {
    return Objects.hash(flow, namespace, index, constraints, outdated, deprecationPaths, warnings, infos);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ValidateConstraintViolation {\n");
    sb.append("    flow: ").append(toIndentedString(flow)).append("\n");
    sb.append("    namespace: ").append(toIndentedString(namespace)).append("\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    constraints: ").append(toIndentedString(constraints)).append("\n");
    sb.append("    outdated: ").append(toIndentedString(outdated)).append("\n");
    sb.append("    deprecationPaths: ").append(toIndentedString(deprecationPaths)).append("\n");
    sb.append("    warnings: ").append(toIndentedString(warnings)).append("\n");
    sb.append("    infos: ").append(toIndentedString(infos)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `flow` to the URL query string
    if (getFlow() != null) {
      try {
        joiner.add(String.format("%sflow%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getFlow()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `namespace` to the URL query string
    if (getNamespace() != null) {
      try {
        joiner.add(String.format("%snamespace%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getNamespace()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `index` to the URL query string
    if (getIndex() != null) {
      try {
        joiner.add(String.format("%sindex%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getIndex()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `constraints` to the URL query string
    if (getConstraints() != null) {
      try {
        joiner.add(String.format("%sconstraints%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getConstraints()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `outdated` to the URL query string
    if (getOutdated() != null) {
      try {
        joiner.add(String.format("%soutdated%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getOutdated()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `deprecationPaths` to the URL query string
    if (getDeprecationPaths() != null) {
      for (int i = 0; i < getDeprecationPaths().size(); i++) {
        try {
          joiner.add(String.format("%sdeprecationPaths%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(String.valueOf(getDeprecationPaths().get(i)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    // add `warnings` to the URL query string
    if (getWarnings() != null) {
      for (int i = 0; i < getWarnings().size(); i++) {
        try {
          joiner.add(String.format("%swarnings%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(String.valueOf(getWarnings().get(i)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    // add `infos` to the URL query string
    if (getInfos() != null) {
      for (int i = 0; i < getInfos().size(); i++) {
        try {
          joiner.add(String.format("%sinfos%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(String.valueOf(getInfos().get(i)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    return joiner.toString();
  }

}

