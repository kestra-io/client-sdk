/*
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kestra.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.kestra.sdk.model.TestSuiteRunResult;
import io.kestra.sdk.model.TestSuiteServiceRunByQueryRequest;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * TestSuiteServiceTestRunByQueryResult
 */
@JsonPropertyOrder({
  TestSuiteServiceTestRunByQueryResult.JSON_PROPERTY_REQUEST_MADE,
  TestSuiteServiceTestRunByQueryResult.JSON_PROPERTY_TENANT_ID,
  TestSuiteServiceTestRunByQueryResult.JSON_PROPERTY_NUMBER_OF_TEST_SUITES_TO_BE_RUN,
  TestSuiteServiceTestRunByQueryResult.JSON_PROPERTY_NUMBER_OF_TEST_CASES_TO_BE_RUN,
  TestSuiteServiceTestRunByQueryResult.JSON_PROPERTY_RESULTS
})
@JsonTypeName("TestSuiteService.TestRunByQueryResult")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.16.0-SNAPSHOT")
public class TestSuiteServiceTestRunByQueryResult {
  public static final String JSON_PROPERTY_REQUEST_MADE = "requestMade";
  @javax.annotation.Nonnull
  private TestSuiteServiceRunByQueryRequest requestMade;

  public static final String JSON_PROPERTY_TENANT_ID = "tenantId";
  @javax.annotation.Nonnull
  private String tenantId;

  public static final String JSON_PROPERTY_NUMBER_OF_TEST_SUITES_TO_BE_RUN = "numberOfTestSuitesToBeRun";
  @javax.annotation.Nonnull
  private Integer numberOfTestSuitesToBeRun;

  public static final String JSON_PROPERTY_NUMBER_OF_TEST_CASES_TO_BE_RUN = "numberOfTestCasesToBeRun";
  @javax.annotation.Nonnull
  private Integer numberOfTestCasesToBeRun;

  public static final String JSON_PROPERTY_RESULTS = "results";
  @javax.annotation.Nonnull
  private List<TestSuiteRunResult> results = new ArrayList<>();

  public TestSuiteServiceTestRunByQueryResult() {
  }

  public TestSuiteServiceTestRunByQueryResult requestMade(@javax.annotation.Nonnull TestSuiteServiceRunByQueryRequest requestMade) {
    
    this.requestMade = requestMade;
    return this;
  }

  /**
   * Get requestMade
   * @return requestMade
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_REQUEST_MADE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public TestSuiteServiceRunByQueryRequest getRequestMade() {
    return requestMade;
  }


  @JsonProperty(JSON_PROPERTY_REQUEST_MADE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRequestMade(@javax.annotation.Nonnull TestSuiteServiceRunByQueryRequest requestMade) {
    this.requestMade = requestMade;
  }

  public TestSuiteServiceTestRunByQueryResult tenantId(@javax.annotation.Nonnull String tenantId) {
    
    this.tenantId = tenantId;
    return this;
  }

  /**
   * Get tenantId
   * @return tenantId
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TENANT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getTenantId() {
    return tenantId;
  }


  @JsonProperty(JSON_PROPERTY_TENANT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTenantId(@javax.annotation.Nonnull String tenantId) {
    this.tenantId = tenantId;
  }

  public TestSuiteServiceTestRunByQueryResult numberOfTestSuitesToBeRun(@javax.annotation.Nonnull Integer numberOfTestSuitesToBeRun) {
    
    this.numberOfTestSuitesToBeRun = numberOfTestSuitesToBeRun;
    return this;
  }

  /**
   * Get numberOfTestSuitesToBeRun
   * @return numberOfTestSuitesToBeRun
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NUMBER_OF_TEST_SUITES_TO_BE_RUN)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getNumberOfTestSuitesToBeRun() {
    return numberOfTestSuitesToBeRun;
  }


  @JsonProperty(JSON_PROPERTY_NUMBER_OF_TEST_SUITES_TO_BE_RUN)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setNumberOfTestSuitesToBeRun(@javax.annotation.Nonnull Integer numberOfTestSuitesToBeRun) {
    this.numberOfTestSuitesToBeRun = numberOfTestSuitesToBeRun;
  }

  public TestSuiteServiceTestRunByQueryResult numberOfTestCasesToBeRun(@javax.annotation.Nonnull Integer numberOfTestCasesToBeRun) {
    
    this.numberOfTestCasesToBeRun = numberOfTestCasesToBeRun;
    return this;
  }

  /**
   * Get numberOfTestCasesToBeRun
   * @return numberOfTestCasesToBeRun
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NUMBER_OF_TEST_CASES_TO_BE_RUN)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getNumberOfTestCasesToBeRun() {
    return numberOfTestCasesToBeRun;
  }


  @JsonProperty(JSON_PROPERTY_NUMBER_OF_TEST_CASES_TO_BE_RUN)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setNumberOfTestCasesToBeRun(@javax.annotation.Nonnull Integer numberOfTestCasesToBeRun) {
    this.numberOfTestCasesToBeRun = numberOfTestCasesToBeRun;
  }

  public TestSuiteServiceTestRunByQueryResult results(@javax.annotation.Nonnull List<TestSuiteRunResult> results) {
    
    this.results = results;
    return this;
  }

  public TestSuiteServiceTestRunByQueryResult addResultsItem(TestSuiteRunResult resultsItem) {
    if (this.results == null) {
      this.results = new ArrayList<>();
    }
    this.results.add(resultsItem);
    return this;
  }

  /**
   * Get results
   * @return results
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_RESULTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<TestSuiteRunResult> getResults() {
    return results;
  }


  @JsonProperty(JSON_PROPERTY_RESULTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setResults(@javax.annotation.Nonnull List<TestSuiteRunResult> results) {
    this.results = results;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestSuiteServiceTestRunByQueryResult testSuiteServiceTestRunByQueryResult = (TestSuiteServiceTestRunByQueryResult) o;
    return Objects.equals(this.requestMade, testSuiteServiceTestRunByQueryResult.requestMade) &&
        Objects.equals(this.tenantId, testSuiteServiceTestRunByQueryResult.tenantId) &&
        Objects.equals(this.numberOfTestSuitesToBeRun, testSuiteServiceTestRunByQueryResult.numberOfTestSuitesToBeRun) &&
        Objects.equals(this.numberOfTestCasesToBeRun, testSuiteServiceTestRunByQueryResult.numberOfTestCasesToBeRun) &&
        Objects.equals(this.results, testSuiteServiceTestRunByQueryResult.results);
  }

  @Override
  public int hashCode() {
    return Objects.hash(requestMade, tenantId, numberOfTestSuitesToBeRun, numberOfTestCasesToBeRun, results);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestSuiteServiceTestRunByQueryResult {\n");
    sb.append("    requestMade: ").append(toIndentedString(requestMade)).append("\n");
    sb.append("    tenantId: ").append(toIndentedString(tenantId)).append("\n");
    sb.append("    numberOfTestSuitesToBeRun: ").append(toIndentedString(numberOfTestSuitesToBeRun)).append("\n");
    sb.append("    numberOfTestCasesToBeRun: ").append(toIndentedString(numberOfTestCasesToBeRun)).append("\n");
    sb.append("    results: ").append(toIndentedString(results)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

