/*
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kestra.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.kestra.sdk.model.BlueprintControllerKind;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * BlueprintControllerApiBlueprintItemWithSource
 */
@JsonPropertyOrder({
  BlueprintControllerApiBlueprintItemWithSource.JSON_PROPERTY_ID,
  BlueprintControllerApiBlueprintItemWithSource.JSON_PROPERTY_TITLE,
  BlueprintControllerApiBlueprintItemWithSource.JSON_PROPERTY_DESCRIPTION,
  BlueprintControllerApiBlueprintItemWithSource.JSON_PROPERTY_INCLUDED_TASKS,
  BlueprintControllerApiBlueprintItemWithSource.JSON_PROPERTY_TAGS,
  BlueprintControllerApiBlueprintItemWithSource.JSON_PROPERTY_PUBLISHED_AT,
  BlueprintControllerApiBlueprintItemWithSource.JSON_PROPERTY_SOURCE,
  BlueprintControllerApiBlueprintItemWithSource.JSON_PROPERTY_KIND
})
@JsonTypeName("BlueprintController.ApiBlueprintItemWithSource")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-03T07:32:20.514591171Z[Etc/UTC]", comments = "Generator version: 7.14.0-SNAPSHOT")
public class BlueprintControllerApiBlueprintItemWithSource {
  public static final String JSON_PROPERTY_ID = "id";
  @javax.annotation.Nullable
  private String id;

  public static final String JSON_PROPERTY_TITLE = "title";
  @javax.annotation.Nullable
  private String title;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  @javax.annotation.Nullable
  private String description;

  public static final String JSON_PROPERTY_INCLUDED_TASKS = "includedTasks";
  @javax.annotation.Nullable
  private List<String> includedTasks = new ArrayList<>();

  public static final String JSON_PROPERTY_TAGS = "tags";
  @javax.annotation.Nullable
  private List<String> tags = new ArrayList<>();

  public static final String JSON_PROPERTY_PUBLISHED_AT = "publishedAt";
  @javax.annotation.Nullable
  private OffsetDateTime publishedAt;

  public static final String JSON_PROPERTY_SOURCE = "source";
  @javax.annotation.Nullable
  private String source;

  public static final String JSON_PROPERTY_KIND = "kind";
  @javax.annotation.Nullable
  private BlueprintControllerKind kind;

  public BlueprintControllerApiBlueprintItemWithSource() {
  }

  public BlueprintControllerApiBlueprintItemWithSource id(@javax.annotation.Nullable String id) {
    
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(@javax.annotation.Nullable String id) {
    this.id = id;
  }

  public BlueprintControllerApiBlueprintItemWithSource title(@javax.annotation.Nullable String title) {
    
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TITLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTitle() {
    return title;
  }


  @JsonProperty(JSON_PROPERTY_TITLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTitle(@javax.annotation.Nullable String title) {
    this.title = title;
  }

  public BlueprintControllerApiBlueprintItemWithSource description(@javax.annotation.Nullable String description) {
    
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }

  public BlueprintControllerApiBlueprintItemWithSource includedTasks(@javax.annotation.Nullable List<String> includedTasks) {
    
    this.includedTasks = includedTasks;
    return this;
  }

  public BlueprintControllerApiBlueprintItemWithSource addIncludedTasksItem(String includedTasksItem) {
    if (this.includedTasks == null) {
      this.includedTasks = new ArrayList<>();
    }
    this.includedTasks.add(includedTasksItem);
    return this;
  }

  /**
   * Get includedTasks
   * @return includedTasks
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INCLUDED_TASKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getIncludedTasks() {
    return includedTasks;
  }


  @JsonProperty(JSON_PROPERTY_INCLUDED_TASKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIncludedTasks(@javax.annotation.Nullable List<String> includedTasks) {
    this.includedTasks = includedTasks;
  }

  public BlueprintControllerApiBlueprintItemWithSource tags(@javax.annotation.Nullable List<String> tags) {
    
    this.tags = tags;
    return this;
  }

  public BlueprintControllerApiBlueprintItemWithSource addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TAGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getTags() {
    return tags;
  }


  @JsonProperty(JSON_PROPERTY_TAGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTags(@javax.annotation.Nullable List<String> tags) {
    this.tags = tags;
  }

  public BlueprintControllerApiBlueprintItemWithSource publishedAt(@javax.annotation.Nullable OffsetDateTime publishedAt) {
    
    this.publishedAt = publishedAt;
    return this;
  }

  /**
   * Get publishedAt
   * @return publishedAt
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PUBLISHED_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getPublishedAt() {
    return publishedAt;
  }


  @JsonProperty(JSON_PROPERTY_PUBLISHED_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPublishedAt(@javax.annotation.Nullable OffsetDateTime publishedAt) {
    this.publishedAt = publishedAt;
  }

  public BlueprintControllerApiBlueprintItemWithSource source(@javax.annotation.Nullable String source) {
    
    this.source = source;
    return this;
  }

  /**
   * Get source
   * @return source
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SOURCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSource() {
    return source;
  }


  @JsonProperty(JSON_PROPERTY_SOURCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSource(@javax.annotation.Nullable String source) {
    this.source = source;
  }

  public BlueprintControllerApiBlueprintItemWithSource kind(@javax.annotation.Nullable BlueprintControllerKind kind) {
    
    this.kind = kind;
    return this;
  }

  /**
   * Get kind
   * @return kind
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_KIND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BlueprintControllerKind getKind() {
    return kind;
  }


  @JsonProperty(JSON_PROPERTY_KIND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setKind(@javax.annotation.Nullable BlueprintControllerKind kind) {
    this.kind = kind;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BlueprintControllerApiBlueprintItemWithSource blueprintControllerApiBlueprintItemWithSource = (BlueprintControllerApiBlueprintItemWithSource) o;
    return Objects.equals(this.id, blueprintControllerApiBlueprintItemWithSource.id) &&
        Objects.equals(this.title, blueprintControllerApiBlueprintItemWithSource.title) &&
        Objects.equals(this.description, blueprintControllerApiBlueprintItemWithSource.description) &&
        Objects.equals(this.includedTasks, blueprintControllerApiBlueprintItemWithSource.includedTasks) &&
        Objects.equals(this.tags, blueprintControllerApiBlueprintItemWithSource.tags) &&
        Objects.equals(this.publishedAt, blueprintControllerApiBlueprintItemWithSource.publishedAt) &&
        Objects.equals(this.source, blueprintControllerApiBlueprintItemWithSource.source) &&
        Objects.equals(this.kind, blueprintControllerApiBlueprintItemWithSource.kind);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, title, description, includedTasks, tags, publishedAt, source, kind);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BlueprintControllerApiBlueprintItemWithSource {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    includedTasks: ").append(toIndentedString(includedTasks)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    publishedAt: ").append(toIndentedString(publishedAt)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `id` to the URL query string
    if (getId() != null) {
      try {
        joiner.add(String.format("%sid%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `title` to the URL query string
    if (getTitle() != null) {
      try {
        joiner.add(String.format("%stitle%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTitle()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `description` to the URL query string
    if (getDescription() != null) {
      try {
        joiner.add(String.format("%sdescription%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDescription()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `includedTasks` to the URL query string
    if (getIncludedTasks() != null) {
      for (int i = 0; i < getIncludedTasks().size(); i++) {
        try {
          joiner.add(String.format("%sincludedTasks%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(String.valueOf(getIncludedTasks().get(i)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    // add `tags` to the URL query string
    if (getTags() != null) {
      for (int i = 0; i < getTags().size(); i++) {
        try {
          joiner.add(String.format("%stags%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(String.valueOf(getTags().get(i)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    // add `publishedAt` to the URL query string
    if (getPublishedAt() != null) {
      try {
        joiner.add(String.format("%spublishedAt%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPublishedAt()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `source` to the URL query string
    if (getSource() != null) {
      try {
        joiner.add(String.format("%ssource%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSource()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `kind` to the URL query string
    if (getKind() != null) {
      try {
        joiner.add(String.format("%skind%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getKind()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

