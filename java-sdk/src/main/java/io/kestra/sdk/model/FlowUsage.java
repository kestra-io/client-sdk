/*
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kestra.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.HashMap;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * FlowUsage
 */
@JsonPropertyOrder({
  FlowUsage.JSON_PROPERTY_COUNT,
  FlowUsage.JSON_PROPERTY_NAMESPACES_COUNT,
  FlowUsage.JSON_PROPERTY_TASK_TYPE_COUNT,
  FlowUsage.JSON_PROPERTY_TRIGGER_TYPE_COUNT,
  FlowUsage.JSON_PROPERTY_TASK_RUNNER_TYPE_COUNT
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-03T07:32:20.514591171Z[Etc/UTC]", comments = "Generator version: 7.14.0-SNAPSHOT")
public class FlowUsage {
  public static final String JSON_PROPERTY_COUNT = "count";
  @javax.annotation.Nullable
  private Integer count;

  public static final String JSON_PROPERTY_NAMESPACES_COUNT = "namespacesCount";
  @javax.annotation.Nullable
  private Long namespacesCount;

  public static final String JSON_PROPERTY_TASK_TYPE_COUNT = "taskTypeCount";
  @javax.annotation.Nullable
  private Map<String, Long> taskTypeCount = new HashMap<>();

  public static final String JSON_PROPERTY_TRIGGER_TYPE_COUNT = "triggerTypeCount";
  @javax.annotation.Nullable
  private Map<String, Long> triggerTypeCount = new HashMap<>();

  public static final String JSON_PROPERTY_TASK_RUNNER_TYPE_COUNT = "taskRunnerTypeCount";
  @javax.annotation.Nullable
  private Map<String, Long> taskRunnerTypeCount = new HashMap<>();

  public FlowUsage() {
  }

  public FlowUsage count(@javax.annotation.Nullable Integer count) {
    
    this.count = count;
    return this;
  }

  /**
   * Get count
   * @return count
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getCount() {
    return count;
  }


  @JsonProperty(JSON_PROPERTY_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCount(@javax.annotation.Nullable Integer count) {
    this.count = count;
  }

  public FlowUsage namespacesCount(@javax.annotation.Nullable Long namespacesCount) {
    
    this.namespacesCount = namespacesCount;
    return this;
  }

  /**
   * Get namespacesCount
   * @return namespacesCount
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NAMESPACES_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getNamespacesCount() {
    return namespacesCount;
  }


  @JsonProperty(JSON_PROPERTY_NAMESPACES_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNamespacesCount(@javax.annotation.Nullable Long namespacesCount) {
    this.namespacesCount = namespacesCount;
  }

  public FlowUsage taskTypeCount(@javax.annotation.Nullable Map<String, Long> taskTypeCount) {
    
    this.taskTypeCount = taskTypeCount;
    return this;
  }

  public FlowUsage putTaskTypeCountItem(String key, Long taskTypeCountItem) {
    if (this.taskTypeCount == null) {
      this.taskTypeCount = new HashMap<>();
    }
    this.taskTypeCount.put(key, taskTypeCountItem);
    return this;
  }

  /**
   * Get taskTypeCount
   * @return taskTypeCount
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TASK_TYPE_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, Long> getTaskTypeCount() {
    return taskTypeCount;
  }


  @JsonProperty(JSON_PROPERTY_TASK_TYPE_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTaskTypeCount(@javax.annotation.Nullable Map<String, Long> taskTypeCount) {
    this.taskTypeCount = taskTypeCount;
  }

  public FlowUsage triggerTypeCount(@javax.annotation.Nullable Map<String, Long> triggerTypeCount) {
    
    this.triggerTypeCount = triggerTypeCount;
    return this;
  }

  public FlowUsage putTriggerTypeCountItem(String key, Long triggerTypeCountItem) {
    if (this.triggerTypeCount == null) {
      this.triggerTypeCount = new HashMap<>();
    }
    this.triggerTypeCount.put(key, triggerTypeCountItem);
    return this;
  }

  /**
   * Get triggerTypeCount
   * @return triggerTypeCount
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TRIGGER_TYPE_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, Long> getTriggerTypeCount() {
    return triggerTypeCount;
  }


  @JsonProperty(JSON_PROPERTY_TRIGGER_TYPE_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTriggerTypeCount(@javax.annotation.Nullable Map<String, Long> triggerTypeCount) {
    this.triggerTypeCount = triggerTypeCount;
  }

  public FlowUsage taskRunnerTypeCount(@javax.annotation.Nullable Map<String, Long> taskRunnerTypeCount) {
    
    this.taskRunnerTypeCount = taskRunnerTypeCount;
    return this;
  }

  public FlowUsage putTaskRunnerTypeCountItem(String key, Long taskRunnerTypeCountItem) {
    if (this.taskRunnerTypeCount == null) {
      this.taskRunnerTypeCount = new HashMap<>();
    }
    this.taskRunnerTypeCount.put(key, taskRunnerTypeCountItem);
    return this;
  }

  /**
   * Get taskRunnerTypeCount
   * @return taskRunnerTypeCount
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TASK_RUNNER_TYPE_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, Long> getTaskRunnerTypeCount() {
    return taskRunnerTypeCount;
  }


  @JsonProperty(JSON_PROPERTY_TASK_RUNNER_TYPE_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTaskRunnerTypeCount(@javax.annotation.Nullable Map<String, Long> taskRunnerTypeCount) {
    this.taskRunnerTypeCount = taskRunnerTypeCount;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FlowUsage flowUsage = (FlowUsage) o;
    return Objects.equals(this.count, flowUsage.count) &&
        Objects.equals(this.namespacesCount, flowUsage.namespacesCount) &&
        Objects.equals(this.taskTypeCount, flowUsage.taskTypeCount) &&
        Objects.equals(this.triggerTypeCount, flowUsage.triggerTypeCount) &&
        Objects.equals(this.taskRunnerTypeCount, flowUsage.taskRunnerTypeCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(count, namespacesCount, taskTypeCount, triggerTypeCount, taskRunnerTypeCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FlowUsage {\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    namespacesCount: ").append(toIndentedString(namespacesCount)).append("\n");
    sb.append("    taskTypeCount: ").append(toIndentedString(taskTypeCount)).append("\n");
    sb.append("    triggerTypeCount: ").append(toIndentedString(triggerTypeCount)).append("\n");
    sb.append("    taskRunnerTypeCount: ").append(toIndentedString(taskRunnerTypeCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `count` to the URL query string
    if (getCount() != null) {
      try {
        joiner.add(String.format("%scount%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCount()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `namespacesCount` to the URL query string
    if (getNamespacesCount() != null) {
      try {
        joiner.add(String.format("%snamespacesCount%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getNamespacesCount()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `taskTypeCount` to the URL query string
    if (getTaskTypeCount() != null) {
      for (String _key : getTaskTypeCount().keySet()) {
        try {
          joiner.add(String.format("%staskTypeCount%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix),
              getTaskTypeCount().get(_key), URLEncoder.encode(String.valueOf(getTaskTypeCount().get(_key)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    // add `triggerTypeCount` to the URL query string
    if (getTriggerTypeCount() != null) {
      for (String _key : getTriggerTypeCount().keySet()) {
        try {
          joiner.add(String.format("%striggerTypeCount%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix),
              getTriggerTypeCount().get(_key), URLEncoder.encode(String.valueOf(getTriggerTypeCount().get(_key)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    // add `taskRunnerTypeCount` to the URL query string
    if (getTaskRunnerTypeCount() != null) {
      for (String _key : getTaskRunnerTypeCount().keySet()) {
        try {
          joiner.add(String.format("%staskRunnerTypeCount%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix),
              getTaskRunnerTypeCount().get(_key), URLEncoder.encode(String.valueOf(getTaskRunnerTypeCount().get(_key)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    return joiner.toString();
  }

}

