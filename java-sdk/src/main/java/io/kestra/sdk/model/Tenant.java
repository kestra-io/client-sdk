/*
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kestra.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.kestra.sdk.model.Isolation;
import io.kestra.sdk.model.WorkerGroup;
import java.util.HashMap;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * Tenant
 */
@JsonPropertyOrder({
  Tenant.JSON_PROPERTY_STORAGE_ISOLATION,
  Tenant.JSON_PROPERTY_SECRET_ISOLATION,
  Tenant.JSON_PROPERTY_ID,
  Tenant.JSON_PROPERTY_NAME,
  Tenant.JSON_PROPERTY_DELETED,
  Tenant.JSON_PROPERTY_WORKER_GROUP,
  Tenant.JSON_PROPERTY_STORAGE_TYPE,
  Tenant.JSON_PROPERTY_STORAGE_CONFIGURATION,
  Tenant.JSON_PROPERTY_SECRET_TYPE,
  Tenant.JSON_PROPERTY_SECRET_READ_ONLY,
  Tenant.JSON_PROPERTY_SECRET_CONFIGURATION,
  Tenant.JSON_PROPERTY_REQUIRE_EXISTING_NAMESPACE,
  Tenant.JSON_PROPERTY_OUTPUTS_IN_INTERNAL_STORAGE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-28T12:15:52.743487342Z[Etc/UTC]", comments = "Generator version: 7.14.0-SNAPSHOT")
public class Tenant {
  public static final String JSON_PROPERTY_STORAGE_ISOLATION = "storageIsolation";
  @javax.annotation.Nullable
  private Isolation storageIsolation;

  public static final String JSON_PROPERTY_SECRET_ISOLATION = "secretIsolation";
  @javax.annotation.Nullable
  private Isolation secretIsolation;

  public static final String JSON_PROPERTY_ID = "id";
  @javax.annotation.Nonnull
  private String id;

  public static final String JSON_PROPERTY_NAME = "name";
  @javax.annotation.Nonnull
  private String name;

  public static final String JSON_PROPERTY_DELETED = "deleted";
  @javax.annotation.Nonnull
  private Boolean deleted;

  public static final String JSON_PROPERTY_WORKER_GROUP = "workerGroup";
  @javax.annotation.Nullable
  private WorkerGroup workerGroup;

  public static final String JSON_PROPERTY_STORAGE_TYPE = "storageType";
  @javax.annotation.Nullable
  private String storageType;

  public static final String JSON_PROPERTY_STORAGE_CONFIGURATION = "storageConfiguration";
  @javax.annotation.Nullable
  private Map<String, Object> storageConfiguration = new HashMap<>();

  public static final String JSON_PROPERTY_SECRET_TYPE = "secretType";
  @javax.annotation.Nullable
  private String secretType;

  public static final String JSON_PROPERTY_SECRET_READ_ONLY = "secretReadOnly";
  @javax.annotation.Nullable
  private Boolean secretReadOnly;

  public static final String JSON_PROPERTY_SECRET_CONFIGURATION = "secretConfiguration";
  @javax.annotation.Nullable
  private Map<String, Object> secretConfiguration = new HashMap<>();

  public static final String JSON_PROPERTY_REQUIRE_EXISTING_NAMESPACE = "requireExistingNamespace";
  @javax.annotation.Nullable
  private Boolean requireExistingNamespace;

  public static final String JSON_PROPERTY_OUTPUTS_IN_INTERNAL_STORAGE = "outputsInInternalStorage";
  @javax.annotation.Nullable
  private Boolean outputsInInternalStorage;

  public Tenant() {
  }

  public Tenant storageIsolation(@javax.annotation.Nullable Isolation storageIsolation) {
    
    this.storageIsolation = storageIsolation;
    return this;
  }

  /**
   * Get storageIsolation
   * @return storageIsolation
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STORAGE_ISOLATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Isolation getStorageIsolation() {
    return storageIsolation;
  }


  @JsonProperty(JSON_PROPERTY_STORAGE_ISOLATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStorageIsolation(@javax.annotation.Nullable Isolation storageIsolation) {
    this.storageIsolation = storageIsolation;
  }

  public Tenant secretIsolation(@javax.annotation.Nullable Isolation secretIsolation) {
    
    this.secretIsolation = secretIsolation;
    return this;
  }

  /**
   * Get secretIsolation
   * @return secretIsolation
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SECRET_ISOLATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Isolation getSecretIsolation() {
    return secretIsolation;
  }


  @JsonProperty(JSON_PROPERTY_SECRET_ISOLATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSecretIsolation(@javax.annotation.Nullable Isolation secretIsolation) {
    this.secretIsolation = secretIsolation;
  }

  public Tenant id(@javax.annotation.Nonnull String id) {
    
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(@javax.annotation.Nonnull String id) {
    this.id = id;
  }

  public Tenant name(@javax.annotation.Nonnull String name) {
    
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }

  public Tenant deleted(@javax.annotation.Nonnull Boolean deleted) {
    
    this.deleted = deleted;
    return this;
  }

  /**
   * Get deleted
   * @return deleted
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DELETED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getDeleted() {
    return deleted;
  }


  @JsonProperty(JSON_PROPERTY_DELETED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDeleted(@javax.annotation.Nonnull Boolean deleted) {
    this.deleted = deleted;
  }

  public Tenant workerGroup(@javax.annotation.Nullable WorkerGroup workerGroup) {
    
    this.workerGroup = workerGroup;
    return this;
  }

  /**
   * Get workerGroup
   * @return workerGroup
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_WORKER_GROUP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public WorkerGroup getWorkerGroup() {
    return workerGroup;
  }


  @JsonProperty(JSON_PROPERTY_WORKER_GROUP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWorkerGroup(@javax.annotation.Nullable WorkerGroup workerGroup) {
    this.workerGroup = workerGroup;
  }

  public Tenant storageType(@javax.annotation.Nullable String storageType) {
    
    this.storageType = storageType;
    return this;
  }

  /**
   * Get storageType
   * @return storageType
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STORAGE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getStorageType() {
    return storageType;
  }


  @JsonProperty(JSON_PROPERTY_STORAGE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStorageType(@javax.annotation.Nullable String storageType) {
    this.storageType = storageType;
  }

  public Tenant storageConfiguration(@javax.annotation.Nullable Map<String, Object> storageConfiguration) {
    
    this.storageConfiguration = storageConfiguration;
    return this;
  }

  public Tenant putStorageConfigurationItem(String key, Object storageConfigurationItem) {
    if (this.storageConfiguration == null) {
      this.storageConfiguration = new HashMap<>();
    }
    this.storageConfiguration.put(key, storageConfigurationItem);
    return this;
  }

  /**
   * Get storageConfiguration
   * @return storageConfiguration
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STORAGE_CONFIGURATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, Object> getStorageConfiguration() {
    return storageConfiguration;
  }


  @JsonProperty(JSON_PROPERTY_STORAGE_CONFIGURATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStorageConfiguration(@javax.annotation.Nullable Map<String, Object> storageConfiguration) {
    this.storageConfiguration = storageConfiguration;
  }

  public Tenant secretType(@javax.annotation.Nullable String secretType) {
    
    this.secretType = secretType;
    return this;
  }

  /**
   * Get secretType
   * @return secretType
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SECRET_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSecretType() {
    return secretType;
  }


  @JsonProperty(JSON_PROPERTY_SECRET_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSecretType(@javax.annotation.Nullable String secretType) {
    this.secretType = secretType;
  }

  public Tenant secretReadOnly(@javax.annotation.Nullable Boolean secretReadOnly) {
    
    this.secretReadOnly = secretReadOnly;
    return this;
  }

  /**
   * Get secretReadOnly
   * @return secretReadOnly
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SECRET_READ_ONLY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getSecretReadOnly() {
    return secretReadOnly;
  }


  @JsonProperty(JSON_PROPERTY_SECRET_READ_ONLY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSecretReadOnly(@javax.annotation.Nullable Boolean secretReadOnly) {
    this.secretReadOnly = secretReadOnly;
  }

  public Tenant secretConfiguration(@javax.annotation.Nullable Map<String, Object> secretConfiguration) {
    
    this.secretConfiguration = secretConfiguration;
    return this;
  }

  public Tenant putSecretConfigurationItem(String key, Object secretConfigurationItem) {
    if (this.secretConfiguration == null) {
      this.secretConfiguration = new HashMap<>();
    }
    this.secretConfiguration.put(key, secretConfigurationItem);
    return this;
  }

  /**
   * Get secretConfiguration
   * @return secretConfiguration
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SECRET_CONFIGURATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, Object> getSecretConfiguration() {
    return secretConfiguration;
  }


  @JsonProperty(JSON_PROPERTY_SECRET_CONFIGURATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSecretConfiguration(@javax.annotation.Nullable Map<String, Object> secretConfiguration) {
    this.secretConfiguration = secretConfiguration;
  }

  public Tenant requireExistingNamespace(@javax.annotation.Nullable Boolean requireExistingNamespace) {
    
    this.requireExistingNamespace = requireExistingNamespace;
    return this;
  }

  /**
   * Get requireExistingNamespace
   * @return requireExistingNamespace
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REQUIRE_EXISTING_NAMESPACE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getRequireExistingNamespace() {
    return requireExistingNamespace;
  }


  @JsonProperty(JSON_PROPERTY_REQUIRE_EXISTING_NAMESPACE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRequireExistingNamespace(@javax.annotation.Nullable Boolean requireExistingNamespace) {
    this.requireExistingNamespace = requireExistingNamespace;
  }

  public Tenant outputsInInternalStorage(@javax.annotation.Nullable Boolean outputsInInternalStorage) {
    
    this.outputsInInternalStorage = outputsInInternalStorage;
    return this;
  }

  /**
   * Get outputsInInternalStorage
   * @return outputsInInternalStorage
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OUTPUTS_IN_INTERNAL_STORAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getOutputsInInternalStorage() {
    return outputsInInternalStorage;
  }


  @JsonProperty(JSON_PROPERTY_OUTPUTS_IN_INTERNAL_STORAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOutputsInInternalStorage(@javax.annotation.Nullable Boolean outputsInInternalStorage) {
    this.outputsInInternalStorage = outputsInInternalStorage;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Tenant tenant = (Tenant) o;
    return Objects.equals(this.storageIsolation, tenant.storageIsolation) &&
        Objects.equals(this.secretIsolation, tenant.secretIsolation) &&
        Objects.equals(this.id, tenant.id) &&
        Objects.equals(this.name, tenant.name) &&
        Objects.equals(this.deleted, tenant.deleted) &&
        Objects.equals(this.workerGroup, tenant.workerGroup) &&
        Objects.equals(this.storageType, tenant.storageType) &&
        Objects.equals(this.storageConfiguration, tenant.storageConfiguration) &&
        Objects.equals(this.secretType, tenant.secretType) &&
        Objects.equals(this.secretReadOnly, tenant.secretReadOnly) &&
        Objects.equals(this.secretConfiguration, tenant.secretConfiguration) &&
        Objects.equals(this.requireExistingNamespace, tenant.requireExistingNamespace) &&
        Objects.equals(this.outputsInInternalStorage, tenant.outputsInInternalStorage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(storageIsolation, secretIsolation, id, name, deleted, workerGroup, storageType, storageConfiguration, secretType, secretReadOnly, secretConfiguration, requireExistingNamespace, outputsInInternalStorage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Tenant {\n");
    sb.append("    storageIsolation: ").append(toIndentedString(storageIsolation)).append("\n");
    sb.append("    secretIsolation: ").append(toIndentedString(secretIsolation)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    deleted: ").append(toIndentedString(deleted)).append("\n");
    sb.append("    workerGroup: ").append(toIndentedString(workerGroup)).append("\n");
    sb.append("    storageType: ").append(toIndentedString(storageType)).append("\n");
    sb.append("    storageConfiguration: ").append(toIndentedString(storageConfiguration)).append("\n");
    sb.append("    secretType: ").append(toIndentedString(secretType)).append("\n");
    sb.append("    secretReadOnly: ").append(toIndentedString(secretReadOnly)).append("\n");
    sb.append("    secretConfiguration: ").append(toIndentedString(secretConfiguration)).append("\n");
    sb.append("    requireExistingNamespace: ").append(toIndentedString(requireExistingNamespace)).append("\n");
    sb.append("    outputsInInternalStorage: ").append(toIndentedString(outputsInInternalStorage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `storageIsolation` to the URL query string
    if (getStorageIsolation() != null) {
      joiner.add(getStorageIsolation().toUrlQueryString(prefix + "storageIsolation" + suffix));
    }

    // add `secretIsolation` to the URL query string
    if (getSecretIsolation() != null) {
      joiner.add(getSecretIsolation().toUrlQueryString(prefix + "secretIsolation" + suffix));
    }

    // add `id` to the URL query string
    if (getId() != null) {
      try {
        joiner.add(String.format("%sid%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `name` to the URL query string
    if (getName() != null) {
      try {
        joiner.add(String.format("%sname%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getName()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `deleted` to the URL query string
    if (getDeleted() != null) {
      try {
        joiner.add(String.format("%sdeleted%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDeleted()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `workerGroup` to the URL query string
    if (getWorkerGroup() != null) {
      joiner.add(getWorkerGroup().toUrlQueryString(prefix + "workerGroup" + suffix));
    }

    // add `storageType` to the URL query string
    if (getStorageType() != null) {
      try {
        joiner.add(String.format("%sstorageType%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getStorageType()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `storageConfiguration` to the URL query string
    if (getStorageConfiguration() != null) {
      for (String _key : getStorageConfiguration().keySet()) {
        try {
          joiner.add(String.format("%sstorageConfiguration%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix),
              getStorageConfiguration().get(_key), URLEncoder.encode(String.valueOf(getStorageConfiguration().get(_key)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    // add `secretType` to the URL query string
    if (getSecretType() != null) {
      try {
        joiner.add(String.format("%ssecretType%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSecretType()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `secretReadOnly` to the URL query string
    if (getSecretReadOnly() != null) {
      try {
        joiner.add(String.format("%ssecretReadOnly%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSecretReadOnly()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `secretConfiguration` to the URL query string
    if (getSecretConfiguration() != null) {
      for (String _key : getSecretConfiguration().keySet()) {
        try {
          joiner.add(String.format("%ssecretConfiguration%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix),
              getSecretConfiguration().get(_key), URLEncoder.encode(String.valueOf(getSecretConfiguration().get(_key)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    // add `requireExistingNamespace` to the URL query string
    if (getRequireExistingNamespace() != null) {
      try {
        joiner.add(String.format("%srequireExistingNamespace%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getRequireExistingNamespace()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `outputsInInternalStorage` to the URL query string
    if (getOutputsInInternalStorage() != null) {
      try {
        joiner.add(String.format("%soutputsInInternalStorage%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getOutputsInInternalStorage()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

