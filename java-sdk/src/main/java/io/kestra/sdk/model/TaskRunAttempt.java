/*
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kestra.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.kestra.sdk.model.AbstractMetricEntryObject;
import io.kestra.sdk.model.State;
import java.net.URI;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * TaskRunAttempt
 */
@JsonPropertyOrder({
  TaskRunAttempt.JSON_PROPERTY_METRICS,
  TaskRunAttempt.JSON_PROPERTY_STATE,
  TaskRunAttempt.JSON_PROPERTY_WORKER_ID,
  TaskRunAttempt.JSON_PROPERTY_LOG_FILE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-28T12:15:52.743487342Z[Etc/UTC]", comments = "Generator version: 7.14.0-SNAPSHOT")
public class TaskRunAttempt {
  public static final String JSON_PROPERTY_METRICS = "metrics";
  @javax.annotation.Nullable
  private List<AbstractMetricEntryObject> metrics = new ArrayList<>();

  public static final String JSON_PROPERTY_STATE = "state";
  @javax.annotation.Nonnull
  private State state;

  public static final String JSON_PROPERTY_WORKER_ID = "workerId";
  @javax.annotation.Nullable
  private JsonNullable<String> workerId = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_LOG_FILE = "logFile";
  @javax.annotation.Nullable
  private JsonNullable<URI> logFile = JsonNullable.<URI>undefined();

  public TaskRunAttempt() {
  }

  public TaskRunAttempt metrics(@javax.annotation.Nullable List<AbstractMetricEntryObject> metrics) {
    
    this.metrics = metrics;
    return this;
  }

  public TaskRunAttempt addMetricsItem(AbstractMetricEntryObject metricsItem) {
    if (this.metrics == null) {
      this.metrics = new ArrayList<>();
    }
    this.metrics.add(metricsItem);
    return this;
  }

  /**
   * Get metrics
   * @return metrics
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_METRICS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<AbstractMetricEntryObject> getMetrics() {
    return metrics;
  }


  @JsonProperty(JSON_PROPERTY_METRICS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMetrics(@javax.annotation.Nullable List<AbstractMetricEntryObject> metrics) {
    this.metrics = metrics;
  }

  public TaskRunAttempt state(@javax.annotation.Nonnull State state) {
    
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_STATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public State getState() {
    return state;
  }


  @JsonProperty(JSON_PROPERTY_STATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setState(@javax.annotation.Nonnull State state) {
    this.state = state;
  }

  public TaskRunAttempt workerId(@javax.annotation.Nullable String workerId) {
    this.workerId = JsonNullable.<String>of(workerId);
    
    return this;
  }

  /**
   * Get workerId
   * @return workerId
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public String getWorkerId() {
        return workerId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_WORKER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getWorkerId_JsonNullable() {
    return workerId;
  }
  
  @JsonProperty(JSON_PROPERTY_WORKER_ID)
  public void setWorkerId_JsonNullable(JsonNullable<String> workerId) {
    this.workerId = workerId;
  }

  public void setWorkerId(@javax.annotation.Nullable String workerId) {
    this.workerId = JsonNullable.<String>of(workerId);
  }

  public TaskRunAttempt logFile(@javax.annotation.Nullable URI logFile) {
    this.logFile = JsonNullable.<URI>of(logFile);
    
    return this;
  }

  /**
   * Get logFile
   * @return logFile
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public URI getLogFile() {
        return logFile.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_LOG_FILE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<URI> getLogFile_JsonNullable() {
    return logFile;
  }
  
  @JsonProperty(JSON_PROPERTY_LOG_FILE)
  public void setLogFile_JsonNullable(JsonNullable<URI> logFile) {
    this.logFile = logFile;
  }

  public void setLogFile(@javax.annotation.Nullable URI logFile) {
    this.logFile = JsonNullable.<URI>of(logFile);
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TaskRunAttempt taskRunAttempt = (TaskRunAttempt) o;
    return Objects.equals(this.metrics, taskRunAttempt.metrics) &&
        Objects.equals(this.state, taskRunAttempt.state) &&
        equalsNullable(this.workerId, taskRunAttempt.workerId) &&
        equalsNullable(this.logFile, taskRunAttempt.logFile);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(metrics, state, hashCodeNullable(workerId), hashCodeNullable(logFile));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TaskRunAttempt {\n");
    sb.append("    metrics: ").append(toIndentedString(metrics)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    workerId: ").append(toIndentedString(workerId)).append("\n");
    sb.append("    logFile: ").append(toIndentedString(logFile)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `metrics` to the URL query string
    if (getMetrics() != null) {
      for (int i = 0; i < getMetrics().size(); i++) {
        if (getMetrics().get(i) != null) {
          joiner.add(getMetrics().get(i).toUrlQueryString(String.format("%smetrics%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `state` to the URL query string
    if (getState() != null) {
      joiner.add(getState().toUrlQueryString(prefix + "state" + suffix));
    }

    // add `workerId` to the URL query string
    if (getWorkerId() != null) {
      try {
        joiner.add(String.format("%sworkerId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getWorkerId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `logFile` to the URL query string
    if (getLogFile() != null) {
      try {
        joiner.add(String.format("%slogFile%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getLogFile()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

