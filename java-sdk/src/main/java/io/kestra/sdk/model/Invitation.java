/*
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kestra.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.kestra.sdk.model.Binding;
import io.kestra.sdk.model.InvitationInvitationStatus;
import io.kestra.sdk.model.UserType;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Invitation
 */
@JsonPropertyOrder({
  Invitation.JSON_PROPERTY_IS_EXPIRED,
  Invitation.JSON_PROPERTY_EMAIL,
  Invitation.JSON_PROPERTY_ID,
  Invitation.JSON_PROPERTY_BINDINGS,
  Invitation.JSON_PROPERTY_GROUP_IDS,
  Invitation.JSON_PROPERTY_TENANT_ID,
  Invitation.JSON_PROPERTY_STATUS,
  Invitation.JSON_PROPERTY_SENT_AT,
  Invitation.JSON_PROPERTY_EXPIRED_AT,
  Invitation.JSON_PROPERTY_ACCEPTED_AT,
  Invitation.JSON_PROPERTY_DELETED,
  Invitation.JSON_PROPERTY_USER_TYPE,
  Invitation.JSON_PROPERTY_SUPER_ADMIN,
  Invitation.JSON_PROPERTY_LINK
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.16.0-SNAPSHOT")
public class Invitation {
  public static final String JSON_PROPERTY_IS_EXPIRED = "isExpired";
  @javax.annotation.Nonnull
  private Boolean isExpired;

  public static final String JSON_PROPERTY_EMAIL = "email";
  @javax.annotation.Nonnull
  private String email;

  public static final String JSON_PROPERTY_ID = "id";
  @javax.annotation.Nonnull
  private String id;

  public static final String JSON_PROPERTY_BINDINGS = "bindings";
  @javax.annotation.Nonnull
  private List<Binding> bindings = new ArrayList<>();

  public static final String JSON_PROPERTY_GROUP_IDS = "groupIds";
  @javax.annotation.Nonnull
  private List<String> groupIds = new ArrayList<>();

  public static final String JSON_PROPERTY_TENANT_ID = "tenantId";
  @javax.annotation.Nonnull
  private String tenantId;

  public static final String JSON_PROPERTY_STATUS = "status";
  @javax.annotation.Nonnull
  private InvitationInvitationStatus status;

  public static final String JSON_PROPERTY_SENT_AT = "sentAt";
  @javax.annotation.Nonnull
  private OffsetDateTime sentAt;

  public static final String JSON_PROPERTY_EXPIRED_AT = "expiredAt";
  @javax.annotation.Nonnull
  private OffsetDateTime expiredAt;

  public static final String JSON_PROPERTY_ACCEPTED_AT = "acceptedAt";
  @javax.annotation.Nonnull
  private OffsetDateTime acceptedAt;

  public static final String JSON_PROPERTY_DELETED = "deleted";
  @javax.annotation.Nonnull
  private Boolean deleted;

  public static final String JSON_PROPERTY_USER_TYPE = "userType";
  @javax.annotation.Nonnull
  private UserType userType;

  public static final String JSON_PROPERTY_SUPER_ADMIN = "superAdmin";
  @javax.annotation.Nonnull
  private Boolean superAdmin;

  public static final String JSON_PROPERTY_LINK = "link";
  @javax.annotation.Nonnull
  private String link;

  public Invitation() {
  }

  public Invitation isExpired(@javax.annotation.Nonnull Boolean isExpired) {
    
    this.isExpired = isExpired;
    return this;
  }

  /**
   * Get isExpired
   * @return isExpired
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_IS_EXPIRED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getIsExpired() {
    return isExpired;
  }


  @JsonProperty(JSON_PROPERTY_IS_EXPIRED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIsExpired(@javax.annotation.Nonnull Boolean isExpired) {
    this.isExpired = isExpired;
  }

  public Invitation email(@javax.annotation.Nonnull String email) {
    
    this.email = email;
    return this;
  }

  /**
   * Get email
   * @return email
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_EMAIL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getEmail() {
    return email;
  }


  @JsonProperty(JSON_PROPERTY_EMAIL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEmail(@javax.annotation.Nonnull String email) {
    this.email = email;
  }

  public Invitation id(@javax.annotation.Nonnull String id) {
    
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(@javax.annotation.Nonnull String id) {
    this.id = id;
  }

  public Invitation bindings(@javax.annotation.Nonnull List<Binding> bindings) {
    
    this.bindings = bindings;
    return this;
  }

  public Invitation addBindingsItem(Binding bindingsItem) {
    if (this.bindings == null) {
      this.bindings = new ArrayList<>();
    }
    this.bindings.add(bindingsItem);
    return this;
  }

  /**
   * Get bindings
   * @return bindings
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_BINDINGS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<Binding> getBindings() {
    return bindings;
  }


  @JsonProperty(JSON_PROPERTY_BINDINGS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setBindings(@javax.annotation.Nonnull List<Binding> bindings) {
    this.bindings = bindings;
  }

  public Invitation groupIds(@javax.annotation.Nonnull List<String> groupIds) {
    
    this.groupIds = groupIds;
    return this;
  }

  public Invitation addGroupIdsItem(String groupIdsItem) {
    if (this.groupIds == null) {
      this.groupIds = new ArrayList<>();
    }
    this.groupIds.add(groupIdsItem);
    return this;
  }

  /**
   * Get groupIds
   * @return groupIds
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_GROUP_IDS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<String> getGroupIds() {
    return groupIds;
  }


  @JsonProperty(JSON_PROPERTY_GROUP_IDS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setGroupIds(@javax.annotation.Nonnull List<String> groupIds) {
    this.groupIds = groupIds;
  }

  public Invitation tenantId(@javax.annotation.Nonnull String tenantId) {
    
    this.tenantId = tenantId;
    return this;
  }

  /**
   * Get tenantId
   * @return tenantId
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TENANT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getTenantId() {
    return tenantId;
  }


  @JsonProperty(JSON_PROPERTY_TENANT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTenantId(@javax.annotation.Nonnull String tenantId) {
    this.tenantId = tenantId;
  }

  public Invitation status(@javax.annotation.Nonnull InvitationInvitationStatus status) {
    
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public InvitationInvitationStatus getStatus() {
    return status;
  }


  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStatus(@javax.annotation.Nonnull InvitationInvitationStatus status) {
    this.status = status;
  }

  public Invitation sentAt(@javax.annotation.Nonnull OffsetDateTime sentAt) {
    
    this.sentAt = sentAt;
    return this;
  }

  /**
   * Get sentAt
   * @return sentAt
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SENT_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public OffsetDateTime getSentAt() {
    return sentAt;
  }


  @JsonProperty(JSON_PROPERTY_SENT_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSentAt(@javax.annotation.Nonnull OffsetDateTime sentAt) {
    this.sentAt = sentAt;
  }

  public Invitation expiredAt(@javax.annotation.Nonnull OffsetDateTime expiredAt) {
    
    this.expiredAt = expiredAt;
    return this;
  }

  /**
   * Get expiredAt
   * @return expiredAt
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_EXPIRED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public OffsetDateTime getExpiredAt() {
    return expiredAt;
  }


  @JsonProperty(JSON_PROPERTY_EXPIRED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setExpiredAt(@javax.annotation.Nonnull OffsetDateTime expiredAt) {
    this.expiredAt = expiredAt;
  }

  public Invitation acceptedAt(@javax.annotation.Nonnull OffsetDateTime acceptedAt) {
    
    this.acceptedAt = acceptedAt;
    return this;
  }

  /**
   * Get acceptedAt
   * @return acceptedAt
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ACCEPTED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public OffsetDateTime getAcceptedAt() {
    return acceptedAt;
  }


  @JsonProperty(JSON_PROPERTY_ACCEPTED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAcceptedAt(@javax.annotation.Nonnull OffsetDateTime acceptedAt) {
    this.acceptedAt = acceptedAt;
  }

  public Invitation deleted(@javax.annotation.Nonnull Boolean deleted) {
    
    this.deleted = deleted;
    return this;
  }

  /**
   * Get deleted
   * @return deleted
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DELETED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getDeleted() {
    return deleted;
  }


  @JsonProperty(JSON_PROPERTY_DELETED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDeleted(@javax.annotation.Nonnull Boolean deleted) {
    this.deleted = deleted;
  }

  public Invitation userType(@javax.annotation.Nonnull UserType userType) {
    
    this.userType = userType;
    return this;
  }

  /**
   * Get userType
   * @return userType
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_USER_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public UserType getUserType() {
    return userType;
  }


  @JsonProperty(JSON_PROPERTY_USER_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUserType(@javax.annotation.Nonnull UserType userType) {
    this.userType = userType;
  }

  public Invitation superAdmin(@javax.annotation.Nonnull Boolean superAdmin) {
    
    this.superAdmin = superAdmin;
    return this;
  }

  /**
   * Get superAdmin
   * @return superAdmin
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SUPER_ADMIN)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getSuperAdmin() {
    return superAdmin;
  }


  @JsonProperty(JSON_PROPERTY_SUPER_ADMIN)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSuperAdmin(@javax.annotation.Nonnull Boolean superAdmin) {
    this.superAdmin = superAdmin;
  }

  public Invitation link(@javax.annotation.Nonnull String link) {
    
    this.link = link;
    return this;
  }

  /**
   * Get link
   * @return link
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_LINK)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getLink() {
    return link;
  }


  @JsonProperty(JSON_PROPERTY_LINK)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLink(@javax.annotation.Nonnull String link) {
    this.link = link;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Invitation invitation = (Invitation) o;
    return Objects.equals(this.isExpired, invitation.isExpired) &&
        Objects.equals(this.email, invitation.email) &&
        Objects.equals(this.id, invitation.id) &&
        Objects.equals(this.bindings, invitation.bindings) &&
        Objects.equals(this.groupIds, invitation.groupIds) &&
        Objects.equals(this.tenantId, invitation.tenantId) &&
        Objects.equals(this.status, invitation.status) &&
        Objects.equals(this.sentAt, invitation.sentAt) &&
        Objects.equals(this.expiredAt, invitation.expiredAt) &&
        Objects.equals(this.acceptedAt, invitation.acceptedAt) &&
        Objects.equals(this.deleted, invitation.deleted) &&
        Objects.equals(this.userType, invitation.userType) &&
        Objects.equals(this.superAdmin, invitation.superAdmin) &&
        Objects.equals(this.link, invitation.link);
  }

  @Override
  public int hashCode() {
    return Objects.hash(isExpired, email, id, bindings, groupIds, tenantId, status, sentAt, expiredAt, acceptedAt, deleted, userType, superAdmin, link);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Invitation {\n");
    sb.append("    isExpired: ").append(toIndentedString(isExpired)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    bindings: ").append(toIndentedString(bindings)).append("\n");
    sb.append("    groupIds: ").append(toIndentedString(groupIds)).append("\n");
    sb.append("    tenantId: ").append(toIndentedString(tenantId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    sentAt: ").append(toIndentedString(sentAt)).append("\n");
    sb.append("    expiredAt: ").append(toIndentedString(expiredAt)).append("\n");
    sb.append("    acceptedAt: ").append(toIndentedString(acceptedAt)).append("\n");
    sb.append("    deleted: ").append(toIndentedString(deleted)).append("\n");
    sb.append("    userType: ").append(toIndentedString(userType)).append("\n");
    sb.append("    superAdmin: ").append(toIndentedString(superAdmin)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

