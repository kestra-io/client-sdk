/*
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kestra.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.kestra.sdk.model.InstanceControllerApiPluginVersionDetailsApiPluginClasses;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * InstanceControllerApiPluginVersionDetails
 */
@JsonPropertyOrder({
  InstanceControllerApiPluginVersionDetails.JSON_PROPERTY_ARTIFACT_ID,
  InstanceControllerApiPluginVersionDetails.JSON_PROPERTY_GROUP_ID,
  InstanceControllerApiPluginVersionDetails.JSON_PROPERTY_VERSION,
  InstanceControllerApiPluginVersionDetails.JSON_PROPERTY_TITLE,
  InstanceControllerApiPluginVersionDetails.JSON_PROPERTY_DESCRIPTION,
  InstanceControllerApiPluginVersionDetails.JSON_PROPERTY_ICON,
  InstanceControllerApiPluginVersionDetails.JSON_PROPERTY_CLASSES
})
@JsonTypeName("InstanceController.ApiPluginVersionDetails")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.14.0-SNAPSHOT")
public class InstanceControllerApiPluginVersionDetails {
  public static final String JSON_PROPERTY_ARTIFACT_ID = "artifactId";
  @javax.annotation.Nonnull
  private String artifactId;

  public static final String JSON_PROPERTY_GROUP_ID = "groupId";
  @javax.annotation.Nonnull
  private String groupId;

  public static final String JSON_PROPERTY_VERSION = "version";
  @javax.annotation.Nonnull
  private String version;

  public static final String JSON_PROPERTY_TITLE = "title";
  @javax.annotation.Nonnull
  private String title;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  @javax.annotation.Nonnull
  private String description;

  public static final String JSON_PROPERTY_ICON = "icon";
  @javax.annotation.Nonnull
  private String icon;

  public static final String JSON_PROPERTY_CLASSES = "classes";
  @javax.annotation.Nonnull
  private List<InstanceControllerApiPluginVersionDetailsApiPluginClasses> classes = new ArrayList<>();

  public InstanceControllerApiPluginVersionDetails() {
  }

  public InstanceControllerApiPluginVersionDetails artifactId(@javax.annotation.Nonnull String artifactId) {
    
    this.artifactId = artifactId;
    return this;
  }

  /**
   * Get artifactId
   * @return artifactId
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ARTIFACT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getArtifactId() {
    return artifactId;
  }


  @JsonProperty(JSON_PROPERTY_ARTIFACT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setArtifactId(@javax.annotation.Nonnull String artifactId) {
    this.artifactId = artifactId;
  }

  public InstanceControllerApiPluginVersionDetails groupId(@javax.annotation.Nonnull String groupId) {
    
    this.groupId = groupId;
    return this;
  }

  /**
   * Get groupId
   * @return groupId
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_GROUP_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getGroupId() {
    return groupId;
  }


  @JsonProperty(JSON_PROPERTY_GROUP_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setGroupId(@javax.annotation.Nonnull String groupId) {
    this.groupId = groupId;
  }

  public InstanceControllerApiPluginVersionDetails version(@javax.annotation.Nonnull String version) {
    
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_VERSION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getVersion() {
    return version;
  }


  @JsonProperty(JSON_PROPERTY_VERSION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setVersion(@javax.annotation.Nonnull String version) {
    this.version = version;
  }

  public InstanceControllerApiPluginVersionDetails title(@javax.annotation.Nonnull String title) {
    
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TITLE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getTitle() {
    return title;
  }


  @JsonProperty(JSON_PROPERTY_TITLE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTitle(@javax.annotation.Nonnull String title) {
    this.title = title;
  }

  public InstanceControllerApiPluginVersionDetails description(@javax.annotation.Nonnull String description) {
    
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDescription(@javax.annotation.Nonnull String description) {
    this.description = description;
  }

  public InstanceControllerApiPluginVersionDetails icon(@javax.annotation.Nonnull String icon) {
    
    this.icon = icon;
    return this;
  }

  /**
   * Get icon
   * @return icon
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ICON)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getIcon() {
    return icon;
  }


  @JsonProperty(JSON_PROPERTY_ICON)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIcon(@javax.annotation.Nonnull String icon) {
    this.icon = icon;
  }

  public InstanceControllerApiPluginVersionDetails classes(@javax.annotation.Nonnull List<InstanceControllerApiPluginVersionDetailsApiPluginClasses> classes) {
    
    this.classes = classes;
    return this;
  }

  public InstanceControllerApiPluginVersionDetails addClassesItem(InstanceControllerApiPluginVersionDetailsApiPluginClasses classesItem) {
    if (this.classes == null) {
      this.classes = new ArrayList<>();
    }
    this.classes.add(classesItem);
    return this;
  }

  /**
   * Get classes
   * @return classes
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CLASSES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<InstanceControllerApiPluginVersionDetailsApiPluginClasses> getClasses() {
    return classes;
  }


  @JsonProperty(JSON_PROPERTY_CLASSES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setClasses(@javax.annotation.Nonnull List<InstanceControllerApiPluginVersionDetailsApiPluginClasses> classes) {
    this.classes = classes;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InstanceControllerApiPluginVersionDetails instanceControllerApiPluginVersionDetails = (InstanceControllerApiPluginVersionDetails) o;
    return Objects.equals(this.artifactId, instanceControllerApiPluginVersionDetails.artifactId) &&
        Objects.equals(this.groupId, instanceControllerApiPluginVersionDetails.groupId) &&
        Objects.equals(this.version, instanceControllerApiPluginVersionDetails.version) &&
        Objects.equals(this.title, instanceControllerApiPluginVersionDetails.title) &&
        Objects.equals(this.description, instanceControllerApiPluginVersionDetails.description) &&
        Objects.equals(this.icon, instanceControllerApiPluginVersionDetails.icon) &&
        Objects.equals(this.classes, instanceControllerApiPluginVersionDetails.classes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(artifactId, groupId, version, title, description, icon, classes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InstanceControllerApiPluginVersionDetails {\n");
    sb.append("    artifactId: ").append(toIndentedString(artifactId)).append("\n");
    sb.append("    groupId: ").append(toIndentedString(groupId)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    icon: ").append(toIndentedString(icon)).append("\n");
    sb.append("    classes: ").append(toIndentedString(classes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

