/*
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kestra.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Locale;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.kestra.sdk.model.Assertion;
import io.kestra.sdk.model.Fixtures;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * UnitTest
 */
@JsonPropertyOrder({
  UnitTest.JSON_PROPERTY_ID,
  UnitTest.JSON_PROPERTY_TYPE,
  UnitTest.JSON_PROPERTY_DISABLED,
  UnitTest.JSON_PROPERTY_DESCRIPTION,
  UnitTest.JSON_PROPERTY_FIXTURES,
  UnitTest.JSON_PROPERTY_ASSERTIONS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.16.0")
public class UnitTest {
  public static final String JSON_PROPERTY_ID = "id";
  @javax.annotation.Nonnull
  private String id;

  public static final String JSON_PROPERTY_TYPE = "type";
  @javax.annotation.Nonnull
  private String type;

  public static final String JSON_PROPERTY_DISABLED = "disabled";
  @javax.annotation.Nullable
  private Boolean disabled;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  @javax.annotation.Nullable
  private String description;

  public static final String JSON_PROPERTY_FIXTURES = "fixtures";
  @javax.annotation.Nullable
  private Fixtures fixtures;

  public static final String JSON_PROPERTY_ASSERTIONS = "assertions";
  @javax.annotation.Nonnull
  private List<Assertion> assertions = new ArrayList<>();

  public UnitTest() {
  }

  public UnitTest id(@javax.annotation.Nonnull String id) {
    
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  @JsonProperty(value = JSON_PROPERTY_ID, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getId() {
    return id;
  }


  @JsonProperty(value = JSON_PROPERTY_ID, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(@javax.annotation.Nonnull String id) {
    this.id = id;
  }

  public UnitTest type(@javax.annotation.Nonnull String type) {
    
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  @JsonProperty(value = JSON_PROPERTY_TYPE, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getType() {
    return type;
  }


  @JsonProperty(value = JSON_PROPERTY_TYPE, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setType(@javax.annotation.Nonnull String type) {
    this.type = type;
  }

  public UnitTest disabled(@javax.annotation.Nullable Boolean disabled) {
    
    this.disabled = disabled;
    return this;
  }

  /**
   * Get disabled
   * @return disabled
   */
  @javax.annotation.Nullable
  @JsonProperty(value = JSON_PROPERTY_DISABLED, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getDisabled() {
    return disabled;
  }


  @JsonProperty(value = JSON_PROPERTY_DISABLED, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDisabled(@javax.annotation.Nullable Boolean disabled) {
    this.disabled = disabled;
  }

  public UnitTest description(@javax.annotation.Nullable String description) {
    
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  @JsonProperty(value = JSON_PROPERTY_DESCRIPTION, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(value = JSON_PROPERTY_DESCRIPTION, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }

  public UnitTest fixtures(@javax.annotation.Nullable Fixtures fixtures) {
    
    this.fixtures = fixtures;
    return this;
  }

  /**
   * Get fixtures
   * @return fixtures
   */
  @javax.annotation.Nullable
  @JsonProperty(value = JSON_PROPERTY_FIXTURES, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Fixtures getFixtures() {
    return fixtures;
  }


  @JsonProperty(value = JSON_PROPERTY_FIXTURES, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFixtures(@javax.annotation.Nullable Fixtures fixtures) {
    this.fixtures = fixtures;
  }

  public UnitTest assertions(@javax.annotation.Nonnull List<Assertion> assertions) {
    
    this.assertions = assertions;
    return this;
  }

  public UnitTest addAssertionsItem(Assertion assertionsItem) {
    if (this.assertions == null) {
      this.assertions = new ArrayList<>();
    }
    this.assertions.add(assertionsItem);
    return this;
  }

  /**
   * Get assertions
   * @return assertions
   */
  @javax.annotation.Nonnull
  @JsonProperty(value = JSON_PROPERTY_ASSERTIONS, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<Assertion> getAssertions() {
    return assertions;
  }


  @JsonProperty(value = JSON_PROPERTY_ASSERTIONS, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAssertions(@javax.annotation.Nonnull List<Assertion> assertions) {
    this.assertions = assertions;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UnitTest unitTest = (UnitTest) o;
    return Objects.equals(this.id, unitTest.id) &&
        Objects.equals(this.type, unitTest.type) &&
        Objects.equals(this.disabled, unitTest.disabled) &&
        Objects.equals(this.description, unitTest.description) &&
        Objects.equals(this.fixtures, unitTest.fixtures) &&
        Objects.equals(this.assertions, unitTest.assertions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, type, disabled, description, fixtures, assertions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UnitTest {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    disabled: ").append(toIndentedString(disabled)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    fixtures: ").append(toIndentedString(fixtures)).append("\n");
    sb.append("    assertions: ").append(toIndentedString(assertions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

