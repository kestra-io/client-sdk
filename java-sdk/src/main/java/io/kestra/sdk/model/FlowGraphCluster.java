/*
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kestra.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.kestra.sdk.model.AbstractGraph;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * FlowGraphCluster
 */
@JsonPropertyOrder({
  FlowGraphCluster.JSON_PROPERTY_CLUSTER,
  FlowGraphCluster.JSON_PROPERTY_NODES,
  FlowGraphCluster.JSON_PROPERTY_PARENTS,
  FlowGraphCluster.JSON_PROPERTY_START,
  FlowGraphCluster.JSON_PROPERTY_END
})
@JsonTypeName("FlowGraph.Cluster")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-14T16:34:14.833468251Z[Etc/UTC]", comments = "Generator version: 7.14.0-SNAPSHOT")
public class FlowGraphCluster {
  public static final String JSON_PROPERTY_CLUSTER = "cluster";
  @javax.annotation.Nullable
  private AbstractGraph cluster;

  public static final String JSON_PROPERTY_NODES = "nodes";
  @javax.annotation.Nullable
  private List<String> nodes = new ArrayList<>();

  public static final String JSON_PROPERTY_PARENTS = "parents";
  @javax.annotation.Nullable
  private List<String> parents = new ArrayList<>();

  public static final String JSON_PROPERTY_START = "start";
  @javax.annotation.Nullable
  private String start;

  public static final String JSON_PROPERTY_END = "end";
  @javax.annotation.Nullable
  private String end;

  public FlowGraphCluster() {
  }

  public FlowGraphCluster cluster(@javax.annotation.Nullable AbstractGraph cluster) {
    
    this.cluster = cluster;
    return this;
  }

  /**
   * Get cluster
   * @return cluster
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CLUSTER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public AbstractGraph getCluster() {
    return cluster;
  }


  @JsonProperty(JSON_PROPERTY_CLUSTER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCluster(@javax.annotation.Nullable AbstractGraph cluster) {
    this.cluster = cluster;
  }

  public FlowGraphCluster nodes(@javax.annotation.Nullable List<String> nodes) {
    
    this.nodes = nodes;
    return this;
  }

  public FlowGraphCluster addNodesItem(String nodesItem) {
    if (this.nodes == null) {
      this.nodes = new ArrayList<>();
    }
    this.nodes.add(nodesItem);
    return this;
  }

  /**
   * Get nodes
   * @return nodes
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NODES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getNodes() {
    return nodes;
  }


  @JsonProperty(JSON_PROPERTY_NODES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNodes(@javax.annotation.Nullable List<String> nodes) {
    this.nodes = nodes;
  }

  public FlowGraphCluster parents(@javax.annotation.Nullable List<String> parents) {
    
    this.parents = parents;
    return this;
  }

  public FlowGraphCluster addParentsItem(String parentsItem) {
    if (this.parents == null) {
      this.parents = new ArrayList<>();
    }
    this.parents.add(parentsItem);
    return this;
  }

  /**
   * Get parents
   * @return parents
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PARENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getParents() {
    return parents;
  }


  @JsonProperty(JSON_PROPERTY_PARENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setParents(@javax.annotation.Nullable List<String> parents) {
    this.parents = parents;
  }

  public FlowGraphCluster start(@javax.annotation.Nullable String start) {
    
    this.start = start;
    return this;
  }

  /**
   * Get start
   * @return start
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_START)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getStart() {
    return start;
  }


  @JsonProperty(JSON_PROPERTY_START)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStart(@javax.annotation.Nullable String start) {
    this.start = start;
  }

  public FlowGraphCluster end(@javax.annotation.Nullable String end) {
    
    this.end = end;
    return this;
  }

  /**
   * Get end
   * @return end
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_END)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getEnd() {
    return end;
  }


  @JsonProperty(JSON_PROPERTY_END)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnd(@javax.annotation.Nullable String end) {
    this.end = end;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FlowGraphCluster flowGraphCluster = (FlowGraphCluster) o;
    return Objects.equals(this.cluster, flowGraphCluster.cluster) &&
        Objects.equals(this.nodes, flowGraphCluster.nodes) &&
        Objects.equals(this.parents, flowGraphCluster.parents) &&
        Objects.equals(this.start, flowGraphCluster.start) &&
        Objects.equals(this.end, flowGraphCluster.end);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cluster, nodes, parents, start, end);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FlowGraphCluster {\n");
    sb.append("    cluster: ").append(toIndentedString(cluster)).append("\n");
    sb.append("    nodes: ").append(toIndentedString(nodes)).append("\n");
    sb.append("    parents: ").append(toIndentedString(parents)).append("\n");
    sb.append("    start: ").append(toIndentedString(start)).append("\n");
    sb.append("    end: ").append(toIndentedString(end)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `cluster` to the URL query string
    if (getCluster() != null) {
      joiner.add(getCluster().toUrlQueryString(prefix + "cluster" + suffix));
    }

    // add `nodes` to the URL query string
    if (getNodes() != null) {
      for (int i = 0; i < getNodes().size(); i++) {
        try {
          joiner.add(String.format("%snodes%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(String.valueOf(getNodes().get(i)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    // add `parents` to the URL query string
    if (getParents() != null) {
      for (int i = 0; i < getParents().size(); i++) {
        try {
          joiner.add(String.format("%sparents%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(String.valueOf(getParents().get(i)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    // add `start` to the URL query string
    if (getStart() != null) {
      try {
        joiner.add(String.format("%sstart%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getStart()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `end` to the URL query string
    if (getEnd() != null) {
      try {
        joiner.add(String.format("%send%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getEnd()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

