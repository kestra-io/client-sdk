/*
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kestra.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.kestra.sdk.model.DailyExecutionStatisticsDuration;
import io.kestra.sdk.model.DailyExecutionStatisticsExecutionCounts;
import java.time.OffsetDateTime;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * DailyExecutionStatistics
 */
@JsonPropertyOrder({
  DailyExecutionStatistics.JSON_PROPERTY_START_DATE,
  DailyExecutionStatistics.JSON_PROPERTY_DURATION,
  DailyExecutionStatistics.JSON_PROPERTY_EXECUTION_COUNTS,
  DailyExecutionStatistics.JSON_PROPERTY_GROUP_BY
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-05T13:38:05.347663356Z[Etc/UTC]", comments = "Generator version: 7.14.0-SNAPSHOT")
public class DailyExecutionStatistics {
  public static final String JSON_PROPERTY_START_DATE = "startDate";
  @javax.annotation.Nonnull
  private OffsetDateTime startDate;

  public static final String JSON_PROPERTY_DURATION = "duration";
  @javax.annotation.Nonnull
  private DailyExecutionStatisticsDuration duration;

  public static final String JSON_PROPERTY_EXECUTION_COUNTS = "executionCounts";
  @javax.annotation.Nullable
  private DailyExecutionStatisticsExecutionCounts executionCounts;

  public static final String JSON_PROPERTY_GROUP_BY = "groupBy";
  @javax.annotation.Nullable
  private String groupBy;

  public DailyExecutionStatistics() {
  }

  public DailyExecutionStatistics startDate(@javax.annotation.Nonnull OffsetDateTime startDate) {
    
    this.startDate = startDate;
    return this;
  }

  /**
   * Get startDate
   * @return startDate
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_START_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public OffsetDateTime getStartDate() {
    return startDate;
  }


  @JsonProperty(JSON_PROPERTY_START_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStartDate(@javax.annotation.Nonnull OffsetDateTime startDate) {
    this.startDate = startDate;
  }

  public DailyExecutionStatistics duration(@javax.annotation.Nonnull DailyExecutionStatisticsDuration duration) {
    
    this.duration = duration;
    return this;
  }

  /**
   * Get duration
   * @return duration
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DURATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public DailyExecutionStatisticsDuration getDuration() {
    return duration;
  }


  @JsonProperty(JSON_PROPERTY_DURATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDuration(@javax.annotation.Nonnull DailyExecutionStatisticsDuration duration) {
    this.duration = duration;
  }

  public DailyExecutionStatistics executionCounts(@javax.annotation.Nullable DailyExecutionStatisticsExecutionCounts executionCounts) {
    
    this.executionCounts = executionCounts;
    return this;
  }

  /**
   * Get executionCounts
   * @return executionCounts
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXECUTION_COUNTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public DailyExecutionStatisticsExecutionCounts getExecutionCounts() {
    return executionCounts;
  }


  @JsonProperty(JSON_PROPERTY_EXECUTION_COUNTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExecutionCounts(@javax.annotation.Nullable DailyExecutionStatisticsExecutionCounts executionCounts) {
    this.executionCounts = executionCounts;
  }

  public DailyExecutionStatistics groupBy(@javax.annotation.Nullable String groupBy) {
    
    this.groupBy = groupBy;
    return this;
  }

  /**
   * Get groupBy
   * @return groupBy
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_GROUP_BY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getGroupBy() {
    return groupBy;
  }


  @JsonProperty(JSON_PROPERTY_GROUP_BY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGroupBy(@javax.annotation.Nullable String groupBy) {
    this.groupBy = groupBy;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DailyExecutionStatistics dailyExecutionStatistics = (DailyExecutionStatistics) o;
    return Objects.equals(this.startDate, dailyExecutionStatistics.startDate) &&
        Objects.equals(this.duration, dailyExecutionStatistics.duration) &&
        Objects.equals(this.executionCounts, dailyExecutionStatistics.executionCounts) &&
        Objects.equals(this.groupBy, dailyExecutionStatistics.groupBy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(startDate, duration, executionCounts, groupBy);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DailyExecutionStatistics {\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    executionCounts: ").append(toIndentedString(executionCounts)).append("\n");
    sb.append("    groupBy: ").append(toIndentedString(groupBy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `startDate` to the URL query string
    if (getStartDate() != null) {
      try {
        joiner.add(String.format("%sstartDate%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getStartDate()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `duration` to the URL query string
    if (getDuration() != null) {
      joiner.add(getDuration().toUrlQueryString(prefix + "duration" + suffix));
    }

    // add `executionCounts` to the URL query string
    if (getExecutionCounts() != null) {
      joiner.add(getExecutionCounts().toUrlQueryString(prefix + "executionCounts" + suffix));
    }

    // add `groupBy` to the URL query string
    if (getGroupBy() != null) {
      try {
        joiner.add(String.format("%sgroupBy%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getGroupBy()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

