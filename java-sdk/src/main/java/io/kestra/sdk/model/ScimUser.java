/*
 * Kestra EE
 * All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kestra.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * Scim core schema.
 */
@JsonPropertyOrder({
  ScimUser.JSON_PROPERTY_SCHEMAS,
  ScimUser.JSON_PROPERTY_BASE_URN,
  ScimUser.JSON_PROPERTY_EXTENSIONS,
  ScimUser.JSON_PROPERTY_META,
  ScimUser.JSON_PROPERTY_ID,
  ScimUser.JSON_PROPERTY_EXTERNAL_ID,
  ScimUser.JSON_PROPERTY_RESOURCE_TYPE,
  ScimUser.JSON_PROPERTY_PRIMARY_EMAIL_ADDRESS,
  ScimUser.JSON_PROPERTY_ACTIVE,
  ScimUser.JSON_PROPERTY_EMAILS,
  ScimUser.JSON_PROPERTY_USER_NAME,
  ScimUser.JSON_PROPERTY_NAME,
  ScimUser.JSON_PROPERTY_GROUPS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-05T07:35:23.657005690Z[Etc/UTC]", comments = "Generator version: 7.14.0-SNAPSHOT")
public class ScimUser {
  public static final String JSON_PROPERTY_SCHEMAS = "schemas";
  @javax.annotation.Nullable
  private List<String> schemas = new ArrayList<>();

  public static final String JSON_PROPERTY_BASE_URN = "baseUrn";
  @javax.annotation.Nullable
  private String baseUrn;

  public static final String JSON_PROPERTY_EXTENSIONS = "extensions";
  @javax.annotation.Nullable
  private Map<String, ScimExtension> extensions = new HashMap<>();

  public static final String JSON_PROPERTY_META = "meta";
  @javax.annotation.Nonnull
  private Meta meta;

  public static final String JSON_PROPERTY_ID = "id";
  @javax.annotation.Nullable
  private String id;

  public static final String JSON_PROPERTY_EXTERNAL_ID = "externalId";
  @javax.annotation.Nullable
  private String externalId;

  public static final String JSON_PROPERTY_RESOURCE_TYPE = "resourceType";
  @javax.annotation.Nonnull
  private String resourceType;

  public static final String JSON_PROPERTY_PRIMARY_EMAIL_ADDRESS = "primaryEmailAddress";
  @javax.annotation.Nullable
  private JsonNullable<Email> primaryEmailAddress = JsonNullable.<Email>undefined();

  public static final String JSON_PROPERTY_ACTIVE = "active";
  @javax.annotation.Nullable
  private Boolean active;

  public static final String JSON_PROPERTY_EMAILS = "emails";
  @javax.annotation.Nullable
  private List<Email> emails = new ArrayList<>();

  public static final String JSON_PROPERTY_USER_NAME = "userName";
  @javax.annotation.Nullable
  private String userName;

  public static final String JSON_PROPERTY_NAME = "name";
  @javax.annotation.Nullable
  private Name name;

  public static final String JSON_PROPERTY_GROUPS = "groups";
  @javax.annotation.Nullable
  private List<UserGroup> groups = new ArrayList<>();

  public ScimUser() {
  }

  public ScimUser schemas(@javax.annotation.Nullable List<String> schemas) {

    this.schemas = schemas;
    return this;
  }

  public ScimUser addSchemasItem(String schemasItem) {
    if (this.schemas == null) {
      this.schemas = new ArrayList<>();
    }
    this.schemas.add(schemasItem);
    return this;
  }

  /**
   * Get schemas
   * @return schemas
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SCHEMAS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getSchemas() {
    return schemas;
  }


  @JsonProperty(JSON_PROPERTY_SCHEMAS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSchemas(@javax.annotation.Nullable List<String> schemas) {
    this.schemas = schemas;
  }

  public ScimUser baseUrn(@javax.annotation.Nullable String baseUrn) {

    this.baseUrn = baseUrn;
    return this;
  }

  /**
   * Get baseUrn
   * @return baseUrn
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BASE_URN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getBaseUrn() {
    return baseUrn;
  }


  @JsonProperty(JSON_PROPERTY_BASE_URN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBaseUrn(@javax.annotation.Nullable String baseUrn) {
    this.baseUrn = baseUrn;
  }

  public ScimUser extensions(@javax.annotation.Nullable Map<String, ScimExtension> extensions) {

    this.extensions = extensions;
    return this;
  }

  public ScimUser putExtensionsItem(String key, ScimExtension extensionsItem) {
    if (this.extensions == null) {
      this.extensions = new HashMap<>();
    }
    this.extensions.put(key, extensionsItem);
    return this;
  }

  /**
   * Get extensions
   * @return extensions
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXTENSIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, ScimExtension> getExtensions() {
    return extensions;
  }


  @JsonProperty(JSON_PROPERTY_EXTENSIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExtensions(@javax.annotation.Nullable Map<String, ScimExtension> extensions) {
    this.extensions = extensions;
  }

  public ScimUser meta(@javax.annotation.Nonnull Meta meta) {

    this.meta = meta;
    return this;
  }

  /**
   * Get meta
   * @return meta
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_META)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Meta getMeta() {
    return meta;
  }


  @JsonProperty(JSON_PROPERTY_META)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMeta(@javax.annotation.Nonnull Meta meta) {
    this.meta = meta;
  }

  public ScimUser id(@javax.annotation.Nullable String id) {

    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(@javax.annotation.Nullable String id) {
    this.id = id;
  }

  public ScimUser externalId(@javax.annotation.Nullable String externalId) {

    this.externalId = externalId;
    return this;
  }

  /**
   * Get externalId
   * @return externalId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXTERNAL_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getExternalId() {
    return externalId;
  }


  @JsonProperty(JSON_PROPERTY_EXTERNAL_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExternalId(@javax.annotation.Nullable String externalId) {
    this.externalId = externalId;
  }

  public ScimUser resourceType(@javax.annotation.Nonnull String resourceType) {

    this.resourceType = resourceType;
    return this;
  }

  /**
   * Get resourceType
   * @return resourceType
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_RESOURCE_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getResourceType() {
    return resourceType;
  }


  @JsonProperty(JSON_PROPERTY_RESOURCE_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setResourceType(@javax.annotation.Nonnull String resourceType) {
    this.resourceType = resourceType;
  }

  public ScimUser primaryEmailAddress(@javax.annotation.Nullable Email primaryEmailAddress) {
    this.primaryEmailAddress = JsonNullable.<Email>of(primaryEmailAddress);

    return this;
  }

  /**
   * Get primaryEmailAddress
   * @return primaryEmailAddress
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public Email getPrimaryEmailAddress() {
        return primaryEmailAddress.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PRIMARY_EMAIL_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Email> getPrimaryEmailAddress_JsonNullable() {
    return primaryEmailAddress;
  }

  @JsonProperty(JSON_PROPERTY_PRIMARY_EMAIL_ADDRESS)
  public void setPrimaryEmailAddress_JsonNullable(JsonNullable<Email> primaryEmailAddress) {
    this.primaryEmailAddress = primaryEmailAddress;
  }

  public void setPrimaryEmailAddress(@javax.annotation.Nullable Email primaryEmailAddress) {
    this.primaryEmailAddress = JsonNullable.<Email>of(primaryEmailAddress);
  }

  public ScimUser active(@javax.annotation.Nullable Boolean active) {

    this.active = active;
    return this;
  }

  /**
   * Get active
   * @return active
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ACTIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getActive() {
    return active;
  }


  @JsonProperty(JSON_PROPERTY_ACTIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setActive(@javax.annotation.Nullable Boolean active) {
    this.active = active;
  }

  public ScimUser emails(@javax.annotation.Nullable List<Email> emails) {

    this.emails = emails;
    return this;
  }

  public ScimUser addEmailsItem(Email emailsItem) {
    if (this.emails == null) {
      this.emails = new ArrayList<>();
    }
    this.emails.add(emailsItem);
    return this;
  }

  /**
   * Get emails
   * @return emails
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EMAILS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Email> getEmails() {
    return emails;
  }


  @JsonProperty(JSON_PROPERTY_EMAILS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEmails(@javax.annotation.Nullable List<Email> emails) {
    this.emails = emails;
  }

  public ScimUser userName(@javax.annotation.Nullable String userName) {

    this.userName = userName;
    return this;
  }

  /**
   * Get userName
   * @return userName
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USER_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUserName() {
    return userName;
  }


  @JsonProperty(JSON_PROPERTY_USER_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUserName(@javax.annotation.Nullable String userName) {
    this.userName = userName;
  }

  public ScimUser name(@javax.annotation.Nullable Name name) {

    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Name getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(@javax.annotation.Nullable Name name) {
    this.name = name;
  }

  public ScimUser groups(@javax.annotation.Nullable List<UserGroup> groups) {

    this.groups = groups;
    return this;
  }

  public ScimUser addGroupsItem(UserGroup groupsItem) {
    if (this.groups == null) {
      this.groups = new ArrayList<>();
    }
    this.groups.add(groupsItem);
    return this;
  }

  /**
   * Get groups
   * @return groups
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_GROUPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<UserGroup> getGroups() {
    return groups;
  }


  @JsonProperty(JSON_PROPERTY_GROUPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGroups(@javax.annotation.Nullable List<UserGroup> groups) {
    this.groups = groups;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScimUser scimUser = (ScimUser) o;
    return Objects.equals(this.schemas, scimUser.schemas) &&
        Objects.equals(this.baseUrn, scimUser.baseUrn) &&
        Objects.equals(this.extensions, scimUser.extensions) &&
        Objects.equals(this.meta, scimUser.meta) &&
        Objects.equals(this.id, scimUser.id) &&
        Objects.equals(this.externalId, scimUser.externalId) &&
        Objects.equals(this.resourceType, scimUser.resourceType) &&
        equalsNullable(this.primaryEmailAddress, scimUser.primaryEmailAddress) &&
        Objects.equals(this.active, scimUser.active) &&
        Objects.equals(this.emails, scimUser.emails) &&
        Objects.equals(this.userName, scimUser.userName) &&
        Objects.equals(this.name, scimUser.name) &&
        Objects.equals(this.groups, scimUser.groups);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(schemas, baseUrn, extensions, meta, id, externalId, resourceType, hashCodeNullable(primaryEmailAddress), active, emails, userName, name, groups);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScimUser {\n");
    sb.append("    schemas: ").append(toIndentedString(schemas)).append("\n");
    sb.append("    baseUrn: ").append(toIndentedString(baseUrn)).append("\n");
    sb.append("    extensions: ").append(toIndentedString(extensions)).append("\n");
    sb.append("    meta: ").append(toIndentedString(meta)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("    resourceType: ").append(toIndentedString(resourceType)).append("\n");
    sb.append("    primaryEmailAddress: ").append(toIndentedString(primaryEmailAddress)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    emails: ").append(toIndentedString(emails)).append("\n");
    sb.append("    userName: ").append(toIndentedString(userName)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    groups: ").append(toIndentedString(groups)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `schemas` to the URL query string
    if (getSchemas() != null) {
      for (int i = 0; i < getSchemas().size(); i++) {
        try {
          joiner.add(String.format("%sschemas%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(String.valueOf(getSchemas().get(i)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    // add `baseUrn` to the URL query string
    if (getBaseUrn() != null) {
      try {
        joiner.add(String.format("%sbaseUrn%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getBaseUrn()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `extensions` to the URL query string
    if (getExtensions() != null) {
      for (String _key : getExtensions().keySet()) {
        if (getExtensions().get(_key) != null) {
          joiner.add(getExtensions().get(_key).toUrlQueryString(String.format("%sextensions%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix))));
        }
      }
    }

    // add `meta` to the URL query string
    if (getMeta() != null) {
      joiner.add(getMeta().toUrlQueryString(prefix + "meta" + suffix));
    }

    // add `id` to the URL query string
    if (getId() != null) {
      try {
        joiner.add(String.format("%sid%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `externalId` to the URL query string
    if (getExternalId() != null) {
      try {
        joiner.add(String.format("%sexternalId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getExternalId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `resourceType` to the URL query string
    if (getResourceType() != null) {
      try {
        joiner.add(String.format("%sresourceType%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getResourceType()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `primaryEmailAddress` to the URL query string
    if (getPrimaryEmailAddress() != null) {
      joiner.add(getPrimaryEmailAddress().toUrlQueryString(prefix + "primaryEmailAddress" + suffix));
    }

    // add `active` to the URL query string
    if (getActive() != null) {
      try {
        joiner.add(String.format("%sactive%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getActive()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `emails` to the URL query string
    if (getEmails() != null) {
      for (int i = 0; i < getEmails().size(); i++) {
        if (getEmails().get(i) != null) {
          joiner.add(getEmails().get(i).toUrlQueryString(String.format("%semails%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `userName` to the URL query string
    if (getUserName() != null) {
      try {
        joiner.add(String.format("%suserName%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUserName()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `name` to the URL query string
    if (getName() != null) {
      joiner.add(getName().toUrlQueryString(prefix + "name" + suffix));
    }

    // add `groups` to the URL query string
    if (getGroups() != null) {
      for (int i = 0; i < getGroups().size(); i++) {
        if (getGroups().get(i) != null) {
          joiner.add(getGroups().get(i).toUrlQueryString(String.format("%sgroups%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    return joiner.toString();
  }

}

