/*
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kestra.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.HashMap;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * PluginDefault
 */
@JsonPropertyOrder({
  PluginDefault.JSON_PROPERTY_TYPE,
  PluginDefault.JSON_PROPERTY_FORCED,
  PluginDefault.JSON_PROPERTY_VALUES
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.14.0-SNAPSHOT")
public class PluginDefault {
  public static final String JSON_PROPERTY_TYPE = "type";
  @javax.annotation.Nonnull
  private String type;

  public static final String JSON_PROPERTY_FORCED = "forced";
  @javax.annotation.Nonnull
  private Boolean forced;

  public static final String JSON_PROPERTY_VALUES = "values";
  @javax.annotation.Nonnull
  private Map<String, Object> values = new HashMap<>();

  public PluginDefault() {
  }

  public PluginDefault type(@javax.annotation.Nonnull String type) {
    
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setType(@javax.annotation.Nonnull String type) {
    this.type = type;
  }

  public PluginDefault forced(@javax.annotation.Nonnull Boolean forced) {
    
    this.forced = forced;
    return this;
  }

  /**
   * Get forced
   * @return forced
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_FORCED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getForced() {
    return forced;
  }


  @JsonProperty(JSON_PROPERTY_FORCED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setForced(@javax.annotation.Nonnull Boolean forced) {
    this.forced = forced;
  }

  public PluginDefault values(@javax.annotation.Nonnull Map<String, Object> values) {
    
    this.values = values;
    return this;
  }

  public PluginDefault putValuesItem(String key, Object valuesItem) {
    this.values.put(key, valuesItem);
    return this;
  }

  /**
   * Get values
   * @return values
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_VALUES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Map<String, Object> getValues() {
    return values;
  }


  @JsonProperty(JSON_PROPERTY_VALUES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setValues(@javax.annotation.Nonnull Map<String, Object> values) {
    this.values = values;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PluginDefault pluginDefault = (PluginDefault) o;
    return Objects.equals(this.type, pluginDefault.type) &&
        Objects.equals(this.forced, pluginDefault.forced) &&
        Objects.equals(this.values, pluginDefault.values);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, forced, values);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PluginDefault {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    forced: ").append(toIndentedString(forced)).append("\n");
    sb.append("    values: ").append(toIndentedString(values)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

