/*
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kestra.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.kestra.sdk.model.InputObject;
import io.kestra.sdk.model.Label;
import io.kestra.sdk.model.Output;
import io.kestra.sdk.model.WorkerGroup;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * AbstractFlow
 */
@JsonPropertyOrder({
  AbstractFlow.JSON_PROPERTY_ID,
  AbstractFlow.JSON_PROPERTY_NAMESPACE,
  AbstractFlow.JSON_PROPERTY_REVISION,
  AbstractFlow.JSON_PROPERTY_DESCRIPTION,
  AbstractFlow.JSON_PROPERTY_INPUTS,
  AbstractFlow.JSON_PROPERTY_OUTPUTS,
  AbstractFlow.JSON_PROPERTY_DISABLED,
  AbstractFlow.JSON_PROPERTY_LABELS,
  AbstractFlow.JSON_PROPERTY_VARIABLES,
  AbstractFlow.JSON_PROPERTY_WORKER_GROUP,
  AbstractFlow.JSON_PROPERTY_DELETED
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.16.0")
public class AbstractFlow {
  public static final String JSON_PROPERTY_ID = "id";
  @javax.annotation.Nonnull  private String id;

  public static final String JSON_PROPERTY_NAMESPACE = "namespace";
  @javax.annotation.Nonnull  private String namespace;

  public static final String JSON_PROPERTY_REVISION = "revision";
  @javax.annotation.Nullable  private Integer revision;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  @javax.annotation.Nullable  private String description;

  public static final String JSON_PROPERTY_INPUTS = "inputs";
  @javax.annotation.Nullable  private List<InputObject> inputs = new ArrayList<>();

  public static final String JSON_PROPERTY_OUTPUTS = "outputs";
  @javax.annotation.Nullable  private List<Output> outputs = new ArrayList<>();

  public static final String JSON_PROPERTY_DISABLED = "disabled";
  @javax.annotation.Nonnull  private Boolean disabled;

  public static final String JSON_PROPERTY_LABELS = "labels";
  @javax.annotation.Nullable  private List<Label> labels = new ArrayList<>();

  public static final String JSON_PROPERTY_VARIABLES = "variables";
  @javax.annotation.Nullable  private Object variables;

  public static final String JSON_PROPERTY_WORKER_GROUP = "workerGroup";
  @javax.annotation.Nullable  private WorkerGroup workerGroup;

  public static final String JSON_PROPERTY_DELETED = "deleted";
  @javax.annotation.Nonnull  private Boolean deleted;

  public AbstractFlow() {
  }

  public AbstractFlow id(@javax.annotation.Nonnull String id) {
    
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(@javax.annotation.Nonnull String id) {
    this.id = id;
  }

  public AbstractFlow namespace(@javax.annotation.Nonnull String namespace) {
    
    this.namespace = namespace;
    return this;
  }

  /**
   * Get namespace
   * @return namespace
   */
  @javax.annotation.Nonnull  @JsonProperty(JSON_PROPERTY_NAMESPACE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getNamespace() {
    return namespace;
  }


  @JsonProperty(JSON_PROPERTY_NAMESPACE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setNamespace(@javax.annotation.Nonnull String namespace) {
    this.namespace = namespace;
  }

  public AbstractFlow revision(@javax.annotation.Nullable Integer revision) {
    
    this.revision = revision;
    return this;
  }

  /**
   * Get revision
   * minimum: 1
   * @return revision
   */
  @javax.annotation.Nullable  @JsonProperty(JSON_PROPERTY_REVISION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getRevision() {
    return revision;
  }


  @JsonProperty(JSON_PROPERTY_REVISION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRevision(@javax.annotation.Nullable Integer revision) {
    this.revision = revision;
  }

  public AbstractFlow description(@javax.annotation.Nullable String description) {
    
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }

  public AbstractFlow inputs(@javax.annotation.Nullable List<InputObject> inputs) {
    
    this.inputs = inputs;
    return this;
  }

  public AbstractFlow addInputsItem(InputObject inputsItem) {
    if (this.inputs == null) {
      this.inputs = new ArrayList<>();
    }
    this.inputs.add(inputsItem);
    return this;
  }

  /**
   * Get inputs
   * @return inputs
   */
  @javax.annotation.Nullable  @JsonProperty(JSON_PROPERTY_INPUTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<InputObject> getInputs() {
    return inputs;
  }


  @JsonProperty(JSON_PROPERTY_INPUTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInputs(@javax.annotation.Nullable List<InputObject> inputs) {
    this.inputs = inputs;
  }

  public AbstractFlow outputs(@javax.annotation.Nullable List<Output> outputs) {
    
    this.outputs = outputs;
    return this;
  }

  public AbstractFlow addOutputsItem(Output outputsItem) {
    if (this.outputs == null) {
      this.outputs = new ArrayList<>();
    }
    this.outputs.add(outputsItem);
    return this;
  }

  /**
   * Get outputs
   * @return outputs
   */
  @javax.annotation.Nullable  @JsonProperty(JSON_PROPERTY_OUTPUTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Output> getOutputs() {
    return outputs;
  }


  @JsonProperty(JSON_PROPERTY_OUTPUTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOutputs(@javax.annotation.Nullable List<Output> outputs) {
    this.outputs = outputs;
  }

  public AbstractFlow disabled(@javax.annotation.Nonnull Boolean disabled) {
    
    this.disabled = disabled;
    return this;
  }

  /**
   * Get disabled
   * @return disabled
   */
  @javax.annotation.Nonnull  @JsonProperty(JSON_PROPERTY_DISABLED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getDisabled() {
    return disabled;
  }


  @JsonProperty(JSON_PROPERTY_DISABLED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDisabled(@javax.annotation.Nonnull Boolean disabled) {
    this.disabled = disabled;
  }

  public AbstractFlow labels(@javax.annotation.Nullable List<Label> labels) {
    
    this.labels = labels;
    return this;
  }

  public AbstractFlow addLabelsItem(Label labelsItem) {
    if (this.labels == null) {
      this.labels = new ArrayList<>();
    }
    this.labels.add(labelsItem);
    return this;
  }

  /**
   * Labels as a list of Label (key/value pairs) or as a map of string to string.
   * @return labels
   */
  @javax.annotation.Nullable  @JsonProperty(JSON_PROPERTY_LABELS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Label> getLabels() {
    return labels;
  }


  @JsonProperty(JSON_PROPERTY_LABELS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLabels(@javax.annotation.Nullable List<Label> labels) {
    this.labels = labels;
  }

  public AbstractFlow variables(@javax.annotation.Nullable Object variables) {
    
    this.variables = variables;
    return this;
  }

  /**
   * Get variables
   * @return variables
   */
  @javax.annotation.Nullable  @JsonProperty(JSON_PROPERTY_VARIABLES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Object getVariables() {
    return variables;
  }


  @JsonProperty(JSON_PROPERTY_VARIABLES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVariables(@javax.annotation.Nullable Object variables) {
    this.variables = variables;
  }

  public AbstractFlow workerGroup(@javax.annotation.Nullable WorkerGroup workerGroup) {
    
    this.workerGroup = workerGroup;
    return this;
  }

  /**
   * Get workerGroup
   * @return workerGroup
   */
  @javax.annotation.Nullable  @JsonProperty(JSON_PROPERTY_WORKER_GROUP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public WorkerGroup getWorkerGroup() {
    return workerGroup;
  }


  @JsonProperty(JSON_PROPERTY_WORKER_GROUP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWorkerGroup(@javax.annotation.Nullable WorkerGroup workerGroup) {
    this.workerGroup = workerGroup;
  }

  public AbstractFlow deleted(@javax.annotation.Nonnull Boolean deleted) {
    
    this.deleted = deleted;
    return this;
  }

  /**
   * Get deleted
   * @return deleted
   */
  @javax.annotation.Nonnull  @JsonProperty(JSON_PROPERTY_DELETED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getDeleted() {
    return deleted;
  }


  @JsonProperty(JSON_PROPERTY_DELETED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDeleted(@javax.annotation.Nonnull Boolean deleted) {
    this.deleted = deleted;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AbstractFlow abstractFlow = (AbstractFlow) o;
    return Objects.equals(this.id, abstractFlow.id) &&
        Objects.equals(this.namespace, abstractFlow.namespace) &&
        Objects.equals(this.revision, abstractFlow.revision) &&
        Objects.equals(this.description, abstractFlow.description) &&
        Objects.equals(this.inputs, abstractFlow.inputs) &&
        Objects.equals(this.outputs, abstractFlow.outputs) &&
        Objects.equals(this.disabled, abstractFlow.disabled) &&
        Objects.equals(this.labels, abstractFlow.labels) &&
        Objects.equals(this.variables, abstractFlow.variables) &&
        Objects.equals(this.workerGroup, abstractFlow.workerGroup) &&
        Objects.equals(this.deleted, abstractFlow.deleted);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, namespace, revision, description, inputs, outputs, disabled, labels, variables, workerGroup, deleted);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AbstractFlow {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    namespace: ").append(toIndentedString(namespace)).append("\n");
    sb.append("    revision: ").append(toIndentedString(revision)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    inputs: ").append(toIndentedString(inputs)).append("\n");
    sb.append("    outputs: ").append(toIndentedString(outputs)).append("\n");
    sb.append("    disabled: ").append(toIndentedString(disabled)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    variables: ").append(toIndentedString(variables)).append("\n");
    sb.append("    workerGroup: ").append(toIndentedString(workerGroup)).append("\n");
    sb.append("    deleted: ").append(toIndentedString(deleted)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

