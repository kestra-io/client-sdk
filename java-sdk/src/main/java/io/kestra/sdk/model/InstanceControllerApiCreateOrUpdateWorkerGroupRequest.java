/*
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kestra.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * ApiCreateWorkerGroupRequest.
 */
@JsonPropertyOrder({
  InstanceControllerApiCreateOrUpdateWorkerGroupRequest.JSON_PROPERTY_KEY,
  InstanceControllerApiCreateOrUpdateWorkerGroupRequest.JSON_PROPERTY_DESCRIPTION,
  InstanceControllerApiCreateOrUpdateWorkerGroupRequest.JSON_PROPERTY_ALLOWED_TENANTS
})
@JsonTypeName("InstanceController.ApiCreateOrUpdateWorkerGroupRequest")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-28T12:15:52.743487342Z[Etc/UTC]", comments = "Generator version: 7.14.0-SNAPSHOT")
public class InstanceControllerApiCreateOrUpdateWorkerGroupRequest {
  public static final String JSON_PROPERTY_KEY = "key";
  @javax.annotation.Nonnull
  private String key;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  @javax.annotation.Nullable
  private String description;

  public static final String JSON_PROPERTY_ALLOWED_TENANTS = "allowedTenants";
  @javax.annotation.Nullable
  private List<String> allowedTenants = new ArrayList<>();

  public InstanceControllerApiCreateOrUpdateWorkerGroupRequest() {
  }

  public InstanceControllerApiCreateOrUpdateWorkerGroupRequest key(@javax.annotation.Nonnull String key) {
    
    this.key = key;
    return this;
  }

  /**
   * The key of the worker group.
   * @return key
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_KEY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getKey() {
    return key;
  }


  @JsonProperty(JSON_PROPERTY_KEY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setKey(@javax.annotation.Nonnull String key) {
    this.key = key;
  }

  public InstanceControllerApiCreateOrUpdateWorkerGroupRequest description(@javax.annotation.Nullable String description) {
    
    this.description = description;
    return this;
  }

  /**
   * The description of the worker group.
   * @return description
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }

  public InstanceControllerApiCreateOrUpdateWorkerGroupRequest allowedTenants(@javax.annotation.Nullable List<String> allowedTenants) {
    
    this.allowedTenants = allowedTenants;
    return this;
  }

  public InstanceControllerApiCreateOrUpdateWorkerGroupRequest addAllowedTenantsItem(String allowedTenantsItem) {
    if (this.allowedTenants == null) {
      this.allowedTenants = new ArrayList<>();
    }
    this.allowedTenants.add(allowedTenantsItem);
    return this;
  }

  /**
   * Get allowedTenants
   * @return allowedTenants
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ALLOWED_TENANTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getAllowedTenants() {
    return allowedTenants;
  }


  @JsonProperty(JSON_PROPERTY_ALLOWED_TENANTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAllowedTenants(@javax.annotation.Nullable List<String> allowedTenants) {
    this.allowedTenants = allowedTenants;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InstanceControllerApiCreateOrUpdateWorkerGroupRequest instanceControllerApiCreateOrUpdateWorkerGroupRequest = (InstanceControllerApiCreateOrUpdateWorkerGroupRequest) o;
    return Objects.equals(this.key, instanceControllerApiCreateOrUpdateWorkerGroupRequest.key) &&
        Objects.equals(this.description, instanceControllerApiCreateOrUpdateWorkerGroupRequest.description) &&
        Objects.equals(this.allowedTenants, instanceControllerApiCreateOrUpdateWorkerGroupRequest.allowedTenants);
  }

  @Override
  public int hashCode() {
    return Objects.hash(key, description, allowedTenants);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InstanceControllerApiCreateOrUpdateWorkerGroupRequest {\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    allowedTenants: ").append(toIndentedString(allowedTenants)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `key` to the URL query string
    if (getKey() != null) {
      try {
        joiner.add(String.format("%skey%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getKey()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `description` to the URL query string
    if (getDescription() != null) {
      try {
        joiner.add(String.format("%sdescription%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDescription()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `allowedTenants` to the URL query string
    if (getAllowedTenants() != null) {
      for (int i = 0; i < getAllowedTenants().size(); i++) {
        try {
          joiner.add(String.format("%sallowedTenants%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(String.valueOf(getAllowedTenants().get(i)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    return joiner.toString();
  }

}

