/*
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kestra.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * DailyExecutionStatisticsDuration
 */
@JsonPropertyOrder({
  DailyExecutionStatisticsDuration.JSON_PROPERTY_MIN,
  DailyExecutionStatisticsDuration.JSON_PROPERTY_AVG,
  DailyExecutionStatisticsDuration.JSON_PROPERTY_MAX,
  DailyExecutionStatisticsDuration.JSON_PROPERTY_SUM,
  DailyExecutionStatisticsDuration.JSON_PROPERTY_COUNT
})
@JsonTypeName("DailyExecutionStatistics.Duration")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-19T08:56:01.503545549Z[Etc/UTC]", comments = "Generator version: 7.14.0-SNAPSHOT")
public class DailyExecutionStatisticsDuration {
  public static final String JSON_PROPERTY_MIN = "min";
  @javax.annotation.Nonnull
  private String min;

  public static final String JSON_PROPERTY_AVG = "avg";
  @javax.annotation.Nonnull
  private String avg;

  public static final String JSON_PROPERTY_MAX = "max";
  @javax.annotation.Nonnull
  private String max;

  public static final String JSON_PROPERTY_SUM = "sum";
  @javax.annotation.Nonnull
  private String sum;

  public static final String JSON_PROPERTY_COUNT = "count";
  @javax.annotation.Nonnull
  private Long count;

  public DailyExecutionStatisticsDuration() {
  }

  public DailyExecutionStatisticsDuration min(@javax.annotation.Nonnull String min) {
    
    this.min = min;
    return this;
  }

  /**
   * Get min
   * @return min
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MIN)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getMin() {
    return min;
  }


  @JsonProperty(JSON_PROPERTY_MIN)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMin(@javax.annotation.Nonnull String min) {
    this.min = min;
  }

  public DailyExecutionStatisticsDuration avg(@javax.annotation.Nonnull String avg) {
    
    this.avg = avg;
    return this;
  }

  /**
   * Get avg
   * @return avg
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_AVG)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getAvg() {
    return avg;
  }


  @JsonProperty(JSON_PROPERTY_AVG)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAvg(@javax.annotation.Nonnull String avg) {
    this.avg = avg;
  }

  public DailyExecutionStatisticsDuration max(@javax.annotation.Nonnull String max) {
    
    this.max = max;
    return this;
  }

  /**
   * Get max
   * @return max
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MAX)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getMax() {
    return max;
  }


  @JsonProperty(JSON_PROPERTY_MAX)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMax(@javax.annotation.Nonnull String max) {
    this.max = max;
  }

  public DailyExecutionStatisticsDuration sum(@javax.annotation.Nonnull String sum) {
    
    this.sum = sum;
    return this;
  }

  /**
   * Get sum
   * @return sum
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SUM)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getSum() {
    return sum;
  }


  @JsonProperty(JSON_PROPERTY_SUM)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSum(@javax.annotation.Nonnull String sum) {
    this.sum = sum;
  }

  public DailyExecutionStatisticsDuration count(@javax.annotation.Nonnull Long count) {
    
    this.count = count;
    return this;
  }

  /**
   * Get count
   * @return count
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getCount() {
    return count;
  }


  @JsonProperty(JSON_PROPERTY_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCount(@javax.annotation.Nonnull Long count) {
    this.count = count;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DailyExecutionStatisticsDuration dailyExecutionStatisticsDuration = (DailyExecutionStatisticsDuration) o;
    return Objects.equals(this.min, dailyExecutionStatisticsDuration.min) &&
        Objects.equals(this.avg, dailyExecutionStatisticsDuration.avg) &&
        Objects.equals(this.max, dailyExecutionStatisticsDuration.max) &&
        Objects.equals(this.sum, dailyExecutionStatisticsDuration.sum) &&
        Objects.equals(this.count, dailyExecutionStatisticsDuration.count);
  }

  @Override
  public int hashCode() {
    return Objects.hash(min, avg, max, sum, count);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DailyExecutionStatisticsDuration {\n");
    sb.append("    min: ").append(toIndentedString(min)).append("\n");
    sb.append("    avg: ").append(toIndentedString(avg)).append("\n");
    sb.append("    max: ").append(toIndentedString(max)).append("\n");
    sb.append("    sum: ").append(toIndentedString(sum)).append("\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

