/*
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kestra.sdk.api;

import io.kestra.sdk.internal.ApiException;
import io.kestra.sdk.model.ApiAutocomplete;
import io.kestra.sdk.model.ApiIds;
import io.kestra.sdk.model.ApiRoleSummary;
import io.kestra.sdk.model.IAMRoleControllerApiRoleCreateOrUpdateRequest;
import io.kestra.sdk.model.IAMRoleControllerApiRoleDetail;
import io.kestra.sdk.model.PagedResultsApiRoleSummary;
import io.kestra.sdk.model.Role;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RolesApi
 */
@Disabled
public class RolesApiTest {

    private final RolesApi api = new RolesApi();

    /**
     * List roles for autocomplete
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void autocompleteRolesTest() throws ApiException {
        String tenant = null;
        ApiAutocomplete apiAutocomplete = null;
        List<ApiRoleSummary> response = api.autocompleteRoles(tenant, apiAutocomplete);

        // TODO: test validations
    }
    /**
     * Create a role
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRoleTest() throws ApiException {
        String tenant = null;
        IAMRoleControllerApiRoleCreateOrUpdateRequest iaMRoleControllerApiRoleCreateOrUpdateRequest = null;
        IAMRoleControllerApiRoleDetail response = api.createRole(tenant, iaMRoleControllerApiRoleCreateOrUpdateRequest);

        // TODO: test validations
    }
    /**
     * Delete a role
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteRoleTest() throws ApiException {
        String id = null;
        String tenant = null;
        api.deleteRole(id, tenant);

        // TODO: test validations
    }
    /**
     * Retrieve a role
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRoleTest() throws ApiException {
        String id = null;
        String tenant = null;
        IAMRoleControllerApiRoleDetail response = api.getRole(id, tenant);

        // TODO: test validations
    }
    /**
     * List roles by ids
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listRolesFromGivenIdsTest() throws ApiException {
        String tenant = null;
        ApiIds apiIds = null;
        List<Role> response = api.listRolesFromGivenIds(tenant, apiIds);

        // TODO: test validations
    }
    /**
     * Search for roles
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchRolesTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String tenant = null;
        String q = null;
        List<String> sort = null;
        PagedResultsApiRoleSummary response = api.searchRoles(page, size, tenant, q, sort);

        // TODO: test validations
    }
    /**
     * Update a role
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRoleTest() throws ApiException {
        String id = null;
        String tenant = null;
        IAMRoleControllerApiRoleCreateOrUpdateRequest iaMRoleControllerApiRoleCreateOrUpdateRequest = null;
        IAMRoleControllerApiRoleDetail response = api.updateRole(id, tenant, iaMRoleControllerApiRoleCreateOrUpdateRequest);

        // TODO: test validations
    }
}
