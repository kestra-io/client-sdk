/*
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kestra.sdk.api;

import io.kestra.sdk.internal.ApiException;
import io.kestra.sdk.model.KVControllerApiDeleteBulkRequest;
import io.kestra.sdk.model.KVControllerApiDeleteBulkResponse;
import io.kestra.sdk.model.KVControllerTypedValue;
import io.kestra.sdk.model.KVEntry;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for KvApi
 */
@Disabled
public class KvApiTest {

    private final KvApi api = new KvApi();

    /**
     * Delete a key-value pair
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteKeyValueTest() throws ApiException {
        String namespace = null;
        String key = null;
        String tenant = null;
        Boolean response = api.deleteKeyValue(namespace, key, tenant);

        // TODO: test validations
    }
    /**
     * Bulk-delete multiple key/value pairs from the given namespace.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteKeyValuesTest() throws ApiException {
        String namespace = null;
        String tenant = null;
        KVControllerApiDeleteBulkRequest kvControllerApiDeleteBulkRequest = null;
        KVControllerApiDeleteBulkResponse response = api.deleteKeyValues(namespace, tenant, kvControllerApiDeleteBulkRequest);

        // TODO: test validations
    }
    /**
     * Get value for a key
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getKeyValueTest() throws ApiException {
        String namespace = null;
        String key = null;
        String tenant = null;
        KVControllerTypedValue response = api.getKeyValue(namespace, key, tenant);

        // TODO: test validations
    }
    /**
     * List all keys for a namespace
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listKeysTest() throws ApiException {
        String namespace = null;
        String tenant = null;
        List<KVEntry> response = api.listKeys(namespace, tenant);

        // TODO: test validations
    }
    /**
     * List all keys for inherited namespaces
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listKeysWithInheritenceTest() throws ApiException {
        String namespace = null;
        String tenant = null;
        List<KVEntry> response = api.listKeysWithInheritence(namespace, tenant);

        // TODO: test validations
    }
    /**
     * Puts a key-value pair in store
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setKeyValueTest() throws ApiException {
        String namespace = null;
        String key = null;
        String tenant = null;
        String body = null;
        api.setKeyValue(namespace, key, tenant, body);

        // TODO: test validations
    }
}
