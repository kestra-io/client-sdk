/*
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kestra.sdk.api;

import io.kestra.sdk.internal.ApiException;
import io.kestra.sdk.model.ApiPatchSuperAdminRequest;
import io.kestra.sdk.model.CreateApiTokenRequest;
import io.kestra.sdk.model.CreateApiTokenResponse;
import io.kestra.sdk.model.IAMTenantAccessControllerApiUserTenantAccess;
import io.kestra.sdk.model.IAMTenantAccessControllerUserApiAutocomplete;
import io.kestra.sdk.model.IAMUserControllerApiCreateOrUpdateUserRequest;
import io.kestra.sdk.model.IAMUserControllerApiPatchRestrictedRequest;
import io.kestra.sdk.model.IAMUserControllerApiPatchUserPasswordRequest;
import io.kestra.sdk.model.IAMUserControllerApiUser;
import io.kestra.sdk.model.IAMUserGroupControllerApiUpdateUserGroupsRequest;
import io.kestra.sdk.model.MeControllerApiUpdatePasswordRequest;
import io.kestra.sdk.model.MeControllerApiUserDetailsRequest;
import io.kestra.sdk.model.PagedResultsIAMUserControllerApiUserSummary;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UsersApi
 */
@Disabled
public class UsersApiTest {

    private final UsersApi api = new UsersApi();

    /**
     * List users for autocomplete
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void autocompleteUsersTest() throws ApiException {
        String tenant = null;
        IAMTenantAccessControllerUserApiAutocomplete iaMTenantAccessControllerUserApiAutocomplete = null;
        List<IAMTenantAccessControllerApiUserTenantAccess> response = api.autocompleteUsers(tenant, iaMTenantAccessControllerUserApiAutocomplete);

        // TODO: test validations
    }
    /**
     * Create new API Token for a specific user
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createApiTokensForUserTest() throws ApiException {
        String id = null;
        CreateApiTokenRequest createApiTokenRequest = null;
        Object response = api.createApiTokensForUser(id, createApiTokenRequest);

        // TODO: test validations
    }
    /**
     * Create new API Token for a specific user
     *
     * Superadmin-only. Create a new API token for a user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createApiTokensForUser1Test() throws ApiException {
        String id = null;
        CreateApiTokenRequest createApiTokenRequest = null;
        CreateApiTokenResponse response = api.createApiTokensForUser1(id, createApiTokenRequest);

        // TODO: test validations
    }
    /**
     * Create new API Token for a specific user
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createApiTokensForUserWithTenantTest() throws ApiException {
        String id = null;
        String tenant = null;
        CreateApiTokenRequest createApiTokenRequest = null;
        Object response = api.createApiTokensForUserWithTenant(id, tenant, createApiTokenRequest);

        // TODO: test validations
    }
    /**
     * Create a new user account
     *
     * Superadmin-only. Create a new user account with an optional password based authentication method.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createUserTest() throws ApiException {
        IAMUserControllerApiCreateOrUpdateUserRequest iaMUserControllerApiCreateOrUpdateUserRequest = null;
        api.createUser(iaMUserControllerApiCreateOrUpdateUserRequest);

        // TODO: test validations
    }
    /**
     * Delete an API Token for specific user and token id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteApiTokenTest() throws ApiException {
        String id = null;
        String tokenId = null;
        Object response = api.deleteApiToken(id, tokenId);

        // TODO: test validations
    }
    /**
     * Delete an API Token for specific user and token id
     *
     * Superadmin-only. Delete an API token for a user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteApiToken1Test() throws ApiException {
        String id = null;
        String tokenId = null;
        api.deleteApiToken1(id, tokenId);

        // TODO: test validations
    }
    /**
     * Delete an API Token for specific user and token id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteApiTokenWithTenantTest() throws ApiException {
        String id = null;
        String tokenId = null;
        String tenant = null;
        Object response = api.deleteApiTokenWithTenant(id, tokenId, tenant);

        // TODO: test validations
    }
    /**
     * Delete a user refresh token
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteRefreshTokenTest() throws ApiException {
        String id = null;
        api.deleteRefreshToken(id);

        // TODO: test validations
    }
    /**
     * Delete a user
     *
     * Superadmin-only. Delete a user including all its access.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUserTest() throws ApiException {
        String id = null;
        api.deleteUser(id);

        // TODO: test validations
    }
    /**
     * Update user password
     *
     * Superadmin-only. Updates whether a user is a superadmin.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUserAuthMethodTest() throws ApiException {
        String id = null;
        String auth = null;
        IAMUserControllerApiUser response = api.deleteUserAuthMethod(id, auth);

        // TODO: test validations
    }
    /**
     * Get a user
     *
     * Superadmin-only. Get user account details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserTest() throws ApiException {
        String id = null;
        IAMUserControllerApiUser response = api.getUser(id);

        // TODO: test validations
    }
    /**
     * Impersonate a user
     *
     * Superadmin-only. Allows an admin to impersonate another user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void impersonateTest() throws ApiException {
        String id = null;
        Object response = api.impersonate(id);

        // TODO: test validations
    }
    /**
     * List API tokens for a specific user
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listApiTokensTest() throws ApiException {
        String id = null;
        Object response = api.listApiTokens(id);

        // TODO: test validations
    }
    /**
     * List API tokens for a specific user
     *
     * Superadmin-only. Get all API token existing for a user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listApiTokens1Test() throws ApiException {
        String id = null;
        Object response = api.listApiTokens1(id);

        // TODO: test validations
    }
    /**
     * List API tokens for a specific user
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listApiTokensWithTenantTest() throws ApiException {
        String id = null;
        String tenant = null;
        Object response = api.listApiTokensWithTenant(id, tenant);

        // TODO: test validations
    }
    /**
     * Retrieve users
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listUsersTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String q = null;
        List<String> sort = null;
        PagedResultsIAMUserControllerApiUserSummary response = api.listUsers(page, size, q, sort);

        // TODO: test validations
    }
    /**
     * Update user details
     *
     * Superadmin-only. Updates the the details of a user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchUserTest() throws ApiException {
        String id = null;
        MeControllerApiUserDetailsRequest meControllerApiUserDetailsRequest = null;
        IAMUserControllerApiUser response = api.patchUser(id, meControllerApiUserDetailsRequest);

        // TODO: test validations
    }
    /**
     * Update user demo
     *
     * Superadmin-only. Updates whether a user is for demo.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchUserDemoTest() throws ApiException {
        String id = null;
        IAMUserControllerApiPatchRestrictedRequest iaMUserControllerApiPatchRestrictedRequest = null;
        api.patchUserDemo(id, iaMUserControllerApiPatchRestrictedRequest);

        // TODO: test validations
    }
    /**
     * Update user password
     *
     * Superadmin-only. Updates whether a user is a superadmin.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchUserPasswordTest() throws ApiException {
        String id = null;
        IAMUserControllerApiPatchUserPasswordRequest iaMUserControllerApiPatchUserPasswordRequest = null;
        Object response = api.patchUserPassword(id, iaMUserControllerApiPatchUserPasswordRequest);

        // TODO: test validations
    }
    /**
     * Update user superadmin privileges
     *
     * Superadmin-only. Updates whether a user is a superadmin.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchUserSuperAdminTest() throws ApiException {
        String id = null;
        ApiPatchSuperAdminRequest apiPatchSuperAdminRequest = null;
        api.patchUserSuperAdmin(id, apiPatchSuperAdminRequest);

        // TODO: test validations
    }
    /**
     * Update authenticated user password
     *
     * Changes the login password for the authenticated user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateCurrentUserPasswordTest() throws ApiException {
        MeControllerApiUpdatePasswordRequest meControllerApiUpdatePasswordRequest = null;
        Object response = api.updateCurrentUserPassword(meControllerApiUpdatePasswordRequest);

        // TODO: test validations
    }
    /**
     * Update a user account
     *
     * Superadmin-only. Update an existing user account with an optional password based authentication method.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateUserTest() throws ApiException {
        String id = null;
        IAMUserControllerApiCreateOrUpdateUserRequest iaMUserControllerApiCreateOrUpdateUserRequest = null;
        IAMUserControllerApiUser response = api.updateUser(id, iaMUserControllerApiCreateOrUpdateUserRequest);

        // TODO: test validations
    }
    /**
     * Update the list of groups a user belongs to for the given tenant
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateUserGroupsTest() throws ApiException {
        String id = null;
        String tenant = null;
        IAMUserGroupControllerApiUpdateUserGroupsRequest iaMUserGroupControllerApiUpdateUserGroupsRequest = null;
        api.updateUserGroups(id, tenant, iaMUserGroupControllerApiUpdateUserGroupsRequest);

        // TODO: test validations
    }
}
