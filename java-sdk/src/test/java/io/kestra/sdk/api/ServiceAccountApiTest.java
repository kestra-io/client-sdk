/*
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kestra.sdk.api;

import io.kestra.sdk.internal.ApiException;
import io.kestra.sdk.model.ApiPatchSuperAdminRequest;
import io.kestra.sdk.model.IAMServiceAccountControllerApiCreateServiceAccountRequest;
import io.kestra.sdk.model.IAMServiceAccountControllerApiPatchServiceAccountRequest;
import io.kestra.sdk.model.IAMServiceAccountControllerApiServiceAccountDetail;
import io.kestra.sdk.model.IAMServiceAccountControllerApiServiceAccountRequest;
import io.kestra.sdk.model.IAMServiceAccountControllerApiServiceAccountResponse;
import io.kestra.sdk.model.PagedResultsIAMServiceAccountControllerApiServiceAccountDetail;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ServiceAccountApi
 */
@Disabled
public class ServiceAccountApiTest {

    private final ServiceAccountApi api = new ServiceAccountApi();

    /**
     * Create a service account
     *
     * Superadmin-only. CReate service account with access to multiple tenants.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createServiceAccountTest() throws ApiException {
        IAMServiceAccountControllerApiCreateServiceAccountRequest iaMServiceAccountControllerApiCreateServiceAccountRequest = null;
        IAMServiceAccountControllerApiServiceAccountDetail response = api.createServiceAccount(iaMServiceAccountControllerApiCreateServiceAccountRequest);

        // TODO: test validations
    }
    /**
     * Create a service account for the given tenant
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createServiceAccountForTenantTest() throws ApiException {
        String tenant = null;
        IAMServiceAccountControllerApiServiceAccountRequest iaMServiceAccountControllerApiServiceAccountRequest = null;
        IAMServiceAccountControllerApiServiceAccountResponse response = api.createServiceAccountForTenant(tenant, iaMServiceAccountControllerApiServiceAccountRequest);

        // TODO: test validations
    }
    /**
     * Delete a service account
     *
     * Superadmin-only. Delete a service account including all its access.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteServiceAccountTest() throws ApiException {
        String id = null;
        api.deleteServiceAccount(id);

        // TODO: test validations
    }
    /**
     * Delete a service account
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteServiceAccountForTenantTest() throws ApiException {
        String id = null;
        String tenant = null;
        api.deleteServiceAccountForTenant(id, tenant);

        // TODO: test validations
    }
    /**
     * Get a service account
     *
     * Superadmin-only. Get user account details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getServiceAccountTest() throws ApiException {
        String id = null;
        IAMServiceAccountControllerApiServiceAccountDetail response = api.getServiceAccount(id);

        // TODO: test validations
    }
    /**
     * Retrieve a service account
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getServiceAccountForTenantTest() throws ApiException {
        String id = null;
        String tenant = null;
        IAMServiceAccountControllerApiServiceAccountResponse response = api.getServiceAccountForTenant(id, tenant);

        // TODO: test validations
    }
    /**
     * List service accounts. Superadmin-only. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listServiceAccountsTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String q = null;
        List<String> sort = null;
        PagedResultsIAMServiceAccountControllerApiServiceAccountDetail response = api.listServiceAccounts(page, size, q, sort);

        // TODO: test validations
    }
    /**
     * Update service account details
     *
     * Superadmin-only. Updates the details of a service account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchServiceAccountDetailsTest() throws ApiException {
        String id = null;
        IAMServiceAccountControllerApiPatchServiceAccountRequest iaMServiceAccountControllerApiPatchServiceAccountRequest = null;
        IAMServiceAccountControllerApiServiceAccountDetail response = api.patchServiceAccountDetails(id, iaMServiceAccountControllerApiPatchServiceAccountRequest);

        // TODO: test validations
    }
    /**
     * Update service account superadmin privileges
     *
     * Superadmin-only. Updates whether a service account is a superadmin.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchServiceAccountSuperAdminTest() throws ApiException {
        String id = null;
        ApiPatchSuperAdminRequest apiPatchSuperAdminRequest = null;
        api.patchServiceAccountSuperAdmin(id, apiPatchSuperAdminRequest);

        // TODO: test validations
    }
    /**
     * Update a user service account
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateServiceAccountTest() throws ApiException {
        String id = null;
        String tenant = null;
        IAMServiceAccountControllerApiServiceAccountRequest iaMServiceAccountControllerApiServiceAccountRequest = null;
        IAMServiceAccountControllerApiServiceAccountResponse response = api.updateServiceAccount(id, tenant, iaMServiceAccountControllerApiServiceAccountRequest);

        // TODO: test validations
    }
}
