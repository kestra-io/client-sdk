/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
)

// checks if the PluginArtifact type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PluginArtifact{}

// PluginArtifact struct for PluginArtifact
type PluginArtifact struct {
	GroupId              string `json:"groupId"`
	ArtifactId           string `json:"artifactId"`
	Extension            string `json:"extension"`
	Classifier           string `json:"classifier"`
	Version              string `json:"version"`
	Uri                  string `json:"uri"`
	AdditionalProperties map[string]interface{}
}

type _PluginArtifact PluginArtifact

// NewPluginArtifact instantiates a new PluginArtifact object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPluginArtifact(groupId string, artifactId string, extension string, classifier string, version string, uri string) *PluginArtifact {
	this := PluginArtifact{}
	this.GroupId = groupId
	this.ArtifactId = artifactId
	this.Extension = extension
	this.Classifier = classifier
	this.Version = version
	this.Uri = uri
	return &this
}

// NewPluginArtifactWithDefaults instantiates a new PluginArtifact object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPluginArtifactWithDefaults() *PluginArtifact {
	this := PluginArtifact{}
	return &this
}

// GetGroupId returns the GroupId field value
func (o *PluginArtifact) GetGroupId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value
// and a boolean to check if the value has been set.
func (o *PluginArtifact) GetGroupIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GroupId, true
}

// SetGroupId sets field value
func (o *PluginArtifact) SetGroupId(v string) {
	o.GroupId = v
}

// GetArtifactId returns the ArtifactId field value
func (o *PluginArtifact) GetArtifactId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ArtifactId
}

// GetArtifactIdOk returns a tuple with the ArtifactId field value
// and a boolean to check if the value has been set.
func (o *PluginArtifact) GetArtifactIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ArtifactId, true
}

// SetArtifactId sets field value
func (o *PluginArtifact) SetArtifactId(v string) {
	o.ArtifactId = v
}

// GetExtension returns the Extension field value
func (o *PluginArtifact) GetExtension() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value
// and a boolean to check if the value has been set.
func (o *PluginArtifact) GetExtensionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Extension, true
}

// SetExtension sets field value
func (o *PluginArtifact) SetExtension(v string) {
	o.Extension = v
}

// GetClassifier returns the Classifier field value
func (o *PluginArtifact) GetClassifier() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Classifier
}

// GetClassifierOk returns a tuple with the Classifier field value
// and a boolean to check if the value has been set.
func (o *PluginArtifact) GetClassifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Classifier, true
}

// SetClassifier sets field value
func (o *PluginArtifact) SetClassifier(v string) {
	o.Classifier = v
}

// GetVersion returns the Version field value
func (o *PluginArtifact) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *PluginArtifact) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *PluginArtifact) SetVersion(v string) {
	o.Version = v
}

// GetUri returns the Uri field value
func (o *PluginArtifact) GetUri() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uri
}

// GetUriOk returns a tuple with the Uri field value
// and a boolean to check if the value has been set.
func (o *PluginArtifact) GetUriOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uri, true
}

// SetUri sets field value
func (o *PluginArtifact) SetUri(v string) {
	o.Uri = v
}

func (o PluginArtifact) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PluginArtifact) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["groupId"] = o.GroupId
	toSerialize["artifactId"] = o.ArtifactId
	toSerialize["extension"] = o.Extension
	toSerialize["classifier"] = o.Classifier
	toSerialize["version"] = o.Version
	toSerialize["uri"] = o.Uri

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PluginArtifact) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"groupId",
		"artifactId",
		"extension",
		"classifier",
		"version",
		"uri",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPluginArtifact := _PluginArtifact{}

	err = json.Unmarshal(data, &varPluginArtifact)

	if err != nil {
		return err
	}

	*o = PluginArtifact(varPluginArtifact)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "groupId")
		delete(additionalProperties, "artifactId")
		delete(additionalProperties, "extension")
		delete(additionalProperties, "classifier")
		delete(additionalProperties, "version")
		delete(additionalProperties, "uri")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePluginArtifact struct {
	value *PluginArtifact
	isSet bool
}

func (v NullablePluginArtifact) Get() *PluginArtifact {
	return v.value
}

func (v *NullablePluginArtifact) Set(val *PluginArtifact) {
	v.value = val
	v.isSet = true
}

func (v NullablePluginArtifact) IsSet() bool {
	return v.isSet
}

func (v *NullablePluginArtifact) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePluginArtifact(val *PluginArtifact) *NullablePluginArtifact {
	return &NullablePluginArtifact{value: val, isSet: true}
}

func (v NullablePluginArtifact) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePluginArtifact) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
