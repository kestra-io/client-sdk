/*
Kestra EE

All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
)

// checks if the ServerInstance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServerInstance{}

// ServerInstance struct for ServerInstance
type ServerInstance struct {
	Id       *string                           `json:"id,omitempty"`
	Type     *ServerInstanceType               `json:"type,omitempty"`
	Version  *string                           `json:"version,omitempty"`
	Hostname *string                           `json:"hostname,omitempty"`
	Props    map[string]map[string]interface{} `json:"props,omitempty"`
	Metrics  []Metric                          `json:"metrics,omitempty"`
}

// NewServerInstance instantiates a new ServerInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerInstance() *ServerInstance {
	this := ServerInstance{}
	return &this
}

// NewServerInstanceWithDefaults instantiates a new ServerInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerInstanceWithDefaults() *ServerInstance {
	this := ServerInstance{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ServerInstance) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstance) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ServerInstance) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ServerInstance) SetId(v string) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ServerInstance) GetType() ServerInstanceType {
	if o == nil || IsNil(o.Type) {
		var ret ServerInstanceType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstance) GetTypeOk() (*ServerInstanceType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ServerInstance) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given ServerInstanceType and assigns it to the Type field.
func (o *ServerInstance) SetType(v ServerInstanceType) {
	o.Type = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *ServerInstance) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstance) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *ServerInstance) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *ServerInstance) SetVersion(v string) {
	o.Version = &v
}

// GetHostname returns the Hostname field value if set, zero value otherwise.
func (o *ServerInstance) GetHostname() string {
	if o == nil || IsNil(o.Hostname) {
		var ret string
		return ret
	}
	return *o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstance) GetHostnameOk() (*string, bool) {
	if o == nil || IsNil(o.Hostname) {
		return nil, false
	}
	return o.Hostname, true
}

// HasHostname returns a boolean if a field has been set.
func (o *ServerInstance) HasHostname() bool {
	if o != nil && !IsNil(o.Hostname) {
		return true
	}

	return false
}

// SetHostname gets a reference to the given string and assigns it to the Hostname field.
func (o *ServerInstance) SetHostname(v string) {
	o.Hostname = &v
}

// GetProps returns the Props field value if set, zero value otherwise.
func (o *ServerInstance) GetProps() map[string]map[string]interface{} {
	if o == nil || IsNil(o.Props) {
		var ret map[string]map[string]interface{}
		return ret
	}
	return o.Props
}

// GetPropsOk returns a tuple with the Props field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstance) GetPropsOk() (map[string]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Props) {
		return map[string]map[string]interface{}{}, false
	}
	return o.Props, true
}

// HasProps returns a boolean if a field has been set.
func (o *ServerInstance) HasProps() bool {
	if o != nil && !IsNil(o.Props) {
		return true
	}

	return false
}

// SetProps gets a reference to the given map[string]map[string]interface{} and assigns it to the Props field.
func (o *ServerInstance) SetProps(v map[string]map[string]interface{}) {
	o.Props = v
}

// GetMetrics returns the Metrics field value if set, zero value otherwise.
func (o *ServerInstance) GetMetrics() []Metric {
	if o == nil || IsNil(o.Metrics) {
		var ret []Metric
		return ret
	}
	return o.Metrics
}

// GetMetricsOk returns a tuple with the Metrics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstance) GetMetricsOk() ([]Metric, bool) {
	if o == nil || IsNil(o.Metrics) {
		return nil, false
	}
	return o.Metrics, true
}

// HasMetrics returns a boolean if a field has been set.
func (o *ServerInstance) HasMetrics() bool {
	if o != nil && !IsNil(o.Metrics) {
		return true
	}

	return false
}

// SetMetrics gets a reference to the given []Metric and assigns it to the Metrics field.
func (o *ServerInstance) SetMetrics(v []Metric) {
	o.Metrics = v
}

func (o ServerInstance) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServerInstance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.Hostname) {
		toSerialize["hostname"] = o.Hostname
	}
	if !IsNil(o.Props) {
		toSerialize["props"] = o.Props
	}
	if !IsNil(o.Metrics) {
		toSerialize["metrics"] = o.Metrics
	}
	return toSerialize, nil
}

type NullableServerInstance struct {
	value *ServerInstance
	isSet bool
}

func (v NullableServerInstance) Get() *ServerInstance {
	return v.value
}

func (v *NullableServerInstance) Set(val *ServerInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableServerInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableServerInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerInstance(val *ServerInstance) *NullableServerInstance {
	return &NullableServerInstance{value: val, isSet: true}
}

func (v NullableServerInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
