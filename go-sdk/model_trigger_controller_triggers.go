/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
)

// checks if the TriggerControllerTriggers type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TriggerControllerTriggers{}

// TriggerControllerTriggers struct for TriggerControllerTriggers
type TriggerControllerTriggers struct {
	AbstractTrigger      *AbstractTrigger `json:"abstractTrigger,omitempty"`
	TriggerContext       *Trigger         `json:"triggerContext,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _TriggerControllerTriggers TriggerControllerTriggers

// NewTriggerControllerTriggers instantiates a new TriggerControllerTriggers object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTriggerControllerTriggers() *TriggerControllerTriggers {
	this := TriggerControllerTriggers{}
	return &this
}

// NewTriggerControllerTriggersWithDefaults instantiates a new TriggerControllerTriggers object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTriggerControllerTriggersWithDefaults() *TriggerControllerTriggers {
	this := TriggerControllerTriggers{}
	return &this
}

// GetAbstractTrigger returns the AbstractTrigger field value if set, zero value otherwise.
func (o *TriggerControllerTriggers) GetAbstractTrigger() AbstractTrigger {
	if o == nil || IsNil(o.AbstractTrigger) {
		var ret AbstractTrigger
		return ret
	}
	return *o.AbstractTrigger
}

// GetAbstractTriggerOk returns a tuple with the AbstractTrigger field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TriggerControllerTriggers) GetAbstractTriggerOk() (*AbstractTrigger, bool) {
	if o == nil || IsNil(o.AbstractTrigger) {
		return nil, false
	}
	return o.AbstractTrigger, true
}

// HasAbstractTrigger returns a boolean if a field has been set.
func (o *TriggerControllerTriggers) HasAbstractTrigger() bool {
	if o != nil && !IsNil(o.AbstractTrigger) {
		return true
	}

	return false
}

// SetAbstractTrigger gets a reference to the given AbstractTrigger and assigns it to the AbstractTrigger field.
func (o *TriggerControllerTriggers) SetAbstractTrigger(v AbstractTrigger) {
	o.AbstractTrigger = &v
}

// GetTriggerContext returns the TriggerContext field value if set, zero value otherwise.
func (o *TriggerControllerTriggers) GetTriggerContext() Trigger {
	if o == nil || IsNil(o.TriggerContext) {
		var ret Trigger
		return ret
	}
	return *o.TriggerContext
}

// GetTriggerContextOk returns a tuple with the TriggerContext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TriggerControllerTriggers) GetTriggerContextOk() (*Trigger, bool) {
	if o == nil || IsNil(o.TriggerContext) {
		return nil, false
	}
	return o.TriggerContext, true
}

// HasTriggerContext returns a boolean if a field has been set.
func (o *TriggerControllerTriggers) HasTriggerContext() bool {
	if o != nil && !IsNil(o.TriggerContext) {
		return true
	}

	return false
}

// SetTriggerContext gets a reference to the given Trigger and assigns it to the TriggerContext field.
func (o *TriggerControllerTriggers) SetTriggerContext(v Trigger) {
	o.TriggerContext = &v
}

func (o TriggerControllerTriggers) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TriggerControllerTriggers) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AbstractTrigger) {
		toSerialize["abstractTrigger"] = o.AbstractTrigger
	}
	if !IsNil(o.TriggerContext) {
		toSerialize["triggerContext"] = o.TriggerContext
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TriggerControllerTriggers) UnmarshalJSON(data []byte) (err error) {
	varTriggerControllerTriggers := _TriggerControllerTriggers{}

	err = json.Unmarshal(data, &varTriggerControllerTriggers)

	if err != nil {
		return err
	}

	*o = TriggerControllerTriggers(varTriggerControllerTriggers)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "abstractTrigger")
		delete(additionalProperties, "triggerContext")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTriggerControllerTriggers struct {
	value *TriggerControllerTriggers
	isSet bool
}

func (v NullableTriggerControllerTriggers) Get() *TriggerControllerTriggers {
	return v.value
}

func (v *NullableTriggerControllerTriggers) Set(val *TriggerControllerTriggers) {
	v.value = val
	v.isSet = true
}

func (v NullableTriggerControllerTriggers) IsSet() bool {
	return v.isSet
}

func (v *NullableTriggerControllerTriggers) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTriggerControllerTriggers(val *TriggerControllerTriggers) *NullableTriggerControllerTriggers {
	return &NullableTriggerControllerTriggers{value: val, isSet: true}
}

func (v NullableTriggerControllerTriggers) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTriggerControllerTriggers) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
