/*
Kestra EE

All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// SCIMConfigurationAPIService SCIMConfigurationAPI service
type SCIMConfigurationAPIService service

type ApiGetAllResourceTypesRequest struct {
	ctx         context.Context
	ApiService  *SCIMConfigurationAPIService
	integration string
	tenant      string
}

func (r ApiGetAllResourceTypesRequest) Execute() ([]ResourceType, *http.Response, error) {
	return r.ApiService.GetAllResourceTypesExecute(r)
}

/*
GetAllResourceTypes Method for GetAllResourceTypes

Get All Resource Types

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param integration
	@param tenant
	@return ApiGetAllResourceTypesRequest
*/
func (a *SCIMConfigurationAPIService) GetAllResourceTypes(ctx context.Context, integration string, tenant string) ApiGetAllResourceTypesRequest {
	return ApiGetAllResourceTypesRequest{
		ApiService:  a,
		ctx:         ctx,
		integration: integration,
		tenant:      tenant,
	}
}

// Execute executes the request
//
//	@return []ResourceType
func (a *SCIMConfigurationAPIService) GetAllResourceTypesExecute(r ApiGetAllResourceTypesRequest) ([]ResourceType, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []ResourceType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SCIMConfigurationAPIService.GetAllResourceTypes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/{tenant}/integrations/{integration}/scim/v2/ResourceTypes"
	localVarPath = strings.Replace(localVarPath, "{"+"integration"+"}", url.PathEscape(parameterValueToString(r.integration, "integration")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tenant"+"}", url.PathEscape(parameterValueToString(r.tenant, "tenant")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/scim+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetAllSchemasRequest struct {
	ctx         context.Context
	ApiService  *SCIMConfigurationAPIService
	integration string
	tenant      string
}

func (r ApiGetAllSchemasRequest) Execute() ([]Schema, *http.Response, error) {
	return r.ApiService.GetAllSchemasExecute(r)
}

/*
GetAllSchemas Method for GetAllSchemas

Get All Schemas

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param integration
	@param tenant
	@return ApiGetAllSchemasRequest
*/
func (a *SCIMConfigurationAPIService) GetAllSchemas(ctx context.Context, integration string, tenant string) ApiGetAllSchemasRequest {
	return ApiGetAllSchemasRequest{
		ApiService:  a,
		ctx:         ctx,
		integration: integration,
		tenant:      tenant,
	}
}

// Execute executes the request
//
//	@return []Schema
func (a *SCIMConfigurationAPIService) GetAllSchemasExecute(r ApiGetAllSchemasRequest) ([]Schema, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Schema
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SCIMConfigurationAPIService.GetAllSchemas")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/{tenant}/integrations/{integration}/scim/v2/Schemas"
	localVarPath = strings.Replace(localVarPath, "{"+"integration"+"}", url.PathEscape(parameterValueToString(r.integration, "integration")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tenant"+"}", url.PathEscape(parameterValueToString(r.tenant, "tenant")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/scim+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetResourceTypeRequest struct {
	ctx         context.Context
	ApiService  *SCIMConfigurationAPIService
	name        string
	integration string
	tenant      string
}

func (r ApiGetResourceTypeRequest) Execute() (*ResourceType, *http.Response, error) {
	return r.ApiService.GetResourceTypeExecute(r)
}

/*
GetResourceType Method for GetResourceType

Get Resource Type by URN

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name
	@param integration
	@param tenant
	@return ApiGetResourceTypeRequest
*/
func (a *SCIMConfigurationAPIService) GetResourceType(ctx context.Context, name string, integration string, tenant string) ApiGetResourceTypeRequest {
	return ApiGetResourceTypeRequest{
		ApiService:  a,
		ctx:         ctx,
		name:        name,
		integration: integration,
		tenant:      tenant,
	}
}

// Execute executes the request
//
//	@return ResourceType
func (a *SCIMConfigurationAPIService) GetResourceTypeExecute(r ApiGetResourceTypeRequest) (*ResourceType, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ResourceType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SCIMConfigurationAPIService.GetResourceType")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/{tenant}/integrations/{integration}/scim/v2/ResourceTypes/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"integration"+"}", url.PathEscape(parameterValueToString(r.integration, "integration")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tenant"+"}", url.PathEscape(parameterValueToString(r.tenant, "tenant")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/scim+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSchemaRequest struct {
	ctx         context.Context
	ApiService  *SCIMConfigurationAPIService
	uri         string
	integration string
	tenant      string
}

func (r ApiGetSchemaRequest) Execute() (*Schema, *http.Response, error) {
	return r.ApiService.GetSchemaExecute(r)
}

/*
GetSchema Method for GetSchema

Get Schemas by URN

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param uri
	@param integration
	@param tenant
	@return ApiGetSchemaRequest
*/
func (a *SCIMConfigurationAPIService) GetSchema(ctx context.Context, uri string, integration string, tenant string) ApiGetSchemaRequest {
	return ApiGetSchemaRequest{
		ApiService:  a,
		ctx:         ctx,
		uri:         uri,
		integration: integration,
		tenant:      tenant,
	}
}

// Execute executes the request
//
//	@return Schema
func (a *SCIMConfigurationAPIService) GetSchemaExecute(r ApiGetSchemaRequest) (*Schema, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Schema
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SCIMConfigurationAPIService.GetSchema")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/{tenant}/integrations/{integration}/scim/v2/Schemas/{uri}"
	localVarPath = strings.Replace(localVarPath, "{"+"uri"+"}", url.PathEscape(parameterValueToString(r.uri, "uri")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"integration"+"}", url.PathEscape(parameterValueToString(r.integration, "integration")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tenant"+"}", url.PathEscape(parameterValueToString(r.tenant, "tenant")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/scim+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceProviderConfigurationRequest struct {
	ctx         context.Context
	ApiService  *SCIMConfigurationAPIService
	integration string
	tenant      string
}

func (r ApiGetServiceProviderConfigurationRequest) Execute() (*ServiceProviderConfiguration, *http.Response, error) {
	return r.ApiService.GetServiceProviderConfigurationExecute(r)
}

/*
GetServiceProviderConfiguration Method for GetServiceProviderConfiguration

Get Service Provider Configuration

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param integration
	@param tenant
	@return ApiGetServiceProviderConfigurationRequest
*/
func (a *SCIMConfigurationAPIService) GetServiceProviderConfiguration(ctx context.Context, integration string, tenant string) ApiGetServiceProviderConfigurationRequest {
	return ApiGetServiceProviderConfigurationRequest{
		ApiService:  a,
		ctx:         ctx,
		integration: integration,
		tenant:      tenant,
	}
}

// Execute executes the request
//
//	@return ServiceProviderConfiguration
func (a *SCIMConfigurationAPIService) GetServiceProviderConfigurationExecute(r ApiGetServiceProviderConfigurationRequest) (*ServiceProviderConfiguration, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ServiceProviderConfiguration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SCIMConfigurationAPIService.GetServiceProviderConfiguration")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/{tenant}/integrations/{integration}/scim/v2/ServiceProviderConfig"
	localVarPath = strings.Replace(localVarPath, "{"+"integration"+"}", url.PathEscape(parameterValueToString(r.integration, "integration")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tenant"+"}", url.PathEscape(parameterValueToString(r.tenant, "tenant")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/scim+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
