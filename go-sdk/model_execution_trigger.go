/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
)

// checks if the ExecutionTrigger type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExecutionTrigger{}

// ExecutionTrigger struct for ExecutionTrigger
type ExecutionTrigger struct {
	Id                   string                            `json:"id"`
	Type                 string                            `json:"type"`
	Variables            map[string]map[string]interface{} `json:"variables"`
	LogFile              string                            `json:"logFile"`
	AdditionalProperties map[string]interface{}
}

type _ExecutionTrigger ExecutionTrigger

// NewExecutionTrigger instantiates a new ExecutionTrigger object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExecutionTrigger(id string, type_ string, variables map[string]map[string]interface{}, logFile string) *ExecutionTrigger {
	this := ExecutionTrigger{}
	this.Id = id
	this.Type = type_
	this.Variables = variables
	this.LogFile = logFile
	return &this
}

// NewExecutionTriggerWithDefaults instantiates a new ExecutionTrigger object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExecutionTriggerWithDefaults() *ExecutionTrigger {
	this := ExecutionTrigger{}
	return &this
}

// GetId returns the Id field value
func (o *ExecutionTrigger) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ExecutionTrigger) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ExecutionTrigger) SetId(v string) {
	o.Id = v
}

// GetType returns the Type field value
func (o *ExecutionTrigger) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ExecutionTrigger) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ExecutionTrigger) SetType(v string) {
	o.Type = v
}

// GetVariables returns the Variables field value
func (o *ExecutionTrigger) GetVariables() map[string]map[string]interface{} {
	if o == nil {
		var ret map[string]map[string]interface{}
		return ret
	}

	return o.Variables
}

// GetVariablesOk returns a tuple with the Variables field value
// and a boolean to check if the value has been set.
func (o *ExecutionTrigger) GetVariablesOk() (map[string]map[string]interface{}, bool) {
	if o == nil {
		return map[string]map[string]interface{}{}, false
	}
	return o.Variables, true
}

// SetVariables sets field value
func (o *ExecutionTrigger) SetVariables(v map[string]map[string]interface{}) {
	o.Variables = v
}

// GetLogFile returns the LogFile field value
func (o *ExecutionTrigger) GetLogFile() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LogFile
}

// GetLogFileOk returns a tuple with the LogFile field value
// and a boolean to check if the value has been set.
func (o *ExecutionTrigger) GetLogFileOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LogFile, true
}

// SetLogFile sets field value
func (o *ExecutionTrigger) SetLogFile(v string) {
	o.LogFile = v
}

func (o ExecutionTrigger) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExecutionTrigger) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["type"] = o.Type
	toSerialize["variables"] = o.Variables
	toSerialize["logFile"] = o.LogFile

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ExecutionTrigger) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"type",
		"variables",
		"logFile",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varExecutionTrigger := _ExecutionTrigger{}

	err = json.Unmarshal(data, &varExecutionTrigger)

	if err != nil {
		return err
	}

	*o = ExecutionTrigger(varExecutionTrigger)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "type")
		delete(additionalProperties, "variables")
		delete(additionalProperties, "logFile")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableExecutionTrigger struct {
	value *ExecutionTrigger
	isSet bool
}

func (v NullableExecutionTrigger) Get() *ExecutionTrigger {
	return v.value
}

func (v *NullableExecutionTrigger) Set(val *ExecutionTrigger) {
	v.value = val
	v.isSet = true
}

func (v NullableExecutionTrigger) IsSet() bool {
	return v.isSet
}

func (v *NullableExecutionTrigger) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExecutionTrigger(val *ExecutionTrigger) *NullableExecutionTrigger {
	return &NullableExecutionTrigger{value: val, isSet: true}
}

func (v NullableExecutionTrigger) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExecutionTrigger) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
