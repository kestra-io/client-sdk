/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"
)

// MetricsAPIService MetricsAPI service
type MetricsAPIService service

type ApiAggregateMetricsFromFlowRequest struct {
	ctx         context.Context
	ApiService  *MetricsAPIService
	namespace   string
	flowId      string
	metric      string
	aggregation *string
	tenant      string
	startDate   *time.Time
	endDate     *time.Time
}

// The type of aggregation: avg, sum, min or max
func (r ApiAggregateMetricsFromFlowRequest) Aggregation(aggregation string) ApiAggregateMetricsFromFlowRequest {
	r.aggregation = &aggregation
	return r
}

// The start datetime, default to now - 30 days
func (r ApiAggregateMetricsFromFlowRequest) StartDate(startDate time.Time) ApiAggregateMetricsFromFlowRequest {
	r.startDate = &startDate
	return r
}

// The end datetime, default to now
func (r ApiAggregateMetricsFromFlowRequest) EndDate(endDate time.Time) ApiAggregateMetricsFromFlowRequest {
	r.endDate = &endDate
	return r
}

func (r ApiAggregateMetricsFromFlowRequest) Execute() (*MetricAggregations, *http.Response, error) {
	return r.ApiService.AggregateMetricsFromFlowExecute(r)
}

/*
AggregateMetricsFromFlow Get metrics aggregations for a specific flow

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param namespace The namespace
	@param flowId The flow Id
	@param metric The metric name
	@param tenant
	@return ApiAggregateMetricsFromFlowRequest
*/
func (a *MetricsAPIService) AggregateMetricsFromFlow(ctx context.Context, namespace string, flowId string, metric string, tenant string) ApiAggregateMetricsFromFlowRequest {
	return ApiAggregateMetricsFromFlowRequest{
		ApiService: a,
		ctx:        ctx,
		namespace:  namespace,
		flowId:     flowId,
		metric:     metric,
		tenant:     tenant,
	}
}

// Execute executes the request
//
//	@return MetricAggregations
func (a *MetricsAPIService) AggregateMetricsFromFlowExecute(r ApiAggregateMetricsFromFlowRequest) (*MetricAggregations, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *MetricAggregations
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetricsAPIService.AggregateMetricsFromFlow")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/{tenant}/metrics/aggregates/{namespace}/{flowId}/{metric}"
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterValueToString(r.namespace, "namespace")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"flowId"+"}", url.PathEscape(parameterValueToString(r.flowId, "flowId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"metric"+"}", url.PathEscape(parameterValueToString(r.metric, "metric")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tenant"+"}", url.PathEscape(parameterValueToString(r.tenant, "tenant")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.aggregation == nil {
		return localVarReturnValue, nil, reportError("aggregation is required and must be specified")
	}

	if r.startDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startDate", r.startDate, "form", "")
	}
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "aggregation", r.aggregation, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAggregateMetricsFromTaskRequest struct {
	ctx         context.Context
	ApiService  *MetricsAPIService
	namespace   string
	flowId      string
	taskId      string
	metric      string
	aggregation *string
	tenant      string
	startDate   *time.Time
	endDate     *time.Time
}

// The type of aggregation: avg, sum, min or max
func (r ApiAggregateMetricsFromTaskRequest) Aggregation(aggregation string) ApiAggregateMetricsFromTaskRequest {
	r.aggregation = &aggregation
	return r
}

// The start datetime, default to now - 30 days
func (r ApiAggregateMetricsFromTaskRequest) StartDate(startDate time.Time) ApiAggregateMetricsFromTaskRequest {
	r.startDate = &startDate
	return r
}

// The end datetime, default to now
func (r ApiAggregateMetricsFromTaskRequest) EndDate(endDate time.Time) ApiAggregateMetricsFromTaskRequest {
	r.endDate = &endDate
	return r
}

func (r ApiAggregateMetricsFromTaskRequest) Execute() (*MetricAggregations, *http.Response, error) {
	return r.ApiService.AggregateMetricsFromTaskExecute(r)
}

/*
AggregateMetricsFromTask Get metrics aggregations for a specific flow

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param namespace The namespace
	@param flowId The flow Id
	@param taskId The task Id
	@param metric The metric name
	@param tenant
	@return ApiAggregateMetricsFromTaskRequest
*/
func (a *MetricsAPIService) AggregateMetricsFromTask(ctx context.Context, namespace string, flowId string, taskId string, metric string, tenant string) ApiAggregateMetricsFromTaskRequest {
	return ApiAggregateMetricsFromTaskRequest{
		ApiService: a,
		ctx:        ctx,
		namespace:  namespace,
		flowId:     flowId,
		taskId:     taskId,
		metric:     metric,
		tenant:     tenant,
	}
}

// Execute executes the request
//
//	@return MetricAggregations
func (a *MetricsAPIService) AggregateMetricsFromTaskExecute(r ApiAggregateMetricsFromTaskRequest) (*MetricAggregations, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *MetricAggregations
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetricsAPIService.AggregateMetricsFromTask")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/{tenant}/metrics/aggregates/{namespace}/{flowId}/{taskId}/{metric}"
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterValueToString(r.namespace, "namespace")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"flowId"+"}", url.PathEscape(parameterValueToString(r.flowId, "flowId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"taskId"+"}", url.PathEscape(parameterValueToString(r.taskId, "taskId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"metric"+"}", url.PathEscape(parameterValueToString(r.metric, "metric")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tenant"+"}", url.PathEscape(parameterValueToString(r.tenant, "tenant")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.aggregation == nil {
		return localVarReturnValue, nil, reportError("aggregation is required and must be specified")
	}

	if r.startDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startDate", r.startDate, "form", "")
	}
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "aggregation", r.aggregation, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListFlowMetricsRequest struct {
	ctx        context.Context
	ApiService *MetricsAPIService
	namespace  string
	flowId     string
	tenant     string
}

func (r ApiListFlowMetricsRequest) Execute() ([]string, *http.Response, error) {
	return r.ApiService.ListFlowMetricsExecute(r)
}

/*
ListFlowMetrics Get metrics names for a specific flow

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param namespace The namespace
	@param flowId The flow Id
	@param tenant
	@return ApiListFlowMetricsRequest
*/
func (a *MetricsAPIService) ListFlowMetrics(ctx context.Context, namespace string, flowId string, tenant string) ApiListFlowMetricsRequest {
	return ApiListFlowMetricsRequest{
		ApiService: a,
		ctx:        ctx,
		namespace:  namespace,
		flowId:     flowId,
		tenant:     tenant,
	}
}

// Execute executes the request
//
//	@return []string
func (a *MetricsAPIService) ListFlowMetricsExecute(r ApiListFlowMetricsRequest) ([]string, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetricsAPIService.ListFlowMetrics")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/{tenant}/metrics/names/{namespace}/{flowId}"
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterValueToString(r.namespace, "namespace")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"flowId"+"}", url.PathEscape(parameterValueToString(r.flowId, "flowId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tenant"+"}", url.PathEscape(parameterValueToString(r.tenant, "tenant")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListTaskMetricsRequest struct {
	ctx        context.Context
	ApiService *MetricsAPIService
	namespace  string
	flowId     string
	taskId     string
	tenant     string
}

func (r ApiListTaskMetricsRequest) Execute() ([]string, *http.Response, error) {
	return r.ApiService.ListTaskMetricsExecute(r)
}

/*
ListTaskMetrics Get metrics names for a specific task in a flow

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param namespace The namespace
	@param flowId The flow Id
	@param taskId The task Id
	@param tenant
	@return ApiListTaskMetricsRequest
*/
func (a *MetricsAPIService) ListTaskMetrics(ctx context.Context, namespace string, flowId string, taskId string, tenant string) ApiListTaskMetricsRequest {
	return ApiListTaskMetricsRequest{
		ApiService: a,
		ctx:        ctx,
		namespace:  namespace,
		flowId:     flowId,
		taskId:     taskId,
		tenant:     tenant,
	}
}

// Execute executes the request
//
//	@return []string
func (a *MetricsAPIService) ListTaskMetricsExecute(r ApiListTaskMetricsRequest) ([]string, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetricsAPIService.ListTaskMetrics")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/{tenant}/metrics/names/{namespace}/{flowId}/{taskId}"
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterValueToString(r.namespace, "namespace")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"flowId"+"}", url.PathEscape(parameterValueToString(r.flowId, "flowId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"taskId"+"}", url.PathEscape(parameterValueToString(r.taskId, "taskId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tenant"+"}", url.PathEscape(parameterValueToString(r.tenant, "tenant")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListTasksWithMetricsRequest struct {
	ctx        context.Context
	ApiService *MetricsAPIService
	namespace  string
	flowId     string
	tenant     string
}

func (r ApiListTasksWithMetricsRequest) Execute() ([]string, *http.Response, error) {
	return r.ApiService.ListTasksWithMetricsExecute(r)
}

/*
ListTasksWithMetrics Get tasks id that have metrics for a specific flow, include deleted or renamed tasks

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param namespace The namespace
	@param flowId The flow Id
	@param tenant
	@return ApiListTasksWithMetricsRequest
*/
func (a *MetricsAPIService) ListTasksWithMetrics(ctx context.Context, namespace string, flowId string, tenant string) ApiListTasksWithMetricsRequest {
	return ApiListTasksWithMetricsRequest{
		ApiService: a,
		ctx:        ctx,
		namespace:  namespace,
		flowId:     flowId,
		tenant:     tenant,
	}
}

// Execute executes the request
//
//	@return []string
func (a *MetricsAPIService) ListTasksWithMetricsExecute(r ApiListTasksWithMetricsRequest) ([]string, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetricsAPIService.ListTasksWithMetrics")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/{tenant}/metrics/tasks/{namespace}/{flowId}"
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterValueToString(r.namespace, "namespace")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"flowId"+"}", url.PathEscape(parameterValueToString(r.flowId, "flowId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tenant"+"}", url.PathEscape(parameterValueToString(r.tenant, "tenant")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSearchByExecutionRequest struct {
	ctx         context.Context
	ApiService  *MetricsAPIService
	page        *int32
	size        *int32
	executionId string
	tenant      string
	sort        *[]string
	taskRunId   *string
	taskId      *string
}

// The current page
func (r ApiSearchByExecutionRequest) Page(page int32) ApiSearchByExecutionRequest {
	r.page = &page
	return r
}

// The current page size
func (r ApiSearchByExecutionRequest) Size(size int32) ApiSearchByExecutionRequest {
	r.size = &size
	return r
}

// The sort of current page
func (r ApiSearchByExecutionRequest) Sort(sort []string) ApiSearchByExecutionRequest {
	r.sort = &sort
	return r
}

// The taskrun id
func (r ApiSearchByExecutionRequest) TaskRunId(taskRunId string) ApiSearchByExecutionRequest {
	r.taskRunId = &taskRunId
	return r
}

// The task id
func (r ApiSearchByExecutionRequest) TaskId(taskId string) ApiSearchByExecutionRequest {
	r.taskId = &taskId
	return r
}

func (r ApiSearchByExecutionRequest) Execute() (*PagedResultsMetricEntry, *http.Response, error) {
	return r.ApiService.SearchByExecutionExecute(r)
}

/*
SearchByExecution Get metrics for a specific execution

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param executionId The execution id
	@param tenant
	@return ApiSearchByExecutionRequest
*/
func (a *MetricsAPIService) SearchByExecution(ctx context.Context, executionId string, tenant string) ApiSearchByExecutionRequest {
	return ApiSearchByExecutionRequest{
		ApiService:  a,
		ctx:         ctx,
		executionId: executionId,
		tenant:      tenant,
	}
}

// Execute executes the request
//
//	@return PagedResultsMetricEntry
func (a *MetricsAPIService) SearchByExecutionExecute(r ApiSearchByExecutionRequest) (*PagedResultsMetricEntry, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PagedResultsMetricEntry
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetricsAPIService.SearchByExecution")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/{tenant}/metrics/{executionId}"
	localVarPath = strings.Replace(localVarPath, "{"+"executionId"+"}", url.PathEscape(parameterValueToString(r.executionId, "executionId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tenant"+"}", url.PathEscape(parameterValueToString(r.tenant, "tenant")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.page == nil {
		return localVarReturnValue, nil, reportError("page is required and must be specified")
	}
	if *r.page < 1 {
		return localVarReturnValue, nil, reportError("page must be greater than 1")
	}
	if r.size == nil {
		return localVarReturnValue, nil, reportError("size is required and must be specified")
	}
	if *r.size < 1 {
		return localVarReturnValue, nil, reportError("size must be greater than 1")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "form", "")
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "csv")
	}
	if r.taskRunId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "taskRunId", r.taskRunId, "form", "")
	}
	if r.taskId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "taskId", r.taskId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
