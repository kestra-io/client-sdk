/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
)

// ServerInstanceType the model 'ServerInstanceType'
type ServerInstanceType string

// List of ServerInstance.Type
const (
	SERVERINSTANCETYPE_SERVER     ServerInstanceType = "SERVER"
	SERVERINSTANCETYPE_STANDALONE ServerInstanceType = "STANDALONE"
)

// All allowed values of ServerInstanceType enum
var AllowedServerInstanceTypeEnumValues = []ServerInstanceType{
	"SERVER",
	"STANDALONE",
}

func (v *ServerInstanceType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ServerInstanceType(value)
	for _, existing := range AllowedServerInstanceTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ServerInstanceType", value)
}

// NewServerInstanceTypeFromValue returns a pointer to a valid ServerInstanceType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewServerInstanceTypeFromValue(v string) (*ServerInstanceType, error) {
	ev := ServerInstanceType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ServerInstanceType: valid values are %v", v, AllowedServerInstanceTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ServerInstanceType) IsValid() bool {
	for _, existing := range AllowedServerInstanceTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ServerInstance.Type value
func (v ServerInstanceType) Ptr() *ServerInstanceType {
	return &v
}

type NullableServerInstanceType struct {
	value *ServerInstanceType
	isSet bool
}

func (v NullableServerInstanceType) Get() *ServerInstanceType {
	return v.value
}

func (v *NullableServerInstanceType) Set(val *ServerInstanceType) {
	v.value = val
	v.isSet = true
}

func (v NullableServerInstanceType) IsSet() bool {
	return v.isSet
}

func (v *NullableServerInstanceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerInstanceType(val *ServerInstanceType) *NullableServerInstanceType {
	return &NullableServerInstanceType{value: val, isSet: true}
}

func (v NullableServerInstanceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerInstanceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
