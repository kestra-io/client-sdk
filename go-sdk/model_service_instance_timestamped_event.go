/*
Kestra EE

All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"time"
)

// checks if the ServiceInstanceTimestampedEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServiceInstanceTimestampedEvent{}

// ServiceInstanceTimestampedEvent struct for ServiceInstanceTimestampedEvent
type ServiceInstanceTimestampedEvent struct {
	Ts    *time.Time           `json:"ts,omitempty"`
	Value *string              `json:"value,omitempty"`
	Type  *string              `json:"type,omitempty"`
	State *ServiceServiceState `json:"state,omitempty"`
}

// NewServiceInstanceTimestampedEvent instantiates a new ServiceInstanceTimestampedEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceInstanceTimestampedEvent() *ServiceInstanceTimestampedEvent {
	this := ServiceInstanceTimestampedEvent{}
	return &this
}

// NewServiceInstanceTimestampedEventWithDefaults instantiates a new ServiceInstanceTimestampedEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceInstanceTimestampedEventWithDefaults() *ServiceInstanceTimestampedEvent {
	this := ServiceInstanceTimestampedEvent{}
	return &this
}

// GetTs returns the Ts field value if set, zero value otherwise.
func (o *ServiceInstanceTimestampedEvent) GetTs() time.Time {
	if o == nil || IsNil(o.Ts) {
		var ret time.Time
		return ret
	}
	return *o.Ts
}

// GetTsOk returns a tuple with the Ts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceInstanceTimestampedEvent) GetTsOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Ts) {
		return nil, false
	}
	return o.Ts, true
}

// HasTs returns a boolean if a field has been set.
func (o *ServiceInstanceTimestampedEvent) HasTs() bool {
	if o != nil && !IsNil(o.Ts) {
		return true
	}

	return false
}

// SetTs gets a reference to the given time.Time and assigns it to the Ts field.
func (o *ServiceInstanceTimestampedEvent) SetTs(v time.Time) {
	o.Ts = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *ServiceInstanceTimestampedEvent) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceInstanceTimestampedEvent) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *ServiceInstanceTimestampedEvent) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *ServiceInstanceTimestampedEvent) SetValue(v string) {
	o.Value = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ServiceInstanceTimestampedEvent) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceInstanceTimestampedEvent) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ServiceInstanceTimestampedEvent) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ServiceInstanceTimestampedEvent) SetType(v string) {
	o.Type = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *ServiceInstanceTimestampedEvent) GetState() ServiceServiceState {
	if o == nil || IsNil(o.State) {
		var ret ServiceServiceState
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceInstanceTimestampedEvent) GetStateOk() (*ServiceServiceState, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *ServiceInstanceTimestampedEvent) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given ServiceServiceState and assigns it to the State field.
func (o *ServiceInstanceTimestampedEvent) SetState(v ServiceServiceState) {
	o.State = &v
}

func (o ServiceInstanceTimestampedEvent) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServiceInstanceTimestampedEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ts) {
		toSerialize["ts"] = o.Ts
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	return toSerialize, nil
}

type NullableServiceInstanceTimestampedEvent struct {
	value *ServiceInstanceTimestampedEvent
	isSet bool
}

func (v NullableServiceInstanceTimestampedEvent) Get() *ServiceInstanceTimestampedEvent {
	return v.value
}

func (v *NullableServiceInstanceTimestampedEvent) Set(val *ServiceInstanceTimestampedEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceInstanceTimestampedEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceInstanceTimestampedEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceInstanceTimestampedEvent(val *ServiceInstanceTimestampedEvent) *NullableServiceInstanceTimestampedEvent {
	return &NullableServiceInstanceTimestampedEvent{value: val, isSet: true}
}

func (v NullableServiceInstanceTimestampedEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceInstanceTimestampedEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
