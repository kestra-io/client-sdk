/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
)

// checks if the IAMInvitationControllerApiInvitationRole type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IAMInvitationControllerApiInvitationRole{}

// IAMInvitationControllerApiInvitationRole struct for IAMInvitationControllerApiInvitationRole
type IAMInvitationControllerApiInvitationRole struct {
	Id                   string   `json:"id"`
	Namespaces           []string `json:"namespaces"`
	AdditionalProperties map[string]interface{}
}

type _IAMInvitationControllerApiInvitationRole IAMInvitationControllerApiInvitationRole

// NewIAMInvitationControllerApiInvitationRole instantiates a new IAMInvitationControllerApiInvitationRole object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIAMInvitationControllerApiInvitationRole(id string, namespaces []string) *IAMInvitationControllerApiInvitationRole {
	this := IAMInvitationControllerApiInvitationRole{}
	this.Id = id
	this.Namespaces = namespaces
	return &this
}

// NewIAMInvitationControllerApiInvitationRoleWithDefaults instantiates a new IAMInvitationControllerApiInvitationRole object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIAMInvitationControllerApiInvitationRoleWithDefaults() *IAMInvitationControllerApiInvitationRole {
	this := IAMInvitationControllerApiInvitationRole{}
	return &this
}

// GetId returns the Id field value
func (o *IAMInvitationControllerApiInvitationRole) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *IAMInvitationControllerApiInvitationRole) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *IAMInvitationControllerApiInvitationRole) SetId(v string) {
	o.Id = v
}

// GetNamespaces returns the Namespaces field value
func (o *IAMInvitationControllerApiInvitationRole) GetNamespaces() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Namespaces
}

// GetNamespacesOk returns a tuple with the Namespaces field value
// and a boolean to check if the value has been set.
func (o *IAMInvitationControllerApiInvitationRole) GetNamespacesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Namespaces, true
}

// SetNamespaces sets field value
func (o *IAMInvitationControllerApiInvitationRole) SetNamespaces(v []string) {
	o.Namespaces = v
}

func (o IAMInvitationControllerApiInvitationRole) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IAMInvitationControllerApiInvitationRole) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["namespaces"] = o.Namespaces

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *IAMInvitationControllerApiInvitationRole) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"namespaces",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIAMInvitationControllerApiInvitationRole := _IAMInvitationControllerApiInvitationRole{}

	err = json.Unmarshal(data, &varIAMInvitationControllerApiInvitationRole)

	if err != nil {
		return err
	}

	*o = IAMInvitationControllerApiInvitationRole(varIAMInvitationControllerApiInvitationRole)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "namespaces")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIAMInvitationControllerApiInvitationRole struct {
	value *IAMInvitationControllerApiInvitationRole
	isSet bool
}

func (v NullableIAMInvitationControllerApiInvitationRole) Get() *IAMInvitationControllerApiInvitationRole {
	return v.value
}

func (v *NullableIAMInvitationControllerApiInvitationRole) Set(val *IAMInvitationControllerApiInvitationRole) {
	v.value = val
	v.isSet = true
}

func (v NullableIAMInvitationControllerApiInvitationRole) IsSet() bool {
	return v.isSet
}

func (v *NullableIAMInvitationControllerApiInvitationRole) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIAMInvitationControllerApiInvitationRole(val *IAMInvitationControllerApiInvitationRole) *NullableIAMInvitationControllerApiInvitationRole {
	return &NullableIAMInvitationControllerApiInvitationRole{value: val, isSet: true}
}

func (v NullableIAMInvitationControllerApiInvitationRole) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIAMInvitationControllerApiInvitationRole) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
