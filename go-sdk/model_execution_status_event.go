/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
)

// checks if the ExecutionStatusEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExecutionStatusEvent{}

// ExecutionStatusEvent struct for ExecutionStatusEvent
type ExecutionStatusEvent struct {
	ExecutionId          *string `json:"executionId,omitempty"`
	TenantId             *string `json:"tenantId,omitempty"`
	Namespace            *string `json:"namespace,omitempty"`
	FlowId               *string `json:"flowId,omitempty"`
	State                *State  `json:"state,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ExecutionStatusEvent ExecutionStatusEvent

// NewExecutionStatusEvent instantiates a new ExecutionStatusEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExecutionStatusEvent() *ExecutionStatusEvent {
	this := ExecutionStatusEvent{}
	return &this
}

// NewExecutionStatusEventWithDefaults instantiates a new ExecutionStatusEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExecutionStatusEventWithDefaults() *ExecutionStatusEvent {
	this := ExecutionStatusEvent{}
	return &this
}

// GetExecutionId returns the ExecutionId field value if set, zero value otherwise.
func (o *ExecutionStatusEvent) GetExecutionId() string {
	if o == nil || IsNil(o.ExecutionId) {
		var ret string
		return ret
	}
	return *o.ExecutionId
}

// GetExecutionIdOk returns a tuple with the ExecutionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionStatusEvent) GetExecutionIdOk() (*string, bool) {
	if o == nil || IsNil(o.ExecutionId) {
		return nil, false
	}
	return o.ExecutionId, true
}

// HasExecutionId returns a boolean if a field has been set.
func (o *ExecutionStatusEvent) HasExecutionId() bool {
	if o != nil && !IsNil(o.ExecutionId) {
		return true
	}

	return false
}

// SetExecutionId gets a reference to the given string and assigns it to the ExecutionId field.
func (o *ExecutionStatusEvent) SetExecutionId(v string) {
	o.ExecutionId = &v
}

// GetTenantId returns the TenantId field value if set, zero value otherwise.
func (o *ExecutionStatusEvent) GetTenantId() string {
	if o == nil || IsNil(o.TenantId) {
		var ret string
		return ret
	}
	return *o.TenantId
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionStatusEvent) GetTenantIdOk() (*string, bool) {
	if o == nil || IsNil(o.TenantId) {
		return nil, false
	}
	return o.TenantId, true
}

// HasTenantId returns a boolean if a field has been set.
func (o *ExecutionStatusEvent) HasTenantId() bool {
	if o != nil && !IsNil(o.TenantId) {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given string and assigns it to the TenantId field.
func (o *ExecutionStatusEvent) SetTenantId(v string) {
	o.TenantId = &v
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *ExecutionStatusEvent) GetNamespace() string {
	if o == nil || IsNil(o.Namespace) {
		var ret string
		return ret
	}
	return *o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionStatusEvent) GetNamespaceOk() (*string, bool) {
	if o == nil || IsNil(o.Namespace) {
		return nil, false
	}
	return o.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *ExecutionStatusEvent) HasNamespace() bool {
	if o != nil && !IsNil(o.Namespace) {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the Namespace field.
func (o *ExecutionStatusEvent) SetNamespace(v string) {
	o.Namespace = &v
}

// GetFlowId returns the FlowId field value if set, zero value otherwise.
func (o *ExecutionStatusEvent) GetFlowId() string {
	if o == nil || IsNil(o.FlowId) {
		var ret string
		return ret
	}
	return *o.FlowId
}

// GetFlowIdOk returns a tuple with the FlowId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionStatusEvent) GetFlowIdOk() (*string, bool) {
	if o == nil || IsNil(o.FlowId) {
		return nil, false
	}
	return o.FlowId, true
}

// HasFlowId returns a boolean if a field has been set.
func (o *ExecutionStatusEvent) HasFlowId() bool {
	if o != nil && !IsNil(o.FlowId) {
		return true
	}

	return false
}

// SetFlowId gets a reference to the given string and assigns it to the FlowId field.
func (o *ExecutionStatusEvent) SetFlowId(v string) {
	o.FlowId = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *ExecutionStatusEvent) GetState() State {
	if o == nil || IsNil(o.State) {
		var ret State
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionStatusEvent) GetStateOk() (*State, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *ExecutionStatusEvent) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given State and assigns it to the State field.
func (o *ExecutionStatusEvent) SetState(v State) {
	o.State = &v
}

func (o ExecutionStatusEvent) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExecutionStatusEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ExecutionId) {
		toSerialize["executionId"] = o.ExecutionId
	}
	if !IsNil(o.TenantId) {
		toSerialize["tenantId"] = o.TenantId
	}
	if !IsNil(o.Namespace) {
		toSerialize["namespace"] = o.Namespace
	}
	if !IsNil(o.FlowId) {
		toSerialize["flowId"] = o.FlowId
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ExecutionStatusEvent) UnmarshalJSON(data []byte) (err error) {
	varExecutionStatusEvent := _ExecutionStatusEvent{}

	err = json.Unmarshal(data, &varExecutionStatusEvent)

	if err != nil {
		return err
	}

	*o = ExecutionStatusEvent(varExecutionStatusEvent)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "executionId")
		delete(additionalProperties, "tenantId")
		delete(additionalProperties, "namespace")
		delete(additionalProperties, "flowId")
		delete(additionalProperties, "state")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableExecutionStatusEvent struct {
	value *ExecutionStatusEvent
	isSet bool
}

func (v NullableExecutionStatusEvent) Get() *ExecutionStatusEvent {
	return v.value
}

func (v *NullableExecutionStatusEvent) Set(val *ExecutionStatusEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableExecutionStatusEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableExecutionStatusEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExecutionStatusEvent(val *ExecutionStatusEvent) *NullableExecutionStatusEvent {
	return &NullableExecutionStatusEvent{value: val, isSet: true}
}

func (v NullableExecutionStatusEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExecutionStatusEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
