/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
)

// checks if the ExecutionStatusEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExecutionStatusEvent{}

// ExecutionStatusEvent struct for ExecutionStatusEvent
type ExecutionStatusEvent struct {
	ExecutionId          string `json:"executionId"`
	TenantId             string `json:"tenantId"`
	Namespace            string `json:"namespace"`
	FlowId               string `json:"flowId"`
	State                State  `json:"state"`
	AdditionalProperties map[string]interface{}
}

type _ExecutionStatusEvent ExecutionStatusEvent

// NewExecutionStatusEvent instantiates a new ExecutionStatusEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExecutionStatusEvent(executionId string, tenantId string, namespace string, flowId string, state State) *ExecutionStatusEvent {
	this := ExecutionStatusEvent{}
	this.ExecutionId = executionId
	this.TenantId = tenantId
	this.Namespace = namespace
	this.FlowId = flowId
	this.State = state
	return &this
}

// NewExecutionStatusEventWithDefaults instantiates a new ExecutionStatusEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExecutionStatusEventWithDefaults() *ExecutionStatusEvent {
	this := ExecutionStatusEvent{}
	return &this
}

// GetExecutionId returns the ExecutionId field value
func (o *ExecutionStatusEvent) GetExecutionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExecutionId
}

// GetExecutionIdOk returns a tuple with the ExecutionId field value
// and a boolean to check if the value has been set.
func (o *ExecutionStatusEvent) GetExecutionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExecutionId, true
}

// SetExecutionId sets field value
func (o *ExecutionStatusEvent) SetExecutionId(v string) {
	o.ExecutionId = v
}

// GetTenantId returns the TenantId field value
func (o *ExecutionStatusEvent) GetTenantId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TenantId
}

// GetTenantIdOk returns a tuple with the TenantId field value
// and a boolean to check if the value has been set.
func (o *ExecutionStatusEvent) GetTenantIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TenantId, true
}

// SetTenantId sets field value
func (o *ExecutionStatusEvent) SetTenantId(v string) {
	o.TenantId = v
}

// GetNamespace returns the Namespace field value
func (o *ExecutionStatusEvent) GetNamespace() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value
// and a boolean to check if the value has been set.
func (o *ExecutionStatusEvent) GetNamespaceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Namespace, true
}

// SetNamespace sets field value
func (o *ExecutionStatusEvent) SetNamespace(v string) {
	o.Namespace = v
}

// GetFlowId returns the FlowId field value
func (o *ExecutionStatusEvent) GetFlowId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FlowId
}

// GetFlowIdOk returns a tuple with the FlowId field value
// and a boolean to check if the value has been set.
func (o *ExecutionStatusEvent) GetFlowIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FlowId, true
}

// SetFlowId sets field value
func (o *ExecutionStatusEvent) SetFlowId(v string) {
	o.FlowId = v
}

// GetState returns the State field value
func (o *ExecutionStatusEvent) GetState() State {
	if o == nil {
		var ret State
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *ExecutionStatusEvent) GetStateOk() (*State, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *ExecutionStatusEvent) SetState(v State) {
	o.State = v
}

func (o ExecutionStatusEvent) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExecutionStatusEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["executionId"] = o.ExecutionId
	toSerialize["tenantId"] = o.TenantId
	toSerialize["namespace"] = o.Namespace
	toSerialize["flowId"] = o.FlowId
	toSerialize["state"] = o.State

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ExecutionStatusEvent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"executionId",
		"tenantId",
		"namespace",
		"flowId",
		"state",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varExecutionStatusEvent := _ExecutionStatusEvent{}

	err = json.Unmarshal(data, &varExecutionStatusEvent)

	if err != nil {
		return err
	}

	*o = ExecutionStatusEvent(varExecutionStatusEvent)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "executionId")
		delete(additionalProperties, "tenantId")
		delete(additionalProperties, "namespace")
		delete(additionalProperties, "flowId")
		delete(additionalProperties, "state")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableExecutionStatusEvent struct {
	value *ExecutionStatusEvent
	isSet bool
}

func (v NullableExecutionStatusEvent) Get() *ExecutionStatusEvent {
	return v.value
}

func (v *NullableExecutionStatusEvent) Set(val *ExecutionStatusEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableExecutionStatusEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableExecutionStatusEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExecutionStatusEvent(val *ExecutionStatusEvent) *NullableExecutionStatusEvent {
	return &NullableExecutionStatusEvent{value: val, isSet: true}
}

func (v NullableExecutionStatusEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExecutionStatusEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
