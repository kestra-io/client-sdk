/*
Kestra EE

All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
)

// WorkerTaskRestartStrategy the model 'WorkerTaskRestartStrategy'
type WorkerTaskRestartStrategy string

// List of WorkerTaskRestartStrategy
const (
	WORKERTASKRESTARTSTRATEGY_NEVER                          WorkerTaskRestartStrategy = "NEVER"
	WORKERTASKRESTARTSTRATEGY_IMMEDIATELY                    WorkerTaskRestartStrategy = "IMMEDIATELY"
	WORKERTASKRESTARTSTRATEGY_AFTER_TERMINATION_GRACE_PERIOD WorkerTaskRestartStrategy = "AFTER_TERMINATION_GRACE_PERIOD"
)

// All allowed values of WorkerTaskRestartStrategy enum
var AllowedWorkerTaskRestartStrategyEnumValues = []WorkerTaskRestartStrategy{
	"NEVER",
	"IMMEDIATELY",
	"AFTER_TERMINATION_GRACE_PERIOD",
}

func (v *WorkerTaskRestartStrategy) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WorkerTaskRestartStrategy(value)
	for _, existing := range AllowedWorkerTaskRestartStrategyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WorkerTaskRestartStrategy", value)
}

// NewWorkerTaskRestartStrategyFromValue returns a pointer to a valid WorkerTaskRestartStrategy
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWorkerTaskRestartStrategyFromValue(v string) (*WorkerTaskRestartStrategy, error) {
	ev := WorkerTaskRestartStrategy(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WorkerTaskRestartStrategy: valid values are %v", v, AllowedWorkerTaskRestartStrategyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WorkerTaskRestartStrategy) IsValid() bool {
	for _, existing := range AllowedWorkerTaskRestartStrategyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to WorkerTaskRestartStrategy value
func (v WorkerTaskRestartStrategy) Ptr() *WorkerTaskRestartStrategy {
	return &v
}

type NullableWorkerTaskRestartStrategy struct {
	value *WorkerTaskRestartStrategy
	isSet bool
}

func (v NullableWorkerTaskRestartStrategy) Get() *WorkerTaskRestartStrategy {
	return v.value
}

func (v *NullableWorkerTaskRestartStrategy) Set(val *WorkerTaskRestartStrategy) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkerTaskRestartStrategy) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkerTaskRestartStrategy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkerTaskRestartStrategy(val *WorkerTaskRestartStrategy) *NullableWorkerTaskRestartStrategy {
	return &NullableWorkerTaskRestartStrategy{value: val, isSet: true}
}

func (v NullableWorkerTaskRestartStrategy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkerTaskRestartStrategy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
