/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
)

// checks if the QueryFilterFieldOp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QueryFilterFieldOp{}

// QueryFilterFieldOp struct for QueryFilterFieldOp
type QueryFilterFieldOp struct {
	Name                 string                 `json:"name"`
	Value                string                 `json:"value"`
	Operations           []QueryFilterOperation `json:"operations"`
	AdditionalProperties map[string]interface{}
}

type _QueryFilterFieldOp QueryFilterFieldOp

// NewQueryFilterFieldOp instantiates a new QueryFilterFieldOp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQueryFilterFieldOp(name string, value string, operations []QueryFilterOperation) *QueryFilterFieldOp {
	this := QueryFilterFieldOp{}
	this.Name = name
	this.Value = value
	this.Operations = operations
	return &this
}

// NewQueryFilterFieldOpWithDefaults instantiates a new QueryFilterFieldOp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQueryFilterFieldOpWithDefaults() *QueryFilterFieldOp {
	this := QueryFilterFieldOp{}
	return &this
}

// GetName returns the Name field value
func (o *QueryFilterFieldOp) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *QueryFilterFieldOp) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *QueryFilterFieldOp) SetName(v string) {
	o.Name = v
}

// GetValue returns the Value field value
func (o *QueryFilterFieldOp) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *QueryFilterFieldOp) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *QueryFilterFieldOp) SetValue(v string) {
	o.Value = v
}

// GetOperations returns the Operations field value
func (o *QueryFilterFieldOp) GetOperations() []QueryFilterOperation {
	if o == nil {
		var ret []QueryFilterOperation
		return ret
	}

	return o.Operations
}

// GetOperationsOk returns a tuple with the Operations field value
// and a boolean to check if the value has been set.
func (o *QueryFilterFieldOp) GetOperationsOk() ([]QueryFilterOperation, bool) {
	if o == nil {
		return nil, false
	}
	return o.Operations, true
}

// SetOperations sets field value
func (o *QueryFilterFieldOp) SetOperations(v []QueryFilterOperation) {
	o.Operations = v
}

func (o QueryFilterFieldOp) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QueryFilterFieldOp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["value"] = o.Value
	toSerialize["operations"] = o.Operations

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *QueryFilterFieldOp) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"value",
		"operations",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varQueryFilterFieldOp := _QueryFilterFieldOp{}

	err = json.Unmarshal(data, &varQueryFilterFieldOp)

	if err != nil {
		return err
	}

	*o = QueryFilterFieldOp(varQueryFilterFieldOp)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "value")
		delete(additionalProperties, "operations")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableQueryFilterFieldOp struct {
	value *QueryFilterFieldOp
	isSet bool
}

func (v NullableQueryFilterFieldOp) Get() *QueryFilterFieldOp {
	return v.value
}

func (v *NullableQueryFilterFieldOp) Set(val *QueryFilterFieldOp) {
	v.value = val
	v.isSet = true
}

func (v NullableQueryFilterFieldOp) IsSet() bool {
	return v.isSet
}

func (v *NullableQueryFilterFieldOp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQueryFilterFieldOp(val *QueryFilterFieldOp) *NullableQueryFilterFieldOp {
	return &NullableQueryFilterFieldOp{value: val, isSet: true}
}

func (v NullableQueryFilterFieldOp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQueryFilterFieldOp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
