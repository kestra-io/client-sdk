/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
)

// checks if the QueryFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QueryFilter{}

// QueryFilter struct for QueryFilter
type QueryFilter struct {
	Field                QueryFilterField       `json:"field"`
	Operation            QueryFilterOp          `json:"operation"`
	Value                map[string]interface{} `json:"value"`
	AdditionalProperties map[string]interface{}
}

type _QueryFilter QueryFilter

// NewQueryFilter instantiates a new QueryFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQueryFilter(field QueryFilterField, operation QueryFilterOp, value map[string]interface{}) *QueryFilter {
	this := QueryFilter{}
	this.Field = field
	this.Operation = operation
	this.Value = value
	return &this
}

// NewQueryFilterWithDefaults instantiates a new QueryFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQueryFilterWithDefaults() *QueryFilter {
	this := QueryFilter{}
	return &this
}

// GetField returns the Field field value
func (o *QueryFilter) GetField() QueryFilterField {
	if o == nil {
		var ret QueryFilterField
		return ret
	}

	return o.Field
}

// GetFieldOk returns a tuple with the Field field value
// and a boolean to check if the value has been set.
func (o *QueryFilter) GetFieldOk() (*QueryFilterField, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Field, true
}

// SetField sets field value
func (o *QueryFilter) SetField(v QueryFilterField) {
	o.Field = v
}

// GetOperation returns the Operation field value
func (o *QueryFilter) GetOperation() QueryFilterOp {
	if o == nil {
		var ret QueryFilterOp
		return ret
	}

	return o.Operation
}

// GetOperationOk returns a tuple with the Operation field value
// and a boolean to check if the value has been set.
func (o *QueryFilter) GetOperationOk() (*QueryFilterOp, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Operation, true
}

// SetOperation sets field value
func (o *QueryFilter) SetOperation(v QueryFilterOp) {
	o.Operation = v
}

// GetValue returns the Value field value
func (o *QueryFilter) GetValue() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *QueryFilter) GetValueOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Value, true
}

// SetValue sets field value
func (o *QueryFilter) SetValue(v map[string]interface{}) {
	o.Value = v
}

func (o QueryFilter) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QueryFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["field"] = o.Field
	toSerialize["operation"] = o.Operation
	toSerialize["value"] = o.Value

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *QueryFilter) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"field",
		"operation",
		"value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varQueryFilter := _QueryFilter{}

	err = json.Unmarshal(data, &varQueryFilter)

	if err != nil {
		return err
	}

	*o = QueryFilter(varQueryFilter)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "field")
		delete(additionalProperties, "operation")
		delete(additionalProperties, "value")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableQueryFilter struct {
	value *QueryFilter
	isSet bool
}

func (v NullableQueryFilter) Get() *QueryFilter {
	return v.value
}

func (v *NullableQueryFilter) Set(val *QueryFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableQueryFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableQueryFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQueryFilter(val *QueryFilter) *NullableQueryFilter {
	return &NullableQueryFilter{value: val, isSet: true}
}

func (v NullableQueryFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQueryFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
