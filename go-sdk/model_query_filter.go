/*
Kestra EE

All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
)

// checks if the QueryFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QueryFilter{}

// QueryFilter struct for QueryFilter
type QueryFilter struct {
	Field     *QueryFilterField      `json:"field,omitempty"`
	Operation *QueryFilterOp         `json:"operation,omitempty"`
	Value     map[string]interface{} `json:"value,omitempty"`
}

// NewQueryFilter instantiates a new QueryFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQueryFilter() *QueryFilter {
	this := QueryFilter{}
	return &this
}

// NewQueryFilterWithDefaults instantiates a new QueryFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQueryFilterWithDefaults() *QueryFilter {
	this := QueryFilter{}
	return &this
}

// GetField returns the Field field value if set, zero value otherwise.
func (o *QueryFilter) GetField() QueryFilterField {
	if o == nil || IsNil(o.Field) {
		var ret QueryFilterField
		return ret
	}
	return *o.Field
}

// GetFieldOk returns a tuple with the Field field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryFilter) GetFieldOk() (*QueryFilterField, bool) {
	if o == nil || IsNil(o.Field) {
		return nil, false
	}
	return o.Field, true
}

// HasField returns a boolean if a field has been set.
func (o *QueryFilter) HasField() bool {
	if o != nil && !IsNil(o.Field) {
		return true
	}

	return false
}

// SetField gets a reference to the given QueryFilterField and assigns it to the Field field.
func (o *QueryFilter) SetField(v QueryFilterField) {
	o.Field = &v
}

// GetOperation returns the Operation field value if set, zero value otherwise.
func (o *QueryFilter) GetOperation() QueryFilterOp {
	if o == nil || IsNil(o.Operation) {
		var ret QueryFilterOp
		return ret
	}
	return *o.Operation
}

// GetOperationOk returns a tuple with the Operation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryFilter) GetOperationOk() (*QueryFilterOp, bool) {
	if o == nil || IsNil(o.Operation) {
		return nil, false
	}
	return o.Operation, true
}

// HasOperation returns a boolean if a field has been set.
func (o *QueryFilter) HasOperation() bool {
	if o != nil && !IsNil(o.Operation) {
		return true
	}

	return false
}

// SetOperation gets a reference to the given QueryFilterOp and assigns it to the Operation field.
func (o *QueryFilter) SetOperation(v QueryFilterOp) {
	o.Operation = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *QueryFilter) GetValue() map[string]interface{} {
	if o == nil || IsNil(o.Value) {
		var ret map[string]interface{}
		return ret
	}
	return o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryFilter) GetValueOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Value) {
		return map[string]interface{}{}, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *QueryFilter) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given map[string]interface{} and assigns it to the Value field.
func (o *QueryFilter) SetValue(v map[string]interface{}) {
	o.Value = v
}

func (o QueryFilter) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QueryFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Field) {
		toSerialize["field"] = o.Field
	}
	if !IsNil(o.Operation) {
		toSerialize["operation"] = o.Operation
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableQueryFilter struct {
	value *QueryFilter
	isSet bool
}

func (v NullableQueryFilter) Get() *QueryFilter {
	return v.value
}

func (v *NullableQueryFilter) Set(val *QueryFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableQueryFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableQueryFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQueryFilter(val *QueryFilter) *NullableQueryFilter {
	return &NullableQueryFilter{value: val, isSet: true}
}

func (v NullableQueryFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQueryFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
