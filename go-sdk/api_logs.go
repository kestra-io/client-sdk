/*
Kestra EE

All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"os"
	"strings"
	"time"
)

// LogsAPIService LogsAPI service
type LogsAPIService service

type ApiDeleteLogsFromExecutionRequest struct {
	ctx         context.Context
	ApiService  *LogsAPIService
	executionId string
	tenant      string
	minLevel    *Level
	taskRunId   *string
	taskId      *string
	attempt     *int32
}

// The min log level filter
func (r ApiDeleteLogsFromExecutionRequest) MinLevel(minLevel Level) ApiDeleteLogsFromExecutionRequest {
	r.minLevel = &minLevel
	return r
}

// The taskrun id
func (r ApiDeleteLogsFromExecutionRequest) TaskRunId(taskRunId string) ApiDeleteLogsFromExecutionRequest {
	r.taskRunId = &taskRunId
	return r
}

// The task id
func (r ApiDeleteLogsFromExecutionRequest) TaskId(taskId string) ApiDeleteLogsFromExecutionRequest {
	r.taskId = &taskId
	return r
}

// The attempt number
func (r ApiDeleteLogsFromExecutionRequest) Attempt(attempt int32) ApiDeleteLogsFromExecutionRequest {
	r.attempt = &attempt
	return r
}

func (r ApiDeleteLogsFromExecutionRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteLogsFromExecutionExecute(r)
}

/*
DeleteLogsFromExecution Delete logs for a specific execution, taskrun or task

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param executionId The execution id
	@param tenant
	@return ApiDeleteLogsFromExecutionRequest
*/
func (a *LogsAPIService) DeleteLogsFromExecution(ctx context.Context, executionId string, tenant string) ApiDeleteLogsFromExecutionRequest {
	return ApiDeleteLogsFromExecutionRequest{
		ApiService:  a,
		ctx:         ctx,
		executionId: executionId,
		tenant:      tenant,
	}
}

// Execute executes the request
func (a *LogsAPIService) DeleteLogsFromExecutionExecute(r ApiDeleteLogsFromExecutionRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LogsAPIService.DeleteLogsFromExecution")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/{tenant}/logs/{executionId}"
	localVarPath = strings.Replace(localVarPath, "{"+"executionId"+"}", url.PathEscape(parameterValueToString(r.executionId, "executionId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tenant"+"}", url.PathEscape(parameterValueToString(r.tenant, "tenant")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.minLevel != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minLevel", r.minLevel, "form", "")
	}
	if r.taskRunId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "taskRunId", r.taskRunId, "form", "")
	}
	if r.taskId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "taskId", r.taskId, "form", "")
	}
	if r.attempt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "attempt", r.attempt, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteLogsFromFlowRequest struct {
	ctx        context.Context
	ApiService *LogsAPIService
	namespace  string
	flowId     string
	triggerId  *string
	tenant     string
}

// The trigger id
func (r ApiDeleteLogsFromFlowRequest) TriggerId(triggerId string) ApiDeleteLogsFromFlowRequest {
	r.triggerId = &triggerId
	return r
}

func (r ApiDeleteLogsFromFlowRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteLogsFromFlowExecute(r)
}

/*
DeleteLogsFromFlow Delete logs for a specific execution, taskrun or task

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param namespace The namespace
	@param flowId The flow identifier
	@param tenant
	@return ApiDeleteLogsFromFlowRequest
*/
func (a *LogsAPIService) DeleteLogsFromFlow(ctx context.Context, namespace string, flowId string, tenant string) ApiDeleteLogsFromFlowRequest {
	return ApiDeleteLogsFromFlowRequest{
		ApiService: a,
		ctx:        ctx,
		namespace:  namespace,
		flowId:     flowId,
		tenant:     tenant,
	}
}

// Execute executes the request
func (a *LogsAPIService) DeleteLogsFromFlowExecute(r ApiDeleteLogsFromFlowRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LogsAPIService.DeleteLogsFromFlow")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/{tenant}/logs/{namespace}/{flowId}"
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterValueToString(r.namespace, "namespace")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"flowId"+"}", url.PathEscape(parameterValueToString(r.flowId, "flowId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tenant"+"}", url.PathEscape(parameterValueToString(r.tenant, "tenant")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.triggerId == nil {
		return nil, reportError("triggerId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "triggerId", r.triggerId, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDownloadLogsFromExecutionRequest struct {
	ctx         context.Context
	ApiService  *LogsAPIService
	executionId string
	tenant      string
	minLevel    *Level
	taskRunId   *string
	taskId      *string
	attempt     *int32
}

// The min log level filter
func (r ApiDownloadLogsFromExecutionRequest) MinLevel(minLevel Level) ApiDownloadLogsFromExecutionRequest {
	r.minLevel = &minLevel
	return r
}

// The taskrun id
func (r ApiDownloadLogsFromExecutionRequest) TaskRunId(taskRunId string) ApiDownloadLogsFromExecutionRequest {
	r.taskRunId = &taskRunId
	return r
}

// The task id
func (r ApiDownloadLogsFromExecutionRequest) TaskId(taskId string) ApiDownloadLogsFromExecutionRequest {
	r.taskId = &taskId
	return r
}

// The attempt number
func (r ApiDownloadLogsFromExecutionRequest) Attempt(attempt int32) ApiDownloadLogsFromExecutionRequest {
	r.attempt = &attempt
	return r
}

func (r ApiDownloadLogsFromExecutionRequest) Execute() (*os.File, *http.Response, error) {
	return r.ApiService.DownloadLogsFromExecutionExecute(r)
}

/*
DownloadLogsFromExecution Download logs for a specific execution, taskrun or task

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param executionId The execution id
	@param tenant
	@return ApiDownloadLogsFromExecutionRequest
*/
func (a *LogsAPIService) DownloadLogsFromExecution(ctx context.Context, executionId string, tenant string) ApiDownloadLogsFromExecutionRequest {
	return ApiDownloadLogsFromExecutionRequest{
		ApiService:  a,
		ctx:         ctx,
		executionId: executionId,
		tenant:      tenant,
	}
}

// Execute executes the request
//
//	@return *os.File
func (a *LogsAPIService) DownloadLogsFromExecutionExecute(r ApiDownloadLogsFromExecutionRequest) (*os.File, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LogsAPIService.DownloadLogsFromExecution")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/{tenant}/logs/{executionId}/download"
	localVarPath = strings.Replace(localVarPath, "{"+"executionId"+"}", url.PathEscape(parameterValueToString(r.executionId, "executionId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tenant"+"}", url.PathEscape(parameterValueToString(r.tenant, "tenant")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.minLevel != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minLevel", r.minLevel, "form", "")
	}
	if r.taskRunId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "taskRunId", r.taskRunId, "form", "")
	}
	if r.taskId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "taskId", r.taskId, "form", "")
	}
	if r.attempt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "attempt", r.attempt, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFollowLogsFromExecutionRequest struct {
	ctx         context.Context
	ApiService  *LogsAPIService
	executionId string
	tenant      string
	minLevel    *Level
}

// The min log level filter
func (r ApiFollowLogsFromExecutionRequest) MinLevel(minLevel Level) ApiFollowLogsFromExecutionRequest {
	r.minLevel = &minLevel
	return r
}

func (r ApiFollowLogsFromExecutionRequest) Execute() (*EventLogEntry, *http.Response, error) {
	return r.ApiService.FollowLogsFromExecutionExecute(r)
}

/*
FollowLogsFromExecution Follow logs for a specific execution

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param executionId The execution id
	@param tenant
	@return ApiFollowLogsFromExecutionRequest
*/
func (a *LogsAPIService) FollowLogsFromExecution(ctx context.Context, executionId string, tenant string) ApiFollowLogsFromExecutionRequest {
	return ApiFollowLogsFromExecutionRequest{
		ApiService:  a,
		ctx:         ctx,
		executionId: executionId,
		tenant:      tenant,
	}
}

// Execute executes the request
//
//	@return EventLogEntry
func (a *LogsAPIService) FollowLogsFromExecutionExecute(r ApiFollowLogsFromExecutionRequest) (*EventLogEntry, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EventLogEntry
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LogsAPIService.FollowLogsFromExecution")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/{tenant}/logs/{executionId}/follow"
	localVarPath = strings.Replace(localVarPath, "{"+"executionId"+"}", url.PathEscape(parameterValueToString(r.executionId, "executionId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tenant"+"}", url.PathEscape(parameterValueToString(r.tenant, "tenant")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.minLevel != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minLevel", r.minLevel, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/event-stream"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListLogsFromExecutionRequest struct {
	ctx         context.Context
	ApiService  *LogsAPIService
	executionId string
	tenant      string
	minLevel    *Level
	taskRunId   *string
	taskId      *string
	attempt     *int32
}

// The min log level filter
func (r ApiListLogsFromExecutionRequest) MinLevel(minLevel Level) ApiListLogsFromExecutionRequest {
	r.minLevel = &minLevel
	return r
}

// The taskrun id
func (r ApiListLogsFromExecutionRequest) TaskRunId(taskRunId string) ApiListLogsFromExecutionRequest {
	r.taskRunId = &taskRunId
	return r
}

// The task id
func (r ApiListLogsFromExecutionRequest) TaskId(taskId string) ApiListLogsFromExecutionRequest {
	r.taskId = &taskId
	return r
}

// The attempt number
func (r ApiListLogsFromExecutionRequest) Attempt(attempt int32) ApiListLogsFromExecutionRequest {
	r.attempt = &attempt
	return r
}

func (r ApiListLogsFromExecutionRequest) Execute() ([]LogEntry, *http.Response, error) {
	return r.ApiService.ListLogsFromExecutionExecute(r)
}

/*
ListLogsFromExecution Get logs for a specific execution, taskrun or task

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param executionId The execution id
	@param tenant
	@return ApiListLogsFromExecutionRequest
*/
func (a *LogsAPIService) ListLogsFromExecution(ctx context.Context, executionId string, tenant string) ApiListLogsFromExecutionRequest {
	return ApiListLogsFromExecutionRequest{
		ApiService:  a,
		ctx:         ctx,
		executionId: executionId,
		tenant:      tenant,
	}
}

// Execute executes the request
//
//	@return []LogEntry
func (a *LogsAPIService) ListLogsFromExecutionExecute(r ApiListLogsFromExecutionRequest) ([]LogEntry, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []LogEntry
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LogsAPIService.ListLogsFromExecution")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/{tenant}/logs/{executionId}"
	localVarPath = strings.Replace(localVarPath, "{"+"executionId"+"}", url.PathEscape(parameterValueToString(r.executionId, "executionId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tenant"+"}", url.PathEscape(parameterValueToString(r.tenant, "tenant")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.minLevel != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minLevel", r.minLevel, "form", "")
	}
	if r.taskRunId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "taskRunId", r.taskRunId, "form", "")
	}
	if r.taskId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "taskId", r.taskId, "form", "")
	}
	if r.attempt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "attempt", r.attempt, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSearchLogsRequest struct {
	ctx        context.Context
	ApiService *LogsAPIService
	page       *int32
	size       *int32
	tenant     string
	sort       *[]string
	filters    *[]QueryFilter
	q          *string
	namespace  *string
	flowId     *string
	triggerId  *string
	minLevel   *Level
	startDate  *time.Time
	endDate    *time.Time
}

// The current page
func (r ApiSearchLogsRequest) Page(page int32) ApiSearchLogsRequest {
	r.page = &page
	return r
}

// The current page size
func (r ApiSearchLogsRequest) Size(size int32) ApiSearchLogsRequest {
	r.size = &size
	return r
}

// The sort of current page
func (r ApiSearchLogsRequest) Sort(sort []string) ApiSearchLogsRequest {
	r.sort = &sort
	return r
}

// Filters
func (r ApiSearchLogsRequest) Filters(filters []QueryFilter) ApiSearchLogsRequest {
	r.filters = &filters
	return r
}

// A string filter
// Deprecated
func (r ApiSearchLogsRequest) Q(q string) ApiSearchLogsRequest {
	r.q = &q
	return r
}

// A namespace filter prefix
// Deprecated
func (r ApiSearchLogsRequest) Namespace(namespace string) ApiSearchLogsRequest {
	r.namespace = &namespace
	return r
}

// A flow id filter
// Deprecated
func (r ApiSearchLogsRequest) FlowId(flowId string) ApiSearchLogsRequest {
	r.flowId = &flowId
	return r
}

// A trigger id filter
// Deprecated
func (r ApiSearchLogsRequest) TriggerId(triggerId string) ApiSearchLogsRequest {
	r.triggerId = &triggerId
	return r
}

// The min log level filter
// Deprecated
func (r ApiSearchLogsRequest) MinLevel(minLevel Level) ApiSearchLogsRequest {
	r.minLevel = &minLevel
	return r
}

// The start datetime
// Deprecated
func (r ApiSearchLogsRequest) StartDate(startDate time.Time) ApiSearchLogsRequest {
	r.startDate = &startDate
	return r
}

// The end datetime
// Deprecated
func (r ApiSearchLogsRequest) EndDate(endDate time.Time) ApiSearchLogsRequest {
	r.endDate = &endDate
	return r
}

func (r ApiSearchLogsRequest) Execute() (*PagedResultsLogEntry, *http.Response, error) {
	return r.ApiService.SearchLogsExecute(r)
}

/*
SearchLogs Search for logs

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param tenant
	@return ApiSearchLogsRequest
*/
func (a *LogsAPIService) SearchLogs(ctx context.Context, tenant string) ApiSearchLogsRequest {
	return ApiSearchLogsRequest{
		ApiService: a,
		ctx:        ctx,
		tenant:     tenant,
	}
}

// Execute executes the request
//
//	@return PagedResultsLogEntry
func (a *LogsAPIService) SearchLogsExecute(r ApiSearchLogsRequest) (*PagedResultsLogEntry, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PagedResultsLogEntry
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LogsAPIService.SearchLogs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/{tenant}/logs/search"
	localVarPath = strings.Replace(localVarPath, "{"+"tenant"+"}", url.PathEscape(parameterValueToString(r.tenant, "tenant")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.page == nil {
		return localVarReturnValue, nil, reportError("page is required and must be specified")
	}
	if *r.page < 1 {
		return localVarReturnValue, nil, reportError("page must be greater than 1")
	}
	if r.size == nil {
		return localVarReturnValue, nil, reportError("size is required and must be specified")
	}
	if *r.size < 1 {
		return localVarReturnValue, nil, reportError("size must be greater than 1")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "form", "")
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "csv")
	}
	if r.filters != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "csv")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.namespace != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "namespace", r.namespace, "form", "")
	}
	if r.flowId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "flowId", r.flowId, "form", "")
	}
	if r.triggerId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "triggerId", r.triggerId, "form", "")
	}
	if r.minLevel != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minLevel", r.minLevel, "form", "")
	}
	if r.startDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startDate", r.startDate, "form", "")
	}
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
