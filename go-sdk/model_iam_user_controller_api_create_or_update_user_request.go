/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
)

// checks if the IAMUserControllerApiCreateOrUpdateUserRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IAMUserControllerApiCreateOrUpdateUserRequest{}

// IAMUserControllerApiCreateOrUpdateUserRequest struct for IAMUserControllerApiCreateOrUpdateUserRequest
type IAMUserControllerApiCreateOrUpdateUserRequest struct {
	Tenants              []string `json:"tenants,omitempty"`
	Groups               []string `json:"groups,omitempty"`
	FirstName            *string  `json:"firstName,omitempty"`
	LastName             *string  `json:"lastName,omitempty"`
	Email                string   `json:"email"`
	Password             *string  `json:"password,omitempty"`
	SuperAdmin           *bool    `json:"superAdmin,omitempty"`
	Restricted           *bool    `json:"restricted,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _IAMUserControllerApiCreateOrUpdateUserRequest IAMUserControllerApiCreateOrUpdateUserRequest

// NewIAMUserControllerApiCreateOrUpdateUserRequest instantiates a new IAMUserControllerApiCreateOrUpdateUserRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIAMUserControllerApiCreateOrUpdateUserRequest(email string) *IAMUserControllerApiCreateOrUpdateUserRequest {
	this := IAMUserControllerApiCreateOrUpdateUserRequest{}
	this.Email = email
	return &this
}

// NewIAMUserControllerApiCreateOrUpdateUserRequestWithDefaults instantiates a new IAMUserControllerApiCreateOrUpdateUserRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIAMUserControllerApiCreateOrUpdateUserRequestWithDefaults() *IAMUserControllerApiCreateOrUpdateUserRequest {
	this := IAMUserControllerApiCreateOrUpdateUserRequest{}
	return &this
}

// GetTenants returns the Tenants field value if set, zero value otherwise.
func (o *IAMUserControllerApiCreateOrUpdateUserRequest) GetTenants() []string {
	if o == nil || IsNil(o.Tenants) {
		var ret []string
		return ret
	}
	return o.Tenants
}

// GetTenantsOk returns a tuple with the Tenants field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IAMUserControllerApiCreateOrUpdateUserRequest) GetTenantsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tenants) {
		return nil, false
	}
	return o.Tenants, true
}

// HasTenants returns a boolean if a field has been set.
func (o *IAMUserControllerApiCreateOrUpdateUserRequest) HasTenants() bool {
	if o != nil && !IsNil(o.Tenants) {
		return true
	}

	return false
}

// SetTenants gets a reference to the given []string and assigns it to the Tenants field.
func (o *IAMUserControllerApiCreateOrUpdateUserRequest) SetTenants(v []string) {
	o.Tenants = v
}

// GetGroups returns the Groups field value if set, zero value otherwise.
func (o *IAMUserControllerApiCreateOrUpdateUserRequest) GetGroups() []string {
	if o == nil || IsNil(o.Groups) {
		var ret []string
		return ret
	}
	return o.Groups
}

// GetGroupsOk returns a tuple with the Groups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IAMUserControllerApiCreateOrUpdateUserRequest) GetGroupsOk() ([]string, bool) {
	if o == nil || IsNil(o.Groups) {
		return nil, false
	}
	return o.Groups, true
}

// HasGroups returns a boolean if a field has been set.
func (o *IAMUserControllerApiCreateOrUpdateUserRequest) HasGroups() bool {
	if o != nil && !IsNil(o.Groups) {
		return true
	}

	return false
}

// SetGroups gets a reference to the given []string and assigns it to the Groups field.
func (o *IAMUserControllerApiCreateOrUpdateUserRequest) SetGroups(v []string) {
	o.Groups = v
}

// GetFirstName returns the FirstName field value if set, zero value otherwise.
func (o *IAMUserControllerApiCreateOrUpdateUserRequest) GetFirstName() string {
	if o == nil || IsNil(o.FirstName) {
		var ret string
		return ret
	}
	return *o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IAMUserControllerApiCreateOrUpdateUserRequest) GetFirstNameOk() (*string, bool) {
	if o == nil || IsNil(o.FirstName) {
		return nil, false
	}
	return o.FirstName, true
}

// HasFirstName returns a boolean if a field has been set.
func (o *IAMUserControllerApiCreateOrUpdateUserRequest) HasFirstName() bool {
	if o != nil && !IsNil(o.FirstName) {
		return true
	}

	return false
}

// SetFirstName gets a reference to the given string and assigns it to the FirstName field.
func (o *IAMUserControllerApiCreateOrUpdateUserRequest) SetFirstName(v string) {
	o.FirstName = &v
}

// GetLastName returns the LastName field value if set, zero value otherwise.
func (o *IAMUserControllerApiCreateOrUpdateUserRequest) GetLastName() string {
	if o == nil || IsNil(o.LastName) {
		var ret string
		return ret
	}
	return *o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IAMUserControllerApiCreateOrUpdateUserRequest) GetLastNameOk() (*string, bool) {
	if o == nil || IsNil(o.LastName) {
		return nil, false
	}
	return o.LastName, true
}

// HasLastName returns a boolean if a field has been set.
func (o *IAMUserControllerApiCreateOrUpdateUserRequest) HasLastName() bool {
	if o != nil && !IsNil(o.LastName) {
		return true
	}

	return false
}

// SetLastName gets a reference to the given string and assigns it to the LastName field.
func (o *IAMUserControllerApiCreateOrUpdateUserRequest) SetLastName(v string) {
	o.LastName = &v
}

// GetEmail returns the Email field value
func (o *IAMUserControllerApiCreateOrUpdateUserRequest) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *IAMUserControllerApiCreateOrUpdateUserRequest) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *IAMUserControllerApiCreateOrUpdateUserRequest) SetEmail(v string) {
	o.Email = v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *IAMUserControllerApiCreateOrUpdateUserRequest) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IAMUserControllerApiCreateOrUpdateUserRequest) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *IAMUserControllerApiCreateOrUpdateUserRequest) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *IAMUserControllerApiCreateOrUpdateUserRequest) SetPassword(v string) {
	o.Password = &v
}

// GetSuperAdmin returns the SuperAdmin field value if set, zero value otherwise.
func (o *IAMUserControllerApiCreateOrUpdateUserRequest) GetSuperAdmin() bool {
	if o == nil || IsNil(o.SuperAdmin) {
		var ret bool
		return ret
	}
	return *o.SuperAdmin
}

// GetSuperAdminOk returns a tuple with the SuperAdmin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IAMUserControllerApiCreateOrUpdateUserRequest) GetSuperAdminOk() (*bool, bool) {
	if o == nil || IsNil(o.SuperAdmin) {
		return nil, false
	}
	return o.SuperAdmin, true
}

// HasSuperAdmin returns a boolean if a field has been set.
func (o *IAMUserControllerApiCreateOrUpdateUserRequest) HasSuperAdmin() bool {
	if o != nil && !IsNil(o.SuperAdmin) {
		return true
	}

	return false
}

// SetSuperAdmin gets a reference to the given bool and assigns it to the SuperAdmin field.
func (o *IAMUserControllerApiCreateOrUpdateUserRequest) SetSuperAdmin(v bool) {
	o.SuperAdmin = &v
}

// GetRestricted returns the Restricted field value if set, zero value otherwise.
func (o *IAMUserControllerApiCreateOrUpdateUserRequest) GetRestricted() bool {
	if o == nil || IsNil(o.Restricted) {
		var ret bool
		return ret
	}
	return *o.Restricted
}

// GetRestrictedOk returns a tuple with the Restricted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IAMUserControllerApiCreateOrUpdateUserRequest) GetRestrictedOk() (*bool, bool) {
	if o == nil || IsNil(o.Restricted) {
		return nil, false
	}
	return o.Restricted, true
}

// HasRestricted returns a boolean if a field has been set.
func (o *IAMUserControllerApiCreateOrUpdateUserRequest) HasRestricted() bool {
	if o != nil && !IsNil(o.Restricted) {
		return true
	}

	return false
}

// SetRestricted gets a reference to the given bool and assigns it to the Restricted field.
func (o *IAMUserControllerApiCreateOrUpdateUserRequest) SetRestricted(v bool) {
	o.Restricted = &v
}

func (o IAMUserControllerApiCreateOrUpdateUserRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IAMUserControllerApiCreateOrUpdateUserRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Tenants) {
		toSerialize["tenants"] = o.Tenants
	}
	if !IsNil(o.Groups) {
		toSerialize["groups"] = o.Groups
	}
	if !IsNil(o.FirstName) {
		toSerialize["firstName"] = o.FirstName
	}
	if !IsNil(o.LastName) {
		toSerialize["lastName"] = o.LastName
	}
	toSerialize["email"] = o.Email
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !IsNil(o.SuperAdmin) {
		toSerialize["superAdmin"] = o.SuperAdmin
	}
	if !IsNil(o.Restricted) {
		toSerialize["restricted"] = o.Restricted
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *IAMUserControllerApiCreateOrUpdateUserRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"email",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIAMUserControllerApiCreateOrUpdateUserRequest := _IAMUserControllerApiCreateOrUpdateUserRequest{}

	err = json.Unmarshal(data, &varIAMUserControllerApiCreateOrUpdateUserRequest)

	if err != nil {
		return err
	}

	*o = IAMUserControllerApiCreateOrUpdateUserRequest(varIAMUserControllerApiCreateOrUpdateUserRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "tenants")
		delete(additionalProperties, "groups")
		delete(additionalProperties, "firstName")
		delete(additionalProperties, "lastName")
		delete(additionalProperties, "email")
		delete(additionalProperties, "password")
		delete(additionalProperties, "superAdmin")
		delete(additionalProperties, "restricted")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIAMUserControllerApiCreateOrUpdateUserRequest struct {
	value *IAMUserControllerApiCreateOrUpdateUserRequest
	isSet bool
}

func (v NullableIAMUserControllerApiCreateOrUpdateUserRequest) Get() *IAMUserControllerApiCreateOrUpdateUserRequest {
	return v.value
}

func (v *NullableIAMUserControllerApiCreateOrUpdateUserRequest) Set(val *IAMUserControllerApiCreateOrUpdateUserRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableIAMUserControllerApiCreateOrUpdateUserRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableIAMUserControllerApiCreateOrUpdateUserRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIAMUserControllerApiCreateOrUpdateUserRequest(val *IAMUserControllerApiCreateOrUpdateUserRequest) *NullableIAMUserControllerApiCreateOrUpdateUserRequest {
	return &NullableIAMUserControllerApiCreateOrUpdateUserRequest{value: val, isSet: true}
}

func (v NullableIAMUserControllerApiCreateOrUpdateUserRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIAMUserControllerApiCreateOrUpdateUserRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
