/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
)

// checks if the IAMTenantAccessControllerUserApiAutocomplete type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IAMTenantAccessControllerUserApiAutocomplete{}

// IAMTenantAccessControllerUserApiAutocomplete struct for IAMTenantAccessControllerUserApiAutocomplete
type IAMTenantAccessControllerUserApiAutocomplete struct {
	Q                    NullableString `json:"q,omitempty"`
	Ids                  []string       `json:"ids,omitempty"`
	Username             NullableString `json:"username,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _IAMTenantAccessControllerUserApiAutocomplete IAMTenantAccessControllerUserApiAutocomplete

// NewIAMTenantAccessControllerUserApiAutocomplete instantiates a new IAMTenantAccessControllerUserApiAutocomplete object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIAMTenantAccessControllerUserApiAutocomplete() *IAMTenantAccessControllerUserApiAutocomplete {
	this := IAMTenantAccessControllerUserApiAutocomplete{}
	return &this
}

// NewIAMTenantAccessControllerUserApiAutocompleteWithDefaults instantiates a new IAMTenantAccessControllerUserApiAutocomplete object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIAMTenantAccessControllerUserApiAutocompleteWithDefaults() *IAMTenantAccessControllerUserApiAutocomplete {
	this := IAMTenantAccessControllerUserApiAutocomplete{}
	return &this
}

// GetQ returns the Q field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IAMTenantAccessControllerUserApiAutocomplete) GetQ() string {
	if o == nil || IsNil(o.Q.Get()) {
		var ret string
		return ret
	}
	return *o.Q.Get()
}

// GetQOk returns a tuple with the Q field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IAMTenantAccessControllerUserApiAutocomplete) GetQOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Q.Get(), o.Q.IsSet()
}

// HasQ returns a boolean if a field has been set.
func (o *IAMTenantAccessControllerUserApiAutocomplete) HasQ() bool {
	if o != nil && o.Q.IsSet() {
		return true
	}

	return false
}

// SetQ gets a reference to the given NullableString and assigns it to the Q field.
func (o *IAMTenantAccessControllerUserApiAutocomplete) SetQ(v string) {
	o.Q.Set(&v)
}

// SetQNil sets the value for Q to be an explicit nil
func (o *IAMTenantAccessControllerUserApiAutocomplete) SetQNil() {
	o.Q.Set(nil)
}

// UnsetQ ensures that no value is present for Q, not even an explicit nil
func (o *IAMTenantAccessControllerUserApiAutocomplete) UnsetQ() {
	o.Q.Unset()
}

// GetIds returns the Ids field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IAMTenantAccessControllerUserApiAutocomplete) GetIds() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Ids
}

// GetIdsOk returns a tuple with the Ids field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IAMTenantAccessControllerUserApiAutocomplete) GetIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.Ids) {
		return nil, false
	}
	return o.Ids, true
}

// HasIds returns a boolean if a field has been set.
func (o *IAMTenantAccessControllerUserApiAutocomplete) HasIds() bool {
	if o != nil && !IsNil(o.Ids) {
		return true
	}

	return false
}

// SetIds gets a reference to the given []string and assigns it to the Ids field.
func (o *IAMTenantAccessControllerUserApiAutocomplete) SetIds(v []string) {
	o.Ids = v
}

// GetUsername returns the Username field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IAMTenantAccessControllerUserApiAutocomplete) GetUsername() string {
	if o == nil || IsNil(o.Username.Get()) {
		var ret string
		return ret
	}
	return *o.Username.Get()
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IAMTenantAccessControllerUserApiAutocomplete) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Username.Get(), o.Username.IsSet()
}

// HasUsername returns a boolean if a field has been set.
func (o *IAMTenantAccessControllerUserApiAutocomplete) HasUsername() bool {
	if o != nil && o.Username.IsSet() {
		return true
	}

	return false
}

// SetUsername gets a reference to the given NullableString and assigns it to the Username field.
func (o *IAMTenantAccessControllerUserApiAutocomplete) SetUsername(v string) {
	o.Username.Set(&v)
}

// SetUsernameNil sets the value for Username to be an explicit nil
func (o *IAMTenantAccessControllerUserApiAutocomplete) SetUsernameNil() {
	o.Username.Set(nil)
}

// UnsetUsername ensures that no value is present for Username, not even an explicit nil
func (o *IAMTenantAccessControllerUserApiAutocomplete) UnsetUsername() {
	o.Username.Unset()
}

func (o IAMTenantAccessControllerUserApiAutocomplete) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IAMTenantAccessControllerUserApiAutocomplete) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Q.IsSet() {
		toSerialize["q"] = o.Q.Get()
	}
	if o.Ids != nil {
		toSerialize["ids"] = o.Ids
	}
	if o.Username.IsSet() {
		toSerialize["username"] = o.Username.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *IAMTenantAccessControllerUserApiAutocomplete) UnmarshalJSON(data []byte) (err error) {
	varIAMTenantAccessControllerUserApiAutocomplete := _IAMTenantAccessControllerUserApiAutocomplete{}

	err = json.Unmarshal(data, &varIAMTenantAccessControllerUserApiAutocomplete)

	if err != nil {
		return err
	}

	*o = IAMTenantAccessControllerUserApiAutocomplete(varIAMTenantAccessControllerUserApiAutocomplete)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "q")
		delete(additionalProperties, "ids")
		delete(additionalProperties, "username")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIAMTenantAccessControllerUserApiAutocomplete struct {
	value *IAMTenantAccessControllerUserApiAutocomplete
	isSet bool
}

func (v NullableIAMTenantAccessControllerUserApiAutocomplete) Get() *IAMTenantAccessControllerUserApiAutocomplete {
	return v.value
}

func (v *NullableIAMTenantAccessControllerUserApiAutocomplete) Set(val *IAMTenantAccessControllerUserApiAutocomplete) {
	v.value = val
	v.isSet = true
}

func (v NullableIAMTenantAccessControllerUserApiAutocomplete) IsSet() bool {
	return v.isSet
}

func (v *NullableIAMTenantAccessControllerUserApiAutocomplete) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIAMTenantAccessControllerUserApiAutocomplete(val *IAMTenantAccessControllerUserApiAutocomplete) *NullableIAMTenantAccessControllerUserApiAutocomplete {
	return &NullableIAMTenantAccessControllerUserApiAutocomplete{value: val, isSet: true}
}

func (v NullableIAMTenantAccessControllerUserApiAutocomplete) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIAMTenantAccessControllerUserApiAutocomplete) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
