/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// TheLabelsToPassToTheExecutionCreated - struct for TheLabelsToPassToTheExecutionCreated
type TheLabelsToPassToTheExecutionCreated struct {
	MapObjectObject *MapObjectObject
	ArrayOfString   *[]string
}

// MapObjectObjectAsTheLabelsToPassToTheExecutionCreated is a convenience function that returns MapObjectObject wrapped in TheLabelsToPassToTheExecutionCreated
func MapObjectObjectAsTheLabelsToPassToTheExecutionCreated(v *MapObjectObject) TheLabelsToPassToTheExecutionCreated {
	return TheLabelsToPassToTheExecutionCreated{
		MapObjectObject: v,
	}
}

// []stringAsTheLabelsToPassToTheExecutionCreated is a convenience function that returns []string wrapped in TheLabelsToPassToTheExecutionCreated
func ArrayOfStringAsTheLabelsToPassToTheExecutionCreated(v *[]string) TheLabelsToPassToTheExecutionCreated {
	return TheLabelsToPassToTheExecutionCreated{
		ArrayOfString: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *TheLabelsToPassToTheExecutionCreated) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into MapObjectObject
	err = newStrictDecoder(data).Decode(&dst.MapObjectObject)
	if err == nil {
		jsonMapObjectObject, _ := json.Marshal(dst.MapObjectObject)
		if string(jsonMapObjectObject) == "{}" { // empty struct
			dst.MapObjectObject = nil
		} else {
			if err = validator.Validate(dst.MapObjectObject); err != nil {
				dst.MapObjectObject = nil
			} else {
				match++
			}
		}
	} else {
		dst.MapObjectObject = nil
	}

	// try to unmarshal data into ArrayOfString
	err = newStrictDecoder(data).Decode(&dst.ArrayOfString)
	if err == nil {
		jsonArrayOfString, _ := json.Marshal(dst.ArrayOfString)
		if string(jsonArrayOfString) == "{}" { // empty struct
			dst.ArrayOfString = nil
		} else {
			if err = validator.Validate(dst.ArrayOfString); err != nil {
				dst.ArrayOfString = nil
			} else {
				match++
			}
		}
	} else {
		dst.ArrayOfString = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.MapObjectObject = nil
		dst.ArrayOfString = nil

		return fmt.Errorf("data matches more than one schema in oneOf(TheLabelsToPassToTheExecutionCreated)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(TheLabelsToPassToTheExecutionCreated)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src TheLabelsToPassToTheExecutionCreated) MarshalJSON() ([]byte, error) {
	if src.MapObjectObject != nil {
		return json.Marshal(&src.MapObjectObject)
	}

	if src.ArrayOfString != nil {
		return json.Marshal(&src.ArrayOfString)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *TheLabelsToPassToTheExecutionCreated) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.MapObjectObject != nil {
		return obj.MapObjectObject
	}

	if obj.ArrayOfString != nil {
		return obj.ArrayOfString
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj TheLabelsToPassToTheExecutionCreated) GetActualInstanceValue() interface{} {
	if obj.MapObjectObject != nil {
		return *obj.MapObjectObject
	}

	if obj.ArrayOfString != nil {
		return *obj.ArrayOfString
	}

	// all schemas are nil
	return nil
}

type NullableTheLabelsToPassToTheExecutionCreated struct {
	value *TheLabelsToPassToTheExecutionCreated
	isSet bool
}

func (v NullableTheLabelsToPassToTheExecutionCreated) Get() *TheLabelsToPassToTheExecutionCreated {
	return v.value
}

func (v *NullableTheLabelsToPassToTheExecutionCreated) Set(val *TheLabelsToPassToTheExecutionCreated) {
	v.value = val
	v.isSet = true
}

func (v NullableTheLabelsToPassToTheExecutionCreated) IsSet() bool {
	return v.isSet
}

func (v *NullableTheLabelsToPassToTheExecutionCreated) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTheLabelsToPassToTheExecutionCreated(val *TheLabelsToPassToTheExecutionCreated) *NullableTheLabelsToPassToTheExecutionCreated {
	return &NullableTheLabelsToPassToTheExecutionCreated{value: val, isSet: true}
}

func (v NullableTheLabelsToPassToTheExecutionCreated) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTheLabelsToPassToTheExecutionCreated) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
