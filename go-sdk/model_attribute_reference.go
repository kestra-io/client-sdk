/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
)

// checks if the AttributeReference type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AttributeReference{}

// AttributeReference struct for AttributeReference
type AttributeReference struct {
	FullAttributeName           *string `json:"fullAttributeName,omitempty"`
	FullyQualifiedAttributeName *string `json:"fullyQualifiedAttributeName,omitempty"`
	AttributeBase               *string `json:"attributeBase,omitempty"`
	Urn                         *string `json:"urn,omitempty"`
	AttributeName               *string `json:"attributeName,omitempty"`
	SubAttributeName            *string `json:"subAttributeName,omitempty"`
	AdditionalProperties        map[string]interface{}
}

type _AttributeReference AttributeReference

// NewAttributeReference instantiates a new AttributeReference object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAttributeReference() *AttributeReference {
	this := AttributeReference{}
	return &this
}

// NewAttributeReferenceWithDefaults instantiates a new AttributeReference object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAttributeReferenceWithDefaults() *AttributeReference {
	this := AttributeReference{}
	return &this
}

// GetFullAttributeName returns the FullAttributeName field value if set, zero value otherwise.
func (o *AttributeReference) GetFullAttributeName() string {
	if o == nil || IsNil(o.FullAttributeName) {
		var ret string
		return ret
	}
	return *o.FullAttributeName
}

// GetFullAttributeNameOk returns a tuple with the FullAttributeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttributeReference) GetFullAttributeNameOk() (*string, bool) {
	if o == nil || IsNil(o.FullAttributeName) {
		return nil, false
	}
	return o.FullAttributeName, true
}

// HasFullAttributeName returns a boolean if a field has been set.
func (o *AttributeReference) HasFullAttributeName() bool {
	if o != nil && !IsNil(o.FullAttributeName) {
		return true
	}

	return false
}

// SetFullAttributeName gets a reference to the given string and assigns it to the FullAttributeName field.
func (o *AttributeReference) SetFullAttributeName(v string) {
	o.FullAttributeName = &v
}

// GetFullyQualifiedAttributeName returns the FullyQualifiedAttributeName field value if set, zero value otherwise.
func (o *AttributeReference) GetFullyQualifiedAttributeName() string {
	if o == nil || IsNil(o.FullyQualifiedAttributeName) {
		var ret string
		return ret
	}
	return *o.FullyQualifiedAttributeName
}

// GetFullyQualifiedAttributeNameOk returns a tuple with the FullyQualifiedAttributeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttributeReference) GetFullyQualifiedAttributeNameOk() (*string, bool) {
	if o == nil || IsNil(o.FullyQualifiedAttributeName) {
		return nil, false
	}
	return o.FullyQualifiedAttributeName, true
}

// HasFullyQualifiedAttributeName returns a boolean if a field has been set.
func (o *AttributeReference) HasFullyQualifiedAttributeName() bool {
	if o != nil && !IsNil(o.FullyQualifiedAttributeName) {
		return true
	}

	return false
}

// SetFullyQualifiedAttributeName gets a reference to the given string and assigns it to the FullyQualifiedAttributeName field.
func (o *AttributeReference) SetFullyQualifiedAttributeName(v string) {
	o.FullyQualifiedAttributeName = &v
}

// GetAttributeBase returns the AttributeBase field value if set, zero value otherwise.
func (o *AttributeReference) GetAttributeBase() string {
	if o == nil || IsNil(o.AttributeBase) {
		var ret string
		return ret
	}
	return *o.AttributeBase
}

// GetAttributeBaseOk returns a tuple with the AttributeBase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttributeReference) GetAttributeBaseOk() (*string, bool) {
	if o == nil || IsNil(o.AttributeBase) {
		return nil, false
	}
	return o.AttributeBase, true
}

// HasAttributeBase returns a boolean if a field has been set.
func (o *AttributeReference) HasAttributeBase() bool {
	if o != nil && !IsNil(o.AttributeBase) {
		return true
	}

	return false
}

// SetAttributeBase gets a reference to the given string and assigns it to the AttributeBase field.
func (o *AttributeReference) SetAttributeBase(v string) {
	o.AttributeBase = &v
}

// GetUrn returns the Urn field value if set, zero value otherwise.
func (o *AttributeReference) GetUrn() string {
	if o == nil || IsNil(o.Urn) {
		var ret string
		return ret
	}
	return *o.Urn
}

// GetUrnOk returns a tuple with the Urn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttributeReference) GetUrnOk() (*string, bool) {
	if o == nil || IsNil(o.Urn) {
		return nil, false
	}
	return o.Urn, true
}

// HasUrn returns a boolean if a field has been set.
func (o *AttributeReference) HasUrn() bool {
	if o != nil && !IsNil(o.Urn) {
		return true
	}

	return false
}

// SetUrn gets a reference to the given string and assigns it to the Urn field.
func (o *AttributeReference) SetUrn(v string) {
	o.Urn = &v
}

// GetAttributeName returns the AttributeName field value if set, zero value otherwise.
func (o *AttributeReference) GetAttributeName() string {
	if o == nil || IsNil(o.AttributeName) {
		var ret string
		return ret
	}
	return *o.AttributeName
}

// GetAttributeNameOk returns a tuple with the AttributeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttributeReference) GetAttributeNameOk() (*string, bool) {
	if o == nil || IsNil(o.AttributeName) {
		return nil, false
	}
	return o.AttributeName, true
}

// HasAttributeName returns a boolean if a field has been set.
func (o *AttributeReference) HasAttributeName() bool {
	if o != nil && !IsNil(o.AttributeName) {
		return true
	}

	return false
}

// SetAttributeName gets a reference to the given string and assigns it to the AttributeName field.
func (o *AttributeReference) SetAttributeName(v string) {
	o.AttributeName = &v
}

// GetSubAttributeName returns the SubAttributeName field value if set, zero value otherwise.
func (o *AttributeReference) GetSubAttributeName() string {
	if o == nil || IsNil(o.SubAttributeName) {
		var ret string
		return ret
	}
	return *o.SubAttributeName
}

// GetSubAttributeNameOk returns a tuple with the SubAttributeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttributeReference) GetSubAttributeNameOk() (*string, bool) {
	if o == nil || IsNil(o.SubAttributeName) {
		return nil, false
	}
	return o.SubAttributeName, true
}

// HasSubAttributeName returns a boolean if a field has been set.
func (o *AttributeReference) HasSubAttributeName() bool {
	if o != nil && !IsNil(o.SubAttributeName) {
		return true
	}

	return false
}

// SetSubAttributeName gets a reference to the given string and assigns it to the SubAttributeName field.
func (o *AttributeReference) SetSubAttributeName(v string) {
	o.SubAttributeName = &v
}

func (o AttributeReference) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AttributeReference) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FullAttributeName) {
		toSerialize["fullAttributeName"] = o.FullAttributeName
	}
	if !IsNil(o.FullyQualifiedAttributeName) {
		toSerialize["fullyQualifiedAttributeName"] = o.FullyQualifiedAttributeName
	}
	if !IsNil(o.AttributeBase) {
		toSerialize["attributeBase"] = o.AttributeBase
	}
	if !IsNil(o.Urn) {
		toSerialize["urn"] = o.Urn
	}
	if !IsNil(o.AttributeName) {
		toSerialize["attributeName"] = o.AttributeName
	}
	if !IsNil(o.SubAttributeName) {
		toSerialize["subAttributeName"] = o.SubAttributeName
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AttributeReference) UnmarshalJSON(data []byte) (err error) {
	varAttributeReference := _AttributeReference{}

	err = json.Unmarshal(data, &varAttributeReference)

	if err != nil {
		return err
	}

	*o = AttributeReference(varAttributeReference)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "fullAttributeName")
		delete(additionalProperties, "fullyQualifiedAttributeName")
		delete(additionalProperties, "attributeBase")
		delete(additionalProperties, "urn")
		delete(additionalProperties, "attributeName")
		delete(additionalProperties, "subAttributeName")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAttributeReference struct {
	value *AttributeReference
	isSet bool
}

func (v NullableAttributeReference) Get() *AttributeReference {
	return v.value
}

func (v *NullableAttributeReference) Set(val *AttributeReference) {
	v.value = val
	v.isSet = true
}

func (v NullableAttributeReference) IsSet() bool {
	return v.isSet
}

func (v *NullableAttributeReference) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAttributeReference(val *AttributeReference) *NullableAttributeReference {
	return &NullableAttributeReference{value: val, isSet: true}
}

func (v NullableAttributeReference) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAttributeReference) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
