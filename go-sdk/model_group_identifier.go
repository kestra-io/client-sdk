/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
)

// checks if the GroupIdentifier type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GroupIdentifier{}

// GroupIdentifier struct for GroupIdentifier
type GroupIdentifier struct {
	TenantId             NullableString            `json:"tenantId"`
	GroupId              string                    `json:"groupId"`
	Membership           GroupIdentifierMembership `json:"membership"`
	ManagedExternally    bool                      `json:"managedExternally"`
	AdditionalProperties map[string]interface{}
}

type _GroupIdentifier GroupIdentifier

// NewGroupIdentifier instantiates a new GroupIdentifier object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGroupIdentifier(tenantId NullableString, groupId string, membership GroupIdentifierMembership, managedExternally bool) *GroupIdentifier {
	this := GroupIdentifier{}
	this.TenantId = tenantId
	this.GroupId = groupId
	this.Membership = membership
	this.ManagedExternally = managedExternally
	return &this
}

// NewGroupIdentifierWithDefaults instantiates a new GroupIdentifier object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGroupIdentifierWithDefaults() *GroupIdentifier {
	this := GroupIdentifier{}
	return &this
}

// GetTenantId returns the TenantId field value
// If the value is explicit nil, the zero value for string will be returned
func (o *GroupIdentifier) GetTenantId() string {
	if o == nil || o.TenantId.Get() == nil {
		var ret string
		return ret
	}

	return *o.TenantId.Get()
}

// GetTenantIdOk returns a tuple with the TenantId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GroupIdentifier) GetTenantIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TenantId.Get(), o.TenantId.IsSet()
}

// SetTenantId sets field value
func (o *GroupIdentifier) SetTenantId(v string) {
	o.TenantId.Set(&v)
}

// GetGroupId returns the GroupId field value
func (o *GroupIdentifier) GetGroupId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value
// and a boolean to check if the value has been set.
func (o *GroupIdentifier) GetGroupIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GroupId, true
}

// SetGroupId sets field value
func (o *GroupIdentifier) SetGroupId(v string) {
	o.GroupId = v
}

// GetMembership returns the Membership field value
func (o *GroupIdentifier) GetMembership() GroupIdentifierMembership {
	if o == nil {
		var ret GroupIdentifierMembership
		return ret
	}

	return o.Membership
}

// GetMembershipOk returns a tuple with the Membership field value
// and a boolean to check if the value has been set.
func (o *GroupIdentifier) GetMembershipOk() (*GroupIdentifierMembership, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Membership, true
}

// SetMembership sets field value
func (o *GroupIdentifier) SetMembership(v GroupIdentifierMembership) {
	o.Membership = v
}

// GetManagedExternally returns the ManagedExternally field value
func (o *GroupIdentifier) GetManagedExternally() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ManagedExternally
}

// GetManagedExternallyOk returns a tuple with the ManagedExternally field value
// and a boolean to check if the value has been set.
func (o *GroupIdentifier) GetManagedExternallyOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ManagedExternally, true
}

// SetManagedExternally sets field value
func (o *GroupIdentifier) SetManagedExternally(v bool) {
	o.ManagedExternally = v
}

func (o GroupIdentifier) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GroupIdentifier) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["tenantId"] = o.TenantId.Get()
	toSerialize["groupId"] = o.GroupId
	toSerialize["membership"] = o.Membership
	toSerialize["managedExternally"] = o.ManagedExternally

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GroupIdentifier) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"tenantId",
		"groupId",
		"membership",
		"managedExternally",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGroupIdentifier := _GroupIdentifier{}

	err = json.Unmarshal(data, &varGroupIdentifier)

	if err != nil {
		return err
	}

	*o = GroupIdentifier(varGroupIdentifier)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "tenantId")
		delete(additionalProperties, "groupId")
		delete(additionalProperties, "membership")
		delete(additionalProperties, "managedExternally")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGroupIdentifier struct {
	value *GroupIdentifier
	isSet bool
}

func (v NullableGroupIdentifier) Get() *GroupIdentifier {
	return v.value
}

func (v *NullableGroupIdentifier) Set(val *GroupIdentifier) {
	v.value = val
	v.isSet = true
}

func (v NullableGroupIdentifier) IsSet() bool {
	return v.isSet
}

func (v *NullableGroupIdentifier) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroupIdentifier(val *GroupIdentifier) *NullableGroupIdentifier {
	return &NullableGroupIdentifier{value: val, isSet: true}
}

func (v NullableGroupIdentifier) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroupIdentifier) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
