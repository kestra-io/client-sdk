/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
	"time"
)

// checks if the ExecutionControllerExecutionResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExecutionControllerExecutionResponse{}

// ExecutionControllerExecutionResponse struct for ExecutionControllerExecutionResponse
type ExecutionControllerExecutionResponse struct {
	Labels               []Label                `json:"labels"`
	Id                   string                 `json:"id"`
	Namespace            string                 `json:"namespace"`
	FlowId               string                 `json:"flowId"`
	FlowRevision         int32                  `json:"flowRevision"`
	TaskRunList          []TaskRun              `json:"taskRunList"`
	Inputs               map[string]interface{} `json:"inputs"`
	Outputs              map[string]interface{} `json:"outputs"`
	Variables            map[string]interface{} `json:"variables"`
	State                State                  `json:"state"`
	ParentId             string                 `json:"parentId"`
	OriginalId           string                 `json:"originalId"`
	Trigger              ExecutionTrigger       `json:"trigger"`
	Deleted              bool                   `json:"deleted"`
	Metadata             ExecutionMetadata      `json:"metadata"`
	ScheduleDate         NullableTime           `json:"scheduleDate,omitempty"`
	TraceParent          string                 `json:"traceParent"`
	Fixtures             []TaskFixture          `json:"fixtures,omitempty"`
	Kind                 NullableExecutionKind  `json:"kind,omitempty"`
	Url                  string                 `json:"url"`
	AdditionalProperties map[string]interface{}
}

type _ExecutionControllerExecutionResponse ExecutionControllerExecutionResponse

// NewExecutionControllerExecutionResponse instantiates a new ExecutionControllerExecutionResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExecutionControllerExecutionResponse(labels []Label, id string, namespace string, flowId string, flowRevision int32, taskRunList []TaskRun, inputs map[string]interface{}, outputs map[string]interface{}, variables map[string]interface{}, state State, parentId string, originalId string, trigger ExecutionTrigger, deleted bool, metadata ExecutionMetadata, traceParent string, url string) *ExecutionControllerExecutionResponse {
	this := ExecutionControllerExecutionResponse{}
	this.Labels = labels
	this.Id = id
	this.Namespace = namespace
	this.FlowId = flowId
	this.FlowRevision = flowRevision
	this.TaskRunList = taskRunList
	this.Inputs = inputs
	this.Outputs = outputs
	this.Variables = variables
	this.State = state
	this.ParentId = parentId
	this.OriginalId = originalId
	this.Trigger = trigger
	this.Deleted = deleted
	this.Metadata = metadata
	this.TraceParent = traceParent
	this.Url = url
	return &this
}

// NewExecutionControllerExecutionResponseWithDefaults instantiates a new ExecutionControllerExecutionResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExecutionControllerExecutionResponseWithDefaults() *ExecutionControllerExecutionResponse {
	this := ExecutionControllerExecutionResponse{}
	return &this
}

// GetLabels returns the Labels field value
func (o *ExecutionControllerExecutionResponse) GetLabels() []Label {
	if o == nil {
		var ret []Label
		return ret
	}

	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value
// and a boolean to check if the value has been set.
func (o *ExecutionControllerExecutionResponse) GetLabelsOk() ([]Label, bool) {
	if o == nil {
		return nil, false
	}
	return o.Labels, true
}

// SetLabels sets field value
func (o *ExecutionControllerExecutionResponse) SetLabels(v []Label) {
	o.Labels = v
}

// GetId returns the Id field value
func (o *ExecutionControllerExecutionResponse) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ExecutionControllerExecutionResponse) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ExecutionControllerExecutionResponse) SetId(v string) {
	o.Id = v
}

// GetNamespace returns the Namespace field value
func (o *ExecutionControllerExecutionResponse) GetNamespace() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value
// and a boolean to check if the value has been set.
func (o *ExecutionControllerExecutionResponse) GetNamespaceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Namespace, true
}

// SetNamespace sets field value
func (o *ExecutionControllerExecutionResponse) SetNamespace(v string) {
	o.Namespace = v
}

// GetFlowId returns the FlowId field value
func (o *ExecutionControllerExecutionResponse) GetFlowId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FlowId
}

// GetFlowIdOk returns a tuple with the FlowId field value
// and a boolean to check if the value has been set.
func (o *ExecutionControllerExecutionResponse) GetFlowIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FlowId, true
}

// SetFlowId sets field value
func (o *ExecutionControllerExecutionResponse) SetFlowId(v string) {
	o.FlowId = v
}

// GetFlowRevision returns the FlowRevision field value
func (o *ExecutionControllerExecutionResponse) GetFlowRevision() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.FlowRevision
}

// GetFlowRevisionOk returns a tuple with the FlowRevision field value
// and a boolean to check if the value has been set.
func (o *ExecutionControllerExecutionResponse) GetFlowRevisionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FlowRevision, true
}

// SetFlowRevision sets field value
func (o *ExecutionControllerExecutionResponse) SetFlowRevision(v int32) {
	o.FlowRevision = v
}

// GetTaskRunList returns the TaskRunList field value
func (o *ExecutionControllerExecutionResponse) GetTaskRunList() []TaskRun {
	if o == nil {
		var ret []TaskRun
		return ret
	}

	return o.TaskRunList
}

// GetTaskRunListOk returns a tuple with the TaskRunList field value
// and a boolean to check if the value has been set.
func (o *ExecutionControllerExecutionResponse) GetTaskRunListOk() ([]TaskRun, bool) {
	if o == nil {
		return nil, false
	}
	return o.TaskRunList, true
}

// SetTaskRunList sets field value
func (o *ExecutionControllerExecutionResponse) SetTaskRunList(v []TaskRun) {
	o.TaskRunList = v
}

// GetInputs returns the Inputs field value
func (o *ExecutionControllerExecutionResponse) GetInputs() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Inputs
}

// GetInputsOk returns a tuple with the Inputs field value
// and a boolean to check if the value has been set.
func (o *ExecutionControllerExecutionResponse) GetInputsOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Inputs, true
}

// SetInputs sets field value
func (o *ExecutionControllerExecutionResponse) SetInputs(v map[string]interface{}) {
	o.Inputs = v
}

// GetOutputs returns the Outputs field value
func (o *ExecutionControllerExecutionResponse) GetOutputs() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Outputs
}

// GetOutputsOk returns a tuple with the Outputs field value
// and a boolean to check if the value has been set.
func (o *ExecutionControllerExecutionResponse) GetOutputsOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Outputs, true
}

// SetOutputs sets field value
func (o *ExecutionControllerExecutionResponse) SetOutputs(v map[string]interface{}) {
	o.Outputs = v
}

// GetVariables returns the Variables field value
func (o *ExecutionControllerExecutionResponse) GetVariables() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Variables
}

// GetVariablesOk returns a tuple with the Variables field value
// and a boolean to check if the value has been set.
func (o *ExecutionControllerExecutionResponse) GetVariablesOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Variables, true
}

// SetVariables sets field value
func (o *ExecutionControllerExecutionResponse) SetVariables(v map[string]interface{}) {
	o.Variables = v
}

// GetState returns the State field value
func (o *ExecutionControllerExecutionResponse) GetState() State {
	if o == nil {
		var ret State
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *ExecutionControllerExecutionResponse) GetStateOk() (*State, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *ExecutionControllerExecutionResponse) SetState(v State) {
	o.State = v
}

// GetParentId returns the ParentId field value
func (o *ExecutionControllerExecutionResponse) GetParentId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ParentId
}

// GetParentIdOk returns a tuple with the ParentId field value
// and a boolean to check if the value has been set.
func (o *ExecutionControllerExecutionResponse) GetParentIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ParentId, true
}

// SetParentId sets field value
func (o *ExecutionControllerExecutionResponse) SetParentId(v string) {
	o.ParentId = v
}

// GetOriginalId returns the OriginalId field value
func (o *ExecutionControllerExecutionResponse) GetOriginalId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OriginalId
}

// GetOriginalIdOk returns a tuple with the OriginalId field value
// and a boolean to check if the value has been set.
func (o *ExecutionControllerExecutionResponse) GetOriginalIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OriginalId, true
}

// SetOriginalId sets field value
func (o *ExecutionControllerExecutionResponse) SetOriginalId(v string) {
	o.OriginalId = v
}

// GetTrigger returns the Trigger field value
func (o *ExecutionControllerExecutionResponse) GetTrigger() ExecutionTrigger {
	if o == nil {
		var ret ExecutionTrigger
		return ret
	}

	return o.Trigger
}

// GetTriggerOk returns a tuple with the Trigger field value
// and a boolean to check if the value has been set.
func (o *ExecutionControllerExecutionResponse) GetTriggerOk() (*ExecutionTrigger, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Trigger, true
}

// SetTrigger sets field value
func (o *ExecutionControllerExecutionResponse) SetTrigger(v ExecutionTrigger) {
	o.Trigger = v
}

// GetDeleted returns the Deleted field value
func (o *ExecutionControllerExecutionResponse) GetDeleted() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Deleted
}

// GetDeletedOk returns a tuple with the Deleted field value
// and a boolean to check if the value has been set.
func (o *ExecutionControllerExecutionResponse) GetDeletedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Deleted, true
}

// SetDeleted sets field value
func (o *ExecutionControllerExecutionResponse) SetDeleted(v bool) {
	o.Deleted = v
}

// GetMetadata returns the Metadata field value
func (o *ExecutionControllerExecutionResponse) GetMetadata() ExecutionMetadata {
	if o == nil {
		var ret ExecutionMetadata
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *ExecutionControllerExecutionResponse) GetMetadataOk() (*ExecutionMetadata, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Metadata, true
}

// SetMetadata sets field value
func (o *ExecutionControllerExecutionResponse) SetMetadata(v ExecutionMetadata) {
	o.Metadata = v
}

// GetScheduleDate returns the ScheduleDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExecutionControllerExecutionResponse) GetScheduleDate() time.Time {
	if o == nil || IsNil(o.ScheduleDate.Get()) {
		var ret time.Time
		return ret
	}
	return *o.ScheduleDate.Get()
}

// GetScheduleDateOk returns a tuple with the ScheduleDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExecutionControllerExecutionResponse) GetScheduleDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.ScheduleDate.Get(), o.ScheduleDate.IsSet()
}

// HasScheduleDate returns a boolean if a field has been set.
func (o *ExecutionControllerExecutionResponse) HasScheduleDate() bool {
	if o != nil && o.ScheduleDate.IsSet() {
		return true
	}

	return false
}

// SetScheduleDate gets a reference to the given NullableTime and assigns it to the ScheduleDate field.
func (o *ExecutionControllerExecutionResponse) SetScheduleDate(v time.Time) {
	o.ScheduleDate.Set(&v)
}

// SetScheduleDateNil sets the value for ScheduleDate to be an explicit nil
func (o *ExecutionControllerExecutionResponse) SetScheduleDateNil() {
	o.ScheduleDate.Set(nil)
}

// UnsetScheduleDate ensures that no value is present for ScheduleDate, not even an explicit nil
func (o *ExecutionControllerExecutionResponse) UnsetScheduleDate() {
	o.ScheduleDate.Unset()
}

// GetTraceParent returns the TraceParent field value
func (o *ExecutionControllerExecutionResponse) GetTraceParent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TraceParent
}

// GetTraceParentOk returns a tuple with the TraceParent field value
// and a boolean to check if the value has been set.
func (o *ExecutionControllerExecutionResponse) GetTraceParentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TraceParent, true
}

// SetTraceParent sets field value
func (o *ExecutionControllerExecutionResponse) SetTraceParent(v string) {
	o.TraceParent = v
}

// GetFixtures returns the Fixtures field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExecutionControllerExecutionResponse) GetFixtures() []TaskFixture {
	if o == nil {
		var ret []TaskFixture
		return ret
	}
	return o.Fixtures
}

// GetFixturesOk returns a tuple with the Fixtures field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExecutionControllerExecutionResponse) GetFixturesOk() ([]TaskFixture, bool) {
	if o == nil || IsNil(o.Fixtures) {
		return nil, false
	}
	return o.Fixtures, true
}

// HasFixtures returns a boolean if a field has been set.
func (o *ExecutionControllerExecutionResponse) HasFixtures() bool {
	if o != nil && !IsNil(o.Fixtures) {
		return true
	}

	return false
}

// SetFixtures gets a reference to the given []TaskFixture and assigns it to the Fixtures field.
func (o *ExecutionControllerExecutionResponse) SetFixtures(v []TaskFixture) {
	o.Fixtures = v
}

// GetKind returns the Kind field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExecutionControllerExecutionResponse) GetKind() ExecutionKind {
	if o == nil || IsNil(o.Kind.Get()) {
		var ret ExecutionKind
		return ret
	}
	return *o.Kind.Get()
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExecutionControllerExecutionResponse) GetKindOk() (*ExecutionKind, bool) {
	if o == nil {
		return nil, false
	}
	return o.Kind.Get(), o.Kind.IsSet()
}

// HasKind returns a boolean if a field has been set.
func (o *ExecutionControllerExecutionResponse) HasKind() bool {
	if o != nil && o.Kind.IsSet() {
		return true
	}

	return false
}

// SetKind gets a reference to the given NullableExecutionKind and assigns it to the Kind field.
func (o *ExecutionControllerExecutionResponse) SetKind(v ExecutionKind) {
	o.Kind.Set(&v)
}

// SetKindNil sets the value for Kind to be an explicit nil
func (o *ExecutionControllerExecutionResponse) SetKindNil() {
	o.Kind.Set(nil)
}

// UnsetKind ensures that no value is present for Kind, not even an explicit nil
func (o *ExecutionControllerExecutionResponse) UnsetKind() {
	o.Kind.Unset()
}

// GetUrl returns the Url field value
func (o *ExecutionControllerExecutionResponse) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *ExecutionControllerExecutionResponse) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *ExecutionControllerExecutionResponse) SetUrl(v string) {
	o.Url = v
}

func (o ExecutionControllerExecutionResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExecutionControllerExecutionResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["labels"] = o.Labels
	toSerialize["id"] = o.Id
	toSerialize["namespace"] = o.Namespace
	toSerialize["flowId"] = o.FlowId
	toSerialize["flowRevision"] = o.FlowRevision
	toSerialize["taskRunList"] = o.TaskRunList
	toSerialize["inputs"] = o.Inputs
	toSerialize["outputs"] = o.Outputs
	toSerialize["variables"] = o.Variables
	toSerialize["state"] = o.State
	toSerialize["parentId"] = o.ParentId
	toSerialize["originalId"] = o.OriginalId
	toSerialize["trigger"] = o.Trigger
	toSerialize["deleted"] = o.Deleted
	toSerialize["metadata"] = o.Metadata
	if o.ScheduleDate.IsSet() {
		toSerialize["scheduleDate"] = o.ScheduleDate.Get()
	}
	toSerialize["traceParent"] = o.TraceParent
	if o.Fixtures != nil {
		toSerialize["fixtures"] = o.Fixtures
	}
	if o.Kind.IsSet() {
		toSerialize["kind"] = o.Kind.Get()
	}
	toSerialize["url"] = o.Url

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ExecutionControllerExecutionResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"labels",
		"id",
		"namespace",
		"flowId",
		"flowRevision",
		"taskRunList",
		"inputs",
		"outputs",
		"variables",
		"state",
		"parentId",
		"originalId",
		"trigger",
		"deleted",
		"metadata",
		"traceParent",
		"url",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varExecutionControllerExecutionResponse := _ExecutionControllerExecutionResponse{}

	err = json.Unmarshal(data, &varExecutionControllerExecutionResponse)

	if err != nil {
		return err
	}

	*o = ExecutionControllerExecutionResponse(varExecutionControllerExecutionResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "labels")
		delete(additionalProperties, "id")
		delete(additionalProperties, "namespace")
		delete(additionalProperties, "flowId")
		delete(additionalProperties, "flowRevision")
		delete(additionalProperties, "taskRunList")
		delete(additionalProperties, "inputs")
		delete(additionalProperties, "outputs")
		delete(additionalProperties, "variables")
		delete(additionalProperties, "state")
		delete(additionalProperties, "parentId")
		delete(additionalProperties, "originalId")
		delete(additionalProperties, "trigger")
		delete(additionalProperties, "deleted")
		delete(additionalProperties, "metadata")
		delete(additionalProperties, "scheduleDate")
		delete(additionalProperties, "traceParent")
		delete(additionalProperties, "fixtures")
		delete(additionalProperties, "kind")
		delete(additionalProperties, "url")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableExecutionControllerExecutionResponse struct {
	value *ExecutionControllerExecutionResponse
	isSet bool
}

func (v NullableExecutionControllerExecutionResponse) Get() *ExecutionControllerExecutionResponse {
	return v.value
}

func (v *NullableExecutionControllerExecutionResponse) Set(val *ExecutionControllerExecutionResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableExecutionControllerExecutionResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableExecutionControllerExecutionResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExecutionControllerExecutionResponse(val *ExecutionControllerExecutionResponse) *NullableExecutionControllerExecutionResponse {
	return &NullableExecutionControllerExecutionResponse{value: val, isSet: true}
}

func (v NullableExecutionControllerExecutionResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExecutionControllerExecutionResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
