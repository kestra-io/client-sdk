/*
Kestra EE

All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
)

// checks if the MiscControllerPreview type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MiscControllerPreview{}

// MiscControllerPreview struct for MiscControllerPreview
type MiscControllerPreview struct {
	Initial *int32 `json:"initial,omitempty"`
	Max     *int32 `json:"max,omitempty"`
}

// NewMiscControllerPreview instantiates a new MiscControllerPreview object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMiscControllerPreview() *MiscControllerPreview {
	this := MiscControllerPreview{}
	return &this
}

// NewMiscControllerPreviewWithDefaults instantiates a new MiscControllerPreview object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMiscControllerPreviewWithDefaults() *MiscControllerPreview {
	this := MiscControllerPreview{}
	return &this
}

// GetInitial returns the Initial field value if set, zero value otherwise.
func (o *MiscControllerPreview) GetInitial() int32 {
	if o == nil || IsNil(o.Initial) {
		var ret int32
		return ret
	}
	return *o.Initial
}

// GetInitialOk returns a tuple with the Initial field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MiscControllerPreview) GetInitialOk() (*int32, bool) {
	if o == nil || IsNil(o.Initial) {
		return nil, false
	}
	return o.Initial, true
}

// HasInitial returns a boolean if a field has been set.
func (o *MiscControllerPreview) HasInitial() bool {
	if o != nil && !IsNil(o.Initial) {
		return true
	}

	return false
}

// SetInitial gets a reference to the given int32 and assigns it to the Initial field.
func (o *MiscControllerPreview) SetInitial(v int32) {
	o.Initial = &v
}

// GetMax returns the Max field value if set, zero value otherwise.
func (o *MiscControllerPreview) GetMax() int32 {
	if o == nil || IsNil(o.Max) {
		var ret int32
		return ret
	}
	return *o.Max
}

// GetMaxOk returns a tuple with the Max field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MiscControllerPreview) GetMaxOk() (*int32, bool) {
	if o == nil || IsNil(o.Max) {
		return nil, false
	}
	return o.Max, true
}

// HasMax returns a boolean if a field has been set.
func (o *MiscControllerPreview) HasMax() bool {
	if o != nil && !IsNil(o.Max) {
		return true
	}

	return false
}

// SetMax gets a reference to the given int32 and assigns it to the Max field.
func (o *MiscControllerPreview) SetMax(v int32) {
	o.Max = &v
}

func (o MiscControllerPreview) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MiscControllerPreview) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Initial) {
		toSerialize["initial"] = o.Initial
	}
	if !IsNil(o.Max) {
		toSerialize["max"] = o.Max
	}
	return toSerialize, nil
}

type NullableMiscControllerPreview struct {
	value *MiscControllerPreview
	isSet bool
}

func (v NullableMiscControllerPreview) Get() *MiscControllerPreview {
	return v.value
}

func (v *NullableMiscControllerPreview) Set(val *MiscControllerPreview) {
	v.value = val
	v.isSet = true
}

func (v NullableMiscControllerPreview) IsSet() bool {
	return v.isSet
}

func (v *NullableMiscControllerPreview) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMiscControllerPreview(val *MiscControllerPreview) *NullableMiscControllerPreview {
	return &NullableMiscControllerPreview{value: val, isSet: true}
}

func (v NullableMiscControllerPreview) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMiscControllerPreview) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
