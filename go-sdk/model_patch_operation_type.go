/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
)

// PatchOperationType the model 'PatchOperationType'
type PatchOperationType string

// List of PatchOperation.Type
const (
	PATCHOPERATIONTYPE_ADD     PatchOperationType = "ADD"
	PATCHOPERATIONTYPE_REMOVE  PatchOperationType = "REMOVE"
	PATCHOPERATIONTYPE_REPLACE PatchOperationType = "REPLACE"
)

// All allowed values of PatchOperationType enum
var AllowedPatchOperationTypeEnumValues = []PatchOperationType{
	"ADD",
	"REMOVE",
	"REPLACE",
}

func (v *PatchOperationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PatchOperationType(value)
	for _, existing := range AllowedPatchOperationTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PatchOperationType", value)
}

// NewPatchOperationTypeFromValue returns a pointer to a valid PatchOperationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPatchOperationTypeFromValue(v string) (*PatchOperationType, error) {
	ev := PatchOperationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PatchOperationType: valid values are %v", v, AllowedPatchOperationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PatchOperationType) IsValid() bool {
	for _, existing := range AllowedPatchOperationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PatchOperation.Type value
func (v PatchOperationType) Ptr() *PatchOperationType {
	return &v
}

type NullablePatchOperationType struct {
	value *PatchOperationType
	isSet bool
}

func (v NullablePatchOperationType) Get() *PatchOperationType {
	return v.value
}

func (v *NullablePatchOperationType) Set(val *PatchOperationType) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchOperationType) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchOperationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchOperationType(val *PatchOperationType) *NullablePatchOperationType {
	return &NullablePatchOperationType{value: val, isSet: true}
}

func (v NullablePatchOperationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchOperationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
