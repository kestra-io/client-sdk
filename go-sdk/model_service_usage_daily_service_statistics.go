/*
Kestra EE

All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
)

// checks if the ServiceUsageDailyServiceStatistics type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServiceUsageDailyServiceStatistics{}

// ServiceUsageDailyServiceStatistics struct for ServiceUsageDailyServiceStatistics
type ServiceUsageDailyServiceStatistics struct {
	Type   *string                       `json:"type,omitempty"`
	Values []ServiceUsageDailyStatistics `json:"values,omitempty"`
}

// NewServiceUsageDailyServiceStatistics instantiates a new ServiceUsageDailyServiceStatistics object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceUsageDailyServiceStatistics() *ServiceUsageDailyServiceStatistics {
	this := ServiceUsageDailyServiceStatistics{}
	return &this
}

// NewServiceUsageDailyServiceStatisticsWithDefaults instantiates a new ServiceUsageDailyServiceStatistics object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceUsageDailyServiceStatisticsWithDefaults() *ServiceUsageDailyServiceStatistics {
	this := ServiceUsageDailyServiceStatistics{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ServiceUsageDailyServiceStatistics) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceUsageDailyServiceStatistics) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ServiceUsageDailyServiceStatistics) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ServiceUsageDailyServiceStatistics) SetType(v string) {
	o.Type = &v
}

// GetValues returns the Values field value if set, zero value otherwise.
func (o *ServiceUsageDailyServiceStatistics) GetValues() []ServiceUsageDailyStatistics {
	if o == nil || IsNil(o.Values) {
		var ret []ServiceUsageDailyStatistics
		return ret
	}
	return o.Values
}

// GetValuesOk returns a tuple with the Values field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceUsageDailyServiceStatistics) GetValuesOk() ([]ServiceUsageDailyStatistics, bool) {
	if o == nil || IsNil(o.Values) {
		return nil, false
	}
	return o.Values, true
}

// HasValues returns a boolean if a field has been set.
func (o *ServiceUsageDailyServiceStatistics) HasValues() bool {
	if o != nil && !IsNil(o.Values) {
		return true
	}

	return false
}

// SetValues gets a reference to the given []ServiceUsageDailyStatistics and assigns it to the Values field.
func (o *ServiceUsageDailyServiceStatistics) SetValues(v []ServiceUsageDailyStatistics) {
	o.Values = v
}

func (o ServiceUsageDailyServiceStatistics) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServiceUsageDailyServiceStatistics) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Values) {
		toSerialize["values"] = o.Values
	}
	return toSerialize, nil
}

type NullableServiceUsageDailyServiceStatistics struct {
	value *ServiceUsageDailyServiceStatistics
	isSet bool
}

func (v NullableServiceUsageDailyServiceStatistics) Get() *ServiceUsageDailyServiceStatistics {
	return v.value
}

func (v *NullableServiceUsageDailyServiceStatistics) Set(val *ServiceUsageDailyServiceStatistics) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceUsageDailyServiceStatistics) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceUsageDailyServiceStatistics) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceUsageDailyServiceStatistics(val *ServiceUsageDailyServiceStatistics) *NullableServiceUsageDailyServiceStatistics {
	return &NullableServiceUsageDailyServiceStatistics{value: val, isSet: true}
}

func (v NullableServiceUsageDailyServiceStatistics) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceUsageDailyServiceStatistics) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
