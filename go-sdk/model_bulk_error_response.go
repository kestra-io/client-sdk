/*
Kestra EE

All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
)

// checks if the BulkErrorResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BulkErrorResponse{}

// BulkErrorResponse struct for BulkErrorResponse
type BulkErrorResponse struct {
	Message  *string                `json:"message,omitempty"`
	Invalids map[string]interface{} `json:"invalids,omitempty"`
}

// NewBulkErrorResponse instantiates a new BulkErrorResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBulkErrorResponse() *BulkErrorResponse {
	this := BulkErrorResponse{}
	return &this
}

// NewBulkErrorResponseWithDefaults instantiates a new BulkErrorResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBulkErrorResponseWithDefaults() *BulkErrorResponse {
	this := BulkErrorResponse{}
	return &this
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *BulkErrorResponse) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BulkErrorResponse) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *BulkErrorResponse) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *BulkErrorResponse) SetMessage(v string) {
	o.Message = &v
}

// GetInvalids returns the Invalids field value if set, zero value otherwise.
func (o *BulkErrorResponse) GetInvalids() map[string]interface{} {
	if o == nil || IsNil(o.Invalids) {
		var ret map[string]interface{}
		return ret
	}
	return o.Invalids
}

// GetInvalidsOk returns a tuple with the Invalids field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BulkErrorResponse) GetInvalidsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Invalids) {
		return map[string]interface{}{}, false
	}
	return o.Invalids, true
}

// HasInvalids returns a boolean if a field has been set.
func (o *BulkErrorResponse) HasInvalids() bool {
	if o != nil && !IsNil(o.Invalids) {
		return true
	}

	return false
}

// SetInvalids gets a reference to the given map[string]interface{} and assigns it to the Invalids field.
func (o *BulkErrorResponse) SetInvalids(v map[string]interface{}) {
	o.Invalids = v
}

func (o BulkErrorResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BulkErrorResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.Invalids) {
		toSerialize["invalids"] = o.Invalids
	}
	return toSerialize, nil
}

type NullableBulkErrorResponse struct {
	value *BulkErrorResponse
	isSet bool
}

func (v NullableBulkErrorResponse) Get() *BulkErrorResponse {
	return v.value
}

func (v *NullableBulkErrorResponse) Set(val *BulkErrorResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableBulkErrorResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableBulkErrorResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBulkErrorResponse(val *BulkErrorResponse) *NullableBulkErrorResponse {
	return &NullableBulkErrorResponse{value: val, isSet: true}
}

func (v NullableBulkErrorResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBulkErrorResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
