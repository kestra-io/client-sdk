/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
)

// MiscControllerEdition the model 'MiscControllerEdition'
type MiscControllerEdition string

// List of MiscController.Edition
const (
	MISCCONTROLLEREDITION_OSS MiscControllerEdition = "OSS"
	MISCCONTROLLEREDITION_EE  MiscControllerEdition = "EE"
)

// All allowed values of MiscControllerEdition enum
var AllowedMiscControllerEditionEnumValues = []MiscControllerEdition{
	"OSS",
	"EE",
}

func (v *MiscControllerEdition) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MiscControllerEdition(value)
	for _, existing := range AllowedMiscControllerEditionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MiscControllerEdition", value)
}

// NewMiscControllerEditionFromValue returns a pointer to a valid MiscControllerEdition
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMiscControllerEditionFromValue(v string) (*MiscControllerEdition, error) {
	ev := MiscControllerEdition(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MiscControllerEdition: valid values are %v", v, AllowedMiscControllerEditionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MiscControllerEdition) IsValid() bool {
	for _, existing := range AllowedMiscControllerEditionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MiscController.Edition value
func (v MiscControllerEdition) Ptr() *MiscControllerEdition {
	return &v
}

type NullableMiscControllerEdition struct {
	value *MiscControllerEdition
	isSet bool
}

func (v NullableMiscControllerEdition) Get() *MiscControllerEdition {
	return v.value
}

func (v *NullableMiscControllerEdition) Set(val *MiscControllerEdition) {
	v.value = val
	v.isSet = true
}

func (v NullableMiscControllerEdition) IsSet() bool {
	return v.isSet
}

func (v *NullableMiscControllerEdition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMiscControllerEdition(val *MiscControllerEdition) *NullableMiscControllerEdition {
	return &NullableMiscControllerEdition{value: val, isSet: true}
}

func (v NullableMiscControllerEdition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMiscControllerEdition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
