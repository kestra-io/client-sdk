/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
)

// checks if the PluginPluginElementMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PluginPluginElementMetadata{}

// PluginPluginElementMetadata struct for PluginPluginElementMetadata
type PluginPluginElementMetadata struct {
	Cls                  *string `json:"cls,omitempty"`
	Deprecated           *bool   `json:"deprecated,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PluginPluginElementMetadata PluginPluginElementMetadata

// NewPluginPluginElementMetadata instantiates a new PluginPluginElementMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPluginPluginElementMetadata() *PluginPluginElementMetadata {
	this := PluginPluginElementMetadata{}
	return &this
}

// NewPluginPluginElementMetadataWithDefaults instantiates a new PluginPluginElementMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPluginPluginElementMetadataWithDefaults() *PluginPluginElementMetadata {
	this := PluginPluginElementMetadata{}
	return &this
}

// GetCls returns the Cls field value if set, zero value otherwise.
func (o *PluginPluginElementMetadata) GetCls() string {
	if o == nil || IsNil(o.Cls) {
		var ret string
		return ret
	}
	return *o.Cls
}

// GetClsOk returns a tuple with the Cls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginPluginElementMetadata) GetClsOk() (*string, bool) {
	if o == nil || IsNil(o.Cls) {
		return nil, false
	}
	return o.Cls, true
}

// HasCls returns a boolean if a field has been set.
func (o *PluginPluginElementMetadata) HasCls() bool {
	if o != nil && !IsNil(o.Cls) {
		return true
	}

	return false
}

// SetCls gets a reference to the given string and assigns it to the Cls field.
func (o *PluginPluginElementMetadata) SetCls(v string) {
	o.Cls = &v
}

// GetDeprecated returns the Deprecated field value if set, zero value otherwise.
func (o *PluginPluginElementMetadata) GetDeprecated() bool {
	if o == nil || IsNil(o.Deprecated) {
		var ret bool
		return ret
	}
	return *o.Deprecated
}

// GetDeprecatedOk returns a tuple with the Deprecated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginPluginElementMetadata) GetDeprecatedOk() (*bool, bool) {
	if o == nil || IsNil(o.Deprecated) {
		return nil, false
	}
	return o.Deprecated, true
}

// HasDeprecated returns a boolean if a field has been set.
func (o *PluginPluginElementMetadata) HasDeprecated() bool {
	if o != nil && !IsNil(o.Deprecated) {
		return true
	}

	return false
}

// SetDeprecated gets a reference to the given bool and assigns it to the Deprecated field.
func (o *PluginPluginElementMetadata) SetDeprecated(v bool) {
	o.Deprecated = &v
}

func (o PluginPluginElementMetadata) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PluginPluginElementMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Cls) {
		toSerialize["cls"] = o.Cls
	}
	if !IsNil(o.Deprecated) {
		toSerialize["deprecated"] = o.Deprecated
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PluginPluginElementMetadata) UnmarshalJSON(data []byte) (err error) {
	varPluginPluginElementMetadata := _PluginPluginElementMetadata{}

	err = json.Unmarshal(data, &varPluginPluginElementMetadata)

	if err != nil {
		return err
	}

	*o = PluginPluginElementMetadata(varPluginPluginElementMetadata)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "cls")
		delete(additionalProperties, "deprecated")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePluginPluginElementMetadata struct {
	value *PluginPluginElementMetadata
	isSet bool
}

func (v NullablePluginPluginElementMetadata) Get() *PluginPluginElementMetadata {
	return v.value
}

func (v *NullablePluginPluginElementMetadata) Set(val *PluginPluginElementMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullablePluginPluginElementMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullablePluginPluginElementMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePluginPluginElementMetadata(val *PluginPluginElementMetadata) *NullablePluginPluginElementMetadata {
	return &NullablePluginPluginElementMetadata{value: val, isSet: true}
}

func (v NullablePluginPluginElementMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePluginPluginElementMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
