/*
Kestra EE

All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
)

// checks if the AppsControllerApiBulkImportResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AppsControllerApiBulkImportResponse{}

// AppsControllerApiBulkImportResponse struct for AppsControllerApiBulkImportResponse
type AppsControllerApiBulkImportResponse struct {
	Success []string                                   `json:"success,omitempty"`
	Errors  []AppsControllerApiBulkImportResponseError `json:"errors,omitempty"`
}

// NewAppsControllerApiBulkImportResponse instantiates a new AppsControllerApiBulkImportResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppsControllerApiBulkImportResponse() *AppsControllerApiBulkImportResponse {
	this := AppsControllerApiBulkImportResponse{}
	return &this
}

// NewAppsControllerApiBulkImportResponseWithDefaults instantiates a new AppsControllerApiBulkImportResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppsControllerApiBulkImportResponseWithDefaults() *AppsControllerApiBulkImportResponse {
	this := AppsControllerApiBulkImportResponse{}
	return &this
}

// GetSuccess returns the Success field value if set, zero value otherwise.
func (o *AppsControllerApiBulkImportResponse) GetSuccess() []string {
	if o == nil || IsNil(o.Success) {
		var ret []string
		return ret
	}
	return o.Success
}

// GetSuccessOk returns a tuple with the Success field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppsControllerApiBulkImportResponse) GetSuccessOk() ([]string, bool) {
	if o == nil || IsNil(o.Success) {
		return nil, false
	}
	return o.Success, true
}

// HasSuccess returns a boolean if a field has been set.
func (o *AppsControllerApiBulkImportResponse) HasSuccess() bool {
	if o != nil && !IsNil(o.Success) {
		return true
	}

	return false
}

// SetSuccess gets a reference to the given []string and assigns it to the Success field.
func (o *AppsControllerApiBulkImportResponse) SetSuccess(v []string) {
	o.Success = v
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *AppsControllerApiBulkImportResponse) GetErrors() []AppsControllerApiBulkImportResponseError {
	if o == nil || IsNil(o.Errors) {
		var ret []AppsControllerApiBulkImportResponseError
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppsControllerApiBulkImportResponse) GetErrorsOk() ([]AppsControllerApiBulkImportResponseError, bool) {
	if o == nil || IsNil(o.Errors) {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *AppsControllerApiBulkImportResponse) HasErrors() bool {
	if o != nil && !IsNil(o.Errors) {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []AppsControllerApiBulkImportResponseError and assigns it to the Errors field.
func (o *AppsControllerApiBulkImportResponse) SetErrors(v []AppsControllerApiBulkImportResponseError) {
	o.Errors = v
}

func (o AppsControllerApiBulkImportResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AppsControllerApiBulkImportResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Success) {
		toSerialize["success"] = o.Success
	}
	if !IsNil(o.Errors) {
		toSerialize["errors"] = o.Errors
	}
	return toSerialize, nil
}

type NullableAppsControllerApiBulkImportResponse struct {
	value *AppsControllerApiBulkImportResponse
	isSet bool
}

func (v NullableAppsControllerApiBulkImportResponse) Get() *AppsControllerApiBulkImportResponse {
	return v.value
}

func (v *NullableAppsControllerApiBulkImportResponse) Set(val *AppsControllerApiBulkImportResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableAppsControllerApiBulkImportResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableAppsControllerApiBulkImportResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppsControllerApiBulkImportResponse(val *AppsControllerApiBulkImportResponse) *NullableAppsControllerApiBulkImportResponse {
	return &NullableAppsControllerApiBulkImportResponse{value: val, isSet: true}
}

func (v NullableAppsControllerApiBulkImportResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppsControllerApiBulkImportResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
