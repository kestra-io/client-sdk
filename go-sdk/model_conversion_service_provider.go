/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
)

// checks if the ConversionServiceProvider type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConversionServiceProvider{}

// ConversionServiceProvider struct for ConversionServiceProvider
type ConversionServiceProvider struct {
	ConversionService    map[string]interface{} `json:"conversionService"`
	AdditionalProperties map[string]interface{}
}

type _ConversionServiceProvider ConversionServiceProvider

// NewConversionServiceProvider instantiates a new ConversionServiceProvider object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConversionServiceProvider(conversionService map[string]interface{}) *ConversionServiceProvider {
	this := ConversionServiceProvider{}
	this.ConversionService = conversionService
	return &this
}

// NewConversionServiceProviderWithDefaults instantiates a new ConversionServiceProvider object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConversionServiceProviderWithDefaults() *ConversionServiceProvider {
	this := ConversionServiceProvider{}
	return &this
}

// GetConversionService returns the ConversionService field value
func (o *ConversionServiceProvider) GetConversionService() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.ConversionService
}

// GetConversionServiceOk returns a tuple with the ConversionService field value
// and a boolean to check if the value has been set.
func (o *ConversionServiceProvider) GetConversionServiceOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.ConversionService, true
}

// SetConversionService sets field value
func (o *ConversionServiceProvider) SetConversionService(v map[string]interface{}) {
	o.ConversionService = v
}

func (o ConversionServiceProvider) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConversionServiceProvider) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["conversionService"] = o.ConversionService

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ConversionServiceProvider) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"conversionService",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConversionServiceProvider := _ConversionServiceProvider{}

	err = json.Unmarshal(data, &varConversionServiceProvider)

	if err != nil {
		return err
	}

	*o = ConversionServiceProvider(varConversionServiceProvider)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "conversionService")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableConversionServiceProvider struct {
	value *ConversionServiceProvider
	isSet bool
}

func (v NullableConversionServiceProvider) Get() *ConversionServiceProvider {
	return v.value
}

func (v *NullableConversionServiceProvider) Set(val *ConversionServiceProvider) {
	v.value = val
	v.isSet = true
}

func (v NullableConversionServiceProvider) IsSet() bool {
	return v.isSet
}

func (v *NullableConversionServiceProvider) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConversionServiceProvider(val *ConversionServiceProvider) *NullableConversionServiceProvider {
	return &NullableConversionServiceProvider{value: val, isSet: true}
}

func (v NullableConversionServiceProvider) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConversionServiceProvider) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
