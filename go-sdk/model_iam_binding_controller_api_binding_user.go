/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
)

// checks if the IAMBindingControllerApiBindingUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IAMBindingControllerApiBindingUser{}

// IAMBindingControllerApiBindingUser struct for IAMBindingControllerApiBindingUser
type IAMBindingControllerApiBindingUser struct {
	Id                   *string   `json:"id,omitempty"`
	Username             *string   `json:"username,omitempty"`
	DisplayName          *string   `json:"displayName,omitempty"`
	Type                 *UserType `json:"type,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _IAMBindingControllerApiBindingUser IAMBindingControllerApiBindingUser

// NewIAMBindingControllerApiBindingUser instantiates a new IAMBindingControllerApiBindingUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIAMBindingControllerApiBindingUser() *IAMBindingControllerApiBindingUser {
	this := IAMBindingControllerApiBindingUser{}
	return &this
}

// NewIAMBindingControllerApiBindingUserWithDefaults instantiates a new IAMBindingControllerApiBindingUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIAMBindingControllerApiBindingUserWithDefaults() *IAMBindingControllerApiBindingUser {
	this := IAMBindingControllerApiBindingUser{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *IAMBindingControllerApiBindingUser) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IAMBindingControllerApiBindingUser) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *IAMBindingControllerApiBindingUser) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *IAMBindingControllerApiBindingUser) SetId(v string) {
	o.Id = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *IAMBindingControllerApiBindingUser) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IAMBindingControllerApiBindingUser) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *IAMBindingControllerApiBindingUser) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *IAMBindingControllerApiBindingUser) SetUsername(v string) {
	o.Username = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *IAMBindingControllerApiBindingUser) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IAMBindingControllerApiBindingUser) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *IAMBindingControllerApiBindingUser) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *IAMBindingControllerApiBindingUser) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *IAMBindingControllerApiBindingUser) GetType() UserType {
	if o == nil || IsNil(o.Type) {
		var ret UserType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IAMBindingControllerApiBindingUser) GetTypeOk() (*UserType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *IAMBindingControllerApiBindingUser) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given UserType and assigns it to the Type field.
func (o *IAMBindingControllerApiBindingUser) SetType(v UserType) {
	o.Type = &v
}

func (o IAMBindingControllerApiBindingUser) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IAMBindingControllerApiBindingUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *IAMBindingControllerApiBindingUser) UnmarshalJSON(data []byte) (err error) {
	varIAMBindingControllerApiBindingUser := _IAMBindingControllerApiBindingUser{}

	err = json.Unmarshal(data, &varIAMBindingControllerApiBindingUser)

	if err != nil {
		return err
	}

	*o = IAMBindingControllerApiBindingUser(varIAMBindingControllerApiBindingUser)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "username")
		delete(additionalProperties, "displayName")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIAMBindingControllerApiBindingUser struct {
	value *IAMBindingControllerApiBindingUser
	isSet bool
}

func (v NullableIAMBindingControllerApiBindingUser) Get() *IAMBindingControllerApiBindingUser {
	return v.value
}

func (v *NullableIAMBindingControllerApiBindingUser) Set(val *IAMBindingControllerApiBindingUser) {
	v.value = val
	v.isSet = true
}

func (v NullableIAMBindingControllerApiBindingUser) IsSet() bool {
	return v.isSet
}

func (v *NullableIAMBindingControllerApiBindingUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIAMBindingControllerApiBindingUser(val *IAMBindingControllerApiBindingUser) *NullableIAMBindingControllerApiBindingUser {
	return &NullableIAMBindingControllerApiBindingUser{value: val, isSet: true}
}

func (v NullableIAMBindingControllerApiBindingUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIAMBindingControllerApiBindingUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
