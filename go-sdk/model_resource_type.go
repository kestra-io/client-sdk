/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
)

// checks if the ResourceType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResourceType{}

// ResourceType struct for ResourceType
type ResourceType struct {
	Schemas              []string                                   `json:"schemas,omitempty"`
	BaseUrn              *string                                    `json:"baseUrn,omitempty"`
	Extensions           *map[string]ScimExtension                  `json:"extensions,omitempty"`
	Meta                 Meta                                       `json:"meta"`
	Id                   *string                                    `json:"id,omitempty"`
	ExternalId           *string                                    `json:"externalId,omitempty"`
	ResourceType         *string                                    `json:"resourceType,omitempty"`
	Name                 *string                                    `json:"name,omitempty"`
	Description          *string                                    `json:"description,omitempty"`
	Endpoint             *string                                    `json:"endpoint,omitempty"`
	SchemaUrn            *string                                    `json:"schemaUrn,omitempty"`
	SchemaExtensions     []ResourceTypeSchemaExtensionConfiguration `json:"schemaExtensions,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ResourceType ResourceType

// NewResourceType instantiates a new ResourceType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceType(meta Meta) *ResourceType {
	this := ResourceType{}
	this.Meta = meta
	return &this
}

// NewResourceTypeWithDefaults instantiates a new ResourceType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceTypeWithDefaults() *ResourceType {
	this := ResourceType{}
	return &this
}

// GetSchemas returns the Schemas field value if set, zero value otherwise.
func (o *ResourceType) GetSchemas() []string {
	if o == nil || IsNil(o.Schemas) {
		var ret []string
		return ret
	}
	return o.Schemas
}

// GetSchemasOk returns a tuple with the Schemas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceType) GetSchemasOk() ([]string, bool) {
	if o == nil || IsNil(o.Schemas) {
		return nil, false
	}
	return o.Schemas, true
}

// HasSchemas returns a boolean if a field has been set.
func (o *ResourceType) HasSchemas() bool {
	if o != nil && !IsNil(o.Schemas) {
		return true
	}

	return false
}

// SetSchemas gets a reference to the given []string and assigns it to the Schemas field.
func (o *ResourceType) SetSchemas(v []string) {
	o.Schemas = v
}

// GetBaseUrn returns the BaseUrn field value if set, zero value otherwise.
func (o *ResourceType) GetBaseUrn() string {
	if o == nil || IsNil(o.BaseUrn) {
		var ret string
		return ret
	}
	return *o.BaseUrn
}

// GetBaseUrnOk returns a tuple with the BaseUrn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceType) GetBaseUrnOk() (*string, bool) {
	if o == nil || IsNil(o.BaseUrn) {
		return nil, false
	}
	return o.BaseUrn, true
}

// HasBaseUrn returns a boolean if a field has been set.
func (o *ResourceType) HasBaseUrn() bool {
	if o != nil && !IsNil(o.BaseUrn) {
		return true
	}

	return false
}

// SetBaseUrn gets a reference to the given string and assigns it to the BaseUrn field.
func (o *ResourceType) SetBaseUrn(v string) {
	o.BaseUrn = &v
}

// GetExtensions returns the Extensions field value if set, zero value otherwise.
func (o *ResourceType) GetExtensions() map[string]ScimExtension {
	if o == nil || IsNil(o.Extensions) {
		var ret map[string]ScimExtension
		return ret
	}
	return *o.Extensions
}

// GetExtensionsOk returns a tuple with the Extensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceType) GetExtensionsOk() (*map[string]ScimExtension, bool) {
	if o == nil || IsNil(o.Extensions) {
		return nil, false
	}
	return o.Extensions, true
}

// HasExtensions returns a boolean if a field has been set.
func (o *ResourceType) HasExtensions() bool {
	if o != nil && !IsNil(o.Extensions) {
		return true
	}

	return false
}

// SetExtensions gets a reference to the given map[string]ScimExtension and assigns it to the Extensions field.
func (o *ResourceType) SetExtensions(v map[string]ScimExtension) {
	o.Extensions = &v
}

// GetMeta returns the Meta field value
func (o *ResourceType) GetMeta() Meta {
	if o == nil {
		var ret Meta
		return ret
	}

	return o.Meta
}

// GetMetaOk returns a tuple with the Meta field value
// and a boolean to check if the value has been set.
func (o *ResourceType) GetMetaOk() (*Meta, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Meta, true
}

// SetMeta sets field value
func (o *ResourceType) SetMeta(v Meta) {
	o.Meta = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ResourceType) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceType) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ResourceType) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ResourceType) SetId(v string) {
	o.Id = &v
}

// GetExternalId returns the ExternalId field value if set, zero value otherwise.
func (o *ResourceType) GetExternalId() string {
	if o == nil || IsNil(o.ExternalId) {
		var ret string
		return ret
	}
	return *o.ExternalId
}

// GetExternalIdOk returns a tuple with the ExternalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceType) GetExternalIdOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalId) {
		return nil, false
	}
	return o.ExternalId, true
}

// HasExternalId returns a boolean if a field has been set.
func (o *ResourceType) HasExternalId() bool {
	if o != nil && !IsNil(o.ExternalId) {
		return true
	}

	return false
}

// SetExternalId gets a reference to the given string and assigns it to the ExternalId field.
func (o *ResourceType) SetExternalId(v string) {
	o.ExternalId = &v
}

// GetResourceType returns the ResourceType field value if set, zero value otherwise.
func (o *ResourceType) GetResourceType() string {
	if o == nil || IsNil(o.ResourceType) {
		var ret string
		return ret
	}
	return *o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceType) GetResourceTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ResourceType) {
		return nil, false
	}
	return o.ResourceType, true
}

// HasResourceType returns a boolean if a field has been set.
func (o *ResourceType) HasResourceType() bool {
	if o != nil && !IsNil(o.ResourceType) {
		return true
	}

	return false
}

// SetResourceType gets a reference to the given string and assigns it to the ResourceType field.
func (o *ResourceType) SetResourceType(v string) {
	o.ResourceType = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ResourceType) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceType) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ResourceType) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ResourceType) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ResourceType) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceType) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ResourceType) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ResourceType) SetDescription(v string) {
	o.Description = &v
}

// GetEndpoint returns the Endpoint field value if set, zero value otherwise.
func (o *ResourceType) GetEndpoint() string {
	if o == nil || IsNil(o.Endpoint) {
		var ret string
		return ret
	}
	return *o.Endpoint
}

// GetEndpointOk returns a tuple with the Endpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceType) GetEndpointOk() (*string, bool) {
	if o == nil || IsNil(o.Endpoint) {
		return nil, false
	}
	return o.Endpoint, true
}

// HasEndpoint returns a boolean if a field has been set.
func (o *ResourceType) HasEndpoint() bool {
	if o != nil && !IsNil(o.Endpoint) {
		return true
	}

	return false
}

// SetEndpoint gets a reference to the given string and assigns it to the Endpoint field.
func (o *ResourceType) SetEndpoint(v string) {
	o.Endpoint = &v
}

// GetSchemaUrn returns the SchemaUrn field value if set, zero value otherwise.
func (o *ResourceType) GetSchemaUrn() string {
	if o == nil || IsNil(o.SchemaUrn) {
		var ret string
		return ret
	}
	return *o.SchemaUrn
}

// GetSchemaUrnOk returns a tuple with the SchemaUrn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceType) GetSchemaUrnOk() (*string, bool) {
	if o == nil || IsNil(o.SchemaUrn) {
		return nil, false
	}
	return o.SchemaUrn, true
}

// HasSchemaUrn returns a boolean if a field has been set.
func (o *ResourceType) HasSchemaUrn() bool {
	if o != nil && !IsNil(o.SchemaUrn) {
		return true
	}

	return false
}

// SetSchemaUrn gets a reference to the given string and assigns it to the SchemaUrn field.
func (o *ResourceType) SetSchemaUrn(v string) {
	o.SchemaUrn = &v
}

// GetSchemaExtensions returns the SchemaExtensions field value if set, zero value otherwise.
func (o *ResourceType) GetSchemaExtensions() []ResourceTypeSchemaExtensionConfiguration {
	if o == nil || IsNil(o.SchemaExtensions) {
		var ret []ResourceTypeSchemaExtensionConfiguration
		return ret
	}
	return o.SchemaExtensions
}

// GetSchemaExtensionsOk returns a tuple with the SchemaExtensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceType) GetSchemaExtensionsOk() ([]ResourceTypeSchemaExtensionConfiguration, bool) {
	if o == nil || IsNil(o.SchemaExtensions) {
		return nil, false
	}
	return o.SchemaExtensions, true
}

// HasSchemaExtensions returns a boolean if a field has been set.
func (o *ResourceType) HasSchemaExtensions() bool {
	if o != nil && !IsNil(o.SchemaExtensions) {
		return true
	}

	return false
}

// SetSchemaExtensions gets a reference to the given []ResourceTypeSchemaExtensionConfiguration and assigns it to the SchemaExtensions field.
func (o *ResourceType) SetSchemaExtensions(v []ResourceTypeSchemaExtensionConfiguration) {
	o.SchemaExtensions = v
}

func (o ResourceType) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResourceType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Schemas) {
		toSerialize["schemas"] = o.Schemas
	}
	if !IsNil(o.BaseUrn) {
		toSerialize["baseUrn"] = o.BaseUrn
	}
	if !IsNil(o.Extensions) {
		toSerialize["extensions"] = o.Extensions
	}
	toSerialize["meta"] = o.Meta
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ExternalId) {
		toSerialize["externalId"] = o.ExternalId
	}
	if !IsNil(o.ResourceType) {
		toSerialize["resourceType"] = o.ResourceType
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Endpoint) {
		toSerialize["endpoint"] = o.Endpoint
	}
	if !IsNil(o.SchemaUrn) {
		toSerialize["schemaUrn"] = o.SchemaUrn
	}
	if !IsNil(o.SchemaExtensions) {
		toSerialize["schemaExtensions"] = o.SchemaExtensions
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ResourceType) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"meta",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResourceType := _ResourceType{}

	err = json.Unmarshal(data, &varResourceType)

	if err != nil {
		return err
	}

	*o = ResourceType(varResourceType)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "schemas")
		delete(additionalProperties, "baseUrn")
		delete(additionalProperties, "extensions")
		delete(additionalProperties, "meta")
		delete(additionalProperties, "id")
		delete(additionalProperties, "externalId")
		delete(additionalProperties, "resourceType")
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "endpoint")
		delete(additionalProperties, "schemaUrn")
		delete(additionalProperties, "schemaExtensions")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableResourceType struct {
	value *ResourceType
	isSet bool
}

func (v NullableResourceType) Get() *ResourceType {
	return v.value
}

func (v *NullableResourceType) Set(val *ResourceType) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceType) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceType(val *ResourceType) *NullableResourceType {
	return &NullableResourceType{value: val, isSet: true}
}

func (v NullableResourceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
