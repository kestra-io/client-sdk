/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
)

// checks if the SetupConfigurationSetupData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SetupConfigurationSetupData{}

// SetupConfigurationSetupData struct for SetupConfigurationSetupData
type SetupConfigurationSetupData struct {
	Username             *string `json:"username,omitempty"`
	Password             *string `json:"password,omitempty"`
	Tenant               *Tenant `json:"tenant,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SetupConfigurationSetupData SetupConfigurationSetupData

// NewSetupConfigurationSetupData instantiates a new SetupConfigurationSetupData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSetupConfigurationSetupData() *SetupConfigurationSetupData {
	this := SetupConfigurationSetupData{}
	return &this
}

// NewSetupConfigurationSetupDataWithDefaults instantiates a new SetupConfigurationSetupData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSetupConfigurationSetupDataWithDefaults() *SetupConfigurationSetupData {
	this := SetupConfigurationSetupData{}
	return &this
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *SetupConfigurationSetupData) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SetupConfigurationSetupData) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *SetupConfigurationSetupData) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *SetupConfigurationSetupData) SetUsername(v string) {
	o.Username = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *SetupConfigurationSetupData) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SetupConfigurationSetupData) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *SetupConfigurationSetupData) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *SetupConfigurationSetupData) SetPassword(v string) {
	o.Password = &v
}

// GetTenant returns the Tenant field value if set, zero value otherwise.
func (o *SetupConfigurationSetupData) GetTenant() Tenant {
	if o == nil || IsNil(o.Tenant) {
		var ret Tenant
		return ret
	}
	return *o.Tenant
}

// GetTenantOk returns a tuple with the Tenant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SetupConfigurationSetupData) GetTenantOk() (*Tenant, bool) {
	if o == nil || IsNil(o.Tenant) {
		return nil, false
	}
	return o.Tenant, true
}

// HasTenant returns a boolean if a field has been set.
func (o *SetupConfigurationSetupData) HasTenant() bool {
	if o != nil && !IsNil(o.Tenant) {
		return true
	}

	return false
}

// SetTenant gets a reference to the given Tenant and assigns it to the Tenant field.
func (o *SetupConfigurationSetupData) SetTenant(v Tenant) {
	o.Tenant = &v
}

func (o SetupConfigurationSetupData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SetupConfigurationSetupData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !IsNil(o.Tenant) {
		toSerialize["tenant"] = o.Tenant
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SetupConfigurationSetupData) UnmarshalJSON(data []byte) (err error) {
	varSetupConfigurationSetupData := _SetupConfigurationSetupData{}

	err = json.Unmarshal(data, &varSetupConfigurationSetupData)

	if err != nil {
		return err
	}

	*o = SetupConfigurationSetupData(varSetupConfigurationSetupData)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "username")
		delete(additionalProperties, "password")
		delete(additionalProperties, "tenant")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSetupConfigurationSetupData struct {
	value *SetupConfigurationSetupData
	isSet bool
}

func (v NullableSetupConfigurationSetupData) Get() *SetupConfigurationSetupData {
	return v.value
}

func (v *NullableSetupConfigurationSetupData) Set(val *SetupConfigurationSetupData) {
	v.value = val
	v.isSet = true
}

func (v NullableSetupConfigurationSetupData) IsSet() bool {
	return v.isSet
}

func (v *NullableSetupConfigurationSetupData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSetupConfigurationSetupData(val *SetupConfigurationSetupData) *NullableSetupConfigurationSetupData {
	return &NullableSetupConfigurationSetupData{value: val, isSet: true}
}

func (v NullableSetupConfigurationSetupData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSetupConfigurationSetupData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
