/*
Kestra EE

All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
)

// FlowControllerTaskValidationType the model 'FlowControllerTaskValidationType'
type FlowControllerTaskValidationType string

// List of FlowController.TaskValidationType
const (
	FLOWCONTROLLERTASKVALIDATIONTYPE_TASKS    FlowControllerTaskValidationType = "TASKS"
	FLOWCONTROLLERTASKVALIDATIONTYPE_TRIGGERS FlowControllerTaskValidationType = "TRIGGERS"
)

// All allowed values of FlowControllerTaskValidationType enum
var AllowedFlowControllerTaskValidationTypeEnumValues = []FlowControllerTaskValidationType{
	"TASKS",
	"TRIGGERS",
}

func (v *FlowControllerTaskValidationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FlowControllerTaskValidationType(value)
	for _, existing := range AllowedFlowControllerTaskValidationTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FlowControllerTaskValidationType", value)
}

// NewFlowControllerTaskValidationTypeFromValue returns a pointer to a valid FlowControllerTaskValidationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFlowControllerTaskValidationTypeFromValue(v string) (*FlowControllerTaskValidationType, error) {
	ev := FlowControllerTaskValidationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FlowControllerTaskValidationType: valid values are %v", v, AllowedFlowControllerTaskValidationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FlowControllerTaskValidationType) IsValid() bool {
	for _, existing := range AllowedFlowControllerTaskValidationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FlowController.TaskValidationType value
func (v FlowControllerTaskValidationType) Ptr() *FlowControllerTaskValidationType {
	return &v
}

type NullableFlowControllerTaskValidationType struct {
	value *FlowControllerTaskValidationType
	isSet bool
}

func (v NullableFlowControllerTaskValidationType) Get() *FlowControllerTaskValidationType {
	return v.value
}

func (v *NullableFlowControllerTaskValidationType) Set(val *FlowControllerTaskValidationType) {
	v.value = val
	v.isSet = true
}

func (v NullableFlowControllerTaskValidationType) IsSet() bool {
	return v.isSet
}

func (v *NullableFlowControllerTaskValidationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFlowControllerTaskValidationType(val *FlowControllerTaskValidationType) *NullableFlowControllerTaskValidationType {
	return &NullableFlowControllerTaskValidationType{value: val, isSet: true}
}

func (v NullableFlowControllerTaskValidationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFlowControllerTaskValidationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
