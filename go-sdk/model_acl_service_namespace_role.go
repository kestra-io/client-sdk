/*
Kestra EE

All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
)

// checks if the AclServiceNamespaceRole type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AclServiceNamespaceRole{}

// AclServiceNamespaceRole struct for AclServiceNamespaceRole
type AclServiceNamespaceRole struct {
	Role        *Role   `json:"role,omitempty"`
	NamespaceId *string `json:"namespaceId,omitempty"`
}

// NewAclServiceNamespaceRole instantiates a new AclServiceNamespaceRole object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAclServiceNamespaceRole() *AclServiceNamespaceRole {
	this := AclServiceNamespaceRole{}
	return &this
}

// NewAclServiceNamespaceRoleWithDefaults instantiates a new AclServiceNamespaceRole object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAclServiceNamespaceRoleWithDefaults() *AclServiceNamespaceRole {
	this := AclServiceNamespaceRole{}
	return &this
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *AclServiceNamespaceRole) GetRole() Role {
	if o == nil || IsNil(o.Role) {
		var ret Role
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AclServiceNamespaceRole) GetRoleOk() (*Role, bool) {
	if o == nil || IsNil(o.Role) {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *AclServiceNamespaceRole) HasRole() bool {
	if o != nil && !IsNil(o.Role) {
		return true
	}

	return false
}

// SetRole gets a reference to the given Role and assigns it to the Role field.
func (o *AclServiceNamespaceRole) SetRole(v Role) {
	o.Role = &v
}

// GetNamespaceId returns the NamespaceId field value if set, zero value otherwise.
func (o *AclServiceNamespaceRole) GetNamespaceId() string {
	if o == nil || IsNil(o.NamespaceId) {
		var ret string
		return ret
	}
	return *o.NamespaceId
}

// GetNamespaceIdOk returns a tuple with the NamespaceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AclServiceNamespaceRole) GetNamespaceIdOk() (*string, bool) {
	if o == nil || IsNil(o.NamespaceId) {
		return nil, false
	}
	return o.NamespaceId, true
}

// HasNamespaceId returns a boolean if a field has been set.
func (o *AclServiceNamespaceRole) HasNamespaceId() bool {
	if o != nil && !IsNil(o.NamespaceId) {
		return true
	}

	return false
}

// SetNamespaceId gets a reference to the given string and assigns it to the NamespaceId field.
func (o *AclServiceNamespaceRole) SetNamespaceId(v string) {
	o.NamespaceId = &v
}

func (o AclServiceNamespaceRole) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AclServiceNamespaceRole) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Role) {
		toSerialize["role"] = o.Role
	}
	if !IsNil(o.NamespaceId) {
		toSerialize["namespaceId"] = o.NamespaceId
	}
	return toSerialize, nil
}

type NullableAclServiceNamespaceRole struct {
	value *AclServiceNamespaceRole
	isSet bool
}

func (v NullableAclServiceNamespaceRole) Get() *AclServiceNamespaceRole {
	return v.value
}

func (v *NullableAclServiceNamespaceRole) Set(val *AclServiceNamespaceRole) {
	v.value = val
	v.isSet = true
}

func (v NullableAclServiceNamespaceRole) IsSet() bool {
	return v.isSet
}

func (v *NullableAclServiceNamespaceRole) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAclServiceNamespaceRole(val *AclServiceNamespaceRole) *NullableAclServiceNamespaceRole {
	return &NullableAclServiceNamespaceRole{value: val, isSet: true}
}

func (v NullableAclServiceNamespaceRole) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAclServiceNamespaceRole) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
