/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
)

// checks if the AclServiceNamespaceRole type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AclServiceNamespaceRole{}

// AclServiceNamespaceRole struct for AclServiceNamespaceRole
type AclServiceNamespaceRole struct {
	Role                 Role   `json:"role"`
	NamespaceId          string `json:"namespaceId"`
	AdditionalProperties map[string]interface{}
}

type _AclServiceNamespaceRole AclServiceNamespaceRole

// NewAclServiceNamespaceRole instantiates a new AclServiceNamespaceRole object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAclServiceNamespaceRole(role Role, namespaceId string) *AclServiceNamespaceRole {
	this := AclServiceNamespaceRole{}
	this.Role = role
	this.NamespaceId = namespaceId
	return &this
}

// NewAclServiceNamespaceRoleWithDefaults instantiates a new AclServiceNamespaceRole object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAclServiceNamespaceRoleWithDefaults() *AclServiceNamespaceRole {
	this := AclServiceNamespaceRole{}
	return &this
}

// GetRole returns the Role field value
func (o *AclServiceNamespaceRole) GetRole() Role {
	if o == nil {
		var ret Role
		return ret
	}

	return o.Role
}

// GetRoleOk returns a tuple with the Role field value
// and a boolean to check if the value has been set.
func (o *AclServiceNamespaceRole) GetRoleOk() (*Role, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Role, true
}

// SetRole sets field value
func (o *AclServiceNamespaceRole) SetRole(v Role) {
	o.Role = v
}

// GetNamespaceId returns the NamespaceId field value
func (o *AclServiceNamespaceRole) GetNamespaceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NamespaceId
}

// GetNamespaceIdOk returns a tuple with the NamespaceId field value
// and a boolean to check if the value has been set.
func (o *AclServiceNamespaceRole) GetNamespaceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NamespaceId, true
}

// SetNamespaceId sets field value
func (o *AclServiceNamespaceRole) SetNamespaceId(v string) {
	o.NamespaceId = v
}

func (o AclServiceNamespaceRole) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AclServiceNamespaceRole) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["role"] = o.Role
	toSerialize["namespaceId"] = o.NamespaceId

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AclServiceNamespaceRole) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"role",
		"namespaceId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAclServiceNamespaceRole := _AclServiceNamespaceRole{}

	err = json.Unmarshal(data, &varAclServiceNamespaceRole)

	if err != nil {
		return err
	}

	*o = AclServiceNamespaceRole(varAclServiceNamespaceRole)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "role")
		delete(additionalProperties, "namespaceId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAclServiceNamespaceRole struct {
	value *AclServiceNamespaceRole
	isSet bool
}

func (v NullableAclServiceNamespaceRole) Get() *AclServiceNamespaceRole {
	return v.value
}

func (v *NullableAclServiceNamespaceRole) Set(val *AclServiceNamespaceRole) {
	v.value = val
	v.isSet = true
}

func (v NullableAclServiceNamespaceRole) IsSet() bool {
	return v.isSet
}

func (v *NullableAclServiceNamespaceRole) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAclServiceNamespaceRole(val *AclServiceNamespaceRole) *NullableAclServiceNamespaceRole {
	return &NullableAclServiceNamespaceRole{value: val, isSet: true}
}

func (v NullableAclServiceNamespaceRole) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAclServiceNamespaceRole) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
