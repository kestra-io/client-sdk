/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
)

// checks if the IAMUserControllerApiPatchSuperAdminRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IAMUserControllerApiPatchSuperAdminRequest{}

// IAMUserControllerApiPatchSuperAdminRequest struct for IAMUserControllerApiPatchSuperAdminRequest
type IAMUserControllerApiPatchSuperAdminRequest struct {
	SuperAdmin           bool `json:"superAdmin"`
	AdditionalProperties map[string]interface{}
}

type _IAMUserControllerApiPatchSuperAdminRequest IAMUserControllerApiPatchSuperAdminRequest

// NewIAMUserControllerApiPatchSuperAdminRequest instantiates a new IAMUserControllerApiPatchSuperAdminRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIAMUserControllerApiPatchSuperAdminRequest(superAdmin bool) *IAMUserControllerApiPatchSuperAdminRequest {
	this := IAMUserControllerApiPatchSuperAdminRequest{}
	this.SuperAdmin = superAdmin
	return &this
}

// NewIAMUserControllerApiPatchSuperAdminRequestWithDefaults instantiates a new IAMUserControllerApiPatchSuperAdminRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIAMUserControllerApiPatchSuperAdminRequestWithDefaults() *IAMUserControllerApiPatchSuperAdminRequest {
	this := IAMUserControllerApiPatchSuperAdminRequest{}
	return &this
}

// GetSuperAdmin returns the SuperAdmin field value
func (o *IAMUserControllerApiPatchSuperAdminRequest) GetSuperAdmin() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.SuperAdmin
}

// GetSuperAdminOk returns a tuple with the SuperAdmin field value
// and a boolean to check if the value has been set.
func (o *IAMUserControllerApiPatchSuperAdminRequest) GetSuperAdminOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SuperAdmin, true
}

// SetSuperAdmin sets field value
func (o *IAMUserControllerApiPatchSuperAdminRequest) SetSuperAdmin(v bool) {
	o.SuperAdmin = v
}

func (o IAMUserControllerApiPatchSuperAdminRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IAMUserControllerApiPatchSuperAdminRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["superAdmin"] = o.SuperAdmin

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *IAMUserControllerApiPatchSuperAdminRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"superAdmin",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIAMUserControllerApiPatchSuperAdminRequest := _IAMUserControllerApiPatchSuperAdminRequest{}

	err = json.Unmarshal(data, &varIAMUserControllerApiPatchSuperAdminRequest)

	if err != nil {
		return err
	}

	*o = IAMUserControllerApiPatchSuperAdminRequest(varIAMUserControllerApiPatchSuperAdminRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "superAdmin")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIAMUserControllerApiPatchSuperAdminRequest struct {
	value *IAMUserControllerApiPatchSuperAdminRequest
	isSet bool
}

func (v NullableIAMUserControllerApiPatchSuperAdminRequest) Get() *IAMUserControllerApiPatchSuperAdminRequest {
	return v.value
}

func (v *NullableIAMUserControllerApiPatchSuperAdminRequest) Set(val *IAMUserControllerApiPatchSuperAdminRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableIAMUserControllerApiPatchSuperAdminRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableIAMUserControllerApiPatchSuperAdminRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIAMUserControllerApiPatchSuperAdminRequest(val *IAMUserControllerApiPatchSuperAdminRequest) *NullableIAMUserControllerApiPatchSuperAdminRequest {
	return &NullableIAMUserControllerApiPatchSuperAdminRequest{value: val, isSet: true}
}

func (v NullableIAMUserControllerApiPatchSuperAdminRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIAMUserControllerApiPatchSuperAdminRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
