/*
Kestra EE

All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
)

// checks if the TestSuiteRunResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TestSuiteRunResult{}

// TestSuiteRunResult struct for TestSuiteRunResult
type TestSuiteRunResult struct {
	Id          *string          `json:"id,omitempty"`
	TestSuiteId *string          `json:"testSuiteId,omitempty"`
	Namespace   *string          `json:"namespace,omitempty"`
	FlowId      *string          `json:"flowId,omitempty"`
	State       *TestState       `json:"state,omitempty"`
	Results     []UnitTestResult `json:"results,omitempty"`
}

// NewTestSuiteRunResult instantiates a new TestSuiteRunResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTestSuiteRunResult() *TestSuiteRunResult {
	this := TestSuiteRunResult{}
	return &this
}

// NewTestSuiteRunResultWithDefaults instantiates a new TestSuiteRunResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTestSuiteRunResultWithDefaults() *TestSuiteRunResult {
	this := TestSuiteRunResult{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TestSuiteRunResult) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestSuiteRunResult) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TestSuiteRunResult) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *TestSuiteRunResult) SetId(v string) {
	o.Id = &v
}

// GetTestSuiteId returns the TestSuiteId field value if set, zero value otherwise.
func (o *TestSuiteRunResult) GetTestSuiteId() string {
	if o == nil || IsNil(o.TestSuiteId) {
		var ret string
		return ret
	}
	return *o.TestSuiteId
}

// GetTestSuiteIdOk returns a tuple with the TestSuiteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestSuiteRunResult) GetTestSuiteIdOk() (*string, bool) {
	if o == nil || IsNil(o.TestSuiteId) {
		return nil, false
	}
	return o.TestSuiteId, true
}

// HasTestSuiteId returns a boolean if a field has been set.
func (o *TestSuiteRunResult) HasTestSuiteId() bool {
	if o != nil && !IsNil(o.TestSuiteId) {
		return true
	}

	return false
}

// SetTestSuiteId gets a reference to the given string and assigns it to the TestSuiteId field.
func (o *TestSuiteRunResult) SetTestSuiteId(v string) {
	o.TestSuiteId = &v
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *TestSuiteRunResult) GetNamespace() string {
	if o == nil || IsNil(o.Namespace) {
		var ret string
		return ret
	}
	return *o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestSuiteRunResult) GetNamespaceOk() (*string, bool) {
	if o == nil || IsNil(o.Namespace) {
		return nil, false
	}
	return o.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *TestSuiteRunResult) HasNamespace() bool {
	if o != nil && !IsNil(o.Namespace) {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the Namespace field.
func (o *TestSuiteRunResult) SetNamespace(v string) {
	o.Namespace = &v
}

// GetFlowId returns the FlowId field value if set, zero value otherwise.
func (o *TestSuiteRunResult) GetFlowId() string {
	if o == nil || IsNil(o.FlowId) {
		var ret string
		return ret
	}
	return *o.FlowId
}

// GetFlowIdOk returns a tuple with the FlowId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestSuiteRunResult) GetFlowIdOk() (*string, bool) {
	if o == nil || IsNil(o.FlowId) {
		return nil, false
	}
	return o.FlowId, true
}

// HasFlowId returns a boolean if a field has been set.
func (o *TestSuiteRunResult) HasFlowId() bool {
	if o != nil && !IsNil(o.FlowId) {
		return true
	}

	return false
}

// SetFlowId gets a reference to the given string and assigns it to the FlowId field.
func (o *TestSuiteRunResult) SetFlowId(v string) {
	o.FlowId = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *TestSuiteRunResult) GetState() TestState {
	if o == nil || IsNil(o.State) {
		var ret TestState
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestSuiteRunResult) GetStateOk() (*TestState, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *TestSuiteRunResult) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given TestState and assigns it to the State field.
func (o *TestSuiteRunResult) SetState(v TestState) {
	o.State = &v
}

// GetResults returns the Results field value if set, zero value otherwise.
func (o *TestSuiteRunResult) GetResults() []UnitTestResult {
	if o == nil || IsNil(o.Results) {
		var ret []UnitTestResult
		return ret
	}
	return o.Results
}

// GetResultsOk returns a tuple with the Results field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestSuiteRunResult) GetResultsOk() ([]UnitTestResult, bool) {
	if o == nil || IsNil(o.Results) {
		return nil, false
	}
	return o.Results, true
}

// HasResults returns a boolean if a field has been set.
func (o *TestSuiteRunResult) HasResults() bool {
	if o != nil && !IsNil(o.Results) {
		return true
	}

	return false
}

// SetResults gets a reference to the given []UnitTestResult and assigns it to the Results field.
func (o *TestSuiteRunResult) SetResults(v []UnitTestResult) {
	o.Results = v
}

func (o TestSuiteRunResult) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TestSuiteRunResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.TestSuiteId) {
		toSerialize["testSuiteId"] = o.TestSuiteId
	}
	if !IsNil(o.Namespace) {
		toSerialize["namespace"] = o.Namespace
	}
	if !IsNil(o.FlowId) {
		toSerialize["flowId"] = o.FlowId
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.Results) {
		toSerialize["results"] = o.Results
	}
	return toSerialize, nil
}

type NullableTestSuiteRunResult struct {
	value *TestSuiteRunResult
	isSet bool
}

func (v NullableTestSuiteRunResult) Get() *TestSuiteRunResult {
	return v.value
}

func (v *NullableTestSuiteRunResult) Set(val *TestSuiteRunResult) {
	v.value = val
	v.isSet = true
}

func (v NullableTestSuiteRunResult) IsSet() bool {
	return v.isSet
}

func (v *NullableTestSuiteRunResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestSuiteRunResult(val *TestSuiteRunResult) *NullableTestSuiteRunResult {
	return &NullableTestSuiteRunResult{value: val, isSet: true}
}

func (v NullableTestSuiteRunResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestSuiteRunResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
