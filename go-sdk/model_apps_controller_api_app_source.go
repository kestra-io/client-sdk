/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
	"time"
)

// checks if the AppsControllerApiAppSource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AppsControllerApiAppSource{}

// AppsControllerApiAppSource struct for AppsControllerApiAppSource
type AppsControllerApiAppSource struct {
	Uid                  string    `json:"uid"`
	Name                 string    `json:"name"`
	Namespace            string    `json:"namespace"`
	Tags                 []string  `json:"tags"`
	Disabled             bool      `json:"disabled"`
	Source               string    `json:"source"`
	Created              time.Time `json:"created"`
	Updated              time.Time `json:"updated"`
	AdditionalProperties map[string]interface{}
}

type _AppsControllerApiAppSource AppsControllerApiAppSource

// NewAppsControllerApiAppSource instantiates a new AppsControllerApiAppSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppsControllerApiAppSource(uid string, name string, namespace string, tags []string, disabled bool, source string, created time.Time, updated time.Time) *AppsControllerApiAppSource {
	this := AppsControllerApiAppSource{}
	this.Uid = uid
	this.Name = name
	this.Namespace = namespace
	this.Tags = tags
	this.Disabled = disabled
	this.Source = source
	this.Created = created
	this.Updated = updated
	return &this
}

// NewAppsControllerApiAppSourceWithDefaults instantiates a new AppsControllerApiAppSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppsControllerApiAppSourceWithDefaults() *AppsControllerApiAppSource {
	this := AppsControllerApiAppSource{}
	return &this
}

// GetUid returns the Uid field value
func (o *AppsControllerApiAppSource) GetUid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uid
}

// GetUidOk returns a tuple with the Uid field value
// and a boolean to check if the value has been set.
func (o *AppsControllerApiAppSource) GetUidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uid, true
}

// SetUid sets field value
func (o *AppsControllerApiAppSource) SetUid(v string) {
	o.Uid = v
}

// GetName returns the Name field value
func (o *AppsControllerApiAppSource) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AppsControllerApiAppSource) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AppsControllerApiAppSource) SetName(v string) {
	o.Name = v
}

// GetNamespace returns the Namespace field value
func (o *AppsControllerApiAppSource) GetNamespace() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value
// and a boolean to check if the value has been set.
func (o *AppsControllerApiAppSource) GetNamespaceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Namespace, true
}

// SetNamespace sets field value
func (o *AppsControllerApiAppSource) SetNamespace(v string) {
	o.Namespace = v
}

// GetTags returns the Tags field value
func (o *AppsControllerApiAppSource) GetTags() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value
// and a boolean to check if the value has been set.
func (o *AppsControllerApiAppSource) GetTagsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tags, true
}

// SetTags sets field value
func (o *AppsControllerApiAppSource) SetTags(v []string) {
	o.Tags = v
}

// GetDisabled returns the Disabled field value
func (o *AppsControllerApiAppSource) GetDisabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value
// and a boolean to check if the value has been set.
func (o *AppsControllerApiAppSource) GetDisabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Disabled, true
}

// SetDisabled sets field value
func (o *AppsControllerApiAppSource) SetDisabled(v bool) {
	o.Disabled = v
}

// GetSource returns the Source field value
func (o *AppsControllerApiAppSource) GetSource() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *AppsControllerApiAppSource) GetSourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *AppsControllerApiAppSource) SetSource(v string) {
	o.Source = v
}

// GetCreated returns the Created field value
func (o *AppsControllerApiAppSource) GetCreated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *AppsControllerApiAppSource) GetCreatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *AppsControllerApiAppSource) SetCreated(v time.Time) {
	o.Created = v
}

// GetUpdated returns the Updated field value
func (o *AppsControllerApiAppSource) GetUpdated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Updated
}

// GetUpdatedOk returns a tuple with the Updated field value
// and a boolean to check if the value has been set.
func (o *AppsControllerApiAppSource) GetUpdatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Updated, true
}

// SetUpdated sets field value
func (o *AppsControllerApiAppSource) SetUpdated(v time.Time) {
	o.Updated = v
}

func (o AppsControllerApiAppSource) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AppsControllerApiAppSource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["uid"] = o.Uid
	toSerialize["name"] = o.Name
	toSerialize["namespace"] = o.Namespace
	toSerialize["tags"] = o.Tags
	toSerialize["disabled"] = o.Disabled
	toSerialize["source"] = o.Source
	toSerialize["created"] = o.Created
	toSerialize["updated"] = o.Updated

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AppsControllerApiAppSource) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"uid",
		"name",
		"namespace",
		"tags",
		"disabled",
		"source",
		"created",
		"updated",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAppsControllerApiAppSource := _AppsControllerApiAppSource{}

	err = json.Unmarshal(data, &varAppsControllerApiAppSource)

	if err != nil {
		return err
	}

	*o = AppsControllerApiAppSource(varAppsControllerApiAppSource)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "uid")
		delete(additionalProperties, "name")
		delete(additionalProperties, "namespace")
		delete(additionalProperties, "tags")
		delete(additionalProperties, "disabled")
		delete(additionalProperties, "source")
		delete(additionalProperties, "created")
		delete(additionalProperties, "updated")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAppsControllerApiAppSource struct {
	value *AppsControllerApiAppSource
	isSet bool
}

func (v NullableAppsControllerApiAppSource) Get() *AppsControllerApiAppSource {
	return v.value
}

func (v *NullableAppsControllerApiAppSource) Set(val *AppsControllerApiAppSource) {
	v.value = val
	v.isSet = true
}

func (v NullableAppsControllerApiAppSource) IsSet() bool {
	return v.isSet
}

func (v *NullableAppsControllerApiAppSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppsControllerApiAppSource(val *AppsControllerApiAppSource) *NullableAppsControllerApiAppSource {
	return &NullableAppsControllerApiAppSource{value: val, isSet: true}
}

func (v NullableAppsControllerApiAppSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppsControllerApiAppSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
