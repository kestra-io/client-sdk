/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
)

// checks if the FlowForExecution type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FlowForExecution{}

// FlowForExecution struct for FlowForExecution
type FlowForExecution struct {
	Id                   string                        `json:"id" validate:"regexp=^[a-zA-Z0-9][a-zA-Z0-9._-]*"`
	Namespace            string                        `json:"namespace" validate:"regexp=^[a-z0-9][a-z0-9._-]*"`
	Revision             *int32                        `json:"revision,omitempty"`
	Inputs               []InputObject                 `json:"inputs,omitempty"`
	Outputs              []Output                      `json:"outputs,omitempty"`
	Disabled             bool                          `json:"disabled"`
	Labels               *FlowForExecutionAllOfLabels  `json:"labels,omitempty"`
	Variables            map[string]interface{}        `json:"variables,omitempty"`
	WorkerGroup          *WorkerGroup                  `json:"workerGroup,omitempty"`
	Deleted              bool                          `json:"deleted"`
	Tasks                []TaskForExecution            `json:"tasks"`
	Errors               []TaskForExecution            `json:"errors,omitempty"`
	Finally              []TaskForExecution            `json:"finally,omitempty"`
	AfterExecution       []TaskForExecution            `json:"afterExecution,omitempty"`
	Triggers             []AbstractTriggerForExecution `json:"triggers,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _FlowForExecution FlowForExecution

// NewFlowForExecution instantiates a new FlowForExecution object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFlowForExecution(id string, namespace string, disabled bool, deleted bool, tasks []TaskForExecution) *FlowForExecution {
	this := FlowForExecution{}
	this.Id = id
	this.Namespace = namespace
	this.Disabled = disabled
	this.Deleted = deleted
	this.Tasks = tasks
	return &this
}

// NewFlowForExecutionWithDefaults instantiates a new FlowForExecution object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFlowForExecutionWithDefaults() *FlowForExecution {
	this := FlowForExecution{}
	return &this
}

// GetId returns the Id field value
func (o *FlowForExecution) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *FlowForExecution) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *FlowForExecution) SetId(v string) {
	o.Id = v
}

// GetNamespace returns the Namespace field value
func (o *FlowForExecution) GetNamespace() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value
// and a boolean to check if the value has been set.
func (o *FlowForExecution) GetNamespaceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Namespace, true
}

// SetNamespace sets field value
func (o *FlowForExecution) SetNamespace(v string) {
	o.Namespace = v
}

// GetRevision returns the Revision field value if set, zero value otherwise.
func (o *FlowForExecution) GetRevision() int32 {
	if o == nil || IsNil(o.Revision) {
		var ret int32
		return ret
	}
	return *o.Revision
}

// GetRevisionOk returns a tuple with the Revision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowForExecution) GetRevisionOk() (*int32, bool) {
	if o == nil || IsNil(o.Revision) {
		return nil, false
	}
	return o.Revision, true
}

// HasRevision returns a boolean if a field has been set.
func (o *FlowForExecution) HasRevision() bool {
	if o != nil && !IsNil(o.Revision) {
		return true
	}

	return false
}

// SetRevision gets a reference to the given int32 and assigns it to the Revision field.
func (o *FlowForExecution) SetRevision(v int32) {
	o.Revision = &v
}

// GetInputs returns the Inputs field value if set, zero value otherwise.
func (o *FlowForExecution) GetInputs() []InputObject {
	if o == nil || IsNil(o.Inputs) {
		var ret []InputObject
		return ret
	}
	return o.Inputs
}

// GetInputsOk returns a tuple with the Inputs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowForExecution) GetInputsOk() ([]InputObject, bool) {
	if o == nil || IsNil(o.Inputs) {
		return nil, false
	}
	return o.Inputs, true
}

// HasInputs returns a boolean if a field has been set.
func (o *FlowForExecution) HasInputs() bool {
	if o != nil && !IsNil(o.Inputs) {
		return true
	}

	return false
}

// SetInputs gets a reference to the given []InputObject and assigns it to the Inputs field.
func (o *FlowForExecution) SetInputs(v []InputObject) {
	o.Inputs = v
}

// GetOutputs returns the Outputs field value if set, zero value otherwise.
func (o *FlowForExecution) GetOutputs() []Output {
	if o == nil || IsNil(o.Outputs) {
		var ret []Output
		return ret
	}
	return o.Outputs
}

// GetOutputsOk returns a tuple with the Outputs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowForExecution) GetOutputsOk() ([]Output, bool) {
	if o == nil || IsNil(o.Outputs) {
		return nil, false
	}
	return o.Outputs, true
}

// HasOutputs returns a boolean if a field has been set.
func (o *FlowForExecution) HasOutputs() bool {
	if o != nil && !IsNil(o.Outputs) {
		return true
	}

	return false
}

// SetOutputs gets a reference to the given []Output and assigns it to the Outputs field.
func (o *FlowForExecution) SetOutputs(v []Output) {
	o.Outputs = v
}

// GetDisabled returns the Disabled field value
func (o *FlowForExecution) GetDisabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value
// and a boolean to check if the value has been set.
func (o *FlowForExecution) GetDisabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Disabled, true
}

// SetDisabled sets field value
func (o *FlowForExecution) SetDisabled(v bool) {
	o.Disabled = v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *FlowForExecution) GetLabels() FlowForExecutionAllOfLabels {
	if o == nil || IsNil(o.Labels) {
		var ret FlowForExecutionAllOfLabels
		return ret
	}
	return *o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowForExecution) GetLabelsOk() (*FlowForExecutionAllOfLabels, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *FlowForExecution) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given FlowForExecutionAllOfLabels and assigns it to the Labels field.
func (o *FlowForExecution) SetLabels(v FlowForExecutionAllOfLabels) {
	o.Labels = &v
}

// GetVariables returns the Variables field value if set, zero value otherwise.
func (o *FlowForExecution) GetVariables() map[string]interface{} {
	if o == nil || IsNil(o.Variables) {
		var ret map[string]interface{}
		return ret
	}
	return o.Variables
}

// GetVariablesOk returns a tuple with the Variables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowForExecution) GetVariablesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Variables) {
		return map[string]interface{}{}, false
	}
	return o.Variables, true
}

// HasVariables returns a boolean if a field has been set.
func (o *FlowForExecution) HasVariables() bool {
	if o != nil && !IsNil(o.Variables) {
		return true
	}

	return false
}

// SetVariables gets a reference to the given map[string]interface{} and assigns it to the Variables field.
func (o *FlowForExecution) SetVariables(v map[string]interface{}) {
	o.Variables = v
}

// GetWorkerGroup returns the WorkerGroup field value if set, zero value otherwise.
func (o *FlowForExecution) GetWorkerGroup() WorkerGroup {
	if o == nil || IsNil(o.WorkerGroup) {
		var ret WorkerGroup
		return ret
	}
	return *o.WorkerGroup
}

// GetWorkerGroupOk returns a tuple with the WorkerGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowForExecution) GetWorkerGroupOk() (*WorkerGroup, bool) {
	if o == nil || IsNil(o.WorkerGroup) {
		return nil, false
	}
	return o.WorkerGroup, true
}

// HasWorkerGroup returns a boolean if a field has been set.
func (o *FlowForExecution) HasWorkerGroup() bool {
	if o != nil && !IsNil(o.WorkerGroup) {
		return true
	}

	return false
}

// SetWorkerGroup gets a reference to the given WorkerGroup and assigns it to the WorkerGroup field.
func (o *FlowForExecution) SetWorkerGroup(v WorkerGroup) {
	o.WorkerGroup = &v
}

// GetDeleted returns the Deleted field value
func (o *FlowForExecution) GetDeleted() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Deleted
}

// GetDeletedOk returns a tuple with the Deleted field value
// and a boolean to check if the value has been set.
func (o *FlowForExecution) GetDeletedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Deleted, true
}

// SetDeleted sets field value
func (o *FlowForExecution) SetDeleted(v bool) {
	o.Deleted = v
}

// GetTasks returns the Tasks field value
func (o *FlowForExecution) GetTasks() []TaskForExecution {
	if o == nil {
		var ret []TaskForExecution
		return ret
	}

	return o.Tasks
}

// GetTasksOk returns a tuple with the Tasks field value
// and a boolean to check if the value has been set.
func (o *FlowForExecution) GetTasksOk() ([]TaskForExecution, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tasks, true
}

// SetTasks sets field value
func (o *FlowForExecution) SetTasks(v []TaskForExecution) {
	o.Tasks = v
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *FlowForExecution) GetErrors() []TaskForExecution {
	if o == nil || IsNil(o.Errors) {
		var ret []TaskForExecution
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowForExecution) GetErrorsOk() ([]TaskForExecution, bool) {
	if o == nil || IsNil(o.Errors) {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *FlowForExecution) HasErrors() bool {
	if o != nil && !IsNil(o.Errors) {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []TaskForExecution and assigns it to the Errors field.
func (o *FlowForExecution) SetErrors(v []TaskForExecution) {
	o.Errors = v
}

// GetFinally returns the Finally field value if set, zero value otherwise.
func (o *FlowForExecution) GetFinally() []TaskForExecution {
	if o == nil || IsNil(o.Finally) {
		var ret []TaskForExecution
		return ret
	}
	return o.Finally
}

// GetFinallyOk returns a tuple with the Finally field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowForExecution) GetFinallyOk() ([]TaskForExecution, bool) {
	if o == nil || IsNil(o.Finally) {
		return nil, false
	}
	return o.Finally, true
}

// HasFinally returns a boolean if a field has been set.
func (o *FlowForExecution) HasFinally() bool {
	if o != nil && !IsNil(o.Finally) {
		return true
	}

	return false
}

// SetFinally gets a reference to the given []TaskForExecution and assigns it to the Finally field.
func (o *FlowForExecution) SetFinally(v []TaskForExecution) {
	o.Finally = v
}

// GetAfterExecution returns the AfterExecution field value if set, zero value otherwise.
func (o *FlowForExecution) GetAfterExecution() []TaskForExecution {
	if o == nil || IsNil(o.AfterExecution) {
		var ret []TaskForExecution
		return ret
	}
	return o.AfterExecution
}

// GetAfterExecutionOk returns a tuple with the AfterExecution field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowForExecution) GetAfterExecutionOk() ([]TaskForExecution, bool) {
	if o == nil || IsNil(o.AfterExecution) {
		return nil, false
	}
	return o.AfterExecution, true
}

// HasAfterExecution returns a boolean if a field has been set.
func (o *FlowForExecution) HasAfterExecution() bool {
	if o != nil && !IsNil(o.AfterExecution) {
		return true
	}

	return false
}

// SetAfterExecution gets a reference to the given []TaskForExecution and assigns it to the AfterExecution field.
func (o *FlowForExecution) SetAfterExecution(v []TaskForExecution) {
	o.AfterExecution = v
}

// GetTriggers returns the Triggers field value if set, zero value otherwise.
func (o *FlowForExecution) GetTriggers() []AbstractTriggerForExecution {
	if o == nil || IsNil(o.Triggers) {
		var ret []AbstractTriggerForExecution
		return ret
	}
	return o.Triggers
}

// GetTriggersOk returns a tuple with the Triggers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowForExecution) GetTriggersOk() ([]AbstractTriggerForExecution, bool) {
	if o == nil || IsNil(o.Triggers) {
		return nil, false
	}
	return o.Triggers, true
}

// HasTriggers returns a boolean if a field has been set.
func (o *FlowForExecution) HasTriggers() bool {
	if o != nil && !IsNil(o.Triggers) {
		return true
	}

	return false
}

// SetTriggers gets a reference to the given []AbstractTriggerForExecution and assigns it to the Triggers field.
func (o *FlowForExecution) SetTriggers(v []AbstractTriggerForExecution) {
	o.Triggers = v
}

func (o FlowForExecution) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FlowForExecution) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["namespace"] = o.Namespace
	if !IsNil(o.Revision) {
		toSerialize["revision"] = o.Revision
	}
	if !IsNil(o.Inputs) {
		toSerialize["inputs"] = o.Inputs
	}
	if !IsNil(o.Outputs) {
		toSerialize["outputs"] = o.Outputs
	}
	toSerialize["disabled"] = o.Disabled
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	if !IsNil(o.Variables) {
		toSerialize["variables"] = o.Variables
	}
	if !IsNil(o.WorkerGroup) {
		toSerialize["workerGroup"] = o.WorkerGroup
	}
	toSerialize["deleted"] = o.Deleted
	toSerialize["tasks"] = o.Tasks
	if !IsNil(o.Errors) {
		toSerialize["errors"] = o.Errors
	}
	if !IsNil(o.Finally) {
		toSerialize["finally"] = o.Finally
	}
	if !IsNil(o.AfterExecution) {
		toSerialize["afterExecution"] = o.AfterExecution
	}
	if !IsNil(o.Triggers) {
		toSerialize["triggers"] = o.Triggers
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FlowForExecution) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"namespace",
		"disabled",
		"deleted",
		"tasks",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFlowForExecution := _FlowForExecution{}

	err = json.Unmarshal(data, &varFlowForExecution)

	if err != nil {
		return err
	}

	*o = FlowForExecution(varFlowForExecution)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "namespace")
		delete(additionalProperties, "revision")
		delete(additionalProperties, "inputs")
		delete(additionalProperties, "outputs")
		delete(additionalProperties, "disabled")
		delete(additionalProperties, "labels")
		delete(additionalProperties, "variables")
		delete(additionalProperties, "workerGroup")
		delete(additionalProperties, "deleted")
		delete(additionalProperties, "tasks")
		delete(additionalProperties, "errors")
		delete(additionalProperties, "finally")
		delete(additionalProperties, "afterExecution")
		delete(additionalProperties, "triggers")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFlowForExecution struct {
	value *FlowForExecution
	isSet bool
}

func (v NullableFlowForExecution) Get() *FlowForExecution {
	return v.value
}

func (v *NullableFlowForExecution) Set(val *FlowForExecution) {
	v.value = val
	v.isSet = true
}

func (v NullableFlowForExecution) IsSet() bool {
	return v.isSet
}

func (v *NullableFlowForExecution) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFlowForExecution(val *FlowForExecution) *NullableFlowForExecution {
	return &NullableFlowForExecution{value: val, isSet: true}
}

func (v NullableFlowForExecution) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFlowForExecution) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
