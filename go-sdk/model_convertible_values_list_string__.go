/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
)

// checks if the ConvertibleValuesListString type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConvertibleValuesListString{}

// ConvertibleValuesListString struct for ConvertibleValuesListString
type ConvertibleValuesListString struct {
	ConversionService    map[string]interface{} `json:"conversionService"`
	Empty                *bool                  `json:"empty,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ConvertibleValuesListString ConvertibleValuesListString

// NewConvertibleValuesListString instantiates a new ConvertibleValuesListString object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConvertibleValuesListString(conversionService map[string]interface{}) *ConvertibleValuesListString {
	this := ConvertibleValuesListString{}
	this.ConversionService = conversionService
	return &this
}

// NewConvertibleValuesListStringWithDefaults instantiates a new ConvertibleValuesListString object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConvertibleValuesListStringWithDefaults() *ConvertibleValuesListString {
	this := ConvertibleValuesListString{}
	return &this
}

// GetConversionService returns the ConversionService field value
func (o *ConvertibleValuesListString) GetConversionService() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.ConversionService
}

// GetConversionServiceOk returns a tuple with the ConversionService field value
// and a boolean to check if the value has been set.
func (o *ConvertibleValuesListString) GetConversionServiceOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.ConversionService, true
}

// SetConversionService sets field value
func (o *ConvertibleValuesListString) SetConversionService(v map[string]interface{}) {
	o.ConversionService = v
}

// GetEmpty returns the Empty field value if set, zero value otherwise.
func (o *ConvertibleValuesListString) GetEmpty() bool {
	if o == nil || IsNil(o.Empty) {
		var ret bool
		return ret
	}
	return *o.Empty
}

// GetEmptyOk returns a tuple with the Empty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConvertibleValuesListString) GetEmptyOk() (*bool, bool) {
	if o == nil || IsNil(o.Empty) {
		return nil, false
	}
	return o.Empty, true
}

// HasEmpty returns a boolean if a field has been set.
func (o *ConvertibleValuesListString) HasEmpty() bool {
	if o != nil && !IsNil(o.Empty) {
		return true
	}

	return false
}

// SetEmpty gets a reference to the given bool and assigns it to the Empty field.
func (o *ConvertibleValuesListString) SetEmpty(v bool) {
	o.Empty = &v
}

func (o ConvertibleValuesListString) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConvertibleValuesListString) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["conversionService"] = o.ConversionService
	if !IsNil(o.Empty) {
		toSerialize["empty"] = o.Empty
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ConvertibleValuesListString) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"conversionService",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConvertibleValuesListString := _ConvertibleValuesListString{}

	err = json.Unmarshal(data, &varConvertibleValuesListString)

	if err != nil {
		return err
	}

	*o = ConvertibleValuesListString(varConvertibleValuesListString)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "conversionService")
		delete(additionalProperties, "empty")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableConvertibleValuesListString struct {
	value *ConvertibleValuesListString
	isSet bool
}

func (v NullableConvertibleValuesListString) Get() *ConvertibleValuesListString {
	return v.value
}

func (v *NullableConvertibleValuesListString) Set(val *ConvertibleValuesListString) {
	v.value = val
	v.isSet = true
}

func (v NullableConvertibleValuesListString) IsSet() bool {
	return v.isSet
}

func (v *NullableConvertibleValuesListString) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConvertibleValuesListString(val *ConvertibleValuesListString) *NullableConvertibleValuesListString {
	return &NullableConvertibleValuesListString{value: val, isSet: true}
}

func (v NullableConvertibleValuesListString) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConvertibleValuesListString) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
