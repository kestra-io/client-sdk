/*
Kestra EE

All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
)

// checks if the ClusterControllerApiPluginArtifactListPluginArtifact type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClusterControllerApiPluginArtifactListPluginArtifact{}

// ClusterControllerApiPluginArtifactListPluginArtifact struct for ClusterControllerApiPluginArtifactListPluginArtifact
type ClusterControllerApiPluginArtifactListPluginArtifact struct {
	Total   *int32                   `json:"total,omitempty"`
	Results []map[string]interface{} `json:"results,omitempty"`
}

// NewClusterControllerApiPluginArtifactListPluginArtifact instantiates a new ClusterControllerApiPluginArtifactListPluginArtifact object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterControllerApiPluginArtifactListPluginArtifact() *ClusterControllerApiPluginArtifactListPluginArtifact {
	this := ClusterControllerApiPluginArtifactListPluginArtifact{}
	return &this
}

// NewClusterControllerApiPluginArtifactListPluginArtifactWithDefaults instantiates a new ClusterControllerApiPluginArtifactListPluginArtifact object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterControllerApiPluginArtifactListPluginArtifactWithDefaults() *ClusterControllerApiPluginArtifactListPluginArtifact {
	this := ClusterControllerApiPluginArtifactListPluginArtifact{}
	return &this
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *ClusterControllerApiPluginArtifactListPluginArtifact) GetTotal() int32 {
	if o == nil || IsNil(o.Total) {
		var ret int32
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterControllerApiPluginArtifactListPluginArtifact) GetTotalOk() (*int32, bool) {
	if o == nil || IsNil(o.Total) {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *ClusterControllerApiPluginArtifactListPluginArtifact) HasTotal() bool {
	if o != nil && !IsNil(o.Total) {
		return true
	}

	return false
}

// SetTotal gets a reference to the given int32 and assigns it to the Total field.
func (o *ClusterControllerApiPluginArtifactListPluginArtifact) SetTotal(v int32) {
	o.Total = &v
}

// GetResults returns the Results field value if set, zero value otherwise.
func (o *ClusterControllerApiPluginArtifactListPluginArtifact) GetResults() []map[string]interface{} {
	if o == nil || IsNil(o.Results) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Results
}

// GetResultsOk returns a tuple with the Results field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterControllerApiPluginArtifactListPluginArtifact) GetResultsOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Results) {
		return nil, false
	}
	return o.Results, true
}

// HasResults returns a boolean if a field has been set.
func (o *ClusterControllerApiPluginArtifactListPluginArtifact) HasResults() bool {
	if o != nil && !IsNil(o.Results) {
		return true
	}

	return false
}

// SetResults gets a reference to the given []map[string]interface{} and assigns it to the Results field.
func (o *ClusterControllerApiPluginArtifactListPluginArtifact) SetResults(v []map[string]interface{}) {
	o.Results = v
}

func (o ClusterControllerApiPluginArtifactListPluginArtifact) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClusterControllerApiPluginArtifactListPluginArtifact) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Total) {
		toSerialize["total"] = o.Total
	}
	if !IsNil(o.Results) {
		toSerialize["results"] = o.Results
	}
	return toSerialize, nil
}

type NullableClusterControllerApiPluginArtifactListPluginArtifact struct {
	value *ClusterControllerApiPluginArtifactListPluginArtifact
	isSet bool
}

func (v NullableClusterControllerApiPluginArtifactListPluginArtifact) Get() *ClusterControllerApiPluginArtifactListPluginArtifact {
	return v.value
}

func (v *NullableClusterControllerApiPluginArtifactListPluginArtifact) Set(val *ClusterControllerApiPluginArtifactListPluginArtifact) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterControllerApiPluginArtifactListPluginArtifact) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterControllerApiPluginArtifactListPluginArtifact) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterControllerApiPluginArtifactListPluginArtifact(val *ClusterControllerApiPluginArtifactListPluginArtifact) *NullableClusterControllerApiPluginArtifactListPluginArtifact {
	return &NullableClusterControllerApiPluginArtifactListPluginArtifact{value: val, isSet: true}
}

func (v NullableClusterControllerApiPluginArtifactListPluginArtifact) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterControllerApiPluginArtifactListPluginArtifact) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
