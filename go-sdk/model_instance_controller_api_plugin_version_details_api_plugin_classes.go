/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
)

// checks if the InstanceControllerApiPluginVersionDetailsApiPluginClasses type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InstanceControllerApiPluginVersionDetailsApiPluginClasses{}

// InstanceControllerApiPluginVersionDetailsApiPluginClasses struct for InstanceControllerApiPluginVersionDetailsApiPluginClasses
type InstanceControllerApiPluginVersionDetailsApiPluginClasses struct {
	Type                 *string                                                   `json:"type,omitempty"`
	Classes              []InstanceControllerApiPluginVersionDetailsApiPluginClass `json:"classes,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _InstanceControllerApiPluginVersionDetailsApiPluginClasses InstanceControllerApiPluginVersionDetailsApiPluginClasses

// NewInstanceControllerApiPluginVersionDetailsApiPluginClasses instantiates a new InstanceControllerApiPluginVersionDetailsApiPluginClasses object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstanceControllerApiPluginVersionDetailsApiPluginClasses() *InstanceControllerApiPluginVersionDetailsApiPluginClasses {
	this := InstanceControllerApiPluginVersionDetailsApiPluginClasses{}
	return &this
}

// NewInstanceControllerApiPluginVersionDetailsApiPluginClassesWithDefaults instantiates a new InstanceControllerApiPluginVersionDetailsApiPluginClasses object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceControllerApiPluginVersionDetailsApiPluginClassesWithDefaults() *InstanceControllerApiPluginVersionDetailsApiPluginClasses {
	this := InstanceControllerApiPluginVersionDetailsApiPluginClasses{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *InstanceControllerApiPluginVersionDetailsApiPluginClasses) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceControllerApiPluginVersionDetailsApiPluginClasses) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *InstanceControllerApiPluginVersionDetailsApiPluginClasses) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *InstanceControllerApiPluginVersionDetailsApiPluginClasses) SetType(v string) {
	o.Type = &v
}

// GetClasses returns the Classes field value if set, zero value otherwise.
func (o *InstanceControllerApiPluginVersionDetailsApiPluginClasses) GetClasses() []InstanceControllerApiPluginVersionDetailsApiPluginClass {
	if o == nil || IsNil(o.Classes) {
		var ret []InstanceControllerApiPluginVersionDetailsApiPluginClass
		return ret
	}
	return o.Classes
}

// GetClassesOk returns a tuple with the Classes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceControllerApiPluginVersionDetailsApiPluginClasses) GetClassesOk() ([]InstanceControllerApiPluginVersionDetailsApiPluginClass, bool) {
	if o == nil || IsNil(o.Classes) {
		return nil, false
	}
	return o.Classes, true
}

// HasClasses returns a boolean if a field has been set.
func (o *InstanceControllerApiPluginVersionDetailsApiPluginClasses) HasClasses() bool {
	if o != nil && !IsNil(o.Classes) {
		return true
	}

	return false
}

// SetClasses gets a reference to the given []InstanceControllerApiPluginVersionDetailsApiPluginClass and assigns it to the Classes field.
func (o *InstanceControllerApiPluginVersionDetailsApiPluginClasses) SetClasses(v []InstanceControllerApiPluginVersionDetailsApiPluginClass) {
	o.Classes = v
}

func (o InstanceControllerApiPluginVersionDetailsApiPluginClasses) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InstanceControllerApiPluginVersionDetailsApiPluginClasses) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Classes) {
		toSerialize["classes"] = o.Classes
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *InstanceControllerApiPluginVersionDetailsApiPluginClasses) UnmarshalJSON(data []byte) (err error) {
	varInstanceControllerApiPluginVersionDetailsApiPluginClasses := _InstanceControllerApiPluginVersionDetailsApiPluginClasses{}

	err = json.Unmarshal(data, &varInstanceControllerApiPluginVersionDetailsApiPluginClasses)

	if err != nil {
		return err
	}

	*o = InstanceControllerApiPluginVersionDetailsApiPluginClasses(varInstanceControllerApiPluginVersionDetailsApiPluginClasses)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "classes")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInstanceControllerApiPluginVersionDetailsApiPluginClasses struct {
	value *InstanceControllerApiPluginVersionDetailsApiPluginClasses
	isSet bool
}

func (v NullableInstanceControllerApiPluginVersionDetailsApiPluginClasses) Get() *InstanceControllerApiPluginVersionDetailsApiPluginClasses {
	return v.value
}

func (v *NullableInstanceControllerApiPluginVersionDetailsApiPluginClasses) Set(val *InstanceControllerApiPluginVersionDetailsApiPluginClasses) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceControllerApiPluginVersionDetailsApiPluginClasses) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceControllerApiPluginVersionDetailsApiPluginClasses) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceControllerApiPluginVersionDetailsApiPluginClasses(val *InstanceControllerApiPluginVersionDetailsApiPluginClasses) *NullableInstanceControllerApiPluginVersionDetailsApiPluginClasses {
	return &NullableInstanceControllerApiPluginVersionDetailsApiPluginClasses{value: val, isSet: true}
}

func (v NullableInstanceControllerApiPluginVersionDetailsApiPluginClasses) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceControllerApiPluginVersionDetailsApiPluginClasses) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
