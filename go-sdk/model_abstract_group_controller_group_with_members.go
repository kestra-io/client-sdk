/*
Kestra EE

All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the AbstractGroupControllerGroupWithMembers type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AbstractGroupControllerGroupWithMembers{}

// AbstractGroupControllerGroupWithMembers struct for AbstractGroupControllerGroupWithMembers
type AbstractGroupControllerGroupWithMembers struct {
	Id          *string           `json:"id,omitempty"`
	Name        string            `json:"name"`
	Description *string           `json:"description,omitempty"`
	Deleted     bool              `json:"deleted"`
	Provider    *IdentityProvider `json:"provider,omitempty"`
	MembersId   []string          `json:"membersId,omitempty"`
}

type _AbstractGroupControllerGroupWithMembers AbstractGroupControllerGroupWithMembers

// NewAbstractGroupControllerGroupWithMembers instantiates a new AbstractGroupControllerGroupWithMembers object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAbstractGroupControllerGroupWithMembers(name string, deleted bool) *AbstractGroupControllerGroupWithMembers {
	this := AbstractGroupControllerGroupWithMembers{}
	this.Name = name
	this.Deleted = deleted
	return &this
}

// NewAbstractGroupControllerGroupWithMembersWithDefaults instantiates a new AbstractGroupControllerGroupWithMembers object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAbstractGroupControllerGroupWithMembersWithDefaults() *AbstractGroupControllerGroupWithMembers {
	this := AbstractGroupControllerGroupWithMembers{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AbstractGroupControllerGroupWithMembers) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AbstractGroupControllerGroupWithMembers) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AbstractGroupControllerGroupWithMembers) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AbstractGroupControllerGroupWithMembers) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *AbstractGroupControllerGroupWithMembers) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AbstractGroupControllerGroupWithMembers) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AbstractGroupControllerGroupWithMembers) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AbstractGroupControllerGroupWithMembers) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AbstractGroupControllerGroupWithMembers) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AbstractGroupControllerGroupWithMembers) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AbstractGroupControllerGroupWithMembers) SetDescription(v string) {
	o.Description = &v
}

// GetDeleted returns the Deleted field value
func (o *AbstractGroupControllerGroupWithMembers) GetDeleted() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Deleted
}

// GetDeletedOk returns a tuple with the Deleted field value
// and a boolean to check if the value has been set.
func (o *AbstractGroupControllerGroupWithMembers) GetDeletedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Deleted, true
}

// SetDeleted sets field value
func (o *AbstractGroupControllerGroupWithMembers) SetDeleted(v bool) {
	o.Deleted = v
}

// GetProvider returns the Provider field value if set, zero value otherwise.
func (o *AbstractGroupControllerGroupWithMembers) GetProvider() IdentityProvider {
	if o == nil || IsNil(o.Provider) {
		var ret IdentityProvider
		return ret
	}
	return *o.Provider
}

// GetProviderOk returns a tuple with the Provider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AbstractGroupControllerGroupWithMembers) GetProviderOk() (*IdentityProvider, bool) {
	if o == nil || IsNil(o.Provider) {
		return nil, false
	}
	return o.Provider, true
}

// HasProvider returns a boolean if a field has been set.
func (o *AbstractGroupControllerGroupWithMembers) HasProvider() bool {
	if o != nil && !IsNil(o.Provider) {
		return true
	}

	return false
}

// SetProvider gets a reference to the given IdentityProvider and assigns it to the Provider field.
func (o *AbstractGroupControllerGroupWithMembers) SetProvider(v IdentityProvider) {
	o.Provider = &v
}

// GetMembersId returns the MembersId field value if set, zero value otherwise.
func (o *AbstractGroupControllerGroupWithMembers) GetMembersId() []string {
	if o == nil || IsNil(o.MembersId) {
		var ret []string
		return ret
	}
	return o.MembersId
}

// GetMembersIdOk returns a tuple with the MembersId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AbstractGroupControllerGroupWithMembers) GetMembersIdOk() ([]string, bool) {
	if o == nil || IsNil(o.MembersId) {
		return nil, false
	}
	return o.MembersId, true
}

// HasMembersId returns a boolean if a field has been set.
func (o *AbstractGroupControllerGroupWithMembers) HasMembersId() bool {
	if o != nil && !IsNil(o.MembersId) {
		return true
	}

	return false
}

// SetMembersId gets a reference to the given []string and assigns it to the MembersId field.
func (o *AbstractGroupControllerGroupWithMembers) SetMembersId(v []string) {
	o.MembersId = v
}

func (o AbstractGroupControllerGroupWithMembers) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AbstractGroupControllerGroupWithMembers) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["deleted"] = o.Deleted
	if !IsNil(o.Provider) {
		toSerialize["provider"] = o.Provider
	}
	if !IsNil(o.MembersId) {
		toSerialize["membersId"] = o.MembersId
	}
	return toSerialize, nil
}

func (o *AbstractGroupControllerGroupWithMembers) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"deleted",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAbstractGroupControllerGroupWithMembers := _AbstractGroupControllerGroupWithMembers{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAbstractGroupControllerGroupWithMembers)

	if err != nil {
		return err
	}

	*o = AbstractGroupControllerGroupWithMembers(varAbstractGroupControllerGroupWithMembers)

	return err
}

type NullableAbstractGroupControllerGroupWithMembers struct {
	value *AbstractGroupControllerGroupWithMembers
	isSet bool
}

func (v NullableAbstractGroupControllerGroupWithMembers) Get() *AbstractGroupControllerGroupWithMembers {
	return v.value
}

func (v *NullableAbstractGroupControllerGroupWithMembers) Set(val *AbstractGroupControllerGroupWithMembers) {
	v.value = val
	v.isSet = true
}

func (v NullableAbstractGroupControllerGroupWithMembers) IsSet() bool {
	return v.isSet
}

func (v *NullableAbstractGroupControllerGroupWithMembers) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAbstractGroupControllerGroupWithMembers(val *AbstractGroupControllerGroupWithMembers) *NullableAbstractGroupControllerGroupWithMembers {
	return &NullableAbstractGroupControllerGroupWithMembers{value: val, isSet: true}
}

func (v NullableAbstractGroupControllerGroupWithMembers) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAbstractGroupControllerGroupWithMembers) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
