/*
Kestra EE

All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
)

// checks if the DeleteExecutionsByQueryRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeleteExecutionsByQueryRequest{}

// DeleteExecutionsByQueryRequest struct for DeleteExecutionsByQueryRequest
type DeleteExecutionsByQueryRequest struct {
	// Filters
	Filters []QueryFilter `json:"filters,omitempty"`
}

// NewDeleteExecutionsByQueryRequest instantiates a new DeleteExecutionsByQueryRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeleteExecutionsByQueryRequest() *DeleteExecutionsByQueryRequest {
	this := DeleteExecutionsByQueryRequest{}
	return &this
}

// NewDeleteExecutionsByQueryRequestWithDefaults instantiates a new DeleteExecutionsByQueryRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeleteExecutionsByQueryRequestWithDefaults() *DeleteExecutionsByQueryRequest {
	this := DeleteExecutionsByQueryRequest{}
	return &this
}

// GetFilters returns the Filters field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeleteExecutionsByQueryRequest) GetFilters() []QueryFilter {
	if o == nil {
		var ret []QueryFilter
		return ret
	}
	return o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeleteExecutionsByQueryRequest) GetFiltersOk() ([]QueryFilter, bool) {
	if o == nil || IsNil(o.Filters) {
		return nil, false
	}
	return o.Filters, true
}

// HasFilters returns a boolean if a field has been set.
func (o *DeleteExecutionsByQueryRequest) HasFilters() bool {
	if o != nil && !IsNil(o.Filters) {
		return true
	}

	return false
}

// SetFilters gets a reference to the given []QueryFilter and assigns it to the Filters field.
func (o *DeleteExecutionsByQueryRequest) SetFilters(v []QueryFilter) {
	o.Filters = v
}

func (o DeleteExecutionsByQueryRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeleteExecutionsByQueryRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Filters != nil {
		toSerialize["filters"] = o.Filters
	}
	return toSerialize, nil
}

type NullableDeleteExecutionsByQueryRequest struct {
	value *DeleteExecutionsByQueryRequest
	isSet bool
}

func (v NullableDeleteExecutionsByQueryRequest) Get() *DeleteExecutionsByQueryRequest {
	return v.value
}

func (v *NullableDeleteExecutionsByQueryRequest) Set(val *DeleteExecutionsByQueryRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDeleteExecutionsByQueryRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDeleteExecutionsByQueryRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeleteExecutionsByQueryRequest(val *DeleteExecutionsByQueryRequest) *NullableDeleteExecutionsByQueryRequest {
	return &NullableDeleteExecutionsByQueryRequest{value: val, isSet: true}
}

func (v NullableDeleteExecutionsByQueryRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeleteExecutionsByQueryRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
