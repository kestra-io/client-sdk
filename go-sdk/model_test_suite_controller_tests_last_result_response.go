/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
)

// checks if the TestSuiteControllerTestsLastResultResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TestSuiteControllerTestsLastResultResponse{}

// TestSuiteControllerTestsLastResultResponse struct for TestSuiteControllerTestsLastResultResponse
type TestSuiteControllerTestsLastResultResponse struct {
	Results              []TestSuiteRunResult `json:"results"`
	AdditionalProperties map[string]interface{}
}

type _TestSuiteControllerTestsLastResultResponse TestSuiteControllerTestsLastResultResponse

// NewTestSuiteControllerTestsLastResultResponse instantiates a new TestSuiteControllerTestsLastResultResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTestSuiteControllerTestsLastResultResponse(results []TestSuiteRunResult) *TestSuiteControllerTestsLastResultResponse {
	this := TestSuiteControllerTestsLastResultResponse{}
	this.Results = results
	return &this
}

// NewTestSuiteControllerTestsLastResultResponseWithDefaults instantiates a new TestSuiteControllerTestsLastResultResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTestSuiteControllerTestsLastResultResponseWithDefaults() *TestSuiteControllerTestsLastResultResponse {
	this := TestSuiteControllerTestsLastResultResponse{}
	return &this
}

// GetResults returns the Results field value
func (o *TestSuiteControllerTestsLastResultResponse) GetResults() []TestSuiteRunResult {
	if o == nil {
		var ret []TestSuiteRunResult
		return ret
	}

	return o.Results
}

// GetResultsOk returns a tuple with the Results field value
// and a boolean to check if the value has been set.
func (o *TestSuiteControllerTestsLastResultResponse) GetResultsOk() ([]TestSuiteRunResult, bool) {
	if o == nil {
		return nil, false
	}
	return o.Results, true
}

// SetResults sets field value
func (o *TestSuiteControllerTestsLastResultResponse) SetResults(v []TestSuiteRunResult) {
	o.Results = v
}

func (o TestSuiteControllerTestsLastResultResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TestSuiteControllerTestsLastResultResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["results"] = o.Results

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TestSuiteControllerTestsLastResultResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"results",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTestSuiteControllerTestsLastResultResponse := _TestSuiteControllerTestsLastResultResponse{}

	err = json.Unmarshal(data, &varTestSuiteControllerTestsLastResultResponse)

	if err != nil {
		return err
	}

	*o = TestSuiteControllerTestsLastResultResponse(varTestSuiteControllerTestsLastResultResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "results")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTestSuiteControllerTestsLastResultResponse struct {
	value *TestSuiteControllerTestsLastResultResponse
	isSet bool
}

func (v NullableTestSuiteControllerTestsLastResultResponse) Get() *TestSuiteControllerTestsLastResultResponse {
	return v.value
}

func (v *NullableTestSuiteControllerTestsLastResultResponse) Set(val *TestSuiteControllerTestsLastResultResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableTestSuiteControllerTestsLastResultResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableTestSuiteControllerTestsLastResultResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestSuiteControllerTestsLastResultResponse(val *TestSuiteControllerTestsLastResultResponse) *NullableTestSuiteControllerTestsLastResultResponse {
	return &NullableTestSuiteControllerTestsLastResultResponse{value: val, isSet: true}
}

func (v NullableTestSuiteControllerTestsLastResultResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestSuiteControllerTestsLastResultResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
