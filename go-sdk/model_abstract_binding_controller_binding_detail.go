/*
Kestra EE

All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
)

// checks if the AbstractBindingControllerBindingDetail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AbstractBindingControllerBindingDetail{}

// AbstractBindingControllerBindingDetail struct for AbstractBindingControllerBindingDetail
type AbstractBindingControllerBindingDetail struct {
	Binding *Binding `json:"binding,omitempty"`
	Role    *Role    `json:"role,omitempty"`
	User    *ApiUser `json:"user,omitempty"`
	Group   *Group   `json:"group,omitempty"`
}

// NewAbstractBindingControllerBindingDetail instantiates a new AbstractBindingControllerBindingDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAbstractBindingControllerBindingDetail() *AbstractBindingControllerBindingDetail {
	this := AbstractBindingControllerBindingDetail{}
	return &this
}

// NewAbstractBindingControllerBindingDetailWithDefaults instantiates a new AbstractBindingControllerBindingDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAbstractBindingControllerBindingDetailWithDefaults() *AbstractBindingControllerBindingDetail {
	this := AbstractBindingControllerBindingDetail{}
	return &this
}

// GetBinding returns the Binding field value if set, zero value otherwise.
func (o *AbstractBindingControllerBindingDetail) GetBinding() Binding {
	if o == nil || IsNil(o.Binding) {
		var ret Binding
		return ret
	}
	return *o.Binding
}

// GetBindingOk returns a tuple with the Binding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AbstractBindingControllerBindingDetail) GetBindingOk() (*Binding, bool) {
	if o == nil || IsNil(o.Binding) {
		return nil, false
	}
	return o.Binding, true
}

// HasBinding returns a boolean if a field has been set.
func (o *AbstractBindingControllerBindingDetail) HasBinding() bool {
	if o != nil && !IsNil(o.Binding) {
		return true
	}

	return false
}

// SetBinding gets a reference to the given Binding and assigns it to the Binding field.
func (o *AbstractBindingControllerBindingDetail) SetBinding(v Binding) {
	o.Binding = &v
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *AbstractBindingControllerBindingDetail) GetRole() Role {
	if o == nil || IsNil(o.Role) {
		var ret Role
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AbstractBindingControllerBindingDetail) GetRoleOk() (*Role, bool) {
	if o == nil || IsNil(o.Role) {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *AbstractBindingControllerBindingDetail) HasRole() bool {
	if o != nil && !IsNil(o.Role) {
		return true
	}

	return false
}

// SetRole gets a reference to the given Role and assigns it to the Role field.
func (o *AbstractBindingControllerBindingDetail) SetRole(v Role) {
	o.Role = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *AbstractBindingControllerBindingDetail) GetUser() ApiUser {
	if o == nil || IsNil(o.User) {
		var ret ApiUser
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AbstractBindingControllerBindingDetail) GetUserOk() (*ApiUser, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *AbstractBindingControllerBindingDetail) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given ApiUser and assigns it to the User field.
func (o *AbstractBindingControllerBindingDetail) SetUser(v ApiUser) {
	o.User = &v
}

// GetGroup returns the Group field value if set, zero value otherwise.
func (o *AbstractBindingControllerBindingDetail) GetGroup() Group {
	if o == nil || IsNil(o.Group) {
		var ret Group
		return ret
	}
	return *o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AbstractBindingControllerBindingDetail) GetGroupOk() (*Group, bool) {
	if o == nil || IsNil(o.Group) {
		return nil, false
	}
	return o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *AbstractBindingControllerBindingDetail) HasGroup() bool {
	if o != nil && !IsNil(o.Group) {
		return true
	}

	return false
}

// SetGroup gets a reference to the given Group and assigns it to the Group field.
func (o *AbstractBindingControllerBindingDetail) SetGroup(v Group) {
	o.Group = &v
}

func (o AbstractBindingControllerBindingDetail) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AbstractBindingControllerBindingDetail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Binding) {
		toSerialize["binding"] = o.Binding
	}
	if !IsNil(o.Role) {
		toSerialize["role"] = o.Role
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	if !IsNil(o.Group) {
		toSerialize["group"] = o.Group
	}
	return toSerialize, nil
}

type NullableAbstractBindingControllerBindingDetail struct {
	value *AbstractBindingControllerBindingDetail
	isSet bool
}

func (v NullableAbstractBindingControllerBindingDetail) Get() *AbstractBindingControllerBindingDetail {
	return v.value
}

func (v *NullableAbstractBindingControllerBindingDetail) Set(val *AbstractBindingControllerBindingDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableAbstractBindingControllerBindingDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableAbstractBindingControllerBindingDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAbstractBindingControllerBindingDetail(val *AbstractBindingControllerBindingDetail) *NullableAbstractBindingControllerBindingDetail {
	return &NullableAbstractBindingControllerBindingDetail{value: val, isSet: true}
}

func (v NullableAbstractBindingControllerBindingDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAbstractBindingControllerBindingDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
