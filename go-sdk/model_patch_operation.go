/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
)

// checks if the PatchOperation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PatchOperation{}

// PatchOperation struct for PatchOperation
type PatchOperation struct {
	Operation            *PatchOperationType    `json:"operation,omitempty"`
	Path                 *PatchOperationPath    `json:"path,omitempty"`
	Value                map[string]interface{} `json:"value,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PatchOperation PatchOperation

// NewPatchOperation instantiates a new PatchOperation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchOperation() *PatchOperation {
	this := PatchOperation{}
	return &this
}

// NewPatchOperationWithDefaults instantiates a new PatchOperation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchOperationWithDefaults() *PatchOperation {
	this := PatchOperation{}
	return &this
}

// GetOperation returns the Operation field value if set, zero value otherwise.
func (o *PatchOperation) GetOperation() PatchOperationType {
	if o == nil || IsNil(o.Operation) {
		var ret PatchOperationType
		return ret
	}
	return *o.Operation
}

// GetOperationOk returns a tuple with the Operation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchOperation) GetOperationOk() (*PatchOperationType, bool) {
	if o == nil || IsNil(o.Operation) {
		return nil, false
	}
	return o.Operation, true
}

// HasOperation returns a boolean if a field has been set.
func (o *PatchOperation) HasOperation() bool {
	if o != nil && !IsNil(o.Operation) {
		return true
	}

	return false
}

// SetOperation gets a reference to the given PatchOperationType and assigns it to the Operation field.
func (o *PatchOperation) SetOperation(v PatchOperationType) {
	o.Operation = &v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *PatchOperation) GetPath() PatchOperationPath {
	if o == nil || IsNil(o.Path) {
		var ret PatchOperationPath
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchOperation) GetPathOk() (*PatchOperationPath, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *PatchOperation) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given PatchOperationPath and assigns it to the Path field.
func (o *PatchOperation) SetPath(v PatchOperationPath) {
	o.Path = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *PatchOperation) GetValue() map[string]interface{} {
	if o == nil || IsNil(o.Value) {
		var ret map[string]interface{}
		return ret
	}
	return o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchOperation) GetValueOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Value) {
		return map[string]interface{}{}, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *PatchOperation) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given map[string]interface{} and assigns it to the Value field.
func (o *PatchOperation) SetValue(v map[string]interface{}) {
	o.Value = v
}

func (o PatchOperation) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PatchOperation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Operation) {
		toSerialize["operation"] = o.Operation
	}
	if !IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PatchOperation) UnmarshalJSON(data []byte) (err error) {
	varPatchOperation := _PatchOperation{}

	err = json.Unmarshal(data, &varPatchOperation)

	if err != nil {
		return err
	}

	*o = PatchOperation(varPatchOperation)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "operation")
		delete(additionalProperties, "path")
		delete(additionalProperties, "value")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePatchOperation struct {
	value *PatchOperation
	isSet bool
}

func (v NullablePatchOperation) Get() *PatchOperation {
	return v.value
}

func (v *NullablePatchOperation) Set(val *PatchOperation) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchOperation) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchOperation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchOperation(val *PatchOperation) *NullablePatchOperation {
	return &NullablePatchOperation{value: val, isSet: true}
}

func (v NullablePatchOperation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchOperation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
