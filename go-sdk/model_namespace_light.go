/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
)

// checks if the NamespaceLight type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NamespaceLight{}

// NamespaceLight struct for NamespaceLight
type NamespaceLight struct {
	Id                   string `json:"id" validate:"regexp=^[a-z0-9][a-z0-9._-]*"`
	Deleted              bool   `json:"deleted"`
	AdditionalProperties map[string]interface{}
}

type _NamespaceLight NamespaceLight

// NewNamespaceLight instantiates a new NamespaceLight object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNamespaceLight(id string, deleted bool) *NamespaceLight {
	this := NamespaceLight{}
	this.Id = id
	this.Deleted = deleted
	return &this
}

// NewNamespaceLightWithDefaults instantiates a new NamespaceLight object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNamespaceLightWithDefaults() *NamespaceLight {
	this := NamespaceLight{}
	return &this
}

// GetId returns the Id field value
func (o *NamespaceLight) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *NamespaceLight) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *NamespaceLight) SetId(v string) {
	o.Id = v
}

// GetDeleted returns the Deleted field value
func (o *NamespaceLight) GetDeleted() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Deleted
}

// GetDeletedOk returns a tuple with the Deleted field value
// and a boolean to check if the value has been set.
func (o *NamespaceLight) GetDeletedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Deleted, true
}

// SetDeleted sets field value
func (o *NamespaceLight) SetDeleted(v bool) {
	o.Deleted = v
}

func (o NamespaceLight) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NamespaceLight) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["deleted"] = o.Deleted

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *NamespaceLight) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"deleted",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNamespaceLight := _NamespaceLight{}

	err = json.Unmarshal(data, &varNamespaceLight)

	if err != nil {
		return err
	}

	*o = NamespaceLight(varNamespaceLight)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "deleted")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNamespaceLight struct {
	value *NamespaceLight
	isSet bool
}

func (v NullableNamespaceLight) Get() *NamespaceLight {
	return v.value
}

func (v *NullableNamespaceLight) Set(val *NamespaceLight) {
	v.value = val
	v.isSet = true
}

func (v NullableNamespaceLight) IsSet() bool {
	return v.isSet
}

func (v *NullableNamespaceLight) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNamespaceLight(val *NamespaceLight) *NullableNamespaceLight {
	return &NullableNamespaceLight{value: val, isSet: true}
}

func (v NullableNamespaceLight) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNamespaceLight) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
