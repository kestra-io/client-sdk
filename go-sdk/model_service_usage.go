/*
Kestra EE

All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
)

// checks if the ServiceUsage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServiceUsage{}

// ServiceUsage struct for ServiceUsage
type ServiceUsage struct {
	DailyStatistics []ServiceUsageDailyServiceStatistics `json:"dailyStatistics,omitempty"`
}

// NewServiceUsage instantiates a new ServiceUsage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceUsage() *ServiceUsage {
	this := ServiceUsage{}
	return &this
}

// NewServiceUsageWithDefaults instantiates a new ServiceUsage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceUsageWithDefaults() *ServiceUsage {
	this := ServiceUsage{}
	return &this
}

// GetDailyStatistics returns the DailyStatistics field value if set, zero value otherwise.
func (o *ServiceUsage) GetDailyStatistics() []ServiceUsageDailyServiceStatistics {
	if o == nil || IsNil(o.DailyStatistics) {
		var ret []ServiceUsageDailyServiceStatistics
		return ret
	}
	return o.DailyStatistics
}

// GetDailyStatisticsOk returns a tuple with the DailyStatistics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceUsage) GetDailyStatisticsOk() ([]ServiceUsageDailyServiceStatistics, bool) {
	if o == nil || IsNil(o.DailyStatistics) {
		return nil, false
	}
	return o.DailyStatistics, true
}

// HasDailyStatistics returns a boolean if a field has been set.
func (o *ServiceUsage) HasDailyStatistics() bool {
	if o != nil && !IsNil(o.DailyStatistics) {
		return true
	}

	return false
}

// SetDailyStatistics gets a reference to the given []ServiceUsageDailyServiceStatistics and assigns it to the DailyStatistics field.
func (o *ServiceUsage) SetDailyStatistics(v []ServiceUsageDailyServiceStatistics) {
	o.DailyStatistics = v
}

func (o ServiceUsage) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServiceUsage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DailyStatistics) {
		toSerialize["dailyStatistics"] = o.DailyStatistics
	}
	return toSerialize, nil
}

type NullableServiceUsage struct {
	value *ServiceUsage
	isSet bool
}

func (v NullableServiceUsage) Get() *ServiceUsage {
	return v.value
}

func (v *NullableServiceUsage) Set(val *ServiceUsage) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceUsage) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceUsage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceUsage(val *ServiceUsage) *NullableServiceUsage {
	return &NullableServiceUsage{value: val, isSet: true}
}

func (v NullableServiceUsage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceUsage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
