/*
Kestra EE

All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the TaskForExecution type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TaskForExecution{}

// TaskForExecution struct for TaskForExecution
type TaskForExecution struct {
	Id        string                   `json:"id" validate:"regexp=^[a-zA-Z0-9][a-zA-Z0-9_-]*"`
	Type      string                   `json:"type" validate:"regexp=\\\\p{javaJavaIdentifierStart}\\\\p{javaJavaIdentifierPart}*(\\\\.\\\\p{javaJavaIdentifierStart}\\\\p{javaJavaIdentifierPart}*)*"`
	Version   *string                  `json:"version,omitempty" validate:"regexp=\\\\d+\\\\.\\\\d+\\\\.\\\\d+(-[a-zA-Z0-9-]+)?|([a-zA-Z0-9]+)"`
	Tasks     []TaskForExecution       `json:"tasks,omitempty"`
	Inputs    []InputObject            `json:"inputs,omitempty"`
	SubflowId *ExecutableTaskSubflowId `json:"subflowId,omitempty"`
}

type _TaskForExecution TaskForExecution

// NewTaskForExecution instantiates a new TaskForExecution object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaskForExecution(id string, type_ string) *TaskForExecution {
	this := TaskForExecution{}
	this.Id = id
	this.Type = type_
	return &this
}

// NewTaskForExecutionWithDefaults instantiates a new TaskForExecution object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskForExecutionWithDefaults() *TaskForExecution {
	this := TaskForExecution{}
	return &this
}

// GetId returns the Id field value
func (o *TaskForExecution) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *TaskForExecution) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *TaskForExecution) SetId(v string) {
	o.Id = v
}

// GetType returns the Type field value
func (o *TaskForExecution) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *TaskForExecution) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *TaskForExecution) SetType(v string) {
	o.Type = v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *TaskForExecution) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskForExecution) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *TaskForExecution) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *TaskForExecution) SetVersion(v string) {
	o.Version = &v
}

// GetTasks returns the Tasks field value if set, zero value otherwise.
func (o *TaskForExecution) GetTasks() []TaskForExecution {
	if o == nil || IsNil(o.Tasks) {
		var ret []TaskForExecution
		return ret
	}
	return o.Tasks
}

// GetTasksOk returns a tuple with the Tasks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskForExecution) GetTasksOk() ([]TaskForExecution, bool) {
	if o == nil || IsNil(o.Tasks) {
		return nil, false
	}
	return o.Tasks, true
}

// HasTasks returns a boolean if a field has been set.
func (o *TaskForExecution) HasTasks() bool {
	if o != nil && !IsNil(o.Tasks) {
		return true
	}

	return false
}

// SetTasks gets a reference to the given []TaskForExecution and assigns it to the Tasks field.
func (o *TaskForExecution) SetTasks(v []TaskForExecution) {
	o.Tasks = v
}

// GetInputs returns the Inputs field value if set, zero value otherwise.
func (o *TaskForExecution) GetInputs() []InputObject {
	if o == nil || IsNil(o.Inputs) {
		var ret []InputObject
		return ret
	}
	return o.Inputs
}

// GetInputsOk returns a tuple with the Inputs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskForExecution) GetInputsOk() ([]InputObject, bool) {
	if o == nil || IsNil(o.Inputs) {
		return nil, false
	}
	return o.Inputs, true
}

// HasInputs returns a boolean if a field has been set.
func (o *TaskForExecution) HasInputs() bool {
	if o != nil && !IsNil(o.Inputs) {
		return true
	}

	return false
}

// SetInputs gets a reference to the given []InputObject and assigns it to the Inputs field.
func (o *TaskForExecution) SetInputs(v []InputObject) {
	o.Inputs = v
}

// GetSubflowId returns the SubflowId field value if set, zero value otherwise.
func (o *TaskForExecution) GetSubflowId() ExecutableTaskSubflowId {
	if o == nil || IsNil(o.SubflowId) {
		var ret ExecutableTaskSubflowId
		return ret
	}
	return *o.SubflowId
}

// GetSubflowIdOk returns a tuple with the SubflowId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskForExecution) GetSubflowIdOk() (*ExecutableTaskSubflowId, bool) {
	if o == nil || IsNil(o.SubflowId) {
		return nil, false
	}
	return o.SubflowId, true
}

// HasSubflowId returns a boolean if a field has been set.
func (o *TaskForExecution) HasSubflowId() bool {
	if o != nil && !IsNil(o.SubflowId) {
		return true
	}

	return false
}

// SetSubflowId gets a reference to the given ExecutableTaskSubflowId and assigns it to the SubflowId field.
func (o *TaskForExecution) SetSubflowId(v ExecutableTaskSubflowId) {
	o.SubflowId = &v
}

func (o TaskForExecution) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TaskForExecution) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["type"] = o.Type
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.Tasks) {
		toSerialize["tasks"] = o.Tasks
	}
	if !IsNil(o.Inputs) {
		toSerialize["inputs"] = o.Inputs
	}
	if !IsNil(o.SubflowId) {
		toSerialize["subflowId"] = o.SubflowId
	}
	return toSerialize, nil
}

func (o *TaskForExecution) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTaskForExecution := _TaskForExecution{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTaskForExecution)

	if err != nil {
		return err
	}

	*o = TaskForExecution(varTaskForExecution)

	return err
}

type NullableTaskForExecution struct {
	value *TaskForExecution
	isSet bool
}

func (v NullableTaskForExecution) Get() *TaskForExecution {
	return v.value
}

func (v *NullableTaskForExecution) Set(val *TaskForExecution) {
	v.value = val
	v.isSet = true
}

func (v NullableTaskForExecution) IsSet() bool {
	return v.isSet
}

func (v *NullableTaskForExecution) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaskForExecution(val *TaskForExecution) *NullableTaskForExecution {
	return &NullableTaskForExecution{value: val, isSet: true}
}

func (v NullableTaskForExecution) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaskForExecution) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
