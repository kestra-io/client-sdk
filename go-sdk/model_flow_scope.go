/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
)

// FlowScope the model 'FlowScope'
type FlowScope string

// List of FlowScope
const (
	FLOWSCOPE_USER   FlowScope = "USER"
	FLOWSCOPE_SYSTEM FlowScope = "SYSTEM"
)

// All allowed values of FlowScope enum
var AllowedFlowScopeEnumValues = []FlowScope{
	"USER",
	"SYSTEM",
}

func (v *FlowScope) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FlowScope(value)
	for _, existing := range AllowedFlowScopeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FlowScope", value)
}

// NewFlowScopeFromValue returns a pointer to a valid FlowScope
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFlowScopeFromValue(v string) (*FlowScope, error) {
	ev := FlowScope(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FlowScope: valid values are %v", v, AllowedFlowScopeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FlowScope) IsValid() bool {
	for _, existing := range AllowedFlowScopeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FlowScope value
func (v FlowScope) Ptr() *FlowScope {
	return &v
}

type NullableFlowScope struct {
	value *FlowScope
	isSet bool
}

func (v NullableFlowScope) Get() *FlowScope {
	return v.value
}

func (v *NullableFlowScope) Set(val *FlowScope) {
	v.value = val
	v.isSet = true
}

func (v NullableFlowScope) IsSet() bool {
	return v.isSet
}

func (v *NullableFlowScope) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFlowScope(val *FlowScope) *NullableFlowScope {
	return &NullableFlowScope{value: val, isSet: true}
}

func (v NullableFlowScope) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFlowScope) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
