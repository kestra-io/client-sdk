/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
)

// checks if the InstanceControllerApiPluginVersionsApiPluginVersionAndMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InstanceControllerApiPluginVersionsApiPluginVersionAndMetadata{}

// InstanceControllerApiPluginVersionsApiPluginVersionAndMetadata struct for InstanceControllerApiPluginVersionsApiPluginVersionAndMetadata
type InstanceControllerApiPluginVersionsApiPluginVersionAndMetadata struct {
	Version              *string                 `json:"version,omitempty"`
	Metadata             *PluginArtifactMetadata `json:"metadata,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _InstanceControllerApiPluginVersionsApiPluginVersionAndMetadata InstanceControllerApiPluginVersionsApiPluginVersionAndMetadata

// NewInstanceControllerApiPluginVersionsApiPluginVersionAndMetadata instantiates a new InstanceControllerApiPluginVersionsApiPluginVersionAndMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstanceControllerApiPluginVersionsApiPluginVersionAndMetadata() *InstanceControllerApiPluginVersionsApiPluginVersionAndMetadata {
	this := InstanceControllerApiPluginVersionsApiPluginVersionAndMetadata{}
	return &this
}

// NewInstanceControllerApiPluginVersionsApiPluginVersionAndMetadataWithDefaults instantiates a new InstanceControllerApiPluginVersionsApiPluginVersionAndMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceControllerApiPluginVersionsApiPluginVersionAndMetadataWithDefaults() *InstanceControllerApiPluginVersionsApiPluginVersionAndMetadata {
	this := InstanceControllerApiPluginVersionsApiPluginVersionAndMetadata{}
	return &this
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *InstanceControllerApiPluginVersionsApiPluginVersionAndMetadata) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceControllerApiPluginVersionsApiPluginVersionAndMetadata) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *InstanceControllerApiPluginVersionsApiPluginVersionAndMetadata) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *InstanceControllerApiPluginVersionsApiPluginVersionAndMetadata) SetVersion(v string) {
	o.Version = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *InstanceControllerApiPluginVersionsApiPluginVersionAndMetadata) GetMetadata() PluginArtifactMetadata {
	if o == nil || IsNil(o.Metadata) {
		var ret PluginArtifactMetadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceControllerApiPluginVersionsApiPluginVersionAndMetadata) GetMetadataOk() (*PluginArtifactMetadata, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *InstanceControllerApiPluginVersionsApiPluginVersionAndMetadata) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given PluginArtifactMetadata and assigns it to the Metadata field.
func (o *InstanceControllerApiPluginVersionsApiPluginVersionAndMetadata) SetMetadata(v PluginArtifactMetadata) {
	o.Metadata = &v
}

func (o InstanceControllerApiPluginVersionsApiPluginVersionAndMetadata) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InstanceControllerApiPluginVersionsApiPluginVersionAndMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *InstanceControllerApiPluginVersionsApiPluginVersionAndMetadata) UnmarshalJSON(data []byte) (err error) {
	varInstanceControllerApiPluginVersionsApiPluginVersionAndMetadata := _InstanceControllerApiPluginVersionsApiPluginVersionAndMetadata{}

	err = json.Unmarshal(data, &varInstanceControllerApiPluginVersionsApiPluginVersionAndMetadata)

	if err != nil {
		return err
	}

	*o = InstanceControllerApiPluginVersionsApiPluginVersionAndMetadata(varInstanceControllerApiPluginVersionsApiPluginVersionAndMetadata)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "version")
		delete(additionalProperties, "metadata")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInstanceControllerApiPluginVersionsApiPluginVersionAndMetadata struct {
	value *InstanceControllerApiPluginVersionsApiPluginVersionAndMetadata
	isSet bool
}

func (v NullableInstanceControllerApiPluginVersionsApiPluginVersionAndMetadata) Get() *InstanceControllerApiPluginVersionsApiPluginVersionAndMetadata {
	return v.value
}

func (v *NullableInstanceControllerApiPluginVersionsApiPluginVersionAndMetadata) Set(val *InstanceControllerApiPluginVersionsApiPluginVersionAndMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceControllerApiPluginVersionsApiPluginVersionAndMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceControllerApiPluginVersionsApiPluginVersionAndMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceControllerApiPluginVersionsApiPluginVersionAndMetadata(val *InstanceControllerApiPluginVersionsApiPluginVersionAndMetadata) *NullableInstanceControllerApiPluginVersionsApiPluginVersionAndMetadata {
	return &NullableInstanceControllerApiPluginVersionsApiPluginVersionAndMetadata{value: val, isSet: true}
}

func (v NullableInstanceControllerApiPluginVersionsApiPluginVersionAndMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceControllerApiPluginVersionsApiPluginVersionAndMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
