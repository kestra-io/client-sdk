/*
Kestra EE

All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the TaskFixture type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TaskFixture{}

// TaskFixture struct for TaskFixture
type TaskFixture struct {
	Id          string                            `json:"id"`
	Value       *string                           `json:"value,omitempty"`
	State       *StateType                        `json:"state,omitempty"`
	Outputs     map[string]map[string]interface{} `json:"outputs,omitempty"`
	Description *PropertyString                   `json:"description,omitempty"`
}

type _TaskFixture TaskFixture

// NewTaskFixture instantiates a new TaskFixture object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaskFixture(id string) *TaskFixture {
	this := TaskFixture{}
	this.Id = id
	return &this
}

// NewTaskFixtureWithDefaults instantiates a new TaskFixture object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskFixtureWithDefaults() *TaskFixture {
	this := TaskFixture{}
	return &this
}

// GetId returns the Id field value
func (o *TaskFixture) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *TaskFixture) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *TaskFixture) SetId(v string) {
	o.Id = v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *TaskFixture) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskFixture) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *TaskFixture) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *TaskFixture) SetValue(v string) {
	o.Value = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *TaskFixture) GetState() StateType {
	if o == nil || IsNil(o.State) {
		var ret StateType
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskFixture) GetStateOk() (*StateType, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *TaskFixture) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given StateType and assigns it to the State field.
func (o *TaskFixture) SetState(v StateType) {
	o.State = &v
}

// GetOutputs returns the Outputs field value if set, zero value otherwise.
func (o *TaskFixture) GetOutputs() map[string]map[string]interface{} {
	if o == nil || IsNil(o.Outputs) {
		var ret map[string]map[string]interface{}
		return ret
	}
	return o.Outputs
}

// GetOutputsOk returns a tuple with the Outputs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskFixture) GetOutputsOk() (map[string]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Outputs) {
		return map[string]map[string]interface{}{}, false
	}
	return o.Outputs, true
}

// HasOutputs returns a boolean if a field has been set.
func (o *TaskFixture) HasOutputs() bool {
	if o != nil && !IsNil(o.Outputs) {
		return true
	}

	return false
}

// SetOutputs gets a reference to the given map[string]map[string]interface{} and assigns it to the Outputs field.
func (o *TaskFixture) SetOutputs(v map[string]map[string]interface{}) {
	o.Outputs = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *TaskFixture) GetDescription() PropertyString {
	if o == nil || IsNil(o.Description) {
		var ret PropertyString
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskFixture) GetDescriptionOk() (*PropertyString, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *TaskFixture) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given PropertyString and assigns it to the Description field.
func (o *TaskFixture) SetDescription(v PropertyString) {
	o.Description = &v
}

func (o TaskFixture) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TaskFixture) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.Outputs) {
		toSerialize["outputs"] = o.Outputs
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	return toSerialize, nil
}

func (o *TaskFixture) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTaskFixture := _TaskFixture{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTaskFixture)

	if err != nil {
		return err
	}

	*o = TaskFixture(varTaskFixture)

	return err
}

type NullableTaskFixture struct {
	value *TaskFixture
	isSet bool
}

func (v NullableTaskFixture) Get() *TaskFixture {
	return v.value
}

func (v *NullableTaskFixture) Set(val *TaskFixture) {
	v.value = val
	v.isSet = true
}

func (v NullableTaskFixture) IsSet() bool {
	return v.isSet
}

func (v *NullableTaskFixture) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaskFixture(val *TaskFixture) *NullableTaskFixture {
	return &NullableTaskFixture{value: val, isSet: true}
}

func (v NullableTaskFixture) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaskFixture) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
