/*
Kestra EE

All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
)

// checks if the TriggerControllerSetDisabledRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TriggerControllerSetDisabledRequest{}

// TriggerControllerSetDisabledRequest struct for TriggerControllerSetDisabledRequest
type TriggerControllerSetDisabledRequest struct {
	Triggers []Trigger `json:"triggers,omitempty"`
	Disabled *bool     `json:"disabled,omitempty"`
}

// NewTriggerControllerSetDisabledRequest instantiates a new TriggerControllerSetDisabledRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTriggerControllerSetDisabledRequest() *TriggerControllerSetDisabledRequest {
	this := TriggerControllerSetDisabledRequest{}
	return &this
}

// NewTriggerControllerSetDisabledRequestWithDefaults instantiates a new TriggerControllerSetDisabledRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTriggerControllerSetDisabledRequestWithDefaults() *TriggerControllerSetDisabledRequest {
	this := TriggerControllerSetDisabledRequest{}
	return &this
}

// GetTriggers returns the Triggers field value if set, zero value otherwise.
func (o *TriggerControllerSetDisabledRequest) GetTriggers() []Trigger {
	if o == nil || IsNil(o.Triggers) {
		var ret []Trigger
		return ret
	}
	return o.Triggers
}

// GetTriggersOk returns a tuple with the Triggers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TriggerControllerSetDisabledRequest) GetTriggersOk() ([]Trigger, bool) {
	if o == nil || IsNil(o.Triggers) {
		return nil, false
	}
	return o.Triggers, true
}

// HasTriggers returns a boolean if a field has been set.
func (o *TriggerControllerSetDisabledRequest) HasTriggers() bool {
	if o != nil && !IsNil(o.Triggers) {
		return true
	}

	return false
}

// SetTriggers gets a reference to the given []Trigger and assigns it to the Triggers field.
func (o *TriggerControllerSetDisabledRequest) SetTriggers(v []Trigger) {
	o.Triggers = v
}

// GetDisabled returns the Disabled field value if set, zero value otherwise.
func (o *TriggerControllerSetDisabledRequest) GetDisabled() bool {
	if o == nil || IsNil(o.Disabled) {
		var ret bool
		return ret
	}
	return *o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TriggerControllerSetDisabledRequest) GetDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Disabled) {
		return nil, false
	}
	return o.Disabled, true
}

// HasDisabled returns a boolean if a field has been set.
func (o *TriggerControllerSetDisabledRequest) HasDisabled() bool {
	if o != nil && !IsNil(o.Disabled) {
		return true
	}

	return false
}

// SetDisabled gets a reference to the given bool and assigns it to the Disabled field.
func (o *TriggerControllerSetDisabledRequest) SetDisabled(v bool) {
	o.Disabled = &v
}

func (o TriggerControllerSetDisabledRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TriggerControllerSetDisabledRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Triggers) {
		toSerialize["triggers"] = o.Triggers
	}
	if !IsNil(o.Disabled) {
		toSerialize["disabled"] = o.Disabled
	}
	return toSerialize, nil
}

type NullableTriggerControllerSetDisabledRequest struct {
	value *TriggerControllerSetDisabledRequest
	isSet bool
}

func (v NullableTriggerControllerSetDisabledRequest) Get() *TriggerControllerSetDisabledRequest {
	return v.value
}

func (v *NullableTriggerControllerSetDisabledRequest) Set(val *TriggerControllerSetDisabledRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableTriggerControllerSetDisabledRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableTriggerControllerSetDisabledRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTriggerControllerSetDisabledRequest(val *TriggerControllerSetDisabledRequest) *NullableTriggerControllerSetDisabledRequest {
	return &NullableTriggerControllerSetDisabledRequest{value: val, isSet: true}
}

func (v NullableTriggerControllerSetDisabledRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTriggerControllerSetDisabledRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
