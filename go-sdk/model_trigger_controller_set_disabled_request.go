/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
)

// checks if the TriggerControllerSetDisabledRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TriggerControllerSetDisabledRequest{}

// TriggerControllerSetDisabledRequest struct for TriggerControllerSetDisabledRequest
type TriggerControllerSetDisabledRequest struct {
	Triggers             []Trigger `json:"triggers"`
	Disabled             bool      `json:"disabled"`
	AdditionalProperties map[string]interface{}
}

type _TriggerControllerSetDisabledRequest TriggerControllerSetDisabledRequest

// NewTriggerControllerSetDisabledRequest instantiates a new TriggerControllerSetDisabledRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTriggerControllerSetDisabledRequest(triggers []Trigger, disabled bool) *TriggerControllerSetDisabledRequest {
	this := TriggerControllerSetDisabledRequest{}
	this.Triggers = triggers
	this.Disabled = disabled
	return &this
}

// NewTriggerControllerSetDisabledRequestWithDefaults instantiates a new TriggerControllerSetDisabledRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTriggerControllerSetDisabledRequestWithDefaults() *TriggerControllerSetDisabledRequest {
	this := TriggerControllerSetDisabledRequest{}
	return &this
}

// GetTriggers returns the Triggers field value
func (o *TriggerControllerSetDisabledRequest) GetTriggers() []Trigger {
	if o == nil {
		var ret []Trigger
		return ret
	}

	return o.Triggers
}

// GetTriggersOk returns a tuple with the Triggers field value
// and a boolean to check if the value has been set.
func (o *TriggerControllerSetDisabledRequest) GetTriggersOk() ([]Trigger, bool) {
	if o == nil {
		return nil, false
	}
	return o.Triggers, true
}

// SetTriggers sets field value
func (o *TriggerControllerSetDisabledRequest) SetTriggers(v []Trigger) {
	o.Triggers = v
}

// GetDisabled returns the Disabled field value
func (o *TriggerControllerSetDisabledRequest) GetDisabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value
// and a boolean to check if the value has been set.
func (o *TriggerControllerSetDisabledRequest) GetDisabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Disabled, true
}

// SetDisabled sets field value
func (o *TriggerControllerSetDisabledRequest) SetDisabled(v bool) {
	o.Disabled = v
}

func (o TriggerControllerSetDisabledRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TriggerControllerSetDisabledRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["triggers"] = o.Triggers
	toSerialize["disabled"] = o.Disabled

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TriggerControllerSetDisabledRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"triggers",
		"disabled",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTriggerControllerSetDisabledRequest := _TriggerControllerSetDisabledRequest{}

	err = json.Unmarshal(data, &varTriggerControllerSetDisabledRequest)

	if err != nil {
		return err
	}

	*o = TriggerControllerSetDisabledRequest(varTriggerControllerSetDisabledRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "triggers")
		delete(additionalProperties, "disabled")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTriggerControllerSetDisabledRequest struct {
	value *TriggerControllerSetDisabledRequest
	isSet bool
}

func (v NullableTriggerControllerSetDisabledRequest) Get() *TriggerControllerSetDisabledRequest {
	return v.value
}

func (v *NullableTriggerControllerSetDisabledRequest) Set(val *TriggerControllerSetDisabledRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableTriggerControllerSetDisabledRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableTriggerControllerSetDisabledRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTriggerControllerSetDisabledRequest(val *TriggerControllerSetDisabledRequest) *NullableTriggerControllerSetDisabledRequest {
	return &NullableTriggerControllerSetDisabledRequest{value: val, isSet: true}
}

func (v NullableTriggerControllerSetDisabledRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTriggerControllerSetDisabledRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
