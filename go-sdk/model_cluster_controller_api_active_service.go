/*
Kestra EE

All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
)

// checks if the ClusterControllerApiActiveService type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClusterControllerApiActiveService{}

// ClusterControllerApiActiveService struct for ClusterControllerApiActiveService
type ClusterControllerApiActiveService struct {
	Type  *ServiceType `json:"type,omitempty"`
	Total *int64       `json:"total,omitempty"`
}

// NewClusterControllerApiActiveService instantiates a new ClusterControllerApiActiveService object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterControllerApiActiveService() *ClusterControllerApiActiveService {
	this := ClusterControllerApiActiveService{}
	return &this
}

// NewClusterControllerApiActiveServiceWithDefaults instantiates a new ClusterControllerApiActiveService object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterControllerApiActiveServiceWithDefaults() *ClusterControllerApiActiveService {
	this := ClusterControllerApiActiveService{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ClusterControllerApiActiveService) GetType() ServiceType {
	if o == nil || IsNil(o.Type) {
		var ret ServiceType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterControllerApiActiveService) GetTypeOk() (*ServiceType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ClusterControllerApiActiveService) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given ServiceType and assigns it to the Type field.
func (o *ClusterControllerApiActiveService) SetType(v ServiceType) {
	o.Type = &v
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *ClusterControllerApiActiveService) GetTotal() int64 {
	if o == nil || IsNil(o.Total) {
		var ret int64
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterControllerApiActiveService) GetTotalOk() (*int64, bool) {
	if o == nil || IsNil(o.Total) {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *ClusterControllerApiActiveService) HasTotal() bool {
	if o != nil && !IsNil(o.Total) {
		return true
	}

	return false
}

// SetTotal gets a reference to the given int64 and assigns it to the Total field.
func (o *ClusterControllerApiActiveService) SetTotal(v int64) {
	o.Total = &v
}

func (o ClusterControllerApiActiveService) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClusterControllerApiActiveService) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Total) {
		toSerialize["total"] = o.Total
	}
	return toSerialize, nil
}

type NullableClusterControllerApiActiveService struct {
	value *ClusterControllerApiActiveService
	isSet bool
}

func (v NullableClusterControllerApiActiveService) Get() *ClusterControllerApiActiveService {
	return v.value
}

func (v *NullableClusterControllerApiActiveService) Set(val *ClusterControllerApiActiveService) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterControllerApiActiveService) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterControllerApiActiveService) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterControllerApiActiveService(val *ClusterControllerApiActiveService) *NullableClusterControllerApiActiveService {
	return &NullableClusterControllerApiActiveService{value: val, isSet: true}
}

func (v NullableClusterControllerApiActiveService) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterControllerApiActiveService) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
