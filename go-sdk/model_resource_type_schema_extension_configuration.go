/*
Kestra EE

All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
)

// checks if the ResourceTypeSchemaExtensionConfiguration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResourceTypeSchemaExtensionConfiguration{}

// ResourceTypeSchemaExtensionConfiguration struct for ResourceTypeSchemaExtensionConfiguration
type ResourceTypeSchemaExtensionConfiguration struct {
	SchemaUrn *string `json:"schemaUrn,omitempty"`
	Required  *bool   `json:"required,omitempty"`
}

// NewResourceTypeSchemaExtensionConfiguration instantiates a new ResourceTypeSchemaExtensionConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceTypeSchemaExtensionConfiguration() *ResourceTypeSchemaExtensionConfiguration {
	this := ResourceTypeSchemaExtensionConfiguration{}
	return &this
}

// NewResourceTypeSchemaExtensionConfigurationWithDefaults instantiates a new ResourceTypeSchemaExtensionConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceTypeSchemaExtensionConfigurationWithDefaults() *ResourceTypeSchemaExtensionConfiguration {
	this := ResourceTypeSchemaExtensionConfiguration{}
	return &this
}

// GetSchemaUrn returns the SchemaUrn field value if set, zero value otherwise.
func (o *ResourceTypeSchemaExtensionConfiguration) GetSchemaUrn() string {
	if o == nil || IsNil(o.SchemaUrn) {
		var ret string
		return ret
	}
	return *o.SchemaUrn
}

// GetSchemaUrnOk returns a tuple with the SchemaUrn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceTypeSchemaExtensionConfiguration) GetSchemaUrnOk() (*string, bool) {
	if o == nil || IsNil(o.SchemaUrn) {
		return nil, false
	}
	return o.SchemaUrn, true
}

// HasSchemaUrn returns a boolean if a field has been set.
func (o *ResourceTypeSchemaExtensionConfiguration) HasSchemaUrn() bool {
	if o != nil && !IsNil(o.SchemaUrn) {
		return true
	}

	return false
}

// SetSchemaUrn gets a reference to the given string and assigns it to the SchemaUrn field.
func (o *ResourceTypeSchemaExtensionConfiguration) SetSchemaUrn(v string) {
	o.SchemaUrn = &v
}

// GetRequired returns the Required field value if set, zero value otherwise.
func (o *ResourceTypeSchemaExtensionConfiguration) GetRequired() bool {
	if o == nil || IsNil(o.Required) {
		var ret bool
		return ret
	}
	return *o.Required
}

// GetRequiredOk returns a tuple with the Required field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceTypeSchemaExtensionConfiguration) GetRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.Required) {
		return nil, false
	}
	return o.Required, true
}

// HasRequired returns a boolean if a field has been set.
func (o *ResourceTypeSchemaExtensionConfiguration) HasRequired() bool {
	if o != nil && !IsNil(o.Required) {
		return true
	}

	return false
}

// SetRequired gets a reference to the given bool and assigns it to the Required field.
func (o *ResourceTypeSchemaExtensionConfiguration) SetRequired(v bool) {
	o.Required = &v
}

func (o ResourceTypeSchemaExtensionConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResourceTypeSchemaExtensionConfiguration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SchemaUrn) {
		toSerialize["schemaUrn"] = o.SchemaUrn
	}
	if !IsNil(o.Required) {
		toSerialize["required"] = o.Required
	}
	return toSerialize, nil
}

type NullableResourceTypeSchemaExtensionConfiguration struct {
	value *ResourceTypeSchemaExtensionConfiguration
	isSet bool
}

func (v NullableResourceTypeSchemaExtensionConfiguration) Get() *ResourceTypeSchemaExtensionConfiguration {
	return v.value
}

func (v *NullableResourceTypeSchemaExtensionConfiguration) Set(val *ResourceTypeSchemaExtensionConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceTypeSchemaExtensionConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceTypeSchemaExtensionConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceTypeSchemaExtensionConfiguration(val *ResourceTypeSchemaExtensionConfiguration) *NullableResourceTypeSchemaExtensionConfiguration {
	return &NullableResourceTypeSchemaExtensionConfiguration{value: val, isSet: true}
}

func (v NullableResourceTypeSchemaExtensionConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceTypeSchemaExtensionConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
