/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
)

// checks if the SearchRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchRequest{}

// SearchRequest struct for SearchRequest
type SearchRequest struct {
	Schemas              []string             `json:"schemas,omitempty"`
	PageRequest          *PageRequest         `json:"pageRequest,omitempty"`
	SortRequest          *SortRequest         `json:"sortRequest,omitempty"`
	Attributes           []AttributeReference `json:"attributes,omitempty"`
	ExcludedAttributes   []AttributeReference `json:"excludedAttributes,omitempty"`
	Filter               *Filter              `json:"filter,omitempty"`
	SortBy               *AttributeReference  `json:"sortBy,omitempty"`
	SortOrder            *SortOrder           `json:"sortOrder,omitempty"`
	StartIndex           *int32               `json:"startIndex,omitempty"`
	Count                *int32               `json:"count,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SearchRequest SearchRequest

// NewSearchRequest instantiates a new SearchRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchRequest() *SearchRequest {
	this := SearchRequest{}
	return &this
}

// NewSearchRequestWithDefaults instantiates a new SearchRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchRequestWithDefaults() *SearchRequest {
	this := SearchRequest{}
	return &this
}

// GetSchemas returns the Schemas field value if set, zero value otherwise.
func (o *SearchRequest) GetSchemas() []string {
	if o == nil || IsNil(o.Schemas) {
		var ret []string
		return ret
	}
	return o.Schemas
}

// GetSchemasOk returns a tuple with the Schemas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchRequest) GetSchemasOk() ([]string, bool) {
	if o == nil || IsNil(o.Schemas) {
		return nil, false
	}
	return o.Schemas, true
}

// HasSchemas returns a boolean if a field has been set.
func (o *SearchRequest) HasSchemas() bool {
	if o != nil && !IsNil(o.Schemas) {
		return true
	}

	return false
}

// SetSchemas gets a reference to the given []string and assigns it to the Schemas field.
func (o *SearchRequest) SetSchemas(v []string) {
	o.Schemas = v
}

// GetPageRequest returns the PageRequest field value if set, zero value otherwise.
func (o *SearchRequest) GetPageRequest() PageRequest {
	if o == nil || IsNil(o.PageRequest) {
		var ret PageRequest
		return ret
	}
	return *o.PageRequest
}

// GetPageRequestOk returns a tuple with the PageRequest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchRequest) GetPageRequestOk() (*PageRequest, bool) {
	if o == nil || IsNil(o.PageRequest) {
		return nil, false
	}
	return o.PageRequest, true
}

// HasPageRequest returns a boolean if a field has been set.
func (o *SearchRequest) HasPageRequest() bool {
	if o != nil && !IsNil(o.PageRequest) {
		return true
	}

	return false
}

// SetPageRequest gets a reference to the given PageRequest and assigns it to the PageRequest field.
func (o *SearchRequest) SetPageRequest(v PageRequest) {
	o.PageRequest = &v
}

// GetSortRequest returns the SortRequest field value if set, zero value otherwise.
func (o *SearchRequest) GetSortRequest() SortRequest {
	if o == nil || IsNil(o.SortRequest) {
		var ret SortRequest
		return ret
	}
	return *o.SortRequest
}

// GetSortRequestOk returns a tuple with the SortRequest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchRequest) GetSortRequestOk() (*SortRequest, bool) {
	if o == nil || IsNil(o.SortRequest) {
		return nil, false
	}
	return o.SortRequest, true
}

// HasSortRequest returns a boolean if a field has been set.
func (o *SearchRequest) HasSortRequest() bool {
	if o != nil && !IsNil(o.SortRequest) {
		return true
	}

	return false
}

// SetSortRequest gets a reference to the given SortRequest and assigns it to the SortRequest field.
func (o *SearchRequest) SetSortRequest(v SortRequest) {
	o.SortRequest = &v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *SearchRequest) GetAttributes() []AttributeReference {
	if o == nil || IsNil(o.Attributes) {
		var ret []AttributeReference
		return ret
	}
	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchRequest) GetAttributesOk() ([]AttributeReference, bool) {
	if o == nil || IsNil(o.Attributes) {
		return nil, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *SearchRequest) HasAttributes() bool {
	if o != nil && !IsNil(o.Attributes) {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given []AttributeReference and assigns it to the Attributes field.
func (o *SearchRequest) SetAttributes(v []AttributeReference) {
	o.Attributes = v
}

// GetExcludedAttributes returns the ExcludedAttributes field value if set, zero value otherwise.
func (o *SearchRequest) GetExcludedAttributes() []AttributeReference {
	if o == nil || IsNil(o.ExcludedAttributes) {
		var ret []AttributeReference
		return ret
	}
	return o.ExcludedAttributes
}

// GetExcludedAttributesOk returns a tuple with the ExcludedAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchRequest) GetExcludedAttributesOk() ([]AttributeReference, bool) {
	if o == nil || IsNil(o.ExcludedAttributes) {
		return nil, false
	}
	return o.ExcludedAttributes, true
}

// HasExcludedAttributes returns a boolean if a field has been set.
func (o *SearchRequest) HasExcludedAttributes() bool {
	if o != nil && !IsNil(o.ExcludedAttributes) {
		return true
	}

	return false
}

// SetExcludedAttributes gets a reference to the given []AttributeReference and assigns it to the ExcludedAttributes field.
func (o *SearchRequest) SetExcludedAttributes(v []AttributeReference) {
	o.ExcludedAttributes = v
}

// GetFilter returns the Filter field value if set, zero value otherwise.
func (o *SearchRequest) GetFilter() Filter {
	if o == nil || IsNil(o.Filter) {
		var ret Filter
		return ret
	}
	return *o.Filter
}

// GetFilterOk returns a tuple with the Filter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchRequest) GetFilterOk() (*Filter, bool) {
	if o == nil || IsNil(o.Filter) {
		return nil, false
	}
	return o.Filter, true
}

// HasFilter returns a boolean if a field has been set.
func (o *SearchRequest) HasFilter() bool {
	if o != nil && !IsNil(o.Filter) {
		return true
	}

	return false
}

// SetFilter gets a reference to the given Filter and assigns it to the Filter field.
func (o *SearchRequest) SetFilter(v Filter) {
	o.Filter = &v
}

// GetSortBy returns the SortBy field value if set, zero value otherwise.
func (o *SearchRequest) GetSortBy() AttributeReference {
	if o == nil || IsNil(o.SortBy) {
		var ret AttributeReference
		return ret
	}
	return *o.SortBy
}

// GetSortByOk returns a tuple with the SortBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchRequest) GetSortByOk() (*AttributeReference, bool) {
	if o == nil || IsNil(o.SortBy) {
		return nil, false
	}
	return o.SortBy, true
}

// HasSortBy returns a boolean if a field has been set.
func (o *SearchRequest) HasSortBy() bool {
	if o != nil && !IsNil(o.SortBy) {
		return true
	}

	return false
}

// SetSortBy gets a reference to the given AttributeReference and assigns it to the SortBy field.
func (o *SearchRequest) SetSortBy(v AttributeReference) {
	o.SortBy = &v
}

// GetSortOrder returns the SortOrder field value if set, zero value otherwise.
func (o *SearchRequest) GetSortOrder() SortOrder {
	if o == nil || IsNil(o.SortOrder) {
		var ret SortOrder
		return ret
	}
	return *o.SortOrder
}

// GetSortOrderOk returns a tuple with the SortOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchRequest) GetSortOrderOk() (*SortOrder, bool) {
	if o == nil || IsNil(o.SortOrder) {
		return nil, false
	}
	return o.SortOrder, true
}

// HasSortOrder returns a boolean if a field has been set.
func (o *SearchRequest) HasSortOrder() bool {
	if o != nil && !IsNil(o.SortOrder) {
		return true
	}

	return false
}

// SetSortOrder gets a reference to the given SortOrder and assigns it to the SortOrder field.
func (o *SearchRequest) SetSortOrder(v SortOrder) {
	o.SortOrder = &v
}

// GetStartIndex returns the StartIndex field value if set, zero value otherwise.
func (o *SearchRequest) GetStartIndex() int32 {
	if o == nil || IsNil(o.StartIndex) {
		var ret int32
		return ret
	}
	return *o.StartIndex
}

// GetStartIndexOk returns a tuple with the StartIndex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchRequest) GetStartIndexOk() (*int32, bool) {
	if o == nil || IsNil(o.StartIndex) {
		return nil, false
	}
	return o.StartIndex, true
}

// HasStartIndex returns a boolean if a field has been set.
func (o *SearchRequest) HasStartIndex() bool {
	if o != nil && !IsNil(o.StartIndex) {
		return true
	}

	return false
}

// SetStartIndex gets a reference to the given int32 and assigns it to the StartIndex field.
func (o *SearchRequest) SetStartIndex(v int32) {
	o.StartIndex = &v
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *SearchRequest) GetCount() int32 {
	if o == nil || IsNil(o.Count) {
		var ret int32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchRequest) GetCountOk() (*int32, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *SearchRequest) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int32 and assigns it to the Count field.
func (o *SearchRequest) SetCount(v int32) {
	o.Count = &v
}

func (o SearchRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Schemas) {
		toSerialize["schemas"] = o.Schemas
	}
	if !IsNil(o.PageRequest) {
		toSerialize["pageRequest"] = o.PageRequest
	}
	if !IsNil(o.SortRequest) {
		toSerialize["sortRequest"] = o.SortRequest
	}
	if !IsNil(o.Attributes) {
		toSerialize["attributes"] = o.Attributes
	}
	if !IsNil(o.ExcludedAttributes) {
		toSerialize["excludedAttributes"] = o.ExcludedAttributes
	}
	if !IsNil(o.Filter) {
		toSerialize["filter"] = o.Filter
	}
	if !IsNil(o.SortBy) {
		toSerialize["sortBy"] = o.SortBy
	}
	if !IsNil(o.SortOrder) {
		toSerialize["sortOrder"] = o.SortOrder
	}
	if !IsNil(o.StartIndex) {
		toSerialize["startIndex"] = o.StartIndex
	}
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SearchRequest) UnmarshalJSON(data []byte) (err error) {
	varSearchRequest := _SearchRequest{}

	err = json.Unmarshal(data, &varSearchRequest)

	if err != nil {
		return err
	}

	*o = SearchRequest(varSearchRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "schemas")
		delete(additionalProperties, "pageRequest")
		delete(additionalProperties, "sortRequest")
		delete(additionalProperties, "attributes")
		delete(additionalProperties, "excludedAttributes")
		delete(additionalProperties, "filter")
		delete(additionalProperties, "sortBy")
		delete(additionalProperties, "sortOrder")
		delete(additionalProperties, "startIndex")
		delete(additionalProperties, "count")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSearchRequest struct {
	value *SearchRequest
	isSet bool
}

func (v NullableSearchRequest) Get() *SearchRequest {
	return v.value
}

func (v *NullableSearchRequest) Set(val *SearchRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchRequest(val *SearchRequest) *NullableSearchRequest {
	return &NullableSearchRequest{value: val, isSet: true}
}

func (v NullableSearchRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
