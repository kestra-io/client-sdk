/*
Kestra EE

All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
)

// checks if the HostUsageOs type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HostUsageOs{}

// HostUsageOs struct for HostUsageOs
type HostUsageOs struct {
	Family      *string `json:"family,omitempty"`
	Version     *string `json:"version,omitempty"`
	CodeName    *string `json:"codeName,omitempty"`
	BuildNumber *string `json:"buildNumber,omitempty"`
}

// NewHostUsageOs instantiates a new HostUsageOs object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHostUsageOs() *HostUsageOs {
	this := HostUsageOs{}
	return &this
}

// NewHostUsageOsWithDefaults instantiates a new HostUsageOs object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHostUsageOsWithDefaults() *HostUsageOs {
	this := HostUsageOs{}
	return &this
}

// GetFamily returns the Family field value if set, zero value otherwise.
func (o *HostUsageOs) GetFamily() string {
	if o == nil || IsNil(o.Family) {
		var ret string
		return ret
	}
	return *o.Family
}

// GetFamilyOk returns a tuple with the Family field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HostUsageOs) GetFamilyOk() (*string, bool) {
	if o == nil || IsNil(o.Family) {
		return nil, false
	}
	return o.Family, true
}

// HasFamily returns a boolean if a field has been set.
func (o *HostUsageOs) HasFamily() bool {
	if o != nil && !IsNil(o.Family) {
		return true
	}

	return false
}

// SetFamily gets a reference to the given string and assigns it to the Family field.
func (o *HostUsageOs) SetFamily(v string) {
	o.Family = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *HostUsageOs) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HostUsageOs) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *HostUsageOs) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *HostUsageOs) SetVersion(v string) {
	o.Version = &v
}

// GetCodeName returns the CodeName field value if set, zero value otherwise.
func (o *HostUsageOs) GetCodeName() string {
	if o == nil || IsNil(o.CodeName) {
		var ret string
		return ret
	}
	return *o.CodeName
}

// GetCodeNameOk returns a tuple with the CodeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HostUsageOs) GetCodeNameOk() (*string, bool) {
	if o == nil || IsNil(o.CodeName) {
		return nil, false
	}
	return o.CodeName, true
}

// HasCodeName returns a boolean if a field has been set.
func (o *HostUsageOs) HasCodeName() bool {
	if o != nil && !IsNil(o.CodeName) {
		return true
	}

	return false
}

// SetCodeName gets a reference to the given string and assigns it to the CodeName field.
func (o *HostUsageOs) SetCodeName(v string) {
	o.CodeName = &v
}

// GetBuildNumber returns the BuildNumber field value if set, zero value otherwise.
func (o *HostUsageOs) GetBuildNumber() string {
	if o == nil || IsNil(o.BuildNumber) {
		var ret string
		return ret
	}
	return *o.BuildNumber
}

// GetBuildNumberOk returns a tuple with the BuildNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HostUsageOs) GetBuildNumberOk() (*string, bool) {
	if o == nil || IsNil(o.BuildNumber) {
		return nil, false
	}
	return o.BuildNumber, true
}

// HasBuildNumber returns a boolean if a field has been set.
func (o *HostUsageOs) HasBuildNumber() bool {
	if o != nil && !IsNil(o.BuildNumber) {
		return true
	}

	return false
}

// SetBuildNumber gets a reference to the given string and assigns it to the BuildNumber field.
func (o *HostUsageOs) SetBuildNumber(v string) {
	o.BuildNumber = &v
}

func (o HostUsageOs) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HostUsageOs) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Family) {
		toSerialize["family"] = o.Family
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.CodeName) {
		toSerialize["codeName"] = o.CodeName
	}
	if !IsNil(o.BuildNumber) {
		toSerialize["buildNumber"] = o.BuildNumber
	}
	return toSerialize, nil
}

type NullableHostUsageOs struct {
	value *HostUsageOs
	isSet bool
}

func (v NullableHostUsageOs) Get() *HostUsageOs {
	return v.value
}

func (v *NullableHostUsageOs) Set(val *HostUsageOs) {
	v.value = val
	v.isSet = true
}

func (v NullableHostUsageOs) IsSet() bool {
	return v.isSet
}

func (v *NullableHostUsageOs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHostUsageOs(val *HostUsageOs) *NullableHostUsageOs {
	return &NullableHostUsageOs{value: val, isSet: true}
}

func (v NullableHostUsageOs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHostUsageOs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
