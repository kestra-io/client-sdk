/*
Kestra EE

All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
)

// checks if the ExecutionControllerEvalResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExecutionControllerEvalResult{}

// ExecutionControllerEvalResult struct for ExecutionControllerEvalResult
type ExecutionControllerEvalResult struct {
	Result     *string `json:"result,omitempty"`
	Error      *string `json:"error,omitempty"`
	StackTrace *string `json:"stackTrace,omitempty"`
}

// NewExecutionControllerEvalResult instantiates a new ExecutionControllerEvalResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExecutionControllerEvalResult() *ExecutionControllerEvalResult {
	this := ExecutionControllerEvalResult{}
	return &this
}

// NewExecutionControllerEvalResultWithDefaults instantiates a new ExecutionControllerEvalResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExecutionControllerEvalResultWithDefaults() *ExecutionControllerEvalResult {
	this := ExecutionControllerEvalResult{}
	return &this
}

// GetResult returns the Result field value if set, zero value otherwise.
func (o *ExecutionControllerEvalResult) GetResult() string {
	if o == nil || IsNil(o.Result) {
		var ret string
		return ret
	}
	return *o.Result
}

// GetResultOk returns a tuple with the Result field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionControllerEvalResult) GetResultOk() (*string, bool) {
	if o == nil || IsNil(o.Result) {
		return nil, false
	}
	return o.Result, true
}

// HasResult returns a boolean if a field has been set.
func (o *ExecutionControllerEvalResult) HasResult() bool {
	if o != nil && !IsNil(o.Result) {
		return true
	}

	return false
}

// SetResult gets a reference to the given string and assigns it to the Result field.
func (o *ExecutionControllerEvalResult) SetResult(v string) {
	o.Result = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *ExecutionControllerEvalResult) GetError() string {
	if o == nil || IsNil(o.Error) {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionControllerEvalResult) GetErrorOk() (*string, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *ExecutionControllerEvalResult) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *ExecutionControllerEvalResult) SetError(v string) {
	o.Error = &v
}

// GetStackTrace returns the StackTrace field value if set, zero value otherwise.
func (o *ExecutionControllerEvalResult) GetStackTrace() string {
	if o == nil || IsNil(o.StackTrace) {
		var ret string
		return ret
	}
	return *o.StackTrace
}

// GetStackTraceOk returns a tuple with the StackTrace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionControllerEvalResult) GetStackTraceOk() (*string, bool) {
	if o == nil || IsNil(o.StackTrace) {
		return nil, false
	}
	return o.StackTrace, true
}

// HasStackTrace returns a boolean if a field has been set.
func (o *ExecutionControllerEvalResult) HasStackTrace() bool {
	if o != nil && !IsNil(o.StackTrace) {
		return true
	}

	return false
}

// SetStackTrace gets a reference to the given string and assigns it to the StackTrace field.
func (o *ExecutionControllerEvalResult) SetStackTrace(v string) {
	o.StackTrace = &v
}

func (o ExecutionControllerEvalResult) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExecutionControllerEvalResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Result) {
		toSerialize["result"] = o.Result
	}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	if !IsNil(o.StackTrace) {
		toSerialize["stackTrace"] = o.StackTrace
	}
	return toSerialize, nil
}

type NullableExecutionControllerEvalResult struct {
	value *ExecutionControllerEvalResult
	isSet bool
}

func (v NullableExecutionControllerEvalResult) Get() *ExecutionControllerEvalResult {
	return v.value
}

func (v *NullableExecutionControllerEvalResult) Set(val *ExecutionControllerEvalResult) {
	v.value = val
	v.isSet = true
}

func (v NullableExecutionControllerEvalResult) IsSet() bool {
	return v.isSet
}

func (v *NullableExecutionControllerEvalResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExecutionControllerEvalResult(val *ExecutionControllerEvalResult) *NullableExecutionControllerEvalResult {
	return &NullableExecutionControllerEvalResult{value: val, isSet: true}
}

func (v NullableExecutionControllerEvalResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExecutionControllerEvalResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
