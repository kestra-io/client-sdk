/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
)

// checks if the IAMTenantAccessControllerApiRoleAssignment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IAMTenantAccessControllerApiRoleAssignment{}

// IAMTenantAccessControllerApiRoleAssignment struct for IAMTenantAccessControllerApiRoleAssignment
type IAMTenantAccessControllerApiRoleAssignment struct {
	Id                   string                                       `json:"id"`
	Name                 string                                       `json:"name"`
	Namespace            string                                       `json:"namespace"`
	Origin               RBACServiceRoleAssignmentRoleOrigin          `json:"origin"`
	SourceId             string                                       `json:"sourceId"`
	Permissions          []IAMTenantAccessControllerApiUserPermission `json:"permissions"`
	AdditionalProperties map[string]interface{}
}

type _IAMTenantAccessControllerApiRoleAssignment IAMTenantAccessControllerApiRoleAssignment

// NewIAMTenantAccessControllerApiRoleAssignment instantiates a new IAMTenantAccessControllerApiRoleAssignment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIAMTenantAccessControllerApiRoleAssignment(id string, name string, namespace string, origin RBACServiceRoleAssignmentRoleOrigin, sourceId string, permissions []IAMTenantAccessControllerApiUserPermission) *IAMTenantAccessControllerApiRoleAssignment {
	this := IAMTenantAccessControllerApiRoleAssignment{}
	this.Id = id
	this.Name = name
	this.Namespace = namespace
	this.Origin = origin
	this.SourceId = sourceId
	this.Permissions = permissions
	return &this
}

// NewIAMTenantAccessControllerApiRoleAssignmentWithDefaults instantiates a new IAMTenantAccessControllerApiRoleAssignment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIAMTenantAccessControllerApiRoleAssignmentWithDefaults() *IAMTenantAccessControllerApiRoleAssignment {
	this := IAMTenantAccessControllerApiRoleAssignment{}
	return &this
}

// GetId returns the Id field value
func (o *IAMTenantAccessControllerApiRoleAssignment) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *IAMTenantAccessControllerApiRoleAssignment) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *IAMTenantAccessControllerApiRoleAssignment) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *IAMTenantAccessControllerApiRoleAssignment) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *IAMTenantAccessControllerApiRoleAssignment) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *IAMTenantAccessControllerApiRoleAssignment) SetName(v string) {
	o.Name = v
}

// GetNamespace returns the Namespace field value
func (o *IAMTenantAccessControllerApiRoleAssignment) GetNamespace() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value
// and a boolean to check if the value has been set.
func (o *IAMTenantAccessControllerApiRoleAssignment) GetNamespaceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Namespace, true
}

// SetNamespace sets field value
func (o *IAMTenantAccessControllerApiRoleAssignment) SetNamespace(v string) {
	o.Namespace = v
}

// GetOrigin returns the Origin field value
func (o *IAMTenantAccessControllerApiRoleAssignment) GetOrigin() RBACServiceRoleAssignmentRoleOrigin {
	if o == nil {
		var ret RBACServiceRoleAssignmentRoleOrigin
		return ret
	}

	return o.Origin
}

// GetOriginOk returns a tuple with the Origin field value
// and a boolean to check if the value has been set.
func (o *IAMTenantAccessControllerApiRoleAssignment) GetOriginOk() (*RBACServiceRoleAssignmentRoleOrigin, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Origin, true
}

// SetOrigin sets field value
func (o *IAMTenantAccessControllerApiRoleAssignment) SetOrigin(v RBACServiceRoleAssignmentRoleOrigin) {
	o.Origin = v
}

// GetSourceId returns the SourceId field value
func (o *IAMTenantAccessControllerApiRoleAssignment) GetSourceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SourceId
}

// GetSourceIdOk returns a tuple with the SourceId field value
// and a boolean to check if the value has been set.
func (o *IAMTenantAccessControllerApiRoleAssignment) GetSourceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceId, true
}

// SetSourceId sets field value
func (o *IAMTenantAccessControllerApiRoleAssignment) SetSourceId(v string) {
	o.SourceId = v
}

// GetPermissions returns the Permissions field value
func (o *IAMTenantAccessControllerApiRoleAssignment) GetPermissions() []IAMTenantAccessControllerApiUserPermission {
	if o == nil {
		var ret []IAMTenantAccessControllerApiUserPermission
		return ret
	}

	return o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value
// and a boolean to check if the value has been set.
func (o *IAMTenantAccessControllerApiRoleAssignment) GetPermissionsOk() ([]IAMTenantAccessControllerApiUserPermission, bool) {
	if o == nil {
		return nil, false
	}
	return o.Permissions, true
}

// SetPermissions sets field value
func (o *IAMTenantAccessControllerApiRoleAssignment) SetPermissions(v []IAMTenantAccessControllerApiUserPermission) {
	o.Permissions = v
}

func (o IAMTenantAccessControllerApiRoleAssignment) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IAMTenantAccessControllerApiRoleAssignment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["namespace"] = o.Namespace
	toSerialize["origin"] = o.Origin
	toSerialize["sourceId"] = o.SourceId
	toSerialize["permissions"] = o.Permissions

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *IAMTenantAccessControllerApiRoleAssignment) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"namespace",
		"origin",
		"sourceId",
		"permissions",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIAMTenantAccessControllerApiRoleAssignment := _IAMTenantAccessControllerApiRoleAssignment{}

	err = json.Unmarshal(data, &varIAMTenantAccessControllerApiRoleAssignment)

	if err != nil {
		return err
	}

	*o = IAMTenantAccessControllerApiRoleAssignment(varIAMTenantAccessControllerApiRoleAssignment)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "namespace")
		delete(additionalProperties, "origin")
		delete(additionalProperties, "sourceId")
		delete(additionalProperties, "permissions")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIAMTenantAccessControllerApiRoleAssignment struct {
	value *IAMTenantAccessControllerApiRoleAssignment
	isSet bool
}

func (v NullableIAMTenantAccessControllerApiRoleAssignment) Get() *IAMTenantAccessControllerApiRoleAssignment {
	return v.value
}

func (v *NullableIAMTenantAccessControllerApiRoleAssignment) Set(val *IAMTenantAccessControllerApiRoleAssignment) {
	v.value = val
	v.isSet = true
}

func (v NullableIAMTenantAccessControllerApiRoleAssignment) IsSet() bool {
	return v.isSet
}

func (v *NullableIAMTenantAccessControllerApiRoleAssignment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIAMTenantAccessControllerApiRoleAssignment(val *IAMTenantAccessControllerApiRoleAssignment) *NullableIAMTenantAccessControllerApiRoleAssignment {
	return &NullableIAMTenantAccessControllerApiRoleAssignment{value: val, isSet: true}
}

func (v NullableIAMTenantAccessControllerApiRoleAssignment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIAMTenantAccessControllerApiRoleAssignment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
