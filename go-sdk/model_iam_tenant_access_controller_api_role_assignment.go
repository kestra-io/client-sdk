/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
)

// checks if the IAMTenantAccessControllerApiRoleAssignment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IAMTenantAccessControllerApiRoleAssignment{}

// IAMTenantAccessControllerApiRoleAssignment struct for IAMTenantAccessControllerApiRoleAssignment
type IAMTenantAccessControllerApiRoleAssignment struct {
	Id                   *string                                      `json:"id,omitempty"`
	Name                 *string                                      `json:"name,omitempty"`
	Namespace            *string                                      `json:"namespace,omitempty"`
	Origin               *RBACServiceRoleAssignmentRoleOrigin         `json:"origin,omitempty"`
	SourceId             *string                                      `json:"sourceId,omitempty"`
	Permissions          []IAMTenantAccessControllerApiUserPermission `json:"permissions,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _IAMTenantAccessControllerApiRoleAssignment IAMTenantAccessControllerApiRoleAssignment

// NewIAMTenantAccessControllerApiRoleAssignment instantiates a new IAMTenantAccessControllerApiRoleAssignment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIAMTenantAccessControllerApiRoleAssignment() *IAMTenantAccessControllerApiRoleAssignment {
	this := IAMTenantAccessControllerApiRoleAssignment{}
	return &this
}

// NewIAMTenantAccessControllerApiRoleAssignmentWithDefaults instantiates a new IAMTenantAccessControllerApiRoleAssignment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIAMTenantAccessControllerApiRoleAssignmentWithDefaults() *IAMTenantAccessControllerApiRoleAssignment {
	this := IAMTenantAccessControllerApiRoleAssignment{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *IAMTenantAccessControllerApiRoleAssignment) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IAMTenantAccessControllerApiRoleAssignment) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *IAMTenantAccessControllerApiRoleAssignment) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *IAMTenantAccessControllerApiRoleAssignment) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *IAMTenantAccessControllerApiRoleAssignment) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IAMTenantAccessControllerApiRoleAssignment) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *IAMTenantAccessControllerApiRoleAssignment) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *IAMTenantAccessControllerApiRoleAssignment) SetName(v string) {
	o.Name = &v
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *IAMTenantAccessControllerApiRoleAssignment) GetNamespace() string {
	if o == nil || IsNil(o.Namespace) {
		var ret string
		return ret
	}
	return *o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IAMTenantAccessControllerApiRoleAssignment) GetNamespaceOk() (*string, bool) {
	if o == nil || IsNil(o.Namespace) {
		return nil, false
	}
	return o.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *IAMTenantAccessControllerApiRoleAssignment) HasNamespace() bool {
	if o != nil && !IsNil(o.Namespace) {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the Namespace field.
func (o *IAMTenantAccessControllerApiRoleAssignment) SetNamespace(v string) {
	o.Namespace = &v
}

// GetOrigin returns the Origin field value if set, zero value otherwise.
func (o *IAMTenantAccessControllerApiRoleAssignment) GetOrigin() RBACServiceRoleAssignmentRoleOrigin {
	if o == nil || IsNil(o.Origin) {
		var ret RBACServiceRoleAssignmentRoleOrigin
		return ret
	}
	return *o.Origin
}

// GetOriginOk returns a tuple with the Origin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IAMTenantAccessControllerApiRoleAssignment) GetOriginOk() (*RBACServiceRoleAssignmentRoleOrigin, bool) {
	if o == nil || IsNil(o.Origin) {
		return nil, false
	}
	return o.Origin, true
}

// HasOrigin returns a boolean if a field has been set.
func (o *IAMTenantAccessControllerApiRoleAssignment) HasOrigin() bool {
	if o != nil && !IsNil(o.Origin) {
		return true
	}

	return false
}

// SetOrigin gets a reference to the given RBACServiceRoleAssignmentRoleOrigin and assigns it to the Origin field.
func (o *IAMTenantAccessControllerApiRoleAssignment) SetOrigin(v RBACServiceRoleAssignmentRoleOrigin) {
	o.Origin = &v
}

// GetSourceId returns the SourceId field value if set, zero value otherwise.
func (o *IAMTenantAccessControllerApiRoleAssignment) GetSourceId() string {
	if o == nil || IsNil(o.SourceId) {
		var ret string
		return ret
	}
	return *o.SourceId
}

// GetSourceIdOk returns a tuple with the SourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IAMTenantAccessControllerApiRoleAssignment) GetSourceIdOk() (*string, bool) {
	if o == nil || IsNil(o.SourceId) {
		return nil, false
	}
	return o.SourceId, true
}

// HasSourceId returns a boolean if a field has been set.
func (o *IAMTenantAccessControllerApiRoleAssignment) HasSourceId() bool {
	if o != nil && !IsNil(o.SourceId) {
		return true
	}

	return false
}

// SetSourceId gets a reference to the given string and assigns it to the SourceId field.
func (o *IAMTenantAccessControllerApiRoleAssignment) SetSourceId(v string) {
	o.SourceId = &v
}

// GetPermissions returns the Permissions field value if set, zero value otherwise.
func (o *IAMTenantAccessControllerApiRoleAssignment) GetPermissions() []IAMTenantAccessControllerApiUserPermission {
	if o == nil || IsNil(o.Permissions) {
		var ret []IAMTenantAccessControllerApiUserPermission
		return ret
	}
	return o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IAMTenantAccessControllerApiRoleAssignment) GetPermissionsOk() ([]IAMTenantAccessControllerApiUserPermission, bool) {
	if o == nil || IsNil(o.Permissions) {
		return nil, false
	}
	return o.Permissions, true
}

// HasPermissions returns a boolean if a field has been set.
func (o *IAMTenantAccessControllerApiRoleAssignment) HasPermissions() bool {
	if o != nil && !IsNil(o.Permissions) {
		return true
	}

	return false
}

// SetPermissions gets a reference to the given []IAMTenantAccessControllerApiUserPermission and assigns it to the Permissions field.
func (o *IAMTenantAccessControllerApiRoleAssignment) SetPermissions(v []IAMTenantAccessControllerApiUserPermission) {
	o.Permissions = v
}

func (o IAMTenantAccessControllerApiRoleAssignment) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IAMTenantAccessControllerApiRoleAssignment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Namespace) {
		toSerialize["namespace"] = o.Namespace
	}
	if !IsNil(o.Origin) {
		toSerialize["origin"] = o.Origin
	}
	if !IsNil(o.SourceId) {
		toSerialize["sourceId"] = o.SourceId
	}
	if !IsNil(o.Permissions) {
		toSerialize["permissions"] = o.Permissions
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *IAMTenantAccessControllerApiRoleAssignment) UnmarshalJSON(data []byte) (err error) {
	varIAMTenantAccessControllerApiRoleAssignment := _IAMTenantAccessControllerApiRoleAssignment{}

	err = json.Unmarshal(data, &varIAMTenantAccessControllerApiRoleAssignment)

	if err != nil {
		return err
	}

	*o = IAMTenantAccessControllerApiRoleAssignment(varIAMTenantAccessControllerApiRoleAssignment)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "namespace")
		delete(additionalProperties, "origin")
		delete(additionalProperties, "sourceId")
		delete(additionalProperties, "permissions")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIAMTenantAccessControllerApiRoleAssignment struct {
	value *IAMTenantAccessControllerApiRoleAssignment
	isSet bool
}

func (v NullableIAMTenantAccessControllerApiRoleAssignment) Get() *IAMTenantAccessControllerApiRoleAssignment {
	return v.value
}

func (v *NullableIAMTenantAccessControllerApiRoleAssignment) Set(val *IAMTenantAccessControllerApiRoleAssignment) {
	v.value = val
	v.isSet = true
}

func (v NullableIAMTenantAccessControllerApiRoleAssignment) IsSet() bool {
	return v.isSet
}

func (v *NullableIAMTenantAccessControllerApiRoleAssignment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIAMTenantAccessControllerApiRoleAssignment(val *IAMTenantAccessControllerApiRoleAssignment) *NullableIAMTenantAccessControllerApiRoleAssignment {
	return &NullableIAMTenantAccessControllerApiRoleAssignment{value: val, isSet: true}
}

func (v NullableIAMTenantAccessControllerApiRoleAssignment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIAMTenantAccessControllerApiRoleAssignment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
