/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
)

// ExecutionRepositoryInterfaceChildFilter the model 'ExecutionRepositoryInterfaceChildFilter'
type ExecutionRepositoryInterfaceChildFilter string

// List of ExecutionRepositoryInterface.ChildFilter
const (
	EXECUTIONREPOSITORYINTERFACECHILDFILTER_CHILD ExecutionRepositoryInterfaceChildFilter = "CHILD"
	EXECUTIONREPOSITORYINTERFACECHILDFILTER_MAIN  ExecutionRepositoryInterfaceChildFilter = "MAIN"
)

// All allowed values of ExecutionRepositoryInterfaceChildFilter enum
var AllowedExecutionRepositoryInterfaceChildFilterEnumValues = []ExecutionRepositoryInterfaceChildFilter{
	"CHILD",
	"MAIN",
}

func (v *ExecutionRepositoryInterfaceChildFilter) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ExecutionRepositoryInterfaceChildFilter(value)
	for _, existing := range AllowedExecutionRepositoryInterfaceChildFilterEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ExecutionRepositoryInterfaceChildFilter", value)
}

// NewExecutionRepositoryInterfaceChildFilterFromValue returns a pointer to a valid ExecutionRepositoryInterfaceChildFilter
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewExecutionRepositoryInterfaceChildFilterFromValue(v string) (*ExecutionRepositoryInterfaceChildFilter, error) {
	ev := ExecutionRepositoryInterfaceChildFilter(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ExecutionRepositoryInterfaceChildFilter: valid values are %v", v, AllowedExecutionRepositoryInterfaceChildFilterEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ExecutionRepositoryInterfaceChildFilter) IsValid() bool {
	for _, existing := range AllowedExecutionRepositoryInterfaceChildFilterEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ExecutionRepositoryInterface.ChildFilter value
func (v ExecutionRepositoryInterfaceChildFilter) Ptr() *ExecutionRepositoryInterfaceChildFilter {
	return &v
}

type NullableExecutionRepositoryInterfaceChildFilter struct {
	value *ExecutionRepositoryInterfaceChildFilter
	isSet bool
}

func (v NullableExecutionRepositoryInterfaceChildFilter) Get() *ExecutionRepositoryInterfaceChildFilter {
	return v.value
}

func (v *NullableExecutionRepositoryInterfaceChildFilter) Set(val *ExecutionRepositoryInterfaceChildFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableExecutionRepositoryInterfaceChildFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableExecutionRepositoryInterfaceChildFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExecutionRepositoryInterfaceChildFilter(val *ExecutionRepositoryInterfaceChildFilter) *NullableExecutionRepositoryInterfaceChildFilter {
	return &NullableExecutionRepositoryInterfaceChildFilter{value: val, isSet: true}
}

func (v NullableExecutionRepositoryInterfaceChildFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExecutionRepositoryInterfaceChildFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
