/*
Kestra EE

All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
)

// checks if the AuditLogControllerAuditLogWithUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuditLogControllerAuditLogWithUser{}

// AuditLogControllerAuditLogWithUser struct for AuditLogControllerAuditLogWithUser
type AuditLogControllerAuditLogWithUser struct {
	AuditLog *AuditLog `json:"auditLog,omitempty"`
	User     *ApiUser  `json:"user,omitempty"`
}

// NewAuditLogControllerAuditLogWithUser instantiates a new AuditLogControllerAuditLogWithUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuditLogControllerAuditLogWithUser() *AuditLogControllerAuditLogWithUser {
	this := AuditLogControllerAuditLogWithUser{}
	return &this
}

// NewAuditLogControllerAuditLogWithUserWithDefaults instantiates a new AuditLogControllerAuditLogWithUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuditLogControllerAuditLogWithUserWithDefaults() *AuditLogControllerAuditLogWithUser {
	this := AuditLogControllerAuditLogWithUser{}
	return &this
}

// GetAuditLog returns the AuditLog field value if set, zero value otherwise.
func (o *AuditLogControllerAuditLogWithUser) GetAuditLog() AuditLog {
	if o == nil || IsNil(o.AuditLog) {
		var ret AuditLog
		return ret
	}
	return *o.AuditLog
}

// GetAuditLogOk returns a tuple with the AuditLog field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLogControllerAuditLogWithUser) GetAuditLogOk() (*AuditLog, bool) {
	if o == nil || IsNil(o.AuditLog) {
		return nil, false
	}
	return o.AuditLog, true
}

// HasAuditLog returns a boolean if a field has been set.
func (o *AuditLogControllerAuditLogWithUser) HasAuditLog() bool {
	if o != nil && !IsNil(o.AuditLog) {
		return true
	}

	return false
}

// SetAuditLog gets a reference to the given AuditLog and assigns it to the AuditLog field.
func (o *AuditLogControllerAuditLogWithUser) SetAuditLog(v AuditLog) {
	o.AuditLog = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *AuditLogControllerAuditLogWithUser) GetUser() ApiUser {
	if o == nil || IsNil(o.User) {
		var ret ApiUser
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLogControllerAuditLogWithUser) GetUserOk() (*ApiUser, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *AuditLogControllerAuditLogWithUser) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given ApiUser and assigns it to the User field.
func (o *AuditLogControllerAuditLogWithUser) SetUser(v ApiUser) {
	o.User = &v
}

func (o AuditLogControllerAuditLogWithUser) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuditLogControllerAuditLogWithUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AuditLog) {
		toSerialize["auditLog"] = o.AuditLog
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	return toSerialize, nil
}

type NullableAuditLogControllerAuditLogWithUser struct {
	value *AuditLogControllerAuditLogWithUser
	isSet bool
}

func (v NullableAuditLogControllerAuditLogWithUser) Get() *AuditLogControllerAuditLogWithUser {
	return v.value
}

func (v *NullableAuditLogControllerAuditLogWithUser) Set(val *AuditLogControllerAuditLogWithUser) {
	v.value = val
	v.isSet = true
}

func (v NullableAuditLogControllerAuditLogWithUser) IsSet() bool {
	return v.isSet
}

func (v *NullableAuditLogControllerAuditLogWithUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuditLogControllerAuditLogWithUser(val *AuditLogControllerAuditLogWithUser) *NullableAuditLogControllerAuditLogWithUser {
	return &NullableAuditLogControllerAuditLogWithUser{value: val, isSet: true}
}

func (v NullableAuditLogControllerAuditLogWithUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuditLogControllerAuditLogWithUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
