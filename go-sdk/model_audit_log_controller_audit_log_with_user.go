/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
)

// checks if the AuditLogControllerAuditLogWithUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuditLogControllerAuditLogWithUser{}

// AuditLogControllerAuditLogWithUser struct for AuditLogControllerAuditLogWithUser
type AuditLogControllerAuditLogWithUser struct {
	AuditLog             AuditLog `json:"auditLog"`
	User                 ApiUser  `json:"user"`
	AdditionalProperties map[string]interface{}
}

type _AuditLogControllerAuditLogWithUser AuditLogControllerAuditLogWithUser

// NewAuditLogControllerAuditLogWithUser instantiates a new AuditLogControllerAuditLogWithUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuditLogControllerAuditLogWithUser(auditLog AuditLog, user ApiUser) *AuditLogControllerAuditLogWithUser {
	this := AuditLogControllerAuditLogWithUser{}
	this.AuditLog = auditLog
	this.User = user
	return &this
}

// NewAuditLogControllerAuditLogWithUserWithDefaults instantiates a new AuditLogControllerAuditLogWithUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuditLogControllerAuditLogWithUserWithDefaults() *AuditLogControllerAuditLogWithUser {
	this := AuditLogControllerAuditLogWithUser{}
	return &this
}

// GetAuditLog returns the AuditLog field value
func (o *AuditLogControllerAuditLogWithUser) GetAuditLog() AuditLog {
	if o == nil {
		var ret AuditLog
		return ret
	}

	return o.AuditLog
}

// GetAuditLogOk returns a tuple with the AuditLog field value
// and a boolean to check if the value has been set.
func (o *AuditLogControllerAuditLogWithUser) GetAuditLogOk() (*AuditLog, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AuditLog, true
}

// SetAuditLog sets field value
func (o *AuditLogControllerAuditLogWithUser) SetAuditLog(v AuditLog) {
	o.AuditLog = v
}

// GetUser returns the User field value
func (o *AuditLogControllerAuditLogWithUser) GetUser() ApiUser {
	if o == nil {
		var ret ApiUser
		return ret
	}

	return o.User
}

// GetUserOk returns a tuple with the User field value
// and a boolean to check if the value has been set.
func (o *AuditLogControllerAuditLogWithUser) GetUserOk() (*ApiUser, bool) {
	if o == nil {
		return nil, false
	}
	return &o.User, true
}

// SetUser sets field value
func (o *AuditLogControllerAuditLogWithUser) SetUser(v ApiUser) {
	o.User = v
}

func (o AuditLogControllerAuditLogWithUser) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuditLogControllerAuditLogWithUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["auditLog"] = o.AuditLog
	toSerialize["user"] = o.User

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AuditLogControllerAuditLogWithUser) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"auditLog",
		"user",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAuditLogControllerAuditLogWithUser := _AuditLogControllerAuditLogWithUser{}

	err = json.Unmarshal(data, &varAuditLogControllerAuditLogWithUser)

	if err != nil {
		return err
	}

	*o = AuditLogControllerAuditLogWithUser(varAuditLogControllerAuditLogWithUser)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "auditLog")
		delete(additionalProperties, "user")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAuditLogControllerAuditLogWithUser struct {
	value *AuditLogControllerAuditLogWithUser
	isSet bool
}

func (v NullableAuditLogControllerAuditLogWithUser) Get() *AuditLogControllerAuditLogWithUser {
	return v.value
}

func (v *NullableAuditLogControllerAuditLogWithUser) Set(val *AuditLogControllerAuditLogWithUser) {
	v.value = val
	v.isSet = true
}

func (v NullableAuditLogControllerAuditLogWithUser) IsSet() bool {
	return v.isSet
}

func (v *NullableAuditLogControllerAuditLogWithUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuditLogControllerAuditLogWithUser(val *AuditLogControllerAuditLogWithUser) *NullableAuditLogControllerAuditLogWithUser {
	return &NullableAuditLogControllerAuditLogWithUser{value: val, isSet: true}
}

func (v NullableAuditLogControllerAuditLogWithUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuditLogControllerAuditLogWithUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
