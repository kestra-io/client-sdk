/*
Kestra EE

All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the UnitTest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UnitTest{}

// UnitTest struct for UnitTest
type UnitTest struct {
	Id          string      `json:"id"`
	Type        string      `json:"type"`
	Disabled    *bool       `json:"disabled,omitempty"`
	Description *string     `json:"description,omitempty"`
	Fixtures    *Fixtures   `json:"fixtures,omitempty"`
	Assertions  []Assertion `json:"assertions"`
}

type _UnitTest UnitTest

// NewUnitTest instantiates a new UnitTest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUnitTest(id string, type_ string, assertions []Assertion) *UnitTest {
	this := UnitTest{}
	this.Id = id
	this.Type = type_
	this.Assertions = assertions
	return &this
}

// NewUnitTestWithDefaults instantiates a new UnitTest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUnitTestWithDefaults() *UnitTest {
	this := UnitTest{}
	return &this
}

// GetId returns the Id field value
func (o *UnitTest) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *UnitTest) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *UnitTest) SetId(v string) {
	o.Id = v
}

// GetType returns the Type field value
func (o *UnitTest) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *UnitTest) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *UnitTest) SetType(v string) {
	o.Type = v
}

// GetDisabled returns the Disabled field value if set, zero value otherwise.
func (o *UnitTest) GetDisabled() bool {
	if o == nil || IsNil(o.Disabled) {
		var ret bool
		return ret
	}
	return *o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnitTest) GetDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Disabled) {
		return nil, false
	}
	return o.Disabled, true
}

// HasDisabled returns a boolean if a field has been set.
func (o *UnitTest) HasDisabled() bool {
	if o != nil && !IsNil(o.Disabled) {
		return true
	}

	return false
}

// SetDisabled gets a reference to the given bool and assigns it to the Disabled field.
func (o *UnitTest) SetDisabled(v bool) {
	o.Disabled = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *UnitTest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnitTest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *UnitTest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *UnitTest) SetDescription(v string) {
	o.Description = &v
}

// GetFixtures returns the Fixtures field value if set, zero value otherwise.
func (o *UnitTest) GetFixtures() Fixtures {
	if o == nil || IsNil(o.Fixtures) {
		var ret Fixtures
		return ret
	}
	return *o.Fixtures
}

// GetFixturesOk returns a tuple with the Fixtures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnitTest) GetFixturesOk() (*Fixtures, bool) {
	if o == nil || IsNil(o.Fixtures) {
		return nil, false
	}
	return o.Fixtures, true
}

// HasFixtures returns a boolean if a field has been set.
func (o *UnitTest) HasFixtures() bool {
	if o != nil && !IsNil(o.Fixtures) {
		return true
	}

	return false
}

// SetFixtures gets a reference to the given Fixtures and assigns it to the Fixtures field.
func (o *UnitTest) SetFixtures(v Fixtures) {
	o.Fixtures = &v
}

// GetAssertions returns the Assertions field value
func (o *UnitTest) GetAssertions() []Assertion {
	if o == nil {
		var ret []Assertion
		return ret
	}

	return o.Assertions
}

// GetAssertionsOk returns a tuple with the Assertions field value
// and a boolean to check if the value has been set.
func (o *UnitTest) GetAssertionsOk() ([]Assertion, bool) {
	if o == nil {
		return nil, false
	}
	return o.Assertions, true
}

// SetAssertions sets field value
func (o *UnitTest) SetAssertions(v []Assertion) {
	o.Assertions = v
}

func (o UnitTest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UnitTest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["type"] = o.Type
	if !IsNil(o.Disabled) {
		toSerialize["disabled"] = o.Disabled
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Fixtures) {
		toSerialize["fixtures"] = o.Fixtures
	}
	toSerialize["assertions"] = o.Assertions
	return toSerialize, nil
}

func (o *UnitTest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"type",
		"assertions",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUnitTest := _UnitTest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUnitTest)

	if err != nil {
		return err
	}

	*o = UnitTest(varUnitTest)

	return err
}

type NullableUnitTest struct {
	value *UnitTest
	isSet bool
}

func (v NullableUnitTest) Get() *UnitTest {
	return v.value
}

func (v *NullableUnitTest) Set(val *UnitTest) {
	v.value = val
	v.isSet = true
}

func (v NullableUnitTest) IsSet() bool {
	return v.isSet
}

func (v *NullableUnitTest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUnitTest(val *UnitTest) *NullableUnitTest {
	return &NullableUnitTest{value: val, isSet: true}
}

func (v NullableUnitTest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUnitTest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
