/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
)

// checks if the Task type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Task{}

// Task struct for Task
type Task struct {
	Id                   string                 `json:"id" validate:"regexp=^[a-zA-Z0-9][a-zA-Z0-9_-]*"`
	Type                 string                 `json:"type" validate:"regexp=\\\\p{javaJavaIdentifierStart}\\\\p{javaJavaIdentifierPart}*(\\\\.\\\\p{javaJavaIdentifierStart}\\\\p{javaJavaIdentifierPart}*)*"`
	Version              *string                `json:"version,omitempty" validate:"regexp=\\\\d+\\\\.\\\\d+\\\\.\\\\d+(-[a-zA-Z0-9-]+)?|([a-zA-Z0-9]+)"`
	Description          *string                `json:"description,omitempty"`
	Retry                map[string]interface{} `json:"retry,omitempty"`
	Timeout              *string                `json:"timeout,omitempty"`
	Disabled             *bool                  `json:"disabled,omitempty"`
	WorkerGroup          *WorkerGroup           `json:"workerGroup,omitempty"`
	LogLevel             *Level                 `json:"logLevel,omitempty"`
	AllowFailure         *bool                  `json:"allowFailure,omitempty"`
	LogToFile            *bool                  `json:"logToFile,omitempty"`
	RunIf                *string                `json:"runIf,omitempty"`
	AllowWarning         *bool                  `json:"allowWarning,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Task Task

// NewTask instantiates a new Task object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTask(id string, type_ string) *Task {
	this := Task{}
	this.Id = id
	this.Type = type_
	return &this
}

// NewTaskWithDefaults instantiates a new Task object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskWithDefaults() *Task {
	this := Task{}
	return &this
}

// GetId returns the Id field value
func (o *Task) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Task) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Task) SetId(v string) {
	o.Id = v
}

// GetType returns the Type field value
func (o *Task) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Task) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Task) SetType(v string) {
	o.Type = v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *Task) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *Task) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *Task) SetVersion(v string) {
	o.Version = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Task) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Task) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Task) SetDescription(v string) {
	o.Description = &v
}

// GetRetry returns the Retry field value if set, zero value otherwise.
func (o *Task) GetRetry() map[string]interface{} {
	if o == nil || IsNil(o.Retry) {
		var ret map[string]interface{}
		return ret
	}
	return o.Retry
}

// GetRetryOk returns a tuple with the Retry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetRetryOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Retry) {
		return map[string]interface{}{}, false
	}
	return o.Retry, true
}

// HasRetry returns a boolean if a field has been set.
func (o *Task) HasRetry() bool {
	if o != nil && !IsNil(o.Retry) {
		return true
	}

	return false
}

// SetRetry gets a reference to the given map[string]interface{} and assigns it to the Retry field.
func (o *Task) SetRetry(v map[string]interface{}) {
	o.Retry = v
}

// GetTimeout returns the Timeout field value if set, zero value otherwise.
func (o *Task) GetTimeout() string {
	if o == nil || IsNil(o.Timeout) {
		var ret string
		return ret
	}
	return *o.Timeout
}

// GetTimeoutOk returns a tuple with the Timeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetTimeoutOk() (*string, bool) {
	if o == nil || IsNil(o.Timeout) {
		return nil, false
	}
	return o.Timeout, true
}

// HasTimeout returns a boolean if a field has been set.
func (o *Task) HasTimeout() bool {
	if o != nil && !IsNil(o.Timeout) {
		return true
	}

	return false
}

// SetTimeout gets a reference to the given string and assigns it to the Timeout field.
func (o *Task) SetTimeout(v string) {
	o.Timeout = &v
}

// GetDisabled returns the Disabled field value if set, zero value otherwise.
func (o *Task) GetDisabled() bool {
	if o == nil || IsNil(o.Disabled) {
		var ret bool
		return ret
	}
	return *o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Disabled) {
		return nil, false
	}
	return o.Disabled, true
}

// HasDisabled returns a boolean if a field has been set.
func (o *Task) HasDisabled() bool {
	if o != nil && !IsNil(o.Disabled) {
		return true
	}

	return false
}

// SetDisabled gets a reference to the given bool and assigns it to the Disabled field.
func (o *Task) SetDisabled(v bool) {
	o.Disabled = &v
}

// GetWorkerGroup returns the WorkerGroup field value if set, zero value otherwise.
func (o *Task) GetWorkerGroup() WorkerGroup {
	if o == nil || IsNil(o.WorkerGroup) {
		var ret WorkerGroup
		return ret
	}
	return *o.WorkerGroup
}

// GetWorkerGroupOk returns a tuple with the WorkerGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetWorkerGroupOk() (*WorkerGroup, bool) {
	if o == nil || IsNil(o.WorkerGroup) {
		return nil, false
	}
	return o.WorkerGroup, true
}

// HasWorkerGroup returns a boolean if a field has been set.
func (o *Task) HasWorkerGroup() bool {
	if o != nil && !IsNil(o.WorkerGroup) {
		return true
	}

	return false
}

// SetWorkerGroup gets a reference to the given WorkerGroup and assigns it to the WorkerGroup field.
func (o *Task) SetWorkerGroup(v WorkerGroup) {
	o.WorkerGroup = &v
}

// GetLogLevel returns the LogLevel field value if set, zero value otherwise.
func (o *Task) GetLogLevel() Level {
	if o == nil || IsNil(o.LogLevel) {
		var ret Level
		return ret
	}
	return *o.LogLevel
}

// GetLogLevelOk returns a tuple with the LogLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetLogLevelOk() (*Level, bool) {
	if o == nil || IsNil(o.LogLevel) {
		return nil, false
	}
	return o.LogLevel, true
}

// HasLogLevel returns a boolean if a field has been set.
func (o *Task) HasLogLevel() bool {
	if o != nil && !IsNil(o.LogLevel) {
		return true
	}

	return false
}

// SetLogLevel gets a reference to the given Level and assigns it to the LogLevel field.
func (o *Task) SetLogLevel(v Level) {
	o.LogLevel = &v
}

// GetAllowFailure returns the AllowFailure field value if set, zero value otherwise.
func (o *Task) GetAllowFailure() bool {
	if o == nil || IsNil(o.AllowFailure) {
		var ret bool
		return ret
	}
	return *o.AllowFailure
}

// GetAllowFailureOk returns a tuple with the AllowFailure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetAllowFailureOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowFailure) {
		return nil, false
	}
	return o.AllowFailure, true
}

// HasAllowFailure returns a boolean if a field has been set.
func (o *Task) HasAllowFailure() bool {
	if o != nil && !IsNil(o.AllowFailure) {
		return true
	}

	return false
}

// SetAllowFailure gets a reference to the given bool and assigns it to the AllowFailure field.
func (o *Task) SetAllowFailure(v bool) {
	o.AllowFailure = &v
}

// GetLogToFile returns the LogToFile field value if set, zero value otherwise.
func (o *Task) GetLogToFile() bool {
	if o == nil || IsNil(o.LogToFile) {
		var ret bool
		return ret
	}
	return *o.LogToFile
}

// GetLogToFileOk returns a tuple with the LogToFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetLogToFileOk() (*bool, bool) {
	if o == nil || IsNil(o.LogToFile) {
		return nil, false
	}
	return o.LogToFile, true
}

// HasLogToFile returns a boolean if a field has been set.
func (o *Task) HasLogToFile() bool {
	if o != nil && !IsNil(o.LogToFile) {
		return true
	}

	return false
}

// SetLogToFile gets a reference to the given bool and assigns it to the LogToFile field.
func (o *Task) SetLogToFile(v bool) {
	o.LogToFile = &v
}

// GetRunIf returns the RunIf field value if set, zero value otherwise.
func (o *Task) GetRunIf() string {
	if o == nil || IsNil(o.RunIf) {
		var ret string
		return ret
	}
	return *o.RunIf
}

// GetRunIfOk returns a tuple with the RunIf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetRunIfOk() (*string, bool) {
	if o == nil || IsNil(o.RunIf) {
		return nil, false
	}
	return o.RunIf, true
}

// HasRunIf returns a boolean if a field has been set.
func (o *Task) HasRunIf() bool {
	if o != nil && !IsNil(o.RunIf) {
		return true
	}

	return false
}

// SetRunIf gets a reference to the given string and assigns it to the RunIf field.
func (o *Task) SetRunIf(v string) {
	o.RunIf = &v
}

// GetAllowWarning returns the AllowWarning field value if set, zero value otherwise.
func (o *Task) GetAllowWarning() bool {
	if o == nil || IsNil(o.AllowWarning) {
		var ret bool
		return ret
	}
	return *o.AllowWarning
}

// GetAllowWarningOk returns a tuple with the AllowWarning field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetAllowWarningOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowWarning) {
		return nil, false
	}
	return o.AllowWarning, true
}

// HasAllowWarning returns a boolean if a field has been set.
func (o *Task) HasAllowWarning() bool {
	if o != nil && !IsNil(o.AllowWarning) {
		return true
	}

	return false
}

// SetAllowWarning gets a reference to the given bool and assigns it to the AllowWarning field.
func (o *Task) SetAllowWarning(v bool) {
	o.AllowWarning = &v
}

func (o Task) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Task) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["type"] = o.Type
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Retry) {
		toSerialize["retry"] = o.Retry
	}
	if !IsNil(o.Timeout) {
		toSerialize["timeout"] = o.Timeout
	}
	if !IsNil(o.Disabled) {
		toSerialize["disabled"] = o.Disabled
	}
	if !IsNil(o.WorkerGroup) {
		toSerialize["workerGroup"] = o.WorkerGroup
	}
	if !IsNil(o.LogLevel) {
		toSerialize["logLevel"] = o.LogLevel
	}
	if !IsNil(o.AllowFailure) {
		toSerialize["allowFailure"] = o.AllowFailure
	}
	if !IsNil(o.LogToFile) {
		toSerialize["logToFile"] = o.LogToFile
	}
	if !IsNil(o.RunIf) {
		toSerialize["runIf"] = o.RunIf
	}
	if !IsNil(o.AllowWarning) {
		toSerialize["allowWarning"] = o.AllowWarning
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Task) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTask := _Task{}

	err = json.Unmarshal(data, &varTask)

	if err != nil {
		return err
	}

	*o = Task(varTask)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "type")
		delete(additionalProperties, "version")
		delete(additionalProperties, "description")
		delete(additionalProperties, "retry")
		delete(additionalProperties, "timeout")
		delete(additionalProperties, "disabled")
		delete(additionalProperties, "workerGroup")
		delete(additionalProperties, "logLevel")
		delete(additionalProperties, "allowFailure")
		delete(additionalProperties, "logToFile")
		delete(additionalProperties, "runIf")
		delete(additionalProperties, "allowWarning")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTask struct {
	value *Task
	isSet bool
}

func (v NullableTask) Get() *Task {
	return v.value
}

func (v *NullableTask) Set(val *Task) {
	v.value = val
	v.isSet = true
}

func (v NullableTask) IsSet() bool {
	return v.isSet
}

func (v *NullableTask) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTask(val *Task) *NullableTask {
	return &NullableTask{value: val, isSet: true}
}

func (v NullableTask) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTask) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
