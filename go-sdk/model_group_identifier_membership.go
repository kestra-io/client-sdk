/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
)

// GroupIdentifierMembership the model 'GroupIdentifierMembership'
type GroupIdentifierMembership string

// List of GroupIdentifier.Membership
const (
	GROUPIDENTIFIERMEMBERSHIP_OWNER  GroupIdentifierMembership = "OWNER"
	GROUPIDENTIFIERMEMBERSHIP_MEMBER GroupIdentifierMembership = "MEMBER"
)

// All allowed values of GroupIdentifierMembership enum
var AllowedGroupIdentifierMembershipEnumValues = []GroupIdentifierMembership{
	"OWNER",
	"MEMBER",
}

func (v *GroupIdentifierMembership) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GroupIdentifierMembership(value)
	for _, existing := range AllowedGroupIdentifierMembershipEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid GroupIdentifierMembership", value)
}

// NewGroupIdentifierMembershipFromValue returns a pointer to a valid GroupIdentifierMembership
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGroupIdentifierMembershipFromValue(v string) (*GroupIdentifierMembership, error) {
	ev := GroupIdentifierMembership(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for GroupIdentifierMembership: valid values are %v", v, AllowedGroupIdentifierMembershipEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GroupIdentifierMembership) IsValid() bool {
	for _, existing := range AllowedGroupIdentifierMembershipEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to GroupIdentifier.Membership value
func (v GroupIdentifierMembership) Ptr() *GroupIdentifierMembership {
	return &v
}

type NullableGroupIdentifierMembership struct {
	value *GroupIdentifierMembership
	isSet bool
}

func (v NullableGroupIdentifierMembership) Get() *GroupIdentifierMembership {
	return v.value
}

func (v *NullableGroupIdentifierMembership) Set(val *GroupIdentifierMembership) {
	v.value = val
	v.isSet = true
}

func (v NullableGroupIdentifierMembership) IsSet() bool {
	return v.isSet
}

func (v *NullableGroupIdentifierMembership) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroupIdentifierMembership(val *GroupIdentifierMembership) *NullableGroupIdentifierMembership {
	return &NullableGroupIdentifierMembership{value: val, isSet: true}
}

func (v NullableGroupIdentifierMembership) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroupIdentifierMembership) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
