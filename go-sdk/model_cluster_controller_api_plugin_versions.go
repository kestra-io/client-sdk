/*
Kestra EE

All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
)

// checks if the ClusterControllerApiPluginVersions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClusterControllerApiPluginVersions{}

// ClusterControllerApiPluginVersions struct for ClusterControllerApiPluginVersions
type ClusterControllerApiPluginVersions struct {
	GroupId    *string                                                         `json:"groupId,omitempty"`
	ArtifactId *string                                                         `json:"artifactId,omitempty"`
	Versions   []ClusterControllerApiPluginVersionsApiPluginVersionAndMetadata `json:"versions,omitempty"`
}

// NewClusterControllerApiPluginVersions instantiates a new ClusterControllerApiPluginVersions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterControllerApiPluginVersions() *ClusterControllerApiPluginVersions {
	this := ClusterControllerApiPluginVersions{}
	return &this
}

// NewClusterControllerApiPluginVersionsWithDefaults instantiates a new ClusterControllerApiPluginVersions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterControllerApiPluginVersionsWithDefaults() *ClusterControllerApiPluginVersions {
	this := ClusterControllerApiPluginVersions{}
	return &this
}

// GetGroupId returns the GroupId field value if set, zero value otherwise.
func (o *ClusterControllerApiPluginVersions) GetGroupId() string {
	if o == nil || IsNil(o.GroupId) {
		var ret string
		return ret
	}
	return *o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterControllerApiPluginVersions) GetGroupIdOk() (*string, bool) {
	if o == nil || IsNil(o.GroupId) {
		return nil, false
	}
	return o.GroupId, true
}

// HasGroupId returns a boolean if a field has been set.
func (o *ClusterControllerApiPluginVersions) HasGroupId() bool {
	if o != nil && !IsNil(o.GroupId) {
		return true
	}

	return false
}

// SetGroupId gets a reference to the given string and assigns it to the GroupId field.
func (o *ClusterControllerApiPluginVersions) SetGroupId(v string) {
	o.GroupId = &v
}

// GetArtifactId returns the ArtifactId field value if set, zero value otherwise.
func (o *ClusterControllerApiPluginVersions) GetArtifactId() string {
	if o == nil || IsNil(o.ArtifactId) {
		var ret string
		return ret
	}
	return *o.ArtifactId
}

// GetArtifactIdOk returns a tuple with the ArtifactId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterControllerApiPluginVersions) GetArtifactIdOk() (*string, bool) {
	if o == nil || IsNil(o.ArtifactId) {
		return nil, false
	}
	return o.ArtifactId, true
}

// HasArtifactId returns a boolean if a field has been set.
func (o *ClusterControllerApiPluginVersions) HasArtifactId() bool {
	if o != nil && !IsNil(o.ArtifactId) {
		return true
	}

	return false
}

// SetArtifactId gets a reference to the given string and assigns it to the ArtifactId field.
func (o *ClusterControllerApiPluginVersions) SetArtifactId(v string) {
	o.ArtifactId = &v
}

// GetVersions returns the Versions field value if set, zero value otherwise.
func (o *ClusterControllerApiPluginVersions) GetVersions() []ClusterControllerApiPluginVersionsApiPluginVersionAndMetadata {
	if o == nil || IsNil(o.Versions) {
		var ret []ClusterControllerApiPluginVersionsApiPluginVersionAndMetadata
		return ret
	}
	return o.Versions
}

// GetVersionsOk returns a tuple with the Versions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterControllerApiPluginVersions) GetVersionsOk() ([]ClusterControllerApiPluginVersionsApiPluginVersionAndMetadata, bool) {
	if o == nil || IsNil(o.Versions) {
		return nil, false
	}
	return o.Versions, true
}

// HasVersions returns a boolean if a field has been set.
func (o *ClusterControllerApiPluginVersions) HasVersions() bool {
	if o != nil && !IsNil(o.Versions) {
		return true
	}

	return false
}

// SetVersions gets a reference to the given []ClusterControllerApiPluginVersionsApiPluginVersionAndMetadata and assigns it to the Versions field.
func (o *ClusterControllerApiPluginVersions) SetVersions(v []ClusterControllerApiPluginVersionsApiPluginVersionAndMetadata) {
	o.Versions = v
}

func (o ClusterControllerApiPluginVersions) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClusterControllerApiPluginVersions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.GroupId) {
		toSerialize["groupId"] = o.GroupId
	}
	if !IsNil(o.ArtifactId) {
		toSerialize["artifactId"] = o.ArtifactId
	}
	if !IsNil(o.Versions) {
		toSerialize["versions"] = o.Versions
	}
	return toSerialize, nil
}

type NullableClusterControllerApiPluginVersions struct {
	value *ClusterControllerApiPluginVersions
	isSet bool
}

func (v NullableClusterControllerApiPluginVersions) Get() *ClusterControllerApiPluginVersions {
	return v.value
}

func (v *NullableClusterControllerApiPluginVersions) Set(val *ClusterControllerApiPluginVersions) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterControllerApiPluginVersions) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterControllerApiPluginVersions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterControllerApiPluginVersions(val *ClusterControllerApiPluginVersions) *NullableClusterControllerApiPluginVersions {
	return &NullableClusterControllerApiPluginVersions{value: val, isSet: true}
}

func (v NullableClusterControllerApiPluginVersions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterControllerApiPluginVersions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
