/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
)

// checks if the TestSuiteServiceTestRunByQueryResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TestSuiteServiceTestRunByQueryResult{}

// TestSuiteServiceTestRunByQueryResult struct for TestSuiteServiceTestRunByQueryResult
type TestSuiteServiceTestRunByQueryResult struct {
	RequestMade               TestSuiteServiceRunByQueryRequest `json:"requestMade"`
	TenantId                  string                            `json:"tenantId"`
	NumberOfTestSuitesToBeRun int32                             `json:"numberOfTestSuitesToBeRun"`
	NumberOfTestCasesToBeRun  int32                             `json:"numberOfTestCasesToBeRun"`
	Results                   []TestSuiteRunResult              `json:"results"`
	AdditionalProperties      map[string]interface{}
}

type _TestSuiteServiceTestRunByQueryResult TestSuiteServiceTestRunByQueryResult

// NewTestSuiteServiceTestRunByQueryResult instantiates a new TestSuiteServiceTestRunByQueryResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTestSuiteServiceTestRunByQueryResult(requestMade TestSuiteServiceRunByQueryRequest, tenantId string, numberOfTestSuitesToBeRun int32, numberOfTestCasesToBeRun int32, results []TestSuiteRunResult) *TestSuiteServiceTestRunByQueryResult {
	this := TestSuiteServiceTestRunByQueryResult{}
	this.RequestMade = requestMade
	this.TenantId = tenantId
	this.NumberOfTestSuitesToBeRun = numberOfTestSuitesToBeRun
	this.NumberOfTestCasesToBeRun = numberOfTestCasesToBeRun
	this.Results = results
	return &this
}

// NewTestSuiteServiceTestRunByQueryResultWithDefaults instantiates a new TestSuiteServiceTestRunByQueryResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTestSuiteServiceTestRunByQueryResultWithDefaults() *TestSuiteServiceTestRunByQueryResult {
	this := TestSuiteServiceTestRunByQueryResult{}
	return &this
}

// GetRequestMade returns the RequestMade field value
func (o *TestSuiteServiceTestRunByQueryResult) GetRequestMade() TestSuiteServiceRunByQueryRequest {
	if o == nil {
		var ret TestSuiteServiceRunByQueryRequest
		return ret
	}

	return o.RequestMade
}

// GetRequestMadeOk returns a tuple with the RequestMade field value
// and a boolean to check if the value has been set.
func (o *TestSuiteServiceTestRunByQueryResult) GetRequestMadeOk() (*TestSuiteServiceRunByQueryRequest, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RequestMade, true
}

// SetRequestMade sets field value
func (o *TestSuiteServiceTestRunByQueryResult) SetRequestMade(v TestSuiteServiceRunByQueryRequest) {
	o.RequestMade = v
}

// GetTenantId returns the TenantId field value
func (o *TestSuiteServiceTestRunByQueryResult) GetTenantId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TenantId
}

// GetTenantIdOk returns a tuple with the TenantId field value
// and a boolean to check if the value has been set.
func (o *TestSuiteServiceTestRunByQueryResult) GetTenantIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TenantId, true
}

// SetTenantId sets field value
func (o *TestSuiteServiceTestRunByQueryResult) SetTenantId(v string) {
	o.TenantId = v
}

// GetNumberOfTestSuitesToBeRun returns the NumberOfTestSuitesToBeRun field value
func (o *TestSuiteServiceTestRunByQueryResult) GetNumberOfTestSuitesToBeRun() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NumberOfTestSuitesToBeRun
}

// GetNumberOfTestSuitesToBeRunOk returns a tuple with the NumberOfTestSuitesToBeRun field value
// and a boolean to check if the value has been set.
func (o *TestSuiteServiceTestRunByQueryResult) GetNumberOfTestSuitesToBeRunOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NumberOfTestSuitesToBeRun, true
}

// SetNumberOfTestSuitesToBeRun sets field value
func (o *TestSuiteServiceTestRunByQueryResult) SetNumberOfTestSuitesToBeRun(v int32) {
	o.NumberOfTestSuitesToBeRun = v
}

// GetNumberOfTestCasesToBeRun returns the NumberOfTestCasesToBeRun field value
func (o *TestSuiteServiceTestRunByQueryResult) GetNumberOfTestCasesToBeRun() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NumberOfTestCasesToBeRun
}

// GetNumberOfTestCasesToBeRunOk returns a tuple with the NumberOfTestCasesToBeRun field value
// and a boolean to check if the value has been set.
func (o *TestSuiteServiceTestRunByQueryResult) GetNumberOfTestCasesToBeRunOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NumberOfTestCasesToBeRun, true
}

// SetNumberOfTestCasesToBeRun sets field value
func (o *TestSuiteServiceTestRunByQueryResult) SetNumberOfTestCasesToBeRun(v int32) {
	o.NumberOfTestCasesToBeRun = v
}

// GetResults returns the Results field value
func (o *TestSuiteServiceTestRunByQueryResult) GetResults() []TestSuiteRunResult {
	if o == nil {
		var ret []TestSuiteRunResult
		return ret
	}

	return o.Results
}

// GetResultsOk returns a tuple with the Results field value
// and a boolean to check if the value has been set.
func (o *TestSuiteServiceTestRunByQueryResult) GetResultsOk() ([]TestSuiteRunResult, bool) {
	if o == nil {
		return nil, false
	}
	return o.Results, true
}

// SetResults sets field value
func (o *TestSuiteServiceTestRunByQueryResult) SetResults(v []TestSuiteRunResult) {
	o.Results = v
}

func (o TestSuiteServiceTestRunByQueryResult) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TestSuiteServiceTestRunByQueryResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["requestMade"] = o.RequestMade
	toSerialize["tenantId"] = o.TenantId
	toSerialize["numberOfTestSuitesToBeRun"] = o.NumberOfTestSuitesToBeRun
	toSerialize["numberOfTestCasesToBeRun"] = o.NumberOfTestCasesToBeRun
	toSerialize["results"] = o.Results

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TestSuiteServiceTestRunByQueryResult) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"requestMade",
		"tenantId",
		"numberOfTestSuitesToBeRun",
		"numberOfTestCasesToBeRun",
		"results",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTestSuiteServiceTestRunByQueryResult := _TestSuiteServiceTestRunByQueryResult{}

	err = json.Unmarshal(data, &varTestSuiteServiceTestRunByQueryResult)

	if err != nil {
		return err
	}

	*o = TestSuiteServiceTestRunByQueryResult(varTestSuiteServiceTestRunByQueryResult)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "requestMade")
		delete(additionalProperties, "tenantId")
		delete(additionalProperties, "numberOfTestSuitesToBeRun")
		delete(additionalProperties, "numberOfTestCasesToBeRun")
		delete(additionalProperties, "results")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTestSuiteServiceTestRunByQueryResult struct {
	value *TestSuiteServiceTestRunByQueryResult
	isSet bool
}

func (v NullableTestSuiteServiceTestRunByQueryResult) Get() *TestSuiteServiceTestRunByQueryResult {
	return v.value
}

func (v *NullableTestSuiteServiceTestRunByQueryResult) Set(val *TestSuiteServiceTestRunByQueryResult) {
	v.value = val
	v.isSet = true
}

func (v NullableTestSuiteServiceTestRunByQueryResult) IsSet() bool {
	return v.isSet
}

func (v *NullableTestSuiteServiceTestRunByQueryResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestSuiteServiceTestRunByQueryResult(val *TestSuiteServiceTestRunByQueryResult) *NullableTestSuiteServiceTestRunByQueryResult {
	return &NullableTestSuiteServiceTestRunByQueryResult{value: val, isSet: true}
}

func (v NullableTestSuiteServiceTestRunByQueryResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestSuiteServiceTestRunByQueryResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
