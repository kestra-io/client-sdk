/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
)

// Permission the model 'Permission'
type Permission string

// List of Permission
const (
	PERMISSION_FLOW             Permission = "FLOW"
	PERMISSION_BLUEPRINT        Permission = "BLUEPRINT"
	PERMISSION_TEMPLATE         Permission = "TEMPLATE"
	PERMISSION_NAMESPACE        Permission = "NAMESPACE"
	PERMISSION_EXECUTION        Permission = "EXECUTION"
	PERMISSION_USER             Permission = "USER"
	PERMISSION_GROUP            Permission = "GROUP"
	PERMISSION_ROLE             Permission = "ROLE"
	PERMISSION_BINDING          Permission = "BINDING"
	PERMISSION_AUDITLOG         Permission = "AUDITLOG"
	PERMISSION_SECRET           Permission = "SECRET"
	PERMISSION_KVSTORE          Permission = "KVSTORE"
	PERMISSION_IMPERSONATE      Permission = "IMPERSONATE"
	PERMISSION_SETTING          Permission = "SETTING"
	PERMISSION_INFRASTRUCTURE   Permission = "INFRASTRUCTURE"
	PERMISSION_APP              Permission = "APP"
	PERMISSION_APPEXECUTION     Permission = "APPEXECUTION"
	PERMISSION_TEST             Permission = "TEST"
	PERMISSION_DASHBOARD        Permission = "DASHBOARD"
	PERMISSION_TENANT_ACCESS    Permission = "TENANT_ACCESS"
	PERMISSION_SERVICE_ACCOUNT  Permission = "SERVICE_ACCOUNT"
	PERMISSION_INVITATION       Permission = "INVITATION"
	PERMISSION_GROUP_MEMBERSHIP Permission = "GROUP_MEMBERSHIP"
	PERMISSION_UNKNOWN          Permission = "UNKNOWN"
)

// All allowed values of Permission enum
var AllowedPermissionEnumValues = []Permission{
	"FLOW",
	"BLUEPRINT",
	"TEMPLATE",
	"NAMESPACE",
	"EXECUTION",
	"USER",
	"GROUP",
	"ROLE",
	"BINDING",
	"AUDITLOG",
	"SECRET",
	"KVSTORE",
	"IMPERSONATE",
	"SETTING",
	"INFRASTRUCTURE",
	"APP",
	"APPEXECUTION",
	"TEST",
	"DASHBOARD",
	"TENANT_ACCESS",
	"SERVICE_ACCOUNT",
	"INVITATION",
	"GROUP_MEMBERSHIP",
	"UNKNOWN",
}

func (v *Permission) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Permission(value)
	for _, existing := range AllowedPermissionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Permission", value)
}

// NewPermissionFromValue returns a pointer to a valid Permission
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPermissionFromValue(v string) (*Permission, error) {
	ev := Permission(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Permission: valid values are %v", v, AllowedPermissionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Permission) IsValid() bool {
	for _, existing := range AllowedPermissionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Permission value
func (v Permission) Ptr() *Permission {
	return &v
}

type NullablePermission struct {
	value *Permission
	isSet bool
}

func (v NullablePermission) Get() *Permission {
	return v.value
}

func (v *NullablePermission) Set(val *Permission) {
	v.value = val
	v.isSet = true
}

func (v NullablePermission) IsSet() bool {
	return v.isSet
}

func (v *NullablePermission) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePermission(val *Permission) *NullablePermission {
	return &NullablePermission{value: val, isSet: true}
}

func (v NullablePermission) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePermission) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
