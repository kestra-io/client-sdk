/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
)

// checks if the IAMTenantAccessControllerApiTenantAccess type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IAMTenantAccessControllerApiTenantAccess{}

// IAMTenantAccessControllerApiTenantAccess struct for IAMTenantAccessControllerApiTenantAccess
type IAMTenantAccessControllerApiTenantAccess struct {
	TenantId             *string                                      `json:"tenantId,omitempty"`
	UserId               *string                                      `json:"userId,omitempty"`
	Username             *string                                      `json:"username,omitempty"`
	DisplayName          *string                                      `json:"displayName,omitempty"`
	Groups               []IAMTenantAccessControllerApiGroup          `json:"groups,omitempty"`
	Roles                []IAMTenantAccessControllerApiRoleAssignment `json:"roles,omitempty"`
	SuperAdmin           *bool                                        `json:"superAdmin,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _IAMTenantAccessControllerApiTenantAccess IAMTenantAccessControllerApiTenantAccess

// NewIAMTenantAccessControllerApiTenantAccess instantiates a new IAMTenantAccessControllerApiTenantAccess object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIAMTenantAccessControllerApiTenantAccess() *IAMTenantAccessControllerApiTenantAccess {
	this := IAMTenantAccessControllerApiTenantAccess{}
	return &this
}

// NewIAMTenantAccessControllerApiTenantAccessWithDefaults instantiates a new IAMTenantAccessControllerApiTenantAccess object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIAMTenantAccessControllerApiTenantAccessWithDefaults() *IAMTenantAccessControllerApiTenantAccess {
	this := IAMTenantAccessControllerApiTenantAccess{}
	return &this
}

// GetTenantId returns the TenantId field value if set, zero value otherwise.
func (o *IAMTenantAccessControllerApiTenantAccess) GetTenantId() string {
	if o == nil || IsNil(o.TenantId) {
		var ret string
		return ret
	}
	return *o.TenantId
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IAMTenantAccessControllerApiTenantAccess) GetTenantIdOk() (*string, bool) {
	if o == nil || IsNil(o.TenantId) {
		return nil, false
	}
	return o.TenantId, true
}

// HasTenantId returns a boolean if a field has been set.
func (o *IAMTenantAccessControllerApiTenantAccess) HasTenantId() bool {
	if o != nil && !IsNil(o.TenantId) {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given string and assigns it to the TenantId field.
func (o *IAMTenantAccessControllerApiTenantAccess) SetTenantId(v string) {
	o.TenantId = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *IAMTenantAccessControllerApiTenantAccess) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IAMTenantAccessControllerApiTenantAccess) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *IAMTenantAccessControllerApiTenantAccess) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *IAMTenantAccessControllerApiTenantAccess) SetUserId(v string) {
	o.UserId = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *IAMTenantAccessControllerApiTenantAccess) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IAMTenantAccessControllerApiTenantAccess) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *IAMTenantAccessControllerApiTenantAccess) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *IAMTenantAccessControllerApiTenantAccess) SetUsername(v string) {
	o.Username = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *IAMTenantAccessControllerApiTenantAccess) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IAMTenantAccessControllerApiTenantAccess) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *IAMTenantAccessControllerApiTenantAccess) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *IAMTenantAccessControllerApiTenantAccess) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetGroups returns the Groups field value if set, zero value otherwise.
func (o *IAMTenantAccessControllerApiTenantAccess) GetGroups() []IAMTenantAccessControllerApiGroup {
	if o == nil || IsNil(o.Groups) {
		var ret []IAMTenantAccessControllerApiGroup
		return ret
	}
	return o.Groups
}

// GetGroupsOk returns a tuple with the Groups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IAMTenantAccessControllerApiTenantAccess) GetGroupsOk() ([]IAMTenantAccessControllerApiGroup, bool) {
	if o == nil || IsNil(o.Groups) {
		return nil, false
	}
	return o.Groups, true
}

// HasGroups returns a boolean if a field has been set.
func (o *IAMTenantAccessControllerApiTenantAccess) HasGroups() bool {
	if o != nil && !IsNil(o.Groups) {
		return true
	}

	return false
}

// SetGroups gets a reference to the given []IAMTenantAccessControllerApiGroup and assigns it to the Groups field.
func (o *IAMTenantAccessControllerApiTenantAccess) SetGroups(v []IAMTenantAccessControllerApiGroup) {
	o.Groups = v
}

// GetRoles returns the Roles field value if set, zero value otherwise.
func (o *IAMTenantAccessControllerApiTenantAccess) GetRoles() []IAMTenantAccessControllerApiRoleAssignment {
	if o == nil || IsNil(o.Roles) {
		var ret []IAMTenantAccessControllerApiRoleAssignment
		return ret
	}
	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IAMTenantAccessControllerApiTenantAccess) GetRolesOk() ([]IAMTenantAccessControllerApiRoleAssignment, bool) {
	if o == nil || IsNil(o.Roles) {
		return nil, false
	}
	return o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *IAMTenantAccessControllerApiTenantAccess) HasRoles() bool {
	if o != nil && !IsNil(o.Roles) {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []IAMTenantAccessControllerApiRoleAssignment and assigns it to the Roles field.
func (o *IAMTenantAccessControllerApiTenantAccess) SetRoles(v []IAMTenantAccessControllerApiRoleAssignment) {
	o.Roles = v
}

// GetSuperAdmin returns the SuperAdmin field value if set, zero value otherwise.
func (o *IAMTenantAccessControllerApiTenantAccess) GetSuperAdmin() bool {
	if o == nil || IsNil(o.SuperAdmin) {
		var ret bool
		return ret
	}
	return *o.SuperAdmin
}

// GetSuperAdminOk returns a tuple with the SuperAdmin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IAMTenantAccessControllerApiTenantAccess) GetSuperAdminOk() (*bool, bool) {
	if o == nil || IsNil(o.SuperAdmin) {
		return nil, false
	}
	return o.SuperAdmin, true
}

// HasSuperAdmin returns a boolean if a field has been set.
func (o *IAMTenantAccessControllerApiTenantAccess) HasSuperAdmin() bool {
	if o != nil && !IsNil(o.SuperAdmin) {
		return true
	}

	return false
}

// SetSuperAdmin gets a reference to the given bool and assigns it to the SuperAdmin field.
func (o *IAMTenantAccessControllerApiTenantAccess) SetSuperAdmin(v bool) {
	o.SuperAdmin = &v
}

func (o IAMTenantAccessControllerApiTenantAccess) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IAMTenantAccessControllerApiTenantAccess) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TenantId) {
		toSerialize["tenantId"] = o.TenantId
	}
	if !IsNil(o.UserId) {
		toSerialize["userId"] = o.UserId
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.Groups) {
		toSerialize["groups"] = o.Groups
	}
	if !IsNil(o.Roles) {
		toSerialize["roles"] = o.Roles
	}
	if !IsNil(o.SuperAdmin) {
		toSerialize["superAdmin"] = o.SuperAdmin
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *IAMTenantAccessControllerApiTenantAccess) UnmarshalJSON(data []byte) (err error) {
	varIAMTenantAccessControllerApiTenantAccess := _IAMTenantAccessControllerApiTenantAccess{}

	err = json.Unmarshal(data, &varIAMTenantAccessControllerApiTenantAccess)

	if err != nil {
		return err
	}

	*o = IAMTenantAccessControllerApiTenantAccess(varIAMTenantAccessControllerApiTenantAccess)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "tenantId")
		delete(additionalProperties, "userId")
		delete(additionalProperties, "username")
		delete(additionalProperties, "displayName")
		delete(additionalProperties, "groups")
		delete(additionalProperties, "roles")
		delete(additionalProperties, "superAdmin")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIAMTenantAccessControllerApiTenantAccess struct {
	value *IAMTenantAccessControllerApiTenantAccess
	isSet bool
}

func (v NullableIAMTenantAccessControllerApiTenantAccess) Get() *IAMTenantAccessControllerApiTenantAccess {
	return v.value
}

func (v *NullableIAMTenantAccessControllerApiTenantAccess) Set(val *IAMTenantAccessControllerApiTenantAccess) {
	v.value = val
	v.isSet = true
}

func (v NullableIAMTenantAccessControllerApiTenantAccess) IsSet() bool {
	return v.isSet
}

func (v *NullableIAMTenantAccessControllerApiTenantAccess) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIAMTenantAccessControllerApiTenantAccess(val *IAMTenantAccessControllerApiTenantAccess) *NullableIAMTenantAccessControllerApiTenantAccess {
	return &NullableIAMTenantAccessControllerApiTenantAccess{value: val, isSet: true}
}

func (v NullableIAMTenantAccessControllerApiTenantAccess) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIAMTenantAccessControllerApiTenantAccess) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
