/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
)

// checks if the IAMTenantAccessControllerApiTenantAccess type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IAMTenantAccessControllerApiTenantAccess{}

// IAMTenantAccessControllerApiTenantAccess struct for IAMTenantAccessControllerApiTenantAccess
type IAMTenantAccessControllerApiTenantAccess struct {
	TenantId             string                                       `json:"tenantId"`
	UserId               string                                       `json:"userId"`
	Username             string                                       `json:"username"`
	DisplayName          string                                       `json:"displayName"`
	Groups               []IAMTenantAccessControllerApiGroup          `json:"groups"`
	Roles                []IAMTenantAccessControllerApiRoleAssignment `json:"roles"`
	SuperAdmin           bool                                         `json:"superAdmin"`
	AdditionalProperties map[string]interface{}
}

type _IAMTenantAccessControllerApiTenantAccess IAMTenantAccessControllerApiTenantAccess

// NewIAMTenantAccessControllerApiTenantAccess instantiates a new IAMTenantAccessControllerApiTenantAccess object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIAMTenantAccessControllerApiTenantAccess(tenantId string, userId string, username string, displayName string, groups []IAMTenantAccessControllerApiGroup, roles []IAMTenantAccessControllerApiRoleAssignment, superAdmin bool) *IAMTenantAccessControllerApiTenantAccess {
	this := IAMTenantAccessControllerApiTenantAccess{}
	this.TenantId = tenantId
	this.UserId = userId
	this.Username = username
	this.DisplayName = displayName
	this.Groups = groups
	this.Roles = roles
	this.SuperAdmin = superAdmin
	return &this
}

// NewIAMTenantAccessControllerApiTenantAccessWithDefaults instantiates a new IAMTenantAccessControllerApiTenantAccess object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIAMTenantAccessControllerApiTenantAccessWithDefaults() *IAMTenantAccessControllerApiTenantAccess {
	this := IAMTenantAccessControllerApiTenantAccess{}
	return &this
}

// GetTenantId returns the TenantId field value
func (o *IAMTenantAccessControllerApiTenantAccess) GetTenantId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TenantId
}

// GetTenantIdOk returns a tuple with the TenantId field value
// and a boolean to check if the value has been set.
func (o *IAMTenantAccessControllerApiTenantAccess) GetTenantIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TenantId, true
}

// SetTenantId sets field value
func (o *IAMTenantAccessControllerApiTenantAccess) SetTenantId(v string) {
	o.TenantId = v
}

// GetUserId returns the UserId field value
func (o *IAMTenantAccessControllerApiTenantAccess) GetUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *IAMTenantAccessControllerApiTenantAccess) GetUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *IAMTenantAccessControllerApiTenantAccess) SetUserId(v string) {
	o.UserId = v
}

// GetUsername returns the Username field value
func (o *IAMTenantAccessControllerApiTenantAccess) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *IAMTenantAccessControllerApiTenantAccess) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *IAMTenantAccessControllerApiTenantAccess) SetUsername(v string) {
	o.Username = v
}

// GetDisplayName returns the DisplayName field value
func (o *IAMTenantAccessControllerApiTenantAccess) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *IAMTenantAccessControllerApiTenantAccess) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
func (o *IAMTenantAccessControllerApiTenantAccess) SetDisplayName(v string) {
	o.DisplayName = v
}

// GetGroups returns the Groups field value
func (o *IAMTenantAccessControllerApiTenantAccess) GetGroups() []IAMTenantAccessControllerApiGroup {
	if o == nil {
		var ret []IAMTenantAccessControllerApiGroup
		return ret
	}

	return o.Groups
}

// GetGroupsOk returns a tuple with the Groups field value
// and a boolean to check if the value has been set.
func (o *IAMTenantAccessControllerApiTenantAccess) GetGroupsOk() ([]IAMTenantAccessControllerApiGroup, bool) {
	if o == nil {
		return nil, false
	}
	return o.Groups, true
}

// SetGroups sets field value
func (o *IAMTenantAccessControllerApiTenantAccess) SetGroups(v []IAMTenantAccessControllerApiGroup) {
	o.Groups = v
}

// GetRoles returns the Roles field value
func (o *IAMTenantAccessControllerApiTenantAccess) GetRoles() []IAMTenantAccessControllerApiRoleAssignment {
	if o == nil {
		var ret []IAMTenantAccessControllerApiRoleAssignment
		return ret
	}

	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value
// and a boolean to check if the value has been set.
func (o *IAMTenantAccessControllerApiTenantAccess) GetRolesOk() ([]IAMTenantAccessControllerApiRoleAssignment, bool) {
	if o == nil {
		return nil, false
	}
	return o.Roles, true
}

// SetRoles sets field value
func (o *IAMTenantAccessControllerApiTenantAccess) SetRoles(v []IAMTenantAccessControllerApiRoleAssignment) {
	o.Roles = v
}

// GetSuperAdmin returns the SuperAdmin field value
func (o *IAMTenantAccessControllerApiTenantAccess) GetSuperAdmin() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.SuperAdmin
}

// GetSuperAdminOk returns a tuple with the SuperAdmin field value
// and a boolean to check if the value has been set.
func (o *IAMTenantAccessControllerApiTenantAccess) GetSuperAdminOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SuperAdmin, true
}

// SetSuperAdmin sets field value
func (o *IAMTenantAccessControllerApiTenantAccess) SetSuperAdmin(v bool) {
	o.SuperAdmin = v
}

func (o IAMTenantAccessControllerApiTenantAccess) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IAMTenantAccessControllerApiTenantAccess) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["tenantId"] = o.TenantId
	toSerialize["userId"] = o.UserId
	toSerialize["username"] = o.Username
	toSerialize["displayName"] = o.DisplayName
	toSerialize["groups"] = o.Groups
	toSerialize["roles"] = o.Roles
	toSerialize["superAdmin"] = o.SuperAdmin

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *IAMTenantAccessControllerApiTenantAccess) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"tenantId",
		"userId",
		"username",
		"displayName",
		"groups",
		"roles",
		"superAdmin",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIAMTenantAccessControllerApiTenantAccess := _IAMTenantAccessControllerApiTenantAccess{}

	err = json.Unmarshal(data, &varIAMTenantAccessControllerApiTenantAccess)

	if err != nil {
		return err
	}

	*o = IAMTenantAccessControllerApiTenantAccess(varIAMTenantAccessControllerApiTenantAccess)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "tenantId")
		delete(additionalProperties, "userId")
		delete(additionalProperties, "username")
		delete(additionalProperties, "displayName")
		delete(additionalProperties, "groups")
		delete(additionalProperties, "roles")
		delete(additionalProperties, "superAdmin")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIAMTenantAccessControllerApiTenantAccess struct {
	value *IAMTenantAccessControllerApiTenantAccess
	isSet bool
}

func (v NullableIAMTenantAccessControllerApiTenantAccess) Get() *IAMTenantAccessControllerApiTenantAccess {
	return v.value
}

func (v *NullableIAMTenantAccessControllerApiTenantAccess) Set(val *IAMTenantAccessControllerApiTenantAccess) {
	v.value = val
	v.isSet = true
}

func (v NullableIAMTenantAccessControllerApiTenantAccess) IsSet() bool {
	return v.isSet
}

func (v *NullableIAMTenantAccessControllerApiTenantAccess) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIAMTenantAccessControllerApiTenantAccess(val *IAMTenantAccessControllerApiTenantAccess) *NullableIAMTenantAccessControllerApiTenantAccess {
	return &NullableIAMTenantAccessControllerApiTenantAccess{value: val, isSet: true}
}

func (v NullableIAMTenantAccessControllerApiTenantAccess) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIAMTenantAccessControllerApiTenantAccess) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
