/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
)

// checks if the Binding type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Binding{}

// Binding struct for Binding
type Binding struct {
	Id                   *string     `json:"id,omitempty"`
	Type                 BindingType `json:"type"`
	ExternalId           string      `json:"externalId"`
	RoleId               string      `json:"roleId"`
	NamespaceId          *string     `json:"namespaceId,omitempty"`
	Deleted              bool        `json:"deleted"`
	AdditionalProperties map[string]interface{}
}

type _Binding Binding

// NewBinding instantiates a new Binding object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBinding(type_ BindingType, externalId string, roleId string, deleted bool) *Binding {
	this := Binding{}
	this.Type = type_
	this.ExternalId = externalId
	this.RoleId = roleId
	this.Deleted = deleted
	return &this
}

// NewBindingWithDefaults instantiates a new Binding object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBindingWithDefaults() *Binding {
	this := Binding{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Binding) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Binding) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Binding) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Binding) SetId(v string) {
	o.Id = &v
}

// GetType returns the Type field value
func (o *Binding) GetType() BindingType {
	if o == nil {
		var ret BindingType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Binding) GetTypeOk() (*BindingType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Binding) SetType(v BindingType) {
	o.Type = v
}

// GetExternalId returns the ExternalId field value
func (o *Binding) GetExternalId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExternalId
}

// GetExternalIdOk returns a tuple with the ExternalId field value
// and a boolean to check if the value has been set.
func (o *Binding) GetExternalIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExternalId, true
}

// SetExternalId sets field value
func (o *Binding) SetExternalId(v string) {
	o.ExternalId = v
}

// GetRoleId returns the RoleId field value
func (o *Binding) GetRoleId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RoleId
}

// GetRoleIdOk returns a tuple with the RoleId field value
// and a boolean to check if the value has been set.
func (o *Binding) GetRoleIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RoleId, true
}

// SetRoleId sets field value
func (o *Binding) SetRoleId(v string) {
	o.RoleId = v
}

// GetNamespaceId returns the NamespaceId field value if set, zero value otherwise.
func (o *Binding) GetNamespaceId() string {
	if o == nil || IsNil(o.NamespaceId) {
		var ret string
		return ret
	}
	return *o.NamespaceId
}

// GetNamespaceIdOk returns a tuple with the NamespaceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Binding) GetNamespaceIdOk() (*string, bool) {
	if o == nil || IsNil(o.NamespaceId) {
		return nil, false
	}
	return o.NamespaceId, true
}

// HasNamespaceId returns a boolean if a field has been set.
func (o *Binding) HasNamespaceId() bool {
	if o != nil && !IsNil(o.NamespaceId) {
		return true
	}

	return false
}

// SetNamespaceId gets a reference to the given string and assigns it to the NamespaceId field.
func (o *Binding) SetNamespaceId(v string) {
	o.NamespaceId = &v
}

// GetDeleted returns the Deleted field value
func (o *Binding) GetDeleted() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Deleted
}

// GetDeletedOk returns a tuple with the Deleted field value
// and a boolean to check if the value has been set.
func (o *Binding) GetDeletedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Deleted, true
}

// SetDeleted sets field value
func (o *Binding) SetDeleted(v bool) {
	o.Deleted = v
}

func (o Binding) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Binding) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["type"] = o.Type
	toSerialize["externalId"] = o.ExternalId
	toSerialize["roleId"] = o.RoleId
	if !IsNil(o.NamespaceId) {
		toSerialize["namespaceId"] = o.NamespaceId
	}
	toSerialize["deleted"] = o.Deleted

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Binding) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"externalId",
		"roleId",
		"deleted",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBinding := _Binding{}

	err = json.Unmarshal(data, &varBinding)

	if err != nil {
		return err
	}

	*o = Binding(varBinding)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "type")
		delete(additionalProperties, "externalId")
		delete(additionalProperties, "roleId")
		delete(additionalProperties, "namespaceId")
		delete(additionalProperties, "deleted")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBinding struct {
	value *Binding
	isSet bool
}

func (v NullableBinding) Get() *Binding {
	return v.value
}

func (v *NullableBinding) Set(val *Binding) {
	v.value = val
	v.isSet = true
}

func (v NullableBinding) IsSet() bool {
	return v.isSet
}

func (v *NullableBinding) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBinding(val *Binding) *NullableBinding {
	return &NullableBinding{value: val, isSet: true}
}

func (v NullableBinding) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBinding) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
