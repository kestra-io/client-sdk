/*
Kestra EE

All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
)

// checks if the AuditLogControllerFindRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuditLogControllerFindRequest{}

// AuditLogControllerFindRequest struct for AuditLogControllerFindRequest
type AuditLogControllerFindRequest struct {
	Permission *Permission                       `json:"permission,omitempty"`
	Type       NullableCrudEventType             `json:"type,omitempty"`
	Detail     map[string]map[string]interface{} `json:"detail,omitempty"`
}

// NewAuditLogControllerFindRequest instantiates a new AuditLogControllerFindRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuditLogControllerFindRequest() *AuditLogControllerFindRequest {
	this := AuditLogControllerFindRequest{}
	return &this
}

// NewAuditLogControllerFindRequestWithDefaults instantiates a new AuditLogControllerFindRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuditLogControllerFindRequestWithDefaults() *AuditLogControllerFindRequest {
	this := AuditLogControllerFindRequest{}
	return &this
}

// GetPermission returns the Permission field value if set, zero value otherwise.
func (o *AuditLogControllerFindRequest) GetPermission() Permission {
	if o == nil || IsNil(o.Permission) {
		var ret Permission
		return ret
	}
	return *o.Permission
}

// GetPermissionOk returns a tuple with the Permission field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLogControllerFindRequest) GetPermissionOk() (*Permission, bool) {
	if o == nil || IsNil(o.Permission) {
		return nil, false
	}
	return o.Permission, true
}

// HasPermission returns a boolean if a field has been set.
func (o *AuditLogControllerFindRequest) HasPermission() bool {
	if o != nil && !IsNil(o.Permission) {
		return true
	}

	return false
}

// SetPermission gets a reference to the given Permission and assigns it to the Permission field.
func (o *AuditLogControllerFindRequest) SetPermission(v Permission) {
	o.Permission = &v
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AuditLogControllerFindRequest) GetType() CrudEventType {
	if o == nil || IsNil(o.Type.Get()) {
		var ret CrudEventType
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AuditLogControllerFindRequest) GetTypeOk() (*CrudEventType, bool) {
	if o == nil {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *AuditLogControllerFindRequest) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableCrudEventType and assigns it to the Type field.
func (o *AuditLogControllerFindRequest) SetType(v CrudEventType) {
	o.Type.Set(&v)
}

// SetTypeNil sets the value for Type to be an explicit nil
func (o *AuditLogControllerFindRequest) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *AuditLogControllerFindRequest) UnsetType() {
	o.Type.Unset()
}

// GetDetail returns the Detail field value if set, zero value otherwise.
func (o *AuditLogControllerFindRequest) GetDetail() map[string]map[string]interface{} {
	if o == nil || IsNil(o.Detail) {
		var ret map[string]map[string]interface{}
		return ret
	}
	return o.Detail
}

// GetDetailOk returns a tuple with the Detail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLogControllerFindRequest) GetDetailOk() (map[string]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Detail) {
		return map[string]map[string]interface{}{}, false
	}
	return o.Detail, true
}

// HasDetail returns a boolean if a field has been set.
func (o *AuditLogControllerFindRequest) HasDetail() bool {
	if o != nil && !IsNil(o.Detail) {
		return true
	}

	return false
}

// SetDetail gets a reference to the given map[string]map[string]interface{} and assigns it to the Detail field.
func (o *AuditLogControllerFindRequest) SetDetail(v map[string]map[string]interface{}) {
	o.Detail = v
}

func (o AuditLogControllerFindRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuditLogControllerFindRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Permission) {
		toSerialize["permission"] = o.Permission
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	if !IsNil(o.Detail) {
		toSerialize["detail"] = o.Detail
	}
	return toSerialize, nil
}

type NullableAuditLogControllerFindRequest struct {
	value *AuditLogControllerFindRequest
	isSet bool
}

func (v NullableAuditLogControllerFindRequest) Get() *AuditLogControllerFindRequest {
	return v.value
}

func (v *NullableAuditLogControllerFindRequest) Set(val *AuditLogControllerFindRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAuditLogControllerFindRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAuditLogControllerFindRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuditLogControllerFindRequest(val *AuditLogControllerFindRequest) *NullableAuditLogControllerFindRequest {
	return &NullableAuditLogControllerFindRequest{value: val, isSet: true}
}

func (v NullableAuditLogControllerFindRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuditLogControllerFindRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
