/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
)

// checks if the InstanceControllerApiPluginVersionDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InstanceControllerApiPluginVersionDetails{}

// InstanceControllerApiPluginVersionDetails struct for InstanceControllerApiPluginVersionDetails
type InstanceControllerApiPluginVersionDetails struct {
	ArtifactId           *string                                                     `json:"artifactId,omitempty"`
	GroupId              *string                                                     `json:"groupId,omitempty"`
	Version              *string                                                     `json:"version,omitempty"`
	Title                *string                                                     `json:"title,omitempty"`
	Description          *string                                                     `json:"description,omitempty"`
	Icon                 *string                                                     `json:"icon,omitempty"`
	Classes              []InstanceControllerApiPluginVersionDetailsApiPluginClasses `json:"classes,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _InstanceControllerApiPluginVersionDetails InstanceControllerApiPluginVersionDetails

// NewInstanceControllerApiPluginVersionDetails instantiates a new InstanceControllerApiPluginVersionDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstanceControllerApiPluginVersionDetails() *InstanceControllerApiPluginVersionDetails {
	this := InstanceControllerApiPluginVersionDetails{}
	return &this
}

// NewInstanceControllerApiPluginVersionDetailsWithDefaults instantiates a new InstanceControllerApiPluginVersionDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceControllerApiPluginVersionDetailsWithDefaults() *InstanceControllerApiPluginVersionDetails {
	this := InstanceControllerApiPluginVersionDetails{}
	return &this
}

// GetArtifactId returns the ArtifactId field value if set, zero value otherwise.
func (o *InstanceControllerApiPluginVersionDetails) GetArtifactId() string {
	if o == nil || IsNil(o.ArtifactId) {
		var ret string
		return ret
	}
	return *o.ArtifactId
}

// GetArtifactIdOk returns a tuple with the ArtifactId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceControllerApiPluginVersionDetails) GetArtifactIdOk() (*string, bool) {
	if o == nil || IsNil(o.ArtifactId) {
		return nil, false
	}
	return o.ArtifactId, true
}

// HasArtifactId returns a boolean if a field has been set.
func (o *InstanceControllerApiPluginVersionDetails) HasArtifactId() bool {
	if o != nil && !IsNil(o.ArtifactId) {
		return true
	}

	return false
}

// SetArtifactId gets a reference to the given string and assigns it to the ArtifactId field.
func (o *InstanceControllerApiPluginVersionDetails) SetArtifactId(v string) {
	o.ArtifactId = &v
}

// GetGroupId returns the GroupId field value if set, zero value otherwise.
func (o *InstanceControllerApiPluginVersionDetails) GetGroupId() string {
	if o == nil || IsNil(o.GroupId) {
		var ret string
		return ret
	}
	return *o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceControllerApiPluginVersionDetails) GetGroupIdOk() (*string, bool) {
	if o == nil || IsNil(o.GroupId) {
		return nil, false
	}
	return o.GroupId, true
}

// HasGroupId returns a boolean if a field has been set.
func (o *InstanceControllerApiPluginVersionDetails) HasGroupId() bool {
	if o != nil && !IsNil(o.GroupId) {
		return true
	}

	return false
}

// SetGroupId gets a reference to the given string and assigns it to the GroupId field.
func (o *InstanceControllerApiPluginVersionDetails) SetGroupId(v string) {
	o.GroupId = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *InstanceControllerApiPluginVersionDetails) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceControllerApiPluginVersionDetails) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *InstanceControllerApiPluginVersionDetails) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *InstanceControllerApiPluginVersionDetails) SetVersion(v string) {
	o.Version = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *InstanceControllerApiPluginVersionDetails) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceControllerApiPluginVersionDetails) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *InstanceControllerApiPluginVersionDetails) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *InstanceControllerApiPluginVersionDetails) SetTitle(v string) {
	o.Title = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *InstanceControllerApiPluginVersionDetails) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceControllerApiPluginVersionDetails) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *InstanceControllerApiPluginVersionDetails) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *InstanceControllerApiPluginVersionDetails) SetDescription(v string) {
	o.Description = &v
}

// GetIcon returns the Icon field value if set, zero value otherwise.
func (o *InstanceControllerApiPluginVersionDetails) GetIcon() string {
	if o == nil || IsNil(o.Icon) {
		var ret string
		return ret
	}
	return *o.Icon
}

// GetIconOk returns a tuple with the Icon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceControllerApiPluginVersionDetails) GetIconOk() (*string, bool) {
	if o == nil || IsNil(o.Icon) {
		return nil, false
	}
	return o.Icon, true
}

// HasIcon returns a boolean if a field has been set.
func (o *InstanceControllerApiPluginVersionDetails) HasIcon() bool {
	if o != nil && !IsNil(o.Icon) {
		return true
	}

	return false
}

// SetIcon gets a reference to the given string and assigns it to the Icon field.
func (o *InstanceControllerApiPluginVersionDetails) SetIcon(v string) {
	o.Icon = &v
}

// GetClasses returns the Classes field value if set, zero value otherwise.
func (o *InstanceControllerApiPluginVersionDetails) GetClasses() []InstanceControllerApiPluginVersionDetailsApiPluginClasses {
	if o == nil || IsNil(o.Classes) {
		var ret []InstanceControllerApiPluginVersionDetailsApiPluginClasses
		return ret
	}
	return o.Classes
}

// GetClassesOk returns a tuple with the Classes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceControllerApiPluginVersionDetails) GetClassesOk() ([]InstanceControllerApiPluginVersionDetailsApiPluginClasses, bool) {
	if o == nil || IsNil(o.Classes) {
		return nil, false
	}
	return o.Classes, true
}

// HasClasses returns a boolean if a field has been set.
func (o *InstanceControllerApiPluginVersionDetails) HasClasses() bool {
	if o != nil && !IsNil(o.Classes) {
		return true
	}

	return false
}

// SetClasses gets a reference to the given []InstanceControllerApiPluginVersionDetailsApiPluginClasses and assigns it to the Classes field.
func (o *InstanceControllerApiPluginVersionDetails) SetClasses(v []InstanceControllerApiPluginVersionDetailsApiPluginClasses) {
	o.Classes = v
}

func (o InstanceControllerApiPluginVersionDetails) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InstanceControllerApiPluginVersionDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ArtifactId) {
		toSerialize["artifactId"] = o.ArtifactId
	}
	if !IsNil(o.GroupId) {
		toSerialize["groupId"] = o.GroupId
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Icon) {
		toSerialize["icon"] = o.Icon
	}
	if !IsNil(o.Classes) {
		toSerialize["classes"] = o.Classes
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *InstanceControllerApiPluginVersionDetails) UnmarshalJSON(data []byte) (err error) {
	varInstanceControllerApiPluginVersionDetails := _InstanceControllerApiPluginVersionDetails{}

	err = json.Unmarshal(data, &varInstanceControllerApiPluginVersionDetails)

	if err != nil {
		return err
	}

	*o = InstanceControllerApiPluginVersionDetails(varInstanceControllerApiPluginVersionDetails)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "artifactId")
		delete(additionalProperties, "groupId")
		delete(additionalProperties, "version")
		delete(additionalProperties, "title")
		delete(additionalProperties, "description")
		delete(additionalProperties, "icon")
		delete(additionalProperties, "classes")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInstanceControllerApiPluginVersionDetails struct {
	value *InstanceControllerApiPluginVersionDetails
	isSet bool
}

func (v NullableInstanceControllerApiPluginVersionDetails) Get() *InstanceControllerApiPluginVersionDetails {
	return v.value
}

func (v *NullableInstanceControllerApiPluginVersionDetails) Set(val *InstanceControllerApiPluginVersionDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceControllerApiPluginVersionDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceControllerApiPluginVersionDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceControllerApiPluginVersionDetails(val *InstanceControllerApiPluginVersionDetails) *NullableInstanceControllerApiPluginVersionDetails {
	return &NullableInstanceControllerApiPluginVersionDetails{value: val, isSet: true}
}

func (v NullableInstanceControllerApiPluginVersionDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceControllerApiPluginVersionDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
