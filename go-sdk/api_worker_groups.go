/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// WorkerGroupsAPIService WorkerGroupsAPI service
type WorkerGroupsAPIService service

type ApiCreateWorkerGroupRequest struct {
	ctx                                                  context.Context
	ApiService                                           *WorkerGroupsAPIService
	clusterControllerApiCreateOrUpdateWorkerGroupRequest *ClusterControllerApiCreateOrUpdateWorkerGroupRequest
}

// The worker group definition
func (r ApiCreateWorkerGroupRequest) ClusterControllerApiCreateOrUpdateWorkerGroupRequest(clusterControllerApiCreateOrUpdateWorkerGroupRequest ClusterControllerApiCreateOrUpdateWorkerGroupRequest) ApiCreateWorkerGroupRequest {
	r.clusterControllerApiCreateOrUpdateWorkerGroupRequest = &clusterControllerApiCreateOrUpdateWorkerGroupRequest
	return r
}

func (r ApiCreateWorkerGroupRequest) Execute() (*ClusterControllerApiWorkerGroup, *http.Response, error) {
	return r.ApiService.CreateWorkerGroupExecute(r)
}

/*
CreateWorkerGroup Create a worker group

Requires a role with the INFRASTRUCTURE permission (Superadmin-only).

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateWorkerGroupRequest
*/
func (a *WorkerGroupsAPIService) CreateWorkerGroup(ctx context.Context) ApiCreateWorkerGroupRequest {
	return ApiCreateWorkerGroupRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ClusterControllerApiWorkerGroup
func (a *WorkerGroupsAPIService) CreateWorkerGroupExecute(r ApiCreateWorkerGroupRequest) (*ClusterControllerApiWorkerGroup, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ClusterControllerApiWorkerGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkerGroupsAPIService.CreateWorkerGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/cluster/workergroups"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clusterControllerApiCreateOrUpdateWorkerGroupRequest == nil {
		return localVarReturnValue, nil, reportError("clusterControllerApiCreateOrUpdateWorkerGroupRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.clusterControllerApiCreateOrUpdateWorkerGroupRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteWorkerGroupByIdRequest struct {
	ctx        context.Context
	ApiService *WorkerGroupsAPIService
	id         string
}

func (r ApiDeleteWorkerGroupByIdRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.DeleteWorkerGroupByIdExecute(r)
}

/*
DeleteWorkerGroupById Delete a worker group

Requires a role with the INFRASTRUCTURE permission (Superadmin-only).

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@return ApiDeleteWorkerGroupByIdRequest
*/
func (a *WorkerGroupsAPIService) DeleteWorkerGroupById(ctx context.Context, id string) ApiDeleteWorkerGroupByIdRequest {
	return ApiDeleteWorkerGroupByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return map[string]interface{}
func (a *WorkerGroupsAPIService) DeleteWorkerGroupByIdExecute(r ApiDeleteWorkerGroupByIdRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodDelete
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkerGroupsAPIService.DeleteWorkerGroupById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/cluster/workergroups/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetWorkerGroupByIdRequest struct {
	ctx        context.Context
	ApiService *WorkerGroupsAPIService
	id         string
}

func (r ApiGetWorkerGroupByIdRequest) Execute() (*ClusterControllerApiWorkerGroupDetails, *http.Response, error) {
	return r.ApiService.GetWorkerGroupByIdExecute(r)
}

/*
GetWorkerGroupById Retrieve details of a specific worker group

Requires a role with the INFRASTRUCTURE permission (Superadmin-only).

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@return ApiGetWorkerGroupByIdRequest
*/
func (a *WorkerGroupsAPIService) GetWorkerGroupById(ctx context.Context, id string) ApiGetWorkerGroupByIdRequest {
	return ApiGetWorkerGroupByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ClusterControllerApiWorkerGroupDetails
func (a *WorkerGroupsAPIService) GetWorkerGroupByIdExecute(r ApiGetWorkerGroupByIdRequest) (*ClusterControllerApiWorkerGroupDetails, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ClusterControllerApiWorkerGroupDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkerGroupsAPIService.GetWorkerGroupById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/cluster/workergroups/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListWorkerGroupsRequest struct {
	ctx        context.Context
	ApiService *WorkerGroupsAPIService
}

func (r ApiListWorkerGroupsRequest) Execute() (*ClusterControllerApiWorkerGroupList, *http.Response, error) {
	return r.ApiService.ListWorkerGroupsExecute(r)
}

/*
ListWorkerGroups List all worker groups

Requires a role with the INFRASTRUCTURE permission (Superadmin-only).

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiListWorkerGroupsRequest
*/
func (a *WorkerGroupsAPIService) ListWorkerGroups(ctx context.Context) ApiListWorkerGroupsRequest {
	return ApiListWorkerGroupsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ClusterControllerApiWorkerGroupList
func (a *WorkerGroupsAPIService) ListWorkerGroupsExecute(r ApiListWorkerGroupsRequest) (*ClusterControllerApiWorkerGroupList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ClusterControllerApiWorkerGroupList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkerGroupsAPIService.ListWorkerGroups")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/cluster/workergroups"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateWorkerGroupByIdRequest struct {
	ctx                                                  context.Context
	ApiService                                           *WorkerGroupsAPIService
	id                                                   string
	clusterControllerApiCreateOrUpdateWorkerGroupRequest *ClusterControllerApiCreateOrUpdateWorkerGroupRequest
}

// The worker group definition
func (r ApiUpdateWorkerGroupByIdRequest) ClusterControllerApiCreateOrUpdateWorkerGroupRequest(clusterControllerApiCreateOrUpdateWorkerGroupRequest ClusterControllerApiCreateOrUpdateWorkerGroupRequest) ApiUpdateWorkerGroupByIdRequest {
	r.clusterControllerApiCreateOrUpdateWorkerGroupRequest = &clusterControllerApiCreateOrUpdateWorkerGroupRequest
	return r
}

func (r ApiUpdateWorkerGroupByIdRequest) Execute() (*ClusterControllerApiWorkerGroup, *http.Response, error) {
	return r.ApiService.UpdateWorkerGroupByIdExecute(r)
}

/*
UpdateWorkerGroupById Update a worker group

Requires a role with the INFRASTRUCTURE permission (Superadmin-only).

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@return ApiUpdateWorkerGroupByIdRequest
*/
func (a *WorkerGroupsAPIService) UpdateWorkerGroupById(ctx context.Context, id string) ApiUpdateWorkerGroupByIdRequest {
	return ApiUpdateWorkerGroupByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ClusterControllerApiWorkerGroup
func (a *WorkerGroupsAPIService) UpdateWorkerGroupByIdExecute(r ApiUpdateWorkerGroupByIdRequest) (*ClusterControllerApiWorkerGroup, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ClusterControllerApiWorkerGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkerGroupsAPIService.UpdateWorkerGroupById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/cluster/workergroups/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clusterControllerApiCreateOrUpdateWorkerGroupRequest == nil {
		return localVarReturnValue, nil, reportError("clusterControllerApiCreateOrUpdateWorkerGroupRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.clusterControllerApiCreateOrUpdateWorkerGroupRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
