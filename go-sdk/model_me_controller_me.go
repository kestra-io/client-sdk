/*
Kestra EE

All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
)

// checks if the MeControllerMe type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MeControllerMe{}

// MeControllerMe struct for MeControllerMe
type MeControllerMe struct {
	User    *ApiUser                  `json:"user,omitempty"`
	Roles   []AclServiceNamespaceRole `json:"roles,omitempty"`
	Tenants []ApiTenant               `json:"tenants,omitempty"`
}

// NewMeControllerMe instantiates a new MeControllerMe object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMeControllerMe() *MeControllerMe {
	this := MeControllerMe{}
	return &this
}

// NewMeControllerMeWithDefaults instantiates a new MeControllerMe object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMeControllerMeWithDefaults() *MeControllerMe {
	this := MeControllerMe{}
	return &this
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *MeControllerMe) GetUser() ApiUser {
	if o == nil || IsNil(o.User) {
		var ret ApiUser
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeControllerMe) GetUserOk() (*ApiUser, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *MeControllerMe) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given ApiUser and assigns it to the User field.
func (o *MeControllerMe) SetUser(v ApiUser) {
	o.User = &v
}

// GetRoles returns the Roles field value if set, zero value otherwise.
func (o *MeControllerMe) GetRoles() []AclServiceNamespaceRole {
	if o == nil || IsNil(o.Roles) {
		var ret []AclServiceNamespaceRole
		return ret
	}
	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeControllerMe) GetRolesOk() ([]AclServiceNamespaceRole, bool) {
	if o == nil || IsNil(o.Roles) {
		return nil, false
	}
	return o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *MeControllerMe) HasRoles() bool {
	if o != nil && !IsNil(o.Roles) {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []AclServiceNamespaceRole and assigns it to the Roles field.
func (o *MeControllerMe) SetRoles(v []AclServiceNamespaceRole) {
	o.Roles = v
}

// GetTenants returns the Tenants field value if set, zero value otherwise.
func (o *MeControllerMe) GetTenants() []ApiTenant {
	if o == nil || IsNil(o.Tenants) {
		var ret []ApiTenant
		return ret
	}
	return o.Tenants
}

// GetTenantsOk returns a tuple with the Tenants field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeControllerMe) GetTenantsOk() ([]ApiTenant, bool) {
	if o == nil || IsNil(o.Tenants) {
		return nil, false
	}
	return o.Tenants, true
}

// HasTenants returns a boolean if a field has been set.
func (o *MeControllerMe) HasTenants() bool {
	if o != nil && !IsNil(o.Tenants) {
		return true
	}

	return false
}

// SetTenants gets a reference to the given []ApiTenant and assigns it to the Tenants field.
func (o *MeControllerMe) SetTenants(v []ApiTenant) {
	o.Tenants = v
}

func (o MeControllerMe) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MeControllerMe) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	if !IsNil(o.Roles) {
		toSerialize["roles"] = o.Roles
	}
	if !IsNil(o.Tenants) {
		toSerialize["tenants"] = o.Tenants
	}
	return toSerialize, nil
}

type NullableMeControllerMe struct {
	value *MeControllerMe
	isSet bool
}

func (v NullableMeControllerMe) Get() *MeControllerMe {
	return v.value
}

func (v *NullableMeControllerMe) Set(val *MeControllerMe) {
	v.value = val
	v.isSet = true
}

func (v NullableMeControllerMe) IsSet() bool {
	return v.isSet
}

func (v *NullableMeControllerMe) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMeControllerMe(val *MeControllerMe) *NullableMeControllerMe {
	return &NullableMeControllerMe{value: val, isSet: true}
}

func (v NullableMeControllerMe) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMeControllerMe) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
