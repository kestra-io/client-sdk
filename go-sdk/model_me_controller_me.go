/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
)

// checks if the MeControllerMe type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MeControllerMe{}

// MeControllerMe struct for MeControllerMe
type MeControllerMe struct {
	User                 ApiUser                   `json:"user"`
	Roles                []AclServiceNamespaceRole `json:"roles"`
	Tenants              []ApiTenant               `json:"tenants"`
	AdditionalProperties map[string]interface{}
}

type _MeControllerMe MeControllerMe

// NewMeControllerMe instantiates a new MeControllerMe object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMeControllerMe(user ApiUser, roles []AclServiceNamespaceRole, tenants []ApiTenant) *MeControllerMe {
	this := MeControllerMe{}
	this.User = user
	this.Roles = roles
	this.Tenants = tenants
	return &this
}

// NewMeControllerMeWithDefaults instantiates a new MeControllerMe object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMeControllerMeWithDefaults() *MeControllerMe {
	this := MeControllerMe{}
	return &this
}

// GetUser returns the User field value
func (o *MeControllerMe) GetUser() ApiUser {
	if o == nil {
		var ret ApiUser
		return ret
	}

	return o.User
}

// GetUserOk returns a tuple with the User field value
// and a boolean to check if the value has been set.
func (o *MeControllerMe) GetUserOk() (*ApiUser, bool) {
	if o == nil {
		return nil, false
	}
	return &o.User, true
}

// SetUser sets field value
func (o *MeControllerMe) SetUser(v ApiUser) {
	o.User = v
}

// GetRoles returns the Roles field value
func (o *MeControllerMe) GetRoles() []AclServiceNamespaceRole {
	if o == nil {
		var ret []AclServiceNamespaceRole
		return ret
	}

	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value
// and a boolean to check if the value has been set.
func (o *MeControllerMe) GetRolesOk() ([]AclServiceNamespaceRole, bool) {
	if o == nil {
		return nil, false
	}
	return o.Roles, true
}

// SetRoles sets field value
func (o *MeControllerMe) SetRoles(v []AclServiceNamespaceRole) {
	o.Roles = v
}

// GetTenants returns the Tenants field value
func (o *MeControllerMe) GetTenants() []ApiTenant {
	if o == nil {
		var ret []ApiTenant
		return ret
	}

	return o.Tenants
}

// GetTenantsOk returns a tuple with the Tenants field value
// and a boolean to check if the value has been set.
func (o *MeControllerMe) GetTenantsOk() ([]ApiTenant, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tenants, true
}

// SetTenants sets field value
func (o *MeControllerMe) SetTenants(v []ApiTenant) {
	o.Tenants = v
}

func (o MeControllerMe) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MeControllerMe) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["user"] = o.User
	toSerialize["roles"] = o.Roles
	toSerialize["tenants"] = o.Tenants

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MeControllerMe) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"user",
		"roles",
		"tenants",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMeControllerMe := _MeControllerMe{}

	err = json.Unmarshal(data, &varMeControllerMe)

	if err != nil {
		return err
	}

	*o = MeControllerMe(varMeControllerMe)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "user")
		delete(additionalProperties, "roles")
		delete(additionalProperties, "tenants")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMeControllerMe struct {
	value *MeControllerMe
	isSet bool
}

func (v NullableMeControllerMe) Get() *MeControllerMe {
	return v.value
}

func (v *NullableMeControllerMe) Set(val *MeControllerMe) {
	v.value = val
	v.isSet = true
}

func (v NullableMeControllerMe) IsSet() bool {
	return v.isSet
}

func (v *NullableMeControllerMe) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMeControllerMe(val *MeControllerMe) *NullableMeControllerMe {
	return &NullableMeControllerMe{value: val, isSet: true}
}

func (v NullableMeControllerMe) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMeControllerMe) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
