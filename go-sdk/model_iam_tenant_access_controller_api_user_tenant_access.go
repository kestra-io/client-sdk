/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
)

// checks if the IAMTenantAccessControllerApiUserTenantAccess type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IAMTenantAccessControllerApiUserTenantAccess{}

// IAMTenantAccessControllerApiUserTenantAccess struct for IAMTenantAccessControllerApiUserTenantAccess
type IAMTenantAccessControllerApiUserTenantAccess struct {
	Id                   *string                                      `json:"id,omitempty"`
	Username             *string                                      `json:"username,omitempty"`
	DisplayName          *string                                      `json:"displayName,omitempty"`
	Description          *string                                      `json:"description,omitempty"`
	Groups               []IAMTenantAccessControllerApiGroup          `json:"groups,omitempty"`
	Auths                []IAMTenantAccessControllerApiAuthentication `json:"auths,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _IAMTenantAccessControllerApiUserTenantAccess IAMTenantAccessControllerApiUserTenantAccess

// NewIAMTenantAccessControllerApiUserTenantAccess instantiates a new IAMTenantAccessControllerApiUserTenantAccess object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIAMTenantAccessControllerApiUserTenantAccess() *IAMTenantAccessControllerApiUserTenantAccess {
	this := IAMTenantAccessControllerApiUserTenantAccess{}
	return &this
}

// NewIAMTenantAccessControllerApiUserTenantAccessWithDefaults instantiates a new IAMTenantAccessControllerApiUserTenantAccess object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIAMTenantAccessControllerApiUserTenantAccessWithDefaults() *IAMTenantAccessControllerApiUserTenantAccess {
	this := IAMTenantAccessControllerApiUserTenantAccess{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *IAMTenantAccessControllerApiUserTenantAccess) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IAMTenantAccessControllerApiUserTenantAccess) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *IAMTenantAccessControllerApiUserTenantAccess) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *IAMTenantAccessControllerApiUserTenantAccess) SetId(v string) {
	o.Id = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *IAMTenantAccessControllerApiUserTenantAccess) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IAMTenantAccessControllerApiUserTenantAccess) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *IAMTenantAccessControllerApiUserTenantAccess) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *IAMTenantAccessControllerApiUserTenantAccess) SetUsername(v string) {
	o.Username = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *IAMTenantAccessControllerApiUserTenantAccess) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IAMTenantAccessControllerApiUserTenantAccess) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *IAMTenantAccessControllerApiUserTenantAccess) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *IAMTenantAccessControllerApiUserTenantAccess) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *IAMTenantAccessControllerApiUserTenantAccess) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IAMTenantAccessControllerApiUserTenantAccess) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *IAMTenantAccessControllerApiUserTenantAccess) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *IAMTenantAccessControllerApiUserTenantAccess) SetDescription(v string) {
	o.Description = &v
}

// GetGroups returns the Groups field value if set, zero value otherwise.
func (o *IAMTenantAccessControllerApiUserTenantAccess) GetGroups() []IAMTenantAccessControllerApiGroup {
	if o == nil || IsNil(o.Groups) {
		var ret []IAMTenantAccessControllerApiGroup
		return ret
	}
	return o.Groups
}

// GetGroupsOk returns a tuple with the Groups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IAMTenantAccessControllerApiUserTenantAccess) GetGroupsOk() ([]IAMTenantAccessControllerApiGroup, bool) {
	if o == nil || IsNil(o.Groups) {
		return nil, false
	}
	return o.Groups, true
}

// HasGroups returns a boolean if a field has been set.
func (o *IAMTenantAccessControllerApiUserTenantAccess) HasGroups() bool {
	if o != nil && !IsNil(o.Groups) {
		return true
	}

	return false
}

// SetGroups gets a reference to the given []IAMTenantAccessControllerApiGroup and assigns it to the Groups field.
func (o *IAMTenantAccessControllerApiUserTenantAccess) SetGroups(v []IAMTenantAccessControllerApiGroup) {
	o.Groups = v
}

// GetAuths returns the Auths field value if set, zero value otherwise.
func (o *IAMTenantAccessControllerApiUserTenantAccess) GetAuths() []IAMTenantAccessControllerApiAuthentication {
	if o == nil || IsNil(o.Auths) {
		var ret []IAMTenantAccessControllerApiAuthentication
		return ret
	}
	return o.Auths
}

// GetAuthsOk returns a tuple with the Auths field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IAMTenantAccessControllerApiUserTenantAccess) GetAuthsOk() ([]IAMTenantAccessControllerApiAuthentication, bool) {
	if o == nil || IsNil(o.Auths) {
		return nil, false
	}
	return o.Auths, true
}

// HasAuths returns a boolean if a field has been set.
func (o *IAMTenantAccessControllerApiUserTenantAccess) HasAuths() bool {
	if o != nil && !IsNil(o.Auths) {
		return true
	}

	return false
}

// SetAuths gets a reference to the given []IAMTenantAccessControllerApiAuthentication and assigns it to the Auths field.
func (o *IAMTenantAccessControllerApiUserTenantAccess) SetAuths(v []IAMTenantAccessControllerApiAuthentication) {
	o.Auths = v
}

func (o IAMTenantAccessControllerApiUserTenantAccess) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IAMTenantAccessControllerApiUserTenantAccess) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Groups) {
		toSerialize["groups"] = o.Groups
	}
	if !IsNil(o.Auths) {
		toSerialize["auths"] = o.Auths
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *IAMTenantAccessControllerApiUserTenantAccess) UnmarshalJSON(data []byte) (err error) {
	varIAMTenantAccessControllerApiUserTenantAccess := _IAMTenantAccessControllerApiUserTenantAccess{}

	err = json.Unmarshal(data, &varIAMTenantAccessControllerApiUserTenantAccess)

	if err != nil {
		return err
	}

	*o = IAMTenantAccessControllerApiUserTenantAccess(varIAMTenantAccessControllerApiUserTenantAccess)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "username")
		delete(additionalProperties, "displayName")
		delete(additionalProperties, "description")
		delete(additionalProperties, "groups")
		delete(additionalProperties, "auths")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIAMTenantAccessControllerApiUserTenantAccess struct {
	value *IAMTenantAccessControllerApiUserTenantAccess
	isSet bool
}

func (v NullableIAMTenantAccessControllerApiUserTenantAccess) Get() *IAMTenantAccessControllerApiUserTenantAccess {
	return v.value
}

func (v *NullableIAMTenantAccessControllerApiUserTenantAccess) Set(val *IAMTenantAccessControllerApiUserTenantAccess) {
	v.value = val
	v.isSet = true
}

func (v NullableIAMTenantAccessControllerApiUserTenantAccess) IsSet() bool {
	return v.isSet
}

func (v *NullableIAMTenantAccessControllerApiUserTenantAccess) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIAMTenantAccessControllerApiUserTenantAccess(val *IAMTenantAccessControllerApiUserTenantAccess) *NullableIAMTenantAccessControllerApiUserTenantAccess {
	return &NullableIAMTenantAccessControllerApiUserTenantAccess{value: val, isSet: true}
}

func (v NullableIAMTenantAccessControllerApiUserTenantAccess) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIAMTenantAccessControllerApiUserTenantAccess) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
