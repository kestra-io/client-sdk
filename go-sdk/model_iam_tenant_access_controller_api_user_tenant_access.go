/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
)

// checks if the IAMTenantAccessControllerApiUserTenantAccess type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IAMTenantAccessControllerApiUserTenantAccess{}

// IAMTenantAccessControllerApiUserTenantAccess struct for IAMTenantAccessControllerApiUserTenantAccess
type IAMTenantAccessControllerApiUserTenantAccess struct {
	Id                   string                                       `json:"id"`
	Username             string                                       `json:"username"`
	DisplayName          string                                       `json:"displayName"`
	Description          string                                       `json:"description"`
	Groups               []IAMTenantAccessControllerApiGroup          `json:"groups"`
	Auths                []IAMTenantAccessControllerApiAuthentication `json:"auths"`
	AdditionalProperties map[string]interface{}
}

type _IAMTenantAccessControllerApiUserTenantAccess IAMTenantAccessControllerApiUserTenantAccess

// NewIAMTenantAccessControllerApiUserTenantAccess instantiates a new IAMTenantAccessControllerApiUserTenantAccess object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIAMTenantAccessControllerApiUserTenantAccess(id string, username string, displayName string, description string, groups []IAMTenantAccessControllerApiGroup, auths []IAMTenantAccessControllerApiAuthentication) *IAMTenantAccessControllerApiUserTenantAccess {
	this := IAMTenantAccessControllerApiUserTenantAccess{}
	this.Id = id
	this.Username = username
	this.DisplayName = displayName
	this.Description = description
	this.Groups = groups
	this.Auths = auths
	return &this
}

// NewIAMTenantAccessControllerApiUserTenantAccessWithDefaults instantiates a new IAMTenantAccessControllerApiUserTenantAccess object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIAMTenantAccessControllerApiUserTenantAccessWithDefaults() *IAMTenantAccessControllerApiUserTenantAccess {
	this := IAMTenantAccessControllerApiUserTenantAccess{}
	return &this
}

// GetId returns the Id field value
func (o *IAMTenantAccessControllerApiUserTenantAccess) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *IAMTenantAccessControllerApiUserTenantAccess) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *IAMTenantAccessControllerApiUserTenantAccess) SetId(v string) {
	o.Id = v
}

// GetUsername returns the Username field value
func (o *IAMTenantAccessControllerApiUserTenantAccess) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *IAMTenantAccessControllerApiUserTenantAccess) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *IAMTenantAccessControllerApiUserTenantAccess) SetUsername(v string) {
	o.Username = v
}

// GetDisplayName returns the DisplayName field value
func (o *IAMTenantAccessControllerApiUserTenantAccess) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *IAMTenantAccessControllerApiUserTenantAccess) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
func (o *IAMTenantAccessControllerApiUserTenantAccess) SetDisplayName(v string) {
	o.DisplayName = v
}

// GetDescription returns the Description field value
func (o *IAMTenantAccessControllerApiUserTenantAccess) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *IAMTenantAccessControllerApiUserTenantAccess) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *IAMTenantAccessControllerApiUserTenantAccess) SetDescription(v string) {
	o.Description = v
}

// GetGroups returns the Groups field value
func (o *IAMTenantAccessControllerApiUserTenantAccess) GetGroups() []IAMTenantAccessControllerApiGroup {
	if o == nil {
		var ret []IAMTenantAccessControllerApiGroup
		return ret
	}

	return o.Groups
}

// GetGroupsOk returns a tuple with the Groups field value
// and a boolean to check if the value has been set.
func (o *IAMTenantAccessControllerApiUserTenantAccess) GetGroupsOk() ([]IAMTenantAccessControllerApiGroup, bool) {
	if o == nil {
		return nil, false
	}
	return o.Groups, true
}

// SetGroups sets field value
func (o *IAMTenantAccessControllerApiUserTenantAccess) SetGroups(v []IAMTenantAccessControllerApiGroup) {
	o.Groups = v
}

// GetAuths returns the Auths field value
func (o *IAMTenantAccessControllerApiUserTenantAccess) GetAuths() []IAMTenantAccessControllerApiAuthentication {
	if o == nil {
		var ret []IAMTenantAccessControllerApiAuthentication
		return ret
	}

	return o.Auths
}

// GetAuthsOk returns a tuple with the Auths field value
// and a boolean to check if the value has been set.
func (o *IAMTenantAccessControllerApiUserTenantAccess) GetAuthsOk() ([]IAMTenantAccessControllerApiAuthentication, bool) {
	if o == nil {
		return nil, false
	}
	return o.Auths, true
}

// SetAuths sets field value
func (o *IAMTenantAccessControllerApiUserTenantAccess) SetAuths(v []IAMTenantAccessControllerApiAuthentication) {
	o.Auths = v
}

func (o IAMTenantAccessControllerApiUserTenantAccess) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IAMTenantAccessControllerApiUserTenantAccess) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["username"] = o.Username
	toSerialize["displayName"] = o.DisplayName
	toSerialize["description"] = o.Description
	toSerialize["groups"] = o.Groups
	toSerialize["auths"] = o.Auths

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *IAMTenantAccessControllerApiUserTenantAccess) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"username",
		"displayName",
		"description",
		"groups",
		"auths",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIAMTenantAccessControllerApiUserTenantAccess := _IAMTenantAccessControllerApiUserTenantAccess{}

	err = json.Unmarshal(data, &varIAMTenantAccessControllerApiUserTenantAccess)

	if err != nil {
		return err
	}

	*o = IAMTenantAccessControllerApiUserTenantAccess(varIAMTenantAccessControllerApiUserTenantAccess)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "username")
		delete(additionalProperties, "displayName")
		delete(additionalProperties, "description")
		delete(additionalProperties, "groups")
		delete(additionalProperties, "auths")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIAMTenantAccessControllerApiUserTenantAccess struct {
	value *IAMTenantAccessControllerApiUserTenantAccess
	isSet bool
}

func (v NullableIAMTenantAccessControllerApiUserTenantAccess) Get() *IAMTenantAccessControllerApiUserTenantAccess {
	return v.value
}

func (v *NullableIAMTenantAccessControllerApiUserTenantAccess) Set(val *IAMTenantAccessControllerApiUserTenantAccess) {
	v.value = val
	v.isSet = true
}

func (v NullableIAMTenantAccessControllerApiUserTenantAccess) IsSet() bool {
	return v.isSet
}

func (v *NullableIAMTenantAccessControllerApiUserTenantAccess) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIAMTenantAccessControllerApiUserTenantAccess(val *IAMTenantAccessControllerApiUserTenantAccess) *NullableIAMTenantAccessControllerApiUserTenantAccess {
	return &NullableIAMTenantAccessControllerApiUserTenantAccess{value: val, isSet: true}
}

func (v NullableIAMTenantAccessControllerApiUserTenantAccess) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIAMTenantAccessControllerApiUserTenantAccess) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
