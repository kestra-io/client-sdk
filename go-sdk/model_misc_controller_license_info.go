/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
	"time"
)

// checks if the MiscControllerLicenseInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MiscControllerLicenseInfo{}

// MiscControllerLicenseInfo struct for MiscControllerLicenseInfo
type MiscControllerLicenseInfo struct {
	Type                 string    `json:"type"`
	Expiry               time.Time `json:"expiry"`
	Expired              bool      `json:"expired"`
	AdditionalProperties map[string]interface{}
}

type _MiscControllerLicenseInfo MiscControllerLicenseInfo

// NewMiscControllerLicenseInfo instantiates a new MiscControllerLicenseInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMiscControllerLicenseInfo(type_ string, expiry time.Time, expired bool) *MiscControllerLicenseInfo {
	this := MiscControllerLicenseInfo{}
	this.Type = type_
	this.Expiry = expiry
	this.Expired = expired
	return &this
}

// NewMiscControllerLicenseInfoWithDefaults instantiates a new MiscControllerLicenseInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMiscControllerLicenseInfoWithDefaults() *MiscControllerLicenseInfo {
	this := MiscControllerLicenseInfo{}
	return &this
}

// GetType returns the Type field value
func (o *MiscControllerLicenseInfo) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *MiscControllerLicenseInfo) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *MiscControllerLicenseInfo) SetType(v string) {
	o.Type = v
}

// GetExpiry returns the Expiry field value
func (o *MiscControllerLicenseInfo) GetExpiry() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Expiry
}

// GetExpiryOk returns a tuple with the Expiry field value
// and a boolean to check if the value has been set.
func (o *MiscControllerLicenseInfo) GetExpiryOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Expiry, true
}

// SetExpiry sets field value
func (o *MiscControllerLicenseInfo) SetExpiry(v time.Time) {
	o.Expiry = v
}

// GetExpired returns the Expired field value
func (o *MiscControllerLicenseInfo) GetExpired() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Expired
}

// GetExpiredOk returns a tuple with the Expired field value
// and a boolean to check if the value has been set.
func (o *MiscControllerLicenseInfo) GetExpiredOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Expired, true
}

// SetExpired sets field value
func (o *MiscControllerLicenseInfo) SetExpired(v bool) {
	o.Expired = v
}

func (o MiscControllerLicenseInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MiscControllerLicenseInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["expiry"] = o.Expiry
	toSerialize["expired"] = o.Expired

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MiscControllerLicenseInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"expiry",
		"expired",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMiscControllerLicenseInfo := _MiscControllerLicenseInfo{}

	err = json.Unmarshal(data, &varMiscControllerLicenseInfo)

	if err != nil {
		return err
	}

	*o = MiscControllerLicenseInfo(varMiscControllerLicenseInfo)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "expiry")
		delete(additionalProperties, "expired")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMiscControllerLicenseInfo struct {
	value *MiscControllerLicenseInfo
	isSet bool
}

func (v NullableMiscControllerLicenseInfo) Get() *MiscControllerLicenseInfo {
	return v.value
}

func (v *NullableMiscControllerLicenseInfo) Set(val *MiscControllerLicenseInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableMiscControllerLicenseInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableMiscControllerLicenseInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMiscControllerLicenseInfo(val *MiscControllerLicenseInfo) *NullableMiscControllerLicenseInfo {
	return &NullableMiscControllerLicenseInfo{value: val, isSet: true}
}

func (v NullableMiscControllerLicenseInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMiscControllerLicenseInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
