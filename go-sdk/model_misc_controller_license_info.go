/*
Kestra EE

All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"time"
)

// checks if the MiscControllerLicenseInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MiscControllerLicenseInfo{}

// MiscControllerLicenseInfo struct for MiscControllerLicenseInfo
type MiscControllerLicenseInfo struct {
	Type    *string    `json:"type,omitempty"`
	Expiry  *time.Time `json:"expiry,omitempty"`
	Expired *bool      `json:"expired,omitempty"`
}

// NewMiscControllerLicenseInfo instantiates a new MiscControllerLicenseInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMiscControllerLicenseInfo() *MiscControllerLicenseInfo {
	this := MiscControllerLicenseInfo{}
	return &this
}

// NewMiscControllerLicenseInfoWithDefaults instantiates a new MiscControllerLicenseInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMiscControllerLicenseInfoWithDefaults() *MiscControllerLicenseInfo {
	this := MiscControllerLicenseInfo{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *MiscControllerLicenseInfo) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MiscControllerLicenseInfo) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *MiscControllerLicenseInfo) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *MiscControllerLicenseInfo) SetType(v string) {
	o.Type = &v
}

// GetExpiry returns the Expiry field value if set, zero value otherwise.
func (o *MiscControllerLicenseInfo) GetExpiry() time.Time {
	if o == nil || IsNil(o.Expiry) {
		var ret time.Time
		return ret
	}
	return *o.Expiry
}

// GetExpiryOk returns a tuple with the Expiry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MiscControllerLicenseInfo) GetExpiryOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Expiry) {
		return nil, false
	}
	return o.Expiry, true
}

// HasExpiry returns a boolean if a field has been set.
func (o *MiscControllerLicenseInfo) HasExpiry() bool {
	if o != nil && !IsNil(o.Expiry) {
		return true
	}

	return false
}

// SetExpiry gets a reference to the given time.Time and assigns it to the Expiry field.
func (o *MiscControllerLicenseInfo) SetExpiry(v time.Time) {
	o.Expiry = &v
}

// GetExpired returns the Expired field value if set, zero value otherwise.
func (o *MiscControllerLicenseInfo) GetExpired() bool {
	if o == nil || IsNil(o.Expired) {
		var ret bool
		return ret
	}
	return *o.Expired
}

// GetExpiredOk returns a tuple with the Expired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MiscControllerLicenseInfo) GetExpiredOk() (*bool, bool) {
	if o == nil || IsNil(o.Expired) {
		return nil, false
	}
	return o.Expired, true
}

// HasExpired returns a boolean if a field has been set.
func (o *MiscControllerLicenseInfo) HasExpired() bool {
	if o != nil && !IsNil(o.Expired) {
		return true
	}

	return false
}

// SetExpired gets a reference to the given bool and assigns it to the Expired field.
func (o *MiscControllerLicenseInfo) SetExpired(v bool) {
	o.Expired = &v
}

func (o MiscControllerLicenseInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MiscControllerLicenseInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Expiry) {
		toSerialize["expiry"] = o.Expiry
	}
	if !IsNil(o.Expired) {
		toSerialize["expired"] = o.Expired
	}
	return toSerialize, nil
}

type NullableMiscControllerLicenseInfo struct {
	value *MiscControllerLicenseInfo
	isSet bool
}

func (v NullableMiscControllerLicenseInfo) Get() *MiscControllerLicenseInfo {
	return v.value
}

func (v *NullableMiscControllerLicenseInfo) Set(val *MiscControllerLicenseInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableMiscControllerLicenseInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableMiscControllerLicenseInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMiscControllerLicenseInfo(val *MiscControllerLicenseInfo) *NullableMiscControllerLicenseInfo {
	return &NullableMiscControllerLicenseInfo{value: val, isSet: true}
}

func (v NullableMiscControllerLicenseInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMiscControllerLicenseInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
