/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
)

// KVControllerTypedValueValue struct for KVControllerTypedValueValue
type KVControllerTypedValueValue struct {
	MapmapOfStringAny *map[string]interface{}
	String            *string
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *KVControllerTypedValueValue) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into MapmapOfStringAny
	err = json.Unmarshal(data, &dst.MapmapOfStringAny)
	if err == nil {
		jsonMapmapOfStringAny, _ := json.Marshal(dst.MapmapOfStringAny)
		if string(jsonMapmapOfStringAny) == "{}" { // empty struct
			dst.MapmapOfStringAny = nil
		} else {
			return nil // data stored in dst.MapmapOfStringAny, return on the first match
		}
	} else {
		dst.MapmapOfStringAny = nil
	}

	// try to unmarshal JSON data into String
	err = json.Unmarshal(data, &dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			return nil // data stored in dst.String, return on the first match
		}
	} else {
		dst.String = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(KVControllerTypedValueValue)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src KVControllerTypedValueValue) MarshalJSON() ([]byte, error) {
	if src.MapmapOfStringAny != nil {
		return json.Marshal(&src.MapmapOfStringAny)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableKVControllerTypedValueValue struct {
	value *KVControllerTypedValueValue
	isSet bool
}

func (v NullableKVControllerTypedValueValue) Get() *KVControllerTypedValueValue {
	return v.value
}

func (v *NullableKVControllerTypedValueValue) Set(val *KVControllerTypedValueValue) {
	v.value = val
	v.isSet = true
}

func (v NullableKVControllerTypedValueValue) IsSet() bool {
	return v.isSet
}

func (v *NullableKVControllerTypedValueValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKVControllerTypedValueValue(val *KVControllerTypedValueValue) *NullableKVControllerTypedValueValue {
	return &NullableKVControllerTypedValueValue{value: val, isSet: true}
}

func (v NullableKVControllerTypedValueValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKVControllerTypedValueValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
