/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
)

// checks if the IAMTenantAccessControllerApiAuthentication type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IAMTenantAccessControllerApiAuthentication{}

// IAMTenantAccessControllerApiAuthentication struct for IAMTenantAccessControllerApiAuthentication
type IAMTenantAccessControllerApiAuthentication struct {
	Name                 *string `json:"name,omitempty"`
	Type                 *string `json:"type,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _IAMTenantAccessControllerApiAuthentication IAMTenantAccessControllerApiAuthentication

// NewIAMTenantAccessControllerApiAuthentication instantiates a new IAMTenantAccessControllerApiAuthentication object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIAMTenantAccessControllerApiAuthentication() *IAMTenantAccessControllerApiAuthentication {
	this := IAMTenantAccessControllerApiAuthentication{}
	return &this
}

// NewIAMTenantAccessControllerApiAuthenticationWithDefaults instantiates a new IAMTenantAccessControllerApiAuthentication object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIAMTenantAccessControllerApiAuthenticationWithDefaults() *IAMTenantAccessControllerApiAuthentication {
	this := IAMTenantAccessControllerApiAuthentication{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *IAMTenantAccessControllerApiAuthentication) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IAMTenantAccessControllerApiAuthentication) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *IAMTenantAccessControllerApiAuthentication) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *IAMTenantAccessControllerApiAuthentication) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *IAMTenantAccessControllerApiAuthentication) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IAMTenantAccessControllerApiAuthentication) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *IAMTenantAccessControllerApiAuthentication) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *IAMTenantAccessControllerApiAuthentication) SetType(v string) {
	o.Type = &v
}

func (o IAMTenantAccessControllerApiAuthentication) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IAMTenantAccessControllerApiAuthentication) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *IAMTenantAccessControllerApiAuthentication) UnmarshalJSON(data []byte) (err error) {
	varIAMTenantAccessControllerApiAuthentication := _IAMTenantAccessControllerApiAuthentication{}

	err = json.Unmarshal(data, &varIAMTenantAccessControllerApiAuthentication)

	if err != nil {
		return err
	}

	*o = IAMTenantAccessControllerApiAuthentication(varIAMTenantAccessControllerApiAuthentication)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIAMTenantAccessControllerApiAuthentication struct {
	value *IAMTenantAccessControllerApiAuthentication
	isSet bool
}

func (v NullableIAMTenantAccessControllerApiAuthentication) Get() *IAMTenantAccessControllerApiAuthentication {
	return v.value
}

func (v *NullableIAMTenantAccessControllerApiAuthentication) Set(val *IAMTenantAccessControllerApiAuthentication) {
	v.value = val
	v.isSet = true
}

func (v NullableIAMTenantAccessControllerApiAuthentication) IsSet() bool {
	return v.isSet
}

func (v *NullableIAMTenantAccessControllerApiAuthentication) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIAMTenantAccessControllerApiAuthentication(val *IAMTenantAccessControllerApiAuthentication) *NullableIAMTenantAccessControllerApiAuthentication {
	return &NullableIAMTenantAccessControllerApiAuthentication{value: val, isSet: true}
}

func (v NullableIAMTenantAccessControllerApiAuthentication) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIAMTenantAccessControllerApiAuthentication) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
