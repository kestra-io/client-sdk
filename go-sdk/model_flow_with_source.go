/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
)

// checks if the FlowWithSource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FlowWithSource{}

// FlowWithSource struct for FlowWithSource
type FlowWithSource struct {
	Id          string        `json:"id" validate:"regexp=^[a-zA-Z0-9][a-zA-Z0-9._-]*"`
	Namespace   string        `json:"namespace" validate:"regexp=^[a-z0-9][a-z0-9._-]*"`
	Revision    *int32        `json:"revision,omitempty"`
	Description *string       `json:"description,omitempty"`
	Inputs      []InputObject `json:"inputs,omitempty"`
	// Output values make information about the execution of your Flow available and expose for other Kestra flows to use. Output values are similar to return values in programming languages.
	Outputs     []Output                          `json:"outputs,omitempty"`
	Disabled    bool                              `json:"disabled"`
	Labels      *FlowWithSourceAllOfLabels        `json:"labels,omitempty"`
	Variables   map[string]map[string]interface{} `json:"variables,omitempty"`
	WorkerGroup *WorkerGroup                      `json:"workerGroup,omitempty"`
	Deleted     bool                              `json:"deleted"`
	Finally     []Task                            `json:"finally,omitempty"`
	// Deprecated
	TaskDefaults []PluginDefault `json:"taskDefaults,omitempty"`
	Tasks        []Task          `json:"tasks"`
	Errors       []Task          `json:"errors,omitempty"`
	// Deprecated
	Listeners            []Listener             `json:"listeners,omitempty"`
	AfterExecution       []Task                 `json:"afterExecution,omitempty"`
	Triggers             []AbstractTrigger      `json:"triggers,omitempty"`
	PluginDefaults       []PluginDefault        `json:"pluginDefaults,omitempty"`
	Concurrency          *Concurrency           `json:"concurrency,omitempty"`
	Retry                map[string]interface{} `json:"retry,omitempty"`
	Sla                  []SLA                  `json:"sla,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _FlowWithSource FlowWithSource

// NewFlowWithSource instantiates a new FlowWithSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFlowWithSource(id string, namespace string, disabled bool, deleted bool, tasks []Task) *FlowWithSource {
	this := FlowWithSource{}
	this.Id = id
	this.Namespace = namespace
	this.Disabled = disabled
	this.Deleted = deleted
	this.Tasks = tasks
	return &this
}

// NewFlowWithSourceWithDefaults instantiates a new FlowWithSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFlowWithSourceWithDefaults() *FlowWithSource {
	this := FlowWithSource{}
	return &this
}

// GetId returns the Id field value
func (o *FlowWithSource) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *FlowWithSource) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *FlowWithSource) SetId(v string) {
	o.Id = v
}

// GetNamespace returns the Namespace field value
func (o *FlowWithSource) GetNamespace() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value
// and a boolean to check if the value has been set.
func (o *FlowWithSource) GetNamespaceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Namespace, true
}

// SetNamespace sets field value
func (o *FlowWithSource) SetNamespace(v string) {
	o.Namespace = v
}

// GetRevision returns the Revision field value if set, zero value otherwise.
func (o *FlowWithSource) GetRevision() int32 {
	if o == nil || IsNil(o.Revision) {
		var ret int32
		return ret
	}
	return *o.Revision
}

// GetRevisionOk returns a tuple with the Revision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowWithSource) GetRevisionOk() (*int32, bool) {
	if o == nil || IsNil(o.Revision) {
		return nil, false
	}
	return o.Revision, true
}

// HasRevision returns a boolean if a field has been set.
func (o *FlowWithSource) HasRevision() bool {
	if o != nil && !IsNil(o.Revision) {
		return true
	}

	return false
}

// SetRevision gets a reference to the given int32 and assigns it to the Revision field.
func (o *FlowWithSource) SetRevision(v int32) {
	o.Revision = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *FlowWithSource) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowWithSource) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *FlowWithSource) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *FlowWithSource) SetDescription(v string) {
	o.Description = &v
}

// GetInputs returns the Inputs field value if set, zero value otherwise.
func (o *FlowWithSource) GetInputs() []InputObject {
	if o == nil || IsNil(o.Inputs) {
		var ret []InputObject
		return ret
	}
	return o.Inputs
}

// GetInputsOk returns a tuple with the Inputs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowWithSource) GetInputsOk() ([]InputObject, bool) {
	if o == nil || IsNil(o.Inputs) {
		return nil, false
	}
	return o.Inputs, true
}

// HasInputs returns a boolean if a field has been set.
func (o *FlowWithSource) HasInputs() bool {
	if o != nil && !IsNil(o.Inputs) {
		return true
	}

	return false
}

// SetInputs gets a reference to the given []InputObject and assigns it to the Inputs field.
func (o *FlowWithSource) SetInputs(v []InputObject) {
	o.Inputs = v
}

// GetOutputs returns the Outputs field value if set, zero value otherwise.
func (o *FlowWithSource) GetOutputs() []Output {
	if o == nil || IsNil(o.Outputs) {
		var ret []Output
		return ret
	}
	return o.Outputs
}

// GetOutputsOk returns a tuple with the Outputs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowWithSource) GetOutputsOk() ([]Output, bool) {
	if o == nil || IsNil(o.Outputs) {
		return nil, false
	}
	return o.Outputs, true
}

// HasOutputs returns a boolean if a field has been set.
func (o *FlowWithSource) HasOutputs() bool {
	if o != nil && !IsNil(o.Outputs) {
		return true
	}

	return false
}

// SetOutputs gets a reference to the given []Output and assigns it to the Outputs field.
func (o *FlowWithSource) SetOutputs(v []Output) {
	o.Outputs = v
}

// GetDisabled returns the Disabled field value
func (o *FlowWithSource) GetDisabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value
// and a boolean to check if the value has been set.
func (o *FlowWithSource) GetDisabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Disabled, true
}

// SetDisabled sets field value
func (o *FlowWithSource) SetDisabled(v bool) {
	o.Disabled = v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *FlowWithSource) GetLabels() FlowWithSourceAllOfLabels {
	if o == nil || IsNil(o.Labels) {
		var ret FlowWithSourceAllOfLabels
		return ret
	}
	return *o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowWithSource) GetLabelsOk() (*FlowWithSourceAllOfLabels, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *FlowWithSource) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given FlowWithSourceAllOfLabels and assigns it to the Labels field.
func (o *FlowWithSource) SetLabels(v FlowWithSourceAllOfLabels) {
	o.Labels = &v
}

// GetVariables returns the Variables field value if set, zero value otherwise.
func (o *FlowWithSource) GetVariables() map[string]map[string]interface{} {
	if o == nil || IsNil(o.Variables) {
		var ret map[string]map[string]interface{}
		return ret
	}
	return o.Variables
}

// GetVariablesOk returns a tuple with the Variables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowWithSource) GetVariablesOk() (map[string]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Variables) {
		return map[string]map[string]interface{}{}, false
	}
	return o.Variables, true
}

// HasVariables returns a boolean if a field has been set.
func (o *FlowWithSource) HasVariables() bool {
	if o != nil && !IsNil(o.Variables) {
		return true
	}

	return false
}

// SetVariables gets a reference to the given map[string]map[string]interface{} and assigns it to the Variables field.
func (o *FlowWithSource) SetVariables(v map[string]map[string]interface{}) {
	o.Variables = v
}

// GetWorkerGroup returns the WorkerGroup field value if set, zero value otherwise.
func (o *FlowWithSource) GetWorkerGroup() WorkerGroup {
	if o == nil || IsNil(o.WorkerGroup) {
		var ret WorkerGroup
		return ret
	}
	return *o.WorkerGroup
}

// GetWorkerGroupOk returns a tuple with the WorkerGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowWithSource) GetWorkerGroupOk() (*WorkerGroup, bool) {
	if o == nil || IsNil(o.WorkerGroup) {
		return nil, false
	}
	return o.WorkerGroup, true
}

// HasWorkerGroup returns a boolean if a field has been set.
func (o *FlowWithSource) HasWorkerGroup() bool {
	if o != nil && !IsNil(o.WorkerGroup) {
		return true
	}

	return false
}

// SetWorkerGroup gets a reference to the given WorkerGroup and assigns it to the WorkerGroup field.
func (o *FlowWithSource) SetWorkerGroup(v WorkerGroup) {
	o.WorkerGroup = &v
}

// GetDeleted returns the Deleted field value
func (o *FlowWithSource) GetDeleted() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Deleted
}

// GetDeletedOk returns a tuple with the Deleted field value
// and a boolean to check if the value has been set.
func (o *FlowWithSource) GetDeletedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Deleted, true
}

// SetDeleted sets field value
func (o *FlowWithSource) SetDeleted(v bool) {
	o.Deleted = v
}

// GetFinally returns the Finally field value if set, zero value otherwise.
func (o *FlowWithSource) GetFinally() []Task {
	if o == nil || IsNil(o.Finally) {
		var ret []Task
		return ret
	}
	return o.Finally
}

// GetFinallyOk returns a tuple with the Finally field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowWithSource) GetFinallyOk() ([]Task, bool) {
	if o == nil || IsNil(o.Finally) {
		return nil, false
	}
	return o.Finally, true
}

// HasFinally returns a boolean if a field has been set.
func (o *FlowWithSource) HasFinally() bool {
	if o != nil && !IsNil(o.Finally) {
		return true
	}

	return false
}

// SetFinally gets a reference to the given []Task and assigns it to the Finally field.
func (o *FlowWithSource) SetFinally(v []Task) {
	o.Finally = v
}

// GetTaskDefaults returns the TaskDefaults field value if set, zero value otherwise.
// Deprecated
func (o *FlowWithSource) GetTaskDefaults() []PluginDefault {
	if o == nil || IsNil(o.TaskDefaults) {
		var ret []PluginDefault
		return ret
	}
	return o.TaskDefaults
}

// GetTaskDefaultsOk returns a tuple with the TaskDefaults field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *FlowWithSource) GetTaskDefaultsOk() ([]PluginDefault, bool) {
	if o == nil || IsNil(o.TaskDefaults) {
		return nil, false
	}
	return o.TaskDefaults, true
}

// HasTaskDefaults returns a boolean if a field has been set.
func (o *FlowWithSource) HasTaskDefaults() bool {
	if o != nil && !IsNil(o.TaskDefaults) {
		return true
	}

	return false
}

// SetTaskDefaults gets a reference to the given []PluginDefault and assigns it to the TaskDefaults field.
// Deprecated
func (o *FlowWithSource) SetTaskDefaults(v []PluginDefault) {
	o.TaskDefaults = v
}

// GetTasks returns the Tasks field value
func (o *FlowWithSource) GetTasks() []Task {
	if o == nil {
		var ret []Task
		return ret
	}

	return o.Tasks
}

// GetTasksOk returns a tuple with the Tasks field value
// and a boolean to check if the value has been set.
func (o *FlowWithSource) GetTasksOk() ([]Task, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tasks, true
}

// SetTasks sets field value
func (o *FlowWithSource) SetTasks(v []Task) {
	o.Tasks = v
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *FlowWithSource) GetErrors() []Task {
	if o == nil || IsNil(o.Errors) {
		var ret []Task
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowWithSource) GetErrorsOk() ([]Task, bool) {
	if o == nil || IsNil(o.Errors) {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *FlowWithSource) HasErrors() bool {
	if o != nil && !IsNil(o.Errors) {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []Task and assigns it to the Errors field.
func (o *FlowWithSource) SetErrors(v []Task) {
	o.Errors = v
}

// GetListeners returns the Listeners field value if set, zero value otherwise.
// Deprecated
func (o *FlowWithSource) GetListeners() []Listener {
	if o == nil || IsNil(o.Listeners) {
		var ret []Listener
		return ret
	}
	return o.Listeners
}

// GetListenersOk returns a tuple with the Listeners field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *FlowWithSource) GetListenersOk() ([]Listener, bool) {
	if o == nil || IsNil(o.Listeners) {
		return nil, false
	}
	return o.Listeners, true
}

// HasListeners returns a boolean if a field has been set.
func (o *FlowWithSource) HasListeners() bool {
	if o != nil && !IsNil(o.Listeners) {
		return true
	}

	return false
}

// SetListeners gets a reference to the given []Listener and assigns it to the Listeners field.
// Deprecated
func (o *FlowWithSource) SetListeners(v []Listener) {
	o.Listeners = v
}

// GetAfterExecution returns the AfterExecution field value if set, zero value otherwise.
func (o *FlowWithSource) GetAfterExecution() []Task {
	if o == nil || IsNil(o.AfterExecution) {
		var ret []Task
		return ret
	}
	return o.AfterExecution
}

// GetAfterExecutionOk returns a tuple with the AfterExecution field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowWithSource) GetAfterExecutionOk() ([]Task, bool) {
	if o == nil || IsNil(o.AfterExecution) {
		return nil, false
	}
	return o.AfterExecution, true
}

// HasAfterExecution returns a boolean if a field has been set.
func (o *FlowWithSource) HasAfterExecution() bool {
	if o != nil && !IsNil(o.AfterExecution) {
		return true
	}

	return false
}

// SetAfterExecution gets a reference to the given []Task and assigns it to the AfterExecution field.
func (o *FlowWithSource) SetAfterExecution(v []Task) {
	o.AfterExecution = v
}

// GetTriggers returns the Triggers field value if set, zero value otherwise.
func (o *FlowWithSource) GetTriggers() []AbstractTrigger {
	if o == nil || IsNil(o.Triggers) {
		var ret []AbstractTrigger
		return ret
	}
	return o.Triggers
}

// GetTriggersOk returns a tuple with the Triggers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowWithSource) GetTriggersOk() ([]AbstractTrigger, bool) {
	if o == nil || IsNil(o.Triggers) {
		return nil, false
	}
	return o.Triggers, true
}

// HasTriggers returns a boolean if a field has been set.
func (o *FlowWithSource) HasTriggers() bool {
	if o != nil && !IsNil(o.Triggers) {
		return true
	}

	return false
}

// SetTriggers gets a reference to the given []AbstractTrigger and assigns it to the Triggers field.
func (o *FlowWithSource) SetTriggers(v []AbstractTrigger) {
	o.Triggers = v
}

// GetPluginDefaults returns the PluginDefaults field value if set, zero value otherwise.
func (o *FlowWithSource) GetPluginDefaults() []PluginDefault {
	if o == nil || IsNil(o.PluginDefaults) {
		var ret []PluginDefault
		return ret
	}
	return o.PluginDefaults
}

// GetPluginDefaultsOk returns a tuple with the PluginDefaults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowWithSource) GetPluginDefaultsOk() ([]PluginDefault, bool) {
	if o == nil || IsNil(o.PluginDefaults) {
		return nil, false
	}
	return o.PluginDefaults, true
}

// HasPluginDefaults returns a boolean if a field has been set.
func (o *FlowWithSource) HasPluginDefaults() bool {
	if o != nil && !IsNil(o.PluginDefaults) {
		return true
	}

	return false
}

// SetPluginDefaults gets a reference to the given []PluginDefault and assigns it to the PluginDefaults field.
func (o *FlowWithSource) SetPluginDefaults(v []PluginDefault) {
	o.PluginDefaults = v
}

// GetConcurrency returns the Concurrency field value if set, zero value otherwise.
func (o *FlowWithSource) GetConcurrency() Concurrency {
	if o == nil || IsNil(o.Concurrency) {
		var ret Concurrency
		return ret
	}
	return *o.Concurrency
}

// GetConcurrencyOk returns a tuple with the Concurrency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowWithSource) GetConcurrencyOk() (*Concurrency, bool) {
	if o == nil || IsNil(o.Concurrency) {
		return nil, false
	}
	return o.Concurrency, true
}

// HasConcurrency returns a boolean if a field has been set.
func (o *FlowWithSource) HasConcurrency() bool {
	if o != nil && !IsNil(o.Concurrency) {
		return true
	}

	return false
}

// SetConcurrency gets a reference to the given Concurrency and assigns it to the Concurrency field.
func (o *FlowWithSource) SetConcurrency(v Concurrency) {
	o.Concurrency = &v
}

// GetRetry returns the Retry field value if set, zero value otherwise.
func (o *FlowWithSource) GetRetry() map[string]interface{} {
	if o == nil || IsNil(o.Retry) {
		var ret map[string]interface{}
		return ret
	}
	return o.Retry
}

// GetRetryOk returns a tuple with the Retry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowWithSource) GetRetryOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Retry) {
		return map[string]interface{}{}, false
	}
	return o.Retry, true
}

// HasRetry returns a boolean if a field has been set.
func (o *FlowWithSource) HasRetry() bool {
	if o != nil && !IsNil(o.Retry) {
		return true
	}

	return false
}

// SetRetry gets a reference to the given map[string]interface{} and assigns it to the Retry field.
func (o *FlowWithSource) SetRetry(v map[string]interface{}) {
	o.Retry = v
}

// GetSla returns the Sla field value if set, zero value otherwise.
func (o *FlowWithSource) GetSla() []SLA {
	if o == nil || IsNil(o.Sla) {
		var ret []SLA
		return ret
	}
	return o.Sla
}

// GetSlaOk returns a tuple with the Sla field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowWithSource) GetSlaOk() ([]SLA, bool) {
	if o == nil || IsNil(o.Sla) {
		return nil, false
	}
	return o.Sla, true
}

// HasSla returns a boolean if a field has been set.
func (o *FlowWithSource) HasSla() bool {
	if o != nil && !IsNil(o.Sla) {
		return true
	}

	return false
}

// SetSla gets a reference to the given []SLA and assigns it to the Sla field.
func (o *FlowWithSource) SetSla(v []SLA) {
	o.Sla = v
}

func (o FlowWithSource) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FlowWithSource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["namespace"] = o.Namespace
	if !IsNil(o.Revision) {
		toSerialize["revision"] = o.Revision
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Inputs) {
		toSerialize["inputs"] = o.Inputs
	}
	if !IsNil(o.Outputs) {
		toSerialize["outputs"] = o.Outputs
	}
	toSerialize["disabled"] = o.Disabled
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	if !IsNil(o.Variables) {
		toSerialize["variables"] = o.Variables
	}
	if !IsNil(o.WorkerGroup) {
		toSerialize["workerGroup"] = o.WorkerGroup
	}
	toSerialize["deleted"] = o.Deleted
	if !IsNil(o.Finally) {
		toSerialize["finally"] = o.Finally
	}
	if !IsNil(o.TaskDefaults) {
		toSerialize["taskDefaults"] = o.TaskDefaults
	}
	toSerialize["tasks"] = o.Tasks
	if !IsNil(o.Errors) {
		toSerialize["errors"] = o.Errors
	}
	if !IsNil(o.Listeners) {
		toSerialize["listeners"] = o.Listeners
	}
	if !IsNil(o.AfterExecution) {
		toSerialize["afterExecution"] = o.AfterExecution
	}
	if !IsNil(o.Triggers) {
		toSerialize["triggers"] = o.Triggers
	}
	if !IsNil(o.PluginDefaults) {
		toSerialize["pluginDefaults"] = o.PluginDefaults
	}
	if !IsNil(o.Concurrency) {
		toSerialize["concurrency"] = o.Concurrency
	}
	if !IsNil(o.Retry) {
		toSerialize["retry"] = o.Retry
	}
	if !IsNil(o.Sla) {
		toSerialize["sla"] = o.Sla
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FlowWithSource) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"namespace",
		"disabled",
		"deleted",
		"tasks",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFlowWithSource := _FlowWithSource{}

	err = json.Unmarshal(data, &varFlowWithSource)

	if err != nil {
		return err
	}

	*o = FlowWithSource(varFlowWithSource)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "namespace")
		delete(additionalProperties, "revision")
		delete(additionalProperties, "description")
		delete(additionalProperties, "inputs")
		delete(additionalProperties, "outputs")
		delete(additionalProperties, "disabled")
		delete(additionalProperties, "labels")
		delete(additionalProperties, "variables")
		delete(additionalProperties, "workerGroup")
		delete(additionalProperties, "deleted")
		delete(additionalProperties, "finally")
		delete(additionalProperties, "taskDefaults")
		delete(additionalProperties, "tasks")
		delete(additionalProperties, "errors")
		delete(additionalProperties, "listeners")
		delete(additionalProperties, "afterExecution")
		delete(additionalProperties, "triggers")
		delete(additionalProperties, "pluginDefaults")
		delete(additionalProperties, "concurrency")
		delete(additionalProperties, "retry")
		delete(additionalProperties, "sla")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFlowWithSource struct {
	value *FlowWithSource
	isSet bool
}

func (v NullableFlowWithSource) Get() *FlowWithSource {
	return v.value
}

func (v *NullableFlowWithSource) Set(val *FlowWithSource) {
	v.value = val
	v.isSet = true
}

func (v NullableFlowWithSource) IsSet() bool {
	return v.isSet
}

func (v *NullableFlowWithSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFlowWithSource(val *FlowWithSource) *NullableFlowWithSource {
	return &NullableFlowWithSource{value: val, isSet: true}
}

func (v NullableFlowWithSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFlowWithSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
