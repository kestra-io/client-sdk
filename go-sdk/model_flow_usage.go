/*
Kestra EE

All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
)

// checks if the FlowUsage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FlowUsage{}

// FlowUsage struct for FlowUsage
type FlowUsage struct {
	Count               *int32            `json:"count,omitempty"`
	NamespacesCount     *int64            `json:"namespacesCount,omitempty"`
	TaskTypeCount       *map[string]int64 `json:"taskTypeCount,omitempty"`
	TriggerTypeCount    *map[string]int64 `json:"triggerTypeCount,omitempty"`
	TaskRunnerTypeCount *map[string]int64 `json:"taskRunnerTypeCount,omitempty"`
}

// NewFlowUsage instantiates a new FlowUsage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFlowUsage() *FlowUsage {
	this := FlowUsage{}
	return &this
}

// NewFlowUsageWithDefaults instantiates a new FlowUsage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFlowUsageWithDefaults() *FlowUsage {
	this := FlowUsage{}
	return &this
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *FlowUsage) GetCount() int32 {
	if o == nil || IsNil(o.Count) {
		var ret int32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowUsage) GetCountOk() (*int32, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *FlowUsage) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int32 and assigns it to the Count field.
func (o *FlowUsage) SetCount(v int32) {
	o.Count = &v
}

// GetNamespacesCount returns the NamespacesCount field value if set, zero value otherwise.
func (o *FlowUsage) GetNamespacesCount() int64 {
	if o == nil || IsNil(o.NamespacesCount) {
		var ret int64
		return ret
	}
	return *o.NamespacesCount
}

// GetNamespacesCountOk returns a tuple with the NamespacesCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowUsage) GetNamespacesCountOk() (*int64, bool) {
	if o == nil || IsNil(o.NamespacesCount) {
		return nil, false
	}
	return o.NamespacesCount, true
}

// HasNamespacesCount returns a boolean if a field has been set.
func (o *FlowUsage) HasNamespacesCount() bool {
	if o != nil && !IsNil(o.NamespacesCount) {
		return true
	}

	return false
}

// SetNamespacesCount gets a reference to the given int64 and assigns it to the NamespacesCount field.
func (o *FlowUsage) SetNamespacesCount(v int64) {
	o.NamespacesCount = &v
}

// GetTaskTypeCount returns the TaskTypeCount field value if set, zero value otherwise.
func (o *FlowUsage) GetTaskTypeCount() map[string]int64 {
	if o == nil || IsNil(o.TaskTypeCount) {
		var ret map[string]int64
		return ret
	}
	return *o.TaskTypeCount
}

// GetTaskTypeCountOk returns a tuple with the TaskTypeCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowUsage) GetTaskTypeCountOk() (*map[string]int64, bool) {
	if o == nil || IsNil(o.TaskTypeCount) {
		return nil, false
	}
	return o.TaskTypeCount, true
}

// HasTaskTypeCount returns a boolean if a field has been set.
func (o *FlowUsage) HasTaskTypeCount() bool {
	if o != nil && !IsNil(o.TaskTypeCount) {
		return true
	}

	return false
}

// SetTaskTypeCount gets a reference to the given map[string]int64 and assigns it to the TaskTypeCount field.
func (o *FlowUsage) SetTaskTypeCount(v map[string]int64) {
	o.TaskTypeCount = &v
}

// GetTriggerTypeCount returns the TriggerTypeCount field value if set, zero value otherwise.
func (o *FlowUsage) GetTriggerTypeCount() map[string]int64 {
	if o == nil || IsNil(o.TriggerTypeCount) {
		var ret map[string]int64
		return ret
	}
	return *o.TriggerTypeCount
}

// GetTriggerTypeCountOk returns a tuple with the TriggerTypeCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowUsage) GetTriggerTypeCountOk() (*map[string]int64, bool) {
	if o == nil || IsNil(o.TriggerTypeCount) {
		return nil, false
	}
	return o.TriggerTypeCount, true
}

// HasTriggerTypeCount returns a boolean if a field has been set.
func (o *FlowUsage) HasTriggerTypeCount() bool {
	if o != nil && !IsNil(o.TriggerTypeCount) {
		return true
	}

	return false
}

// SetTriggerTypeCount gets a reference to the given map[string]int64 and assigns it to the TriggerTypeCount field.
func (o *FlowUsage) SetTriggerTypeCount(v map[string]int64) {
	o.TriggerTypeCount = &v
}

// GetTaskRunnerTypeCount returns the TaskRunnerTypeCount field value if set, zero value otherwise.
func (o *FlowUsage) GetTaskRunnerTypeCount() map[string]int64 {
	if o == nil || IsNil(o.TaskRunnerTypeCount) {
		var ret map[string]int64
		return ret
	}
	return *o.TaskRunnerTypeCount
}

// GetTaskRunnerTypeCountOk returns a tuple with the TaskRunnerTypeCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowUsage) GetTaskRunnerTypeCountOk() (*map[string]int64, bool) {
	if o == nil || IsNil(o.TaskRunnerTypeCount) {
		return nil, false
	}
	return o.TaskRunnerTypeCount, true
}

// HasTaskRunnerTypeCount returns a boolean if a field has been set.
func (o *FlowUsage) HasTaskRunnerTypeCount() bool {
	if o != nil && !IsNil(o.TaskRunnerTypeCount) {
		return true
	}

	return false
}

// SetTaskRunnerTypeCount gets a reference to the given map[string]int64 and assigns it to the TaskRunnerTypeCount field.
func (o *FlowUsage) SetTaskRunnerTypeCount(v map[string]int64) {
	o.TaskRunnerTypeCount = &v
}

func (o FlowUsage) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FlowUsage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	if !IsNil(o.NamespacesCount) {
		toSerialize["namespacesCount"] = o.NamespacesCount
	}
	if !IsNil(o.TaskTypeCount) {
		toSerialize["taskTypeCount"] = o.TaskTypeCount
	}
	if !IsNil(o.TriggerTypeCount) {
		toSerialize["triggerTypeCount"] = o.TriggerTypeCount
	}
	if !IsNil(o.TaskRunnerTypeCount) {
		toSerialize["taskRunnerTypeCount"] = o.TaskRunnerTypeCount
	}
	return toSerialize, nil
}

type NullableFlowUsage struct {
	value *FlowUsage
	isSet bool
}

func (v NullableFlowUsage) Get() *FlowUsage {
	return v.value
}

func (v *NullableFlowUsage) Set(val *FlowUsage) {
	v.value = val
	v.isSet = true
}

func (v NullableFlowUsage) IsSet() bool {
	return v.isSet
}

func (v *NullableFlowUsage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFlowUsage(val *FlowUsage) *NullableFlowUsage {
	return &NullableFlowUsage{value: val, isSet: true}
}

func (v NullableFlowUsage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFlowUsage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
