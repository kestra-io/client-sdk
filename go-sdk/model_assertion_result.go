/*
Kestra EE

All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the AssertionResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AssertionResult{}

// AssertionResult struct for AssertionResult
type AssertionResult struct {
	Operator     string                 `json:"operator"`
	Expected     map[string]interface{} `json:"expected"`
	Actual       map[string]interface{} `json:"actual"`
	IsSuccess    bool                   `json:"isSuccess"`
	TaskId       *string                `json:"taskId,omitempty"`
	Description  *string                `json:"description,omitempty"`
	ErrorMessage *string                `json:"errorMessage,omitempty"`
}

type _AssertionResult AssertionResult

// NewAssertionResult instantiates a new AssertionResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssertionResult(operator string, expected map[string]interface{}, actual map[string]interface{}, isSuccess bool) *AssertionResult {
	this := AssertionResult{}
	this.Operator = operator
	this.Expected = expected
	this.Actual = actual
	this.IsSuccess = isSuccess
	return &this
}

// NewAssertionResultWithDefaults instantiates a new AssertionResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssertionResultWithDefaults() *AssertionResult {
	this := AssertionResult{}
	return &this
}

// GetOperator returns the Operator field value
func (o *AssertionResult) GetOperator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Operator
}

// GetOperatorOk returns a tuple with the Operator field value
// and a boolean to check if the value has been set.
func (o *AssertionResult) GetOperatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Operator, true
}

// SetOperator sets field value
func (o *AssertionResult) SetOperator(v string) {
	o.Operator = v
}

// GetExpected returns the Expected field value
func (o *AssertionResult) GetExpected() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Expected
}

// GetExpectedOk returns a tuple with the Expected field value
// and a boolean to check if the value has been set.
func (o *AssertionResult) GetExpectedOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Expected, true
}

// SetExpected sets field value
func (o *AssertionResult) SetExpected(v map[string]interface{}) {
	o.Expected = v
}

// GetActual returns the Actual field value
func (o *AssertionResult) GetActual() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Actual
}

// GetActualOk returns a tuple with the Actual field value
// and a boolean to check if the value has been set.
func (o *AssertionResult) GetActualOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Actual, true
}

// SetActual sets field value
func (o *AssertionResult) SetActual(v map[string]interface{}) {
	o.Actual = v
}

// GetIsSuccess returns the IsSuccess field value
func (o *AssertionResult) GetIsSuccess() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsSuccess
}

// GetIsSuccessOk returns a tuple with the IsSuccess field value
// and a boolean to check if the value has been set.
func (o *AssertionResult) GetIsSuccessOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsSuccess, true
}

// SetIsSuccess sets field value
func (o *AssertionResult) SetIsSuccess(v bool) {
	o.IsSuccess = v
}

// GetTaskId returns the TaskId field value if set, zero value otherwise.
func (o *AssertionResult) GetTaskId() string {
	if o == nil || IsNil(o.TaskId) {
		var ret string
		return ret
	}
	return *o.TaskId
}

// GetTaskIdOk returns a tuple with the TaskId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssertionResult) GetTaskIdOk() (*string, bool) {
	if o == nil || IsNil(o.TaskId) {
		return nil, false
	}
	return o.TaskId, true
}

// HasTaskId returns a boolean if a field has been set.
func (o *AssertionResult) HasTaskId() bool {
	if o != nil && !IsNil(o.TaskId) {
		return true
	}

	return false
}

// SetTaskId gets a reference to the given string and assigns it to the TaskId field.
func (o *AssertionResult) SetTaskId(v string) {
	o.TaskId = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AssertionResult) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssertionResult) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AssertionResult) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AssertionResult) SetDescription(v string) {
	o.Description = &v
}

// GetErrorMessage returns the ErrorMessage field value if set, zero value otherwise.
func (o *AssertionResult) GetErrorMessage() string {
	if o == nil || IsNil(o.ErrorMessage) {
		var ret string
		return ret
	}
	return *o.ErrorMessage
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssertionResult) GetErrorMessageOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorMessage) {
		return nil, false
	}
	return o.ErrorMessage, true
}

// HasErrorMessage returns a boolean if a field has been set.
func (o *AssertionResult) HasErrorMessage() bool {
	if o != nil && !IsNil(o.ErrorMessage) {
		return true
	}

	return false
}

// SetErrorMessage gets a reference to the given string and assigns it to the ErrorMessage field.
func (o *AssertionResult) SetErrorMessage(v string) {
	o.ErrorMessage = &v
}

func (o AssertionResult) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AssertionResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["operator"] = o.Operator
	toSerialize["expected"] = o.Expected
	toSerialize["actual"] = o.Actual
	toSerialize["isSuccess"] = o.IsSuccess
	if !IsNil(o.TaskId) {
		toSerialize["taskId"] = o.TaskId
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.ErrorMessage) {
		toSerialize["errorMessage"] = o.ErrorMessage
	}
	return toSerialize, nil
}

func (o *AssertionResult) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"operator",
		"expected",
		"actual",
		"isSuccess",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAssertionResult := _AssertionResult{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAssertionResult)

	if err != nil {
		return err
	}

	*o = AssertionResult(varAssertionResult)

	return err
}

type NullableAssertionResult struct {
	value *AssertionResult
	isSet bool
}

func (v NullableAssertionResult) Get() *AssertionResult {
	return v.value
}

func (v *NullableAssertionResult) Set(val *AssertionResult) {
	v.value = val
	v.isSet = true
}

func (v NullableAssertionResult) IsSet() bool {
	return v.isSet
}

func (v *NullableAssertionResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssertionResult(val *AssertionResult) *NullableAssertionResult {
	return &NullableAssertionResult{value: val, isSet: true}
}

func (v NullableAssertionResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssertionResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
