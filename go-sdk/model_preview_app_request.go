/*
Kestra EE

All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
)

// checks if the PreviewAppRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PreviewAppRequest{}

// PreviewAppRequest struct for PreviewAppRequest
type PreviewAppRequest struct {
	Parameters *HttpParameters `json:"parameters,omitempty"`
}

// NewPreviewAppRequest instantiates a new PreviewAppRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPreviewAppRequest() *PreviewAppRequest {
	this := PreviewAppRequest{}
	return &this
}

// NewPreviewAppRequestWithDefaults instantiates a new PreviewAppRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPreviewAppRequestWithDefaults() *PreviewAppRequest {
	this := PreviewAppRequest{}
	return &this
}

// GetParameters returns the Parameters field value if set, zero value otherwise.
func (o *PreviewAppRequest) GetParameters() HttpParameters {
	if o == nil || IsNil(o.Parameters) {
		var ret HttpParameters
		return ret
	}
	return *o.Parameters
}

// GetParametersOk returns a tuple with the Parameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PreviewAppRequest) GetParametersOk() (*HttpParameters, bool) {
	if o == nil || IsNil(o.Parameters) {
		return nil, false
	}
	return o.Parameters, true
}

// HasParameters returns a boolean if a field has been set.
func (o *PreviewAppRequest) HasParameters() bool {
	if o != nil && !IsNil(o.Parameters) {
		return true
	}

	return false
}

// SetParameters gets a reference to the given HttpParameters and assigns it to the Parameters field.
func (o *PreviewAppRequest) SetParameters(v HttpParameters) {
	o.Parameters = &v
}

func (o PreviewAppRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PreviewAppRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Parameters) {
		toSerialize["parameters"] = o.Parameters
	}
	return toSerialize, nil
}

type NullablePreviewAppRequest struct {
	value *PreviewAppRequest
	isSet bool
}

func (v NullablePreviewAppRequest) Get() *PreviewAppRequest {
	return v.value
}

func (v *NullablePreviewAppRequest) Set(val *PreviewAppRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePreviewAppRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePreviewAppRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePreviewAppRequest(val *PreviewAppRequest) *NullablePreviewAppRequest {
	return &NullablePreviewAppRequest{value: val, isSet: true}
}

func (v NullablePreviewAppRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePreviewAppRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
