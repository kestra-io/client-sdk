/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
)

// checks if the AbstractBindingControllerApiCreateBindingRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AbstractBindingControllerApiCreateBindingRequest{}

// AbstractBindingControllerApiCreateBindingRequest struct for AbstractBindingControllerApiCreateBindingRequest
type AbstractBindingControllerApiCreateBindingRequest struct {
	Type                 BindingType `json:"type"`
	ExternalId           string      `json:"externalId"`
	RoleId               string      `json:"roleId"`
	NamespaceId          string      `json:"namespaceId"`
	AdditionalProperties map[string]interface{}
}

type _AbstractBindingControllerApiCreateBindingRequest AbstractBindingControllerApiCreateBindingRequest

// NewAbstractBindingControllerApiCreateBindingRequest instantiates a new AbstractBindingControllerApiCreateBindingRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAbstractBindingControllerApiCreateBindingRequest(type_ BindingType, externalId string, roleId string, namespaceId string) *AbstractBindingControllerApiCreateBindingRequest {
	this := AbstractBindingControllerApiCreateBindingRequest{}
	this.Type = type_
	this.ExternalId = externalId
	this.RoleId = roleId
	this.NamespaceId = namespaceId
	return &this
}

// NewAbstractBindingControllerApiCreateBindingRequestWithDefaults instantiates a new AbstractBindingControllerApiCreateBindingRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAbstractBindingControllerApiCreateBindingRequestWithDefaults() *AbstractBindingControllerApiCreateBindingRequest {
	this := AbstractBindingControllerApiCreateBindingRequest{}
	return &this
}

// GetType returns the Type field value
func (o *AbstractBindingControllerApiCreateBindingRequest) GetType() BindingType {
	if o == nil {
		var ret BindingType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *AbstractBindingControllerApiCreateBindingRequest) GetTypeOk() (*BindingType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *AbstractBindingControllerApiCreateBindingRequest) SetType(v BindingType) {
	o.Type = v
}

// GetExternalId returns the ExternalId field value
func (o *AbstractBindingControllerApiCreateBindingRequest) GetExternalId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExternalId
}

// GetExternalIdOk returns a tuple with the ExternalId field value
// and a boolean to check if the value has been set.
func (o *AbstractBindingControllerApiCreateBindingRequest) GetExternalIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExternalId, true
}

// SetExternalId sets field value
func (o *AbstractBindingControllerApiCreateBindingRequest) SetExternalId(v string) {
	o.ExternalId = v
}

// GetRoleId returns the RoleId field value
func (o *AbstractBindingControllerApiCreateBindingRequest) GetRoleId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RoleId
}

// GetRoleIdOk returns a tuple with the RoleId field value
// and a boolean to check if the value has been set.
func (o *AbstractBindingControllerApiCreateBindingRequest) GetRoleIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RoleId, true
}

// SetRoleId sets field value
func (o *AbstractBindingControllerApiCreateBindingRequest) SetRoleId(v string) {
	o.RoleId = v
}

// GetNamespaceId returns the NamespaceId field value
func (o *AbstractBindingControllerApiCreateBindingRequest) GetNamespaceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NamespaceId
}

// GetNamespaceIdOk returns a tuple with the NamespaceId field value
// and a boolean to check if the value has been set.
func (o *AbstractBindingControllerApiCreateBindingRequest) GetNamespaceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NamespaceId, true
}

// SetNamespaceId sets field value
func (o *AbstractBindingControllerApiCreateBindingRequest) SetNamespaceId(v string) {
	o.NamespaceId = v
}

func (o AbstractBindingControllerApiCreateBindingRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AbstractBindingControllerApiCreateBindingRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["externalId"] = o.ExternalId
	toSerialize["roleId"] = o.RoleId
	toSerialize["namespaceId"] = o.NamespaceId

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AbstractBindingControllerApiCreateBindingRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"externalId",
		"roleId",
		"namespaceId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAbstractBindingControllerApiCreateBindingRequest := _AbstractBindingControllerApiCreateBindingRequest{}

	err = json.Unmarshal(data, &varAbstractBindingControllerApiCreateBindingRequest)

	if err != nil {
		return err
	}

	*o = AbstractBindingControllerApiCreateBindingRequest(varAbstractBindingControllerApiCreateBindingRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "externalId")
		delete(additionalProperties, "roleId")
		delete(additionalProperties, "namespaceId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAbstractBindingControllerApiCreateBindingRequest struct {
	value *AbstractBindingControllerApiCreateBindingRequest
	isSet bool
}

func (v NullableAbstractBindingControllerApiCreateBindingRequest) Get() *AbstractBindingControllerApiCreateBindingRequest {
	return v.value
}

func (v *NullableAbstractBindingControllerApiCreateBindingRequest) Set(val *AbstractBindingControllerApiCreateBindingRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAbstractBindingControllerApiCreateBindingRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAbstractBindingControllerApiCreateBindingRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAbstractBindingControllerApiCreateBindingRequest(val *AbstractBindingControllerApiCreateBindingRequest) *NullableAbstractBindingControllerApiCreateBindingRequest {
	return &NullableAbstractBindingControllerApiCreateBindingRequest{value: val, isSet: true}
}

func (v NullableAbstractBindingControllerApiCreateBindingRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAbstractBindingControllerApiCreateBindingRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
