/*
Kestra EE

All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// UpdateFlow200Response - struct for UpdateFlow200Response
type UpdateFlow200Response struct {
	Flow           *Flow
	FlowWithSource *FlowWithSource
}

// FlowAsUpdateFlow200Response is a convenience function that returns Flow wrapped in UpdateFlow200Response
func FlowAsUpdateFlow200Response(v *Flow) UpdateFlow200Response {
	return UpdateFlow200Response{
		Flow: v,
	}
}

// FlowWithSourceAsUpdateFlow200Response is a convenience function that returns FlowWithSource wrapped in UpdateFlow200Response
func FlowWithSourceAsUpdateFlow200Response(v *FlowWithSource) UpdateFlow200Response {
	return UpdateFlow200Response{
		FlowWithSource: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *UpdateFlow200Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Flow
	err = newStrictDecoder(data).Decode(&dst.Flow)
	if err == nil {
		jsonFlow, _ := json.Marshal(dst.Flow)
		if string(jsonFlow) == "{}" { // empty struct
			dst.Flow = nil
		} else {
			if err = validator.Validate(dst.Flow); err != nil {
				dst.Flow = nil
			} else {
				match++
			}
		}
	} else {
		dst.Flow = nil
	}

	// try to unmarshal data into FlowWithSource
	err = newStrictDecoder(data).Decode(&dst.FlowWithSource)
	if err == nil {
		jsonFlowWithSource, _ := json.Marshal(dst.FlowWithSource)
		if string(jsonFlowWithSource) == "{}" { // empty struct
			dst.FlowWithSource = nil
		} else {
			if err = validator.Validate(dst.FlowWithSource); err != nil {
				dst.FlowWithSource = nil
			} else {
				match++
			}
		}
	} else {
		dst.FlowWithSource = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Flow = nil
		dst.FlowWithSource = nil

		return fmt.Errorf("data matches more than one schema in oneOf(UpdateFlow200Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(UpdateFlow200Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src UpdateFlow200Response) MarshalJSON() ([]byte, error) {
	if src.Flow != nil {
		return json.Marshal(&src.Flow)
	}

	if src.FlowWithSource != nil {
		return json.Marshal(&src.FlowWithSource)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *UpdateFlow200Response) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.Flow != nil {
		return obj.Flow
	}

	if obj.FlowWithSource != nil {
		return obj.FlowWithSource
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj UpdateFlow200Response) GetActualInstanceValue() interface{} {
	if obj.Flow != nil {
		return *obj.Flow
	}

	if obj.FlowWithSource != nil {
		return *obj.FlowWithSource
	}

	// all schemas are nil
	return nil
}

type NullableUpdateFlow200Response struct {
	value *UpdateFlow200Response
	isSet bool
}

func (v NullableUpdateFlow200Response) Get() *UpdateFlow200Response {
	return v.value
}

func (v *NullableUpdateFlow200Response) Set(val *UpdateFlow200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateFlow200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateFlow200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateFlow200Response(val *UpdateFlow200Response) *NullableUpdateFlow200Response {
	return &NullableUpdateFlow200Response{value: val, isSet: true}
}

func (v NullableUpdateFlow200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateFlow200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
