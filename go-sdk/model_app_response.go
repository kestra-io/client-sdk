/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
)

// checks if the AppResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AppResponse{}

// AppResponse struct for AppResponse
type AppResponse struct {
	Dispatch             string              `json:"dispatch"`
	Stream               string              `json:"stream"`
	Layout               AppResponseUILayout `json:"layout"`
	AdditionalProperties map[string]interface{}
}

type _AppResponse AppResponse

// NewAppResponse instantiates a new AppResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppResponse(dispatch string, stream string, layout AppResponseUILayout) *AppResponse {
	this := AppResponse{}
	this.Dispatch = dispatch
	this.Stream = stream
	this.Layout = layout
	return &this
}

// NewAppResponseWithDefaults instantiates a new AppResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppResponseWithDefaults() *AppResponse {
	this := AppResponse{}
	return &this
}

// GetDispatch returns the Dispatch field value
func (o *AppResponse) GetDispatch() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Dispatch
}

// GetDispatchOk returns a tuple with the Dispatch field value
// and a boolean to check if the value has been set.
func (o *AppResponse) GetDispatchOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Dispatch, true
}

// SetDispatch sets field value
func (o *AppResponse) SetDispatch(v string) {
	o.Dispatch = v
}

// GetStream returns the Stream field value
func (o *AppResponse) GetStream() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Stream
}

// GetStreamOk returns a tuple with the Stream field value
// and a boolean to check if the value has been set.
func (o *AppResponse) GetStreamOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Stream, true
}

// SetStream sets field value
func (o *AppResponse) SetStream(v string) {
	o.Stream = v
}

// GetLayout returns the Layout field value
func (o *AppResponse) GetLayout() AppResponseUILayout {
	if o == nil {
		var ret AppResponseUILayout
		return ret
	}

	return o.Layout
}

// GetLayoutOk returns a tuple with the Layout field value
// and a boolean to check if the value has been set.
func (o *AppResponse) GetLayoutOk() (*AppResponseUILayout, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Layout, true
}

// SetLayout sets field value
func (o *AppResponse) SetLayout(v AppResponseUILayout) {
	o.Layout = v
}

func (o AppResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AppResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dispatch"] = o.Dispatch
	toSerialize["stream"] = o.Stream
	toSerialize["layout"] = o.Layout

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AppResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dispatch",
		"stream",
		"layout",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAppResponse := _AppResponse{}

	err = json.Unmarshal(data, &varAppResponse)

	if err != nil {
		return err
	}

	*o = AppResponse(varAppResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "dispatch")
		delete(additionalProperties, "stream")
		delete(additionalProperties, "layout")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAppResponse struct {
	value *AppResponse
	isSet bool
}

func (v NullableAppResponse) Get() *AppResponse {
	return v.value
}

func (v *NullableAppResponse) Set(val *AppResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableAppResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableAppResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppResponse(val *AppResponse) *NullableAppResponse {
	return &NullableAppResponse{value: val, isSet: true}
}

func (v NullableAppResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
