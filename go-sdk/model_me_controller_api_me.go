/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
)

// checks if the MeControllerApiMe type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MeControllerApiMe{}

// MeControllerApiMe struct for MeControllerApiMe
type MeControllerApiMe struct {
	Id                   string                                       `json:"id"`
	SuperAdmin           bool                                         `json:"superAdmin"`
	Restricted           bool                                         `json:"restricted"`
	Profile              MeControllerApiProfile                       `json:"profile"`
	Auths                []IAMTenantAccessControllerApiAuthentication `json:"auths"`
	Tenants              []MeControllerApiTenant                      `json:"tenants"`
	AdditionalProperties map[string]interface{}
}

type _MeControllerApiMe MeControllerApiMe

// NewMeControllerApiMe instantiates a new MeControllerApiMe object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMeControllerApiMe(id string, superAdmin bool, restricted bool, profile MeControllerApiProfile, auths []IAMTenantAccessControllerApiAuthentication, tenants []MeControllerApiTenant) *MeControllerApiMe {
	this := MeControllerApiMe{}
	this.Id = id
	this.SuperAdmin = superAdmin
	this.Restricted = restricted
	this.Profile = profile
	this.Auths = auths
	this.Tenants = tenants
	return &this
}

// NewMeControllerApiMeWithDefaults instantiates a new MeControllerApiMe object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMeControllerApiMeWithDefaults() *MeControllerApiMe {
	this := MeControllerApiMe{}
	return &this
}

// GetId returns the Id field value
func (o *MeControllerApiMe) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *MeControllerApiMe) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *MeControllerApiMe) SetId(v string) {
	o.Id = v
}

// GetSuperAdmin returns the SuperAdmin field value
func (o *MeControllerApiMe) GetSuperAdmin() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.SuperAdmin
}

// GetSuperAdminOk returns a tuple with the SuperAdmin field value
// and a boolean to check if the value has been set.
func (o *MeControllerApiMe) GetSuperAdminOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SuperAdmin, true
}

// SetSuperAdmin sets field value
func (o *MeControllerApiMe) SetSuperAdmin(v bool) {
	o.SuperAdmin = v
}

// GetRestricted returns the Restricted field value
func (o *MeControllerApiMe) GetRestricted() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Restricted
}

// GetRestrictedOk returns a tuple with the Restricted field value
// and a boolean to check if the value has been set.
func (o *MeControllerApiMe) GetRestrictedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Restricted, true
}

// SetRestricted sets field value
func (o *MeControllerApiMe) SetRestricted(v bool) {
	o.Restricted = v
}

// GetProfile returns the Profile field value
func (o *MeControllerApiMe) GetProfile() MeControllerApiProfile {
	if o == nil {
		var ret MeControllerApiProfile
		return ret
	}

	return o.Profile
}

// GetProfileOk returns a tuple with the Profile field value
// and a boolean to check if the value has been set.
func (o *MeControllerApiMe) GetProfileOk() (*MeControllerApiProfile, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Profile, true
}

// SetProfile sets field value
func (o *MeControllerApiMe) SetProfile(v MeControllerApiProfile) {
	o.Profile = v
}

// GetAuths returns the Auths field value
func (o *MeControllerApiMe) GetAuths() []IAMTenantAccessControllerApiAuthentication {
	if o == nil {
		var ret []IAMTenantAccessControllerApiAuthentication
		return ret
	}

	return o.Auths
}

// GetAuthsOk returns a tuple with the Auths field value
// and a boolean to check if the value has been set.
func (o *MeControllerApiMe) GetAuthsOk() ([]IAMTenantAccessControllerApiAuthentication, bool) {
	if o == nil {
		return nil, false
	}
	return o.Auths, true
}

// SetAuths sets field value
func (o *MeControllerApiMe) SetAuths(v []IAMTenantAccessControllerApiAuthentication) {
	o.Auths = v
}

// GetTenants returns the Tenants field value
func (o *MeControllerApiMe) GetTenants() []MeControllerApiTenant {
	if o == nil {
		var ret []MeControllerApiTenant
		return ret
	}

	return o.Tenants
}

// GetTenantsOk returns a tuple with the Tenants field value
// and a boolean to check if the value has been set.
func (o *MeControllerApiMe) GetTenantsOk() ([]MeControllerApiTenant, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tenants, true
}

// SetTenants sets field value
func (o *MeControllerApiMe) SetTenants(v []MeControllerApiTenant) {
	o.Tenants = v
}

func (o MeControllerApiMe) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MeControllerApiMe) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["superAdmin"] = o.SuperAdmin
	toSerialize["restricted"] = o.Restricted
	toSerialize["profile"] = o.Profile
	toSerialize["auths"] = o.Auths
	toSerialize["tenants"] = o.Tenants

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MeControllerApiMe) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"superAdmin",
		"restricted",
		"profile",
		"auths",
		"tenants",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMeControllerApiMe := _MeControllerApiMe{}

	err = json.Unmarshal(data, &varMeControllerApiMe)

	if err != nil {
		return err
	}

	*o = MeControllerApiMe(varMeControllerApiMe)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "superAdmin")
		delete(additionalProperties, "restricted")
		delete(additionalProperties, "profile")
		delete(additionalProperties, "auths")
		delete(additionalProperties, "tenants")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMeControllerApiMe struct {
	value *MeControllerApiMe
	isSet bool
}

func (v NullableMeControllerApiMe) Get() *MeControllerApiMe {
	return v.value
}

func (v *NullableMeControllerApiMe) Set(val *MeControllerApiMe) {
	v.value = val
	v.isSet = true
}

func (v NullableMeControllerApiMe) IsSet() bool {
	return v.isSet
}

func (v *NullableMeControllerApiMe) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMeControllerApiMe(val *MeControllerApiMe) *NullableMeControllerApiMe {
	return &NullableMeControllerApiMe{value: val, isSet: true}
}

func (v NullableMeControllerApiMe) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMeControllerApiMe) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
