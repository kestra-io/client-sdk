/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
)

// checks if the AuditLogDetail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuditLogDetail{}

// AuditLogDetail struct for AuditLogDetail
type AuditLogDetail struct {
	Permission           *Permission    `json:"permission,omitempty"`
	ResourceType         *ResourceType1 `json:"resourceType,omitempty"`
	Type                 string         `json:"type"`
	Id                   *string        `json:"id,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AuditLogDetail AuditLogDetail

// NewAuditLogDetail instantiates a new AuditLogDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuditLogDetail(type_ string) *AuditLogDetail {
	this := AuditLogDetail{}
	this.Type = type_
	return &this
}

// NewAuditLogDetailWithDefaults instantiates a new AuditLogDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuditLogDetailWithDefaults() *AuditLogDetail {
	this := AuditLogDetail{}
	return &this
}

// GetPermission returns the Permission field value if set, zero value otherwise.
func (o *AuditLogDetail) GetPermission() Permission {
	if o == nil || IsNil(o.Permission) {
		var ret Permission
		return ret
	}
	return *o.Permission
}

// GetPermissionOk returns a tuple with the Permission field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLogDetail) GetPermissionOk() (*Permission, bool) {
	if o == nil || IsNil(o.Permission) {
		return nil, false
	}
	return o.Permission, true
}

// HasPermission returns a boolean if a field has been set.
func (o *AuditLogDetail) HasPermission() bool {
	if o != nil && !IsNil(o.Permission) {
		return true
	}

	return false
}

// SetPermission gets a reference to the given Permission and assigns it to the Permission field.
func (o *AuditLogDetail) SetPermission(v Permission) {
	o.Permission = &v
}

// GetResourceType returns the ResourceType field value if set, zero value otherwise.
func (o *AuditLogDetail) GetResourceType() ResourceType1 {
	if o == nil || IsNil(o.ResourceType) {
		var ret ResourceType1
		return ret
	}
	return *o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLogDetail) GetResourceTypeOk() (*ResourceType1, bool) {
	if o == nil || IsNil(o.ResourceType) {
		return nil, false
	}
	return o.ResourceType, true
}

// HasResourceType returns a boolean if a field has been set.
func (o *AuditLogDetail) HasResourceType() bool {
	if o != nil && !IsNil(o.ResourceType) {
		return true
	}

	return false
}

// SetResourceType gets a reference to the given ResourceType1 and assigns it to the ResourceType field.
func (o *AuditLogDetail) SetResourceType(v ResourceType1) {
	o.ResourceType = &v
}

// GetType returns the Type field value
func (o *AuditLogDetail) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *AuditLogDetail) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *AuditLogDetail) SetType(v string) {
	o.Type = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AuditLogDetail) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLogDetail) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AuditLogDetail) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AuditLogDetail) SetId(v string) {
	o.Id = &v
}

func (o AuditLogDetail) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuditLogDetail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Permission) {
		toSerialize["permission"] = o.Permission
	}
	if !IsNil(o.ResourceType) {
		toSerialize["resourceType"] = o.ResourceType
	}
	toSerialize["type"] = o.Type
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AuditLogDetail) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAuditLogDetail := _AuditLogDetail{}

	err = json.Unmarshal(data, &varAuditLogDetail)

	if err != nil {
		return err
	}

	*o = AuditLogDetail(varAuditLogDetail)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "permission")
		delete(additionalProperties, "resourceType")
		delete(additionalProperties, "type")
		delete(additionalProperties, "id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAuditLogDetail struct {
	value *AuditLogDetail
	isSet bool
}

func (v NullableAuditLogDetail) Get() *AuditLogDetail {
	return v.value
}

func (v *NullableAuditLogDetail) Set(val *AuditLogDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableAuditLogDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableAuditLogDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuditLogDetail(val *AuditLogDetail) *NullableAuditLogDetail {
	return &NullableAuditLogDetail{value: val, isSet: true}
}

func (v NullableAuditLogDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuditLogDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
