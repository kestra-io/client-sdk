/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
)

// checks if the Cache type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Cache{}

// Cache struct for Cache
type Cache struct {
	Enabled              bool    `json:"enabled"`
	Ttl                  *string `json:"ttl,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Cache Cache

// NewCache instantiates a new Cache object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCache(enabled bool) *Cache {
	this := Cache{}
	this.Enabled = enabled
	return &this
}

// NewCacheWithDefaults instantiates a new Cache object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCacheWithDefaults() *Cache {
	this := Cache{}
	return &this
}

// GetEnabled returns the Enabled field value
func (o *Cache) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *Cache) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *Cache) SetEnabled(v bool) {
	o.Enabled = v
}

// GetTtl returns the Ttl field value if set, zero value otherwise.
func (o *Cache) GetTtl() string {
	if o == nil || IsNil(o.Ttl) {
		var ret string
		return ret
	}
	return *o.Ttl
}

// GetTtlOk returns a tuple with the Ttl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cache) GetTtlOk() (*string, bool) {
	if o == nil || IsNil(o.Ttl) {
		return nil, false
	}
	return o.Ttl, true
}

// HasTtl returns a boolean if a field has been set.
func (o *Cache) HasTtl() bool {
	if o != nil && !IsNil(o.Ttl) {
		return true
	}

	return false
}

// SetTtl gets a reference to the given string and assigns it to the Ttl field.
func (o *Cache) SetTtl(v string) {
	o.Ttl = &v
}

func (o Cache) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Cache) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["enabled"] = o.Enabled
	if !IsNil(o.Ttl) {
		toSerialize["ttl"] = o.Ttl
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Cache) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"enabled",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCache := _Cache{}

	err = json.Unmarshal(data, &varCache)

	if err != nil {
		return err
	}

	*o = Cache(varCache)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "ttl")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCache struct {
	value *Cache
	isSet bool
}

func (v NullableCache) Get() *Cache {
	return v.value
}

func (v *NullableCache) Set(val *Cache) {
	v.value = val
	v.isSet = true
}

func (v NullableCache) IsSet() bool {
	return v.isSet
}

func (v *NullableCache) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCache(val *Cache) *NullableCache {
	return &NullableCache{value: val, isSet: true}
}

func (v NullableCache) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCache) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
