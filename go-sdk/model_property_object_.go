/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
)

// checks if the PropertyObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PropertyObject{}

// PropertyObject struct for PropertyObject
type PropertyObject struct {
	Expression           string                 `json:"expression"`
	Value                map[string]interface{} `json:"value,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PropertyObject PropertyObject

// NewPropertyObject instantiates a new PropertyObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPropertyObject(expression string) *PropertyObject {
	this := PropertyObject{}
	this.Expression = expression
	return &this
}

// NewPropertyObjectWithDefaults instantiates a new PropertyObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPropertyObjectWithDefaults() *PropertyObject {
	this := PropertyObject{}
	return &this
}

// GetExpression returns the Expression field value
func (o *PropertyObject) GetExpression() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Expression
}

// GetExpressionOk returns a tuple with the Expression field value
// and a boolean to check if the value has been set.
func (o *PropertyObject) GetExpressionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Expression, true
}

// SetExpression sets field value
func (o *PropertyObject) SetExpression(v string) {
	o.Expression = v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *PropertyObject) GetValue() map[string]interface{} {
	if o == nil || IsNil(o.Value) {
		var ret map[string]interface{}
		return ret
	}
	return o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertyObject) GetValueOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Value) {
		return map[string]interface{}{}, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *PropertyObject) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given map[string]interface{} and assigns it to the Value field.
func (o *PropertyObject) SetValue(v map[string]interface{}) {
	o.Value = v
}

func (o PropertyObject) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PropertyObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["expression"] = o.Expression
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PropertyObject) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"expression",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPropertyObject := _PropertyObject{}

	err = json.Unmarshal(data, &varPropertyObject)

	if err != nil {
		return err
	}

	*o = PropertyObject(varPropertyObject)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "expression")
		delete(additionalProperties, "value")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePropertyObject struct {
	value *PropertyObject
	isSet bool
}

func (v NullablePropertyObject) Get() *PropertyObject {
	return v.value
}

func (v *NullablePropertyObject) Set(val *PropertyObject) {
	v.value = val
	v.isSet = true
}

func (v NullablePropertyObject) IsSet() bool {
	return v.isSet
}

func (v *NullablePropertyObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePropertyObject(val *PropertyObject) *NullablePropertyObject {
	return &NullablePropertyObject{value: val, isSet: true}
}

func (v NullablePropertyObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePropertyObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
