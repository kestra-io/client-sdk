/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// SCIMUsersAPIService SCIMUsersAPI service
type SCIMUsersAPIService service

type ApiCreateSCIMResourceByIdUsersRequest struct {
	ctx                context.Context
	ApiService         *SCIMUsersAPIService
	integration        string
	tenant             string
	scimUser           *ScimUser
	attributes         *string
	excludedAttributes *string
}

func (r ApiCreateSCIMResourceByIdUsersRequest) ScimUser(scimUser ScimUser) ApiCreateSCIMResourceByIdUsersRequest {
	r.scimUser = &scimUser
	return r
}

func (r ApiCreateSCIMResourceByIdUsersRequest) Attributes(attributes string) ApiCreateSCIMResourceByIdUsersRequest {
	r.attributes = &attributes
	return r
}

func (r ApiCreateSCIMResourceByIdUsersRequest) ExcludedAttributes(excludedAttributes string) ApiCreateSCIMResourceByIdUsersRequest {
	r.excludedAttributes = &excludedAttributes
	return r
}

func (r ApiCreateSCIMResourceByIdUsersRequest) Execute() (*ScimResource, *http.Response, error) {
	return r.ApiService.CreateSCIMResourceByIdUsersExecute(r)
}

/*
CreateSCIMResourceByIdUsers Method for CreateSCIMResourceByIdUsers

Create

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param integration
	@param tenant
	@return ApiCreateSCIMResourceByIdUsersRequest
*/
func (a *SCIMUsersAPIService) CreateSCIMResourceByIdUsers(ctx context.Context, integration string, tenant string) ApiCreateSCIMResourceByIdUsersRequest {
	return ApiCreateSCIMResourceByIdUsersRequest{
		ApiService:  a,
		ctx:         ctx,
		integration: integration,
		tenant:      tenant,
	}
}

// Execute executes the request
//
//	@return ScimResource
func (a *SCIMUsersAPIService) CreateSCIMResourceByIdUsersExecute(r ApiCreateSCIMResourceByIdUsersRequest) (*ScimResource, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ScimResource
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SCIMUsersAPIService.CreateSCIMResourceByIdUsers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/{tenant}/integrations/{integration}/scim/v2/Users"
	localVarPath = strings.Replace(localVarPath, "{"+"integration"+"}", url.PathEscape(parameterValueToString(r.integration, "integration")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tenant"+"}", url.PathEscape(parameterValueToString(r.tenant, "tenant")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.scimUser == nil {
		return localVarReturnValue, nil, reportError("scimUser is required and must be specified")
	}

	if r.attributes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "attributes", r.attributes, "form", "")
	}
	if r.excludedAttributes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "excludedAttributes", r.excludedAttributes, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/scim+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/scim+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.scimUser
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteUsersRequest struct {
	ctx         context.Context
	ApiService  *SCIMUsersAPIService
	id          string
	integration string
	tenant      string
}

func (r ApiDeleteUsersRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteUsersExecute(r)
}

/*
DeleteUsers Method for DeleteUsers

Delete from the backing store

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@param integration
	@param tenant
	@return ApiDeleteUsersRequest
*/
func (a *SCIMUsersAPIService) DeleteUsers(ctx context.Context, id string, integration string, tenant string) ApiDeleteUsersRequest {
	return ApiDeleteUsersRequest{
		ApiService:  a,
		ctx:         ctx,
		id:          id,
		integration: integration,
		tenant:      tenant,
	}
}

// Execute executes the request
func (a *SCIMUsersAPIService) DeleteUsersExecute(r ApiDeleteUsersRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SCIMUsersAPIService.DeleteUsers")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/{tenant}/integrations/{integration}/scim/v2/Users/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"integration"+"}", url.PathEscape(parameterValueToString(r.integration, "integration")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tenant"+"}", url.PathEscape(parameterValueToString(r.tenant, "tenant")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiFindUsersRequest struct {
	ctx           context.Context
	ApiService    *SCIMUsersAPIService
	integration   string
	tenant        string
	searchRequest *SearchRequest
}

func (r ApiFindUsersRequest) SearchRequest(searchRequest SearchRequest) ApiFindUsersRequest {
	r.searchRequest = &searchRequest
	return r
}

func (r ApiFindUsersRequest) Execute() (*ScimResource, *http.Response, error) {
	return r.ApiService.FindUsersExecute(r)
}

/*
FindUsers Method for FindUsers

Search

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param integration
	@param tenant
	@return ApiFindUsersRequest
*/
func (a *SCIMUsersAPIService) FindUsers(ctx context.Context, integration string, tenant string) ApiFindUsersRequest {
	return ApiFindUsersRequest{
		ApiService:  a,
		ctx:         ctx,
		integration: integration,
		tenant:      tenant,
	}
}

// Execute executes the request
//
//	@return ScimResource
func (a *SCIMUsersAPIService) FindUsersExecute(r ApiFindUsersRequest) (*ScimResource, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ScimResource
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SCIMUsersAPIService.FindUsers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/{tenant}/integrations/{integration}/scim/v2/Users/.search"
	localVarPath = strings.Replace(localVarPath, "{"+"integration"+"}", url.PathEscape(parameterValueToString(r.integration, "integration")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tenant"+"}", url.PathEscape(parameterValueToString(r.tenant, "tenant")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.searchRequest == nil {
		return localVarReturnValue, nil, reportError("searchRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/scim+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/scim+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.searchRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSCIMResourceByIdUsersRequest struct {
	ctx                context.Context
	ApiService         *SCIMUsersAPIService
	id                 string
	integration        string
	tenant             string
	attributes         *string
	excludedAttributes *string
}

func (r ApiGetSCIMResourceByIdUsersRequest) Attributes(attributes string) ApiGetSCIMResourceByIdUsersRequest {
	r.attributes = &attributes
	return r
}

func (r ApiGetSCIMResourceByIdUsersRequest) ExcludedAttributes(excludedAttributes string) ApiGetSCIMResourceByIdUsersRequest {
	r.excludedAttributes = &excludedAttributes
	return r
}

func (r ApiGetSCIMResourceByIdUsersRequest) Execute() (*ScimResource, *http.Response, error) {
	return r.ApiService.GetSCIMResourceByIdUsersExecute(r)
}

/*
GetSCIMResourceByIdUsers Method for GetSCIMResourceByIdUsers

Find by id

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@param integration
	@param tenant
	@return ApiGetSCIMResourceByIdUsersRequest
*/
func (a *SCIMUsersAPIService) GetSCIMResourceByIdUsers(ctx context.Context, id string, integration string, tenant string) ApiGetSCIMResourceByIdUsersRequest {
	return ApiGetSCIMResourceByIdUsersRequest{
		ApiService:  a,
		ctx:         ctx,
		id:          id,
		integration: integration,
		tenant:      tenant,
	}
}

// Execute executes the request
//
//	@return ScimResource
func (a *SCIMUsersAPIService) GetSCIMResourceByIdUsersExecute(r ApiGetSCIMResourceByIdUsersRequest) (*ScimResource, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ScimResource
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SCIMUsersAPIService.GetSCIMResourceByIdUsers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/{tenant}/integrations/{integration}/scim/v2/Users/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"integration"+"}", url.PathEscape(parameterValueToString(r.integration, "integration")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tenant"+"}", url.PathEscape(parameterValueToString(r.tenant, "tenant")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.attributes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "attributes", r.attributes, "form", "")
	}
	if r.excludedAttributes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "excludedAttributes", r.excludedAttributes, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/scim+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchUsersRequest struct {
	ctx                context.Context
	ApiService         *SCIMUsersAPIService
	id                 string
	integration        string
	tenant             string
	patchRequest       *PatchRequest
	attributes         *string
	excludedAttributes *string
}

func (r ApiPatchUsersRequest) PatchRequest(patchRequest PatchRequest) ApiPatchUsersRequest {
	r.patchRequest = &patchRequest
	return r
}

func (r ApiPatchUsersRequest) Attributes(attributes string) ApiPatchUsersRequest {
	r.attributes = &attributes
	return r
}

func (r ApiPatchUsersRequest) ExcludedAttributes(excludedAttributes string) ApiPatchUsersRequest {
	r.excludedAttributes = &excludedAttributes
	return r
}

func (r ApiPatchUsersRequest) Execute() (*http.Response, error) {
	return r.ApiService.PatchUsersExecute(r)
}

/*
PatchUsers Method for PatchUsers

Patch a portion of the backing store

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@param integration
	@param tenant
	@return ApiPatchUsersRequest
*/
func (a *SCIMUsersAPIService) PatchUsers(ctx context.Context, id string, integration string, tenant string) ApiPatchUsersRequest {
	return ApiPatchUsersRequest{
		ApiService:  a,
		ctx:         ctx,
		id:          id,
		integration: integration,
		tenant:      tenant,
	}
}

// Execute executes the request
func (a *SCIMUsersAPIService) PatchUsersExecute(r ApiPatchUsersRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPatch
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SCIMUsersAPIService.PatchUsers")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/{tenant}/integrations/{integration}/scim/v2/Users/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"integration"+"}", url.PathEscape(parameterValueToString(r.integration, "integration")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tenant"+"}", url.PathEscape(parameterValueToString(r.tenant, "tenant")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchRequest == nil {
		return nil, reportError("patchRequest is required and must be specified")
	}

	if r.attributes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "attributes", r.attributes, "form", "")
	}
	if r.excludedAttributes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "excludedAttributes", r.excludedAttributes, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/scim+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiQueryUsersRequest struct {
	ctx                context.Context
	ApiService         *SCIMUsersAPIService
	integration        string
	tenant             string
	attributes         *string
	excludedAttributes *string
	filter             *string
	sortBy             *string
	sortOrder          *SortOrder
	startIndex         *int32
	count              *int32
}

func (r ApiQueryUsersRequest) Attributes(attributes string) ApiQueryUsersRequest {
	r.attributes = &attributes
	return r
}

func (r ApiQueryUsersRequest) ExcludedAttributes(excludedAttributes string) ApiQueryUsersRequest {
	r.excludedAttributes = &excludedAttributes
	return r
}

func (r ApiQueryUsersRequest) Filter(filter string) ApiQueryUsersRequest {
	r.filter = &filter
	return r
}

func (r ApiQueryUsersRequest) SortBy(sortBy string) ApiQueryUsersRequest {
	r.sortBy = &sortBy
	return r
}

func (r ApiQueryUsersRequest) SortOrder(sortOrder SortOrder) ApiQueryUsersRequest {
	r.sortOrder = &sortOrder
	return r
}

func (r ApiQueryUsersRequest) StartIndex(startIndex int32) ApiQueryUsersRequest {
	r.startIndex = &startIndex
	return r
}

func (r ApiQueryUsersRequest) Count(count int32) ApiQueryUsersRequest {
	r.count = &count
	return r
}

func (r ApiQueryUsersRequest) Execute() (*ScimResource, *http.Response, error) {
	return r.ApiService.QueryUsersExecute(r)
}

/*
QueryUsers Method for QueryUsers

Find by a combination of query parameters

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param integration
	@param tenant
	@return ApiQueryUsersRequest
*/
func (a *SCIMUsersAPIService) QueryUsers(ctx context.Context, integration string, tenant string) ApiQueryUsersRequest {
	return ApiQueryUsersRequest{
		ApiService:  a,
		ctx:         ctx,
		integration: integration,
		tenant:      tenant,
	}
}

// Execute executes the request
//
//	@return ScimResource
func (a *SCIMUsersAPIService) QueryUsersExecute(r ApiQueryUsersRequest) (*ScimResource, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ScimResource
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SCIMUsersAPIService.QueryUsers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/{tenant}/integrations/{integration}/scim/v2/Users"
	localVarPath = strings.Replace(localVarPath, "{"+"integration"+"}", url.PathEscape(parameterValueToString(r.integration, "integration")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tenant"+"}", url.PathEscape(parameterValueToString(r.tenant, "tenant")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.attributes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "attributes", r.attributes, "form", "")
	}
	if r.excludedAttributes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "excludedAttributes", r.excludedAttributes, "form", "")
	}
	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "form", "")
	}
	if r.sortBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortBy", r.sortBy, "form", "")
	}
	if r.sortOrder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortOrder", r.sortOrder, "form", "")
	}
	if r.startIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startIndex", r.startIndex, "form", "")
	}
	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/scim+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateUsersRequest struct {
	ctx                context.Context
	ApiService         *SCIMUsersAPIService
	id                 string
	integration        string
	tenant             string
	scimResource       *ScimResource
	attributes         *string
	excludedAttributes *string
}

func (r ApiUpdateUsersRequest) ScimResource(scimResource ScimResource) ApiUpdateUsersRequest {
	r.scimResource = &scimResource
	return r
}

func (r ApiUpdateUsersRequest) Attributes(attributes string) ApiUpdateUsersRequest {
	r.attributes = &attributes
	return r
}

func (r ApiUpdateUsersRequest) ExcludedAttributes(excludedAttributes string) ApiUpdateUsersRequest {
	r.excludedAttributes = &excludedAttributes
	return r
}

func (r ApiUpdateUsersRequest) Execute() (*ScimResource, *http.Response, error) {
	return r.ApiService.UpdateUsersExecute(r)
}

/*
UpdateUsers Method for UpdateUsers

Update

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@param integration
	@param tenant
	@return ApiUpdateUsersRequest
*/
func (a *SCIMUsersAPIService) UpdateUsers(ctx context.Context, id string, integration string, tenant string) ApiUpdateUsersRequest {
	return ApiUpdateUsersRequest{
		ApiService:  a,
		ctx:         ctx,
		id:          id,
		integration: integration,
		tenant:      tenant,
	}
}

// Execute executes the request
//
//	@return ScimResource
func (a *SCIMUsersAPIService) UpdateUsersExecute(r ApiUpdateUsersRequest) (*ScimResource, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ScimResource
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SCIMUsersAPIService.UpdateUsers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/{tenant}/integrations/{integration}/scim/v2/Users/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"integration"+"}", url.PathEscape(parameterValueToString(r.integration, "integration")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tenant"+"}", url.PathEscape(parameterValueToString(r.tenant, "tenant")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.scimResource == nil {
		return localVarReturnValue, nil, reportError("scimResource is required and must be specified")
	}

	if r.attributes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "attributes", r.attributes, "form", "")
	}
	if r.excludedAttributes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "excludedAttributes", r.excludedAttributes, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/scim+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/scim+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.scimResource
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
