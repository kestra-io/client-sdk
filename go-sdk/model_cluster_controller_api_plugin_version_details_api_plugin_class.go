/*
Kestra EE

All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
)

// checks if the ClusterControllerApiPluginVersionDetailsApiPluginClass type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClusterControllerApiPluginVersionDetailsApiPluginClass{}

// ClusterControllerApiPluginVersionDetailsApiPluginClass struct for ClusterControllerApiPluginVersionDetailsApiPluginClass
type ClusterControllerApiPluginVersionDetailsApiPluginClass struct {
	Name *string `json:"name,omitempty"`
	Icon *string `json:"icon,omitempty"`
}

// NewClusterControllerApiPluginVersionDetailsApiPluginClass instantiates a new ClusterControllerApiPluginVersionDetailsApiPluginClass object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterControllerApiPluginVersionDetailsApiPluginClass() *ClusterControllerApiPluginVersionDetailsApiPluginClass {
	this := ClusterControllerApiPluginVersionDetailsApiPluginClass{}
	return &this
}

// NewClusterControllerApiPluginVersionDetailsApiPluginClassWithDefaults instantiates a new ClusterControllerApiPluginVersionDetailsApiPluginClass object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterControllerApiPluginVersionDetailsApiPluginClassWithDefaults() *ClusterControllerApiPluginVersionDetailsApiPluginClass {
	this := ClusterControllerApiPluginVersionDetailsApiPluginClass{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ClusterControllerApiPluginVersionDetailsApiPluginClass) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterControllerApiPluginVersionDetailsApiPluginClass) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ClusterControllerApiPluginVersionDetailsApiPluginClass) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ClusterControllerApiPluginVersionDetailsApiPluginClass) SetName(v string) {
	o.Name = &v
}

// GetIcon returns the Icon field value if set, zero value otherwise.
func (o *ClusterControllerApiPluginVersionDetailsApiPluginClass) GetIcon() string {
	if o == nil || IsNil(o.Icon) {
		var ret string
		return ret
	}
	return *o.Icon
}

// GetIconOk returns a tuple with the Icon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterControllerApiPluginVersionDetailsApiPluginClass) GetIconOk() (*string, bool) {
	if o == nil || IsNil(o.Icon) {
		return nil, false
	}
	return o.Icon, true
}

// HasIcon returns a boolean if a field has been set.
func (o *ClusterControllerApiPluginVersionDetailsApiPluginClass) HasIcon() bool {
	if o != nil && !IsNil(o.Icon) {
		return true
	}

	return false
}

// SetIcon gets a reference to the given string and assigns it to the Icon field.
func (o *ClusterControllerApiPluginVersionDetailsApiPluginClass) SetIcon(v string) {
	o.Icon = &v
}

func (o ClusterControllerApiPluginVersionDetailsApiPluginClass) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClusterControllerApiPluginVersionDetailsApiPluginClass) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Icon) {
		toSerialize["icon"] = o.Icon
	}
	return toSerialize, nil
}

type NullableClusterControllerApiPluginVersionDetailsApiPluginClass struct {
	value *ClusterControllerApiPluginVersionDetailsApiPluginClass
	isSet bool
}

func (v NullableClusterControllerApiPluginVersionDetailsApiPluginClass) Get() *ClusterControllerApiPluginVersionDetailsApiPluginClass {
	return v.value
}

func (v *NullableClusterControllerApiPluginVersionDetailsApiPluginClass) Set(val *ClusterControllerApiPluginVersionDetailsApiPluginClass) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterControllerApiPluginVersionDetailsApiPluginClass) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterControllerApiPluginVersionDetailsApiPluginClass) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterControllerApiPluginVersionDetailsApiPluginClass(val *ClusterControllerApiPluginVersionDetailsApiPluginClass) *NullableClusterControllerApiPluginVersionDetailsApiPluginClass {
	return &NullableClusterControllerApiPluginVersionDetailsApiPluginClass{value: val, isSet: true}
}

func (v NullableClusterControllerApiPluginVersionDetailsApiPluginClass) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterControllerApiPluginVersionDetailsApiPluginClass) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
