/*
Kestra EE

All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
)

// checks if the ConfigurationUsage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigurationUsage{}

// ConfigurationUsage struct for ConfigurationUsage
type ConfigurationUsage struct {
	RepositoryType      *string `json:"repositoryType,omitempty"`
	QueueType           *string `json:"queueType,omitempty"`
	StorageType         *string `json:"storageType,omitempty"`
	SecretType          *string `json:"secretType,omitempty"`
	JavaSecurityEnabled *bool   `json:"javaSecurityEnabled,omitempty"`
}

// NewConfigurationUsage instantiates a new ConfigurationUsage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigurationUsage() *ConfigurationUsage {
	this := ConfigurationUsage{}
	return &this
}

// NewConfigurationUsageWithDefaults instantiates a new ConfigurationUsage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigurationUsageWithDefaults() *ConfigurationUsage {
	this := ConfigurationUsage{}
	return &this
}

// GetRepositoryType returns the RepositoryType field value if set, zero value otherwise.
func (o *ConfigurationUsage) GetRepositoryType() string {
	if o == nil || IsNil(o.RepositoryType) {
		var ret string
		return ret
	}
	return *o.RepositoryType
}

// GetRepositoryTypeOk returns a tuple with the RepositoryType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationUsage) GetRepositoryTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RepositoryType) {
		return nil, false
	}
	return o.RepositoryType, true
}

// HasRepositoryType returns a boolean if a field has been set.
func (o *ConfigurationUsage) HasRepositoryType() bool {
	if o != nil && !IsNil(o.RepositoryType) {
		return true
	}

	return false
}

// SetRepositoryType gets a reference to the given string and assigns it to the RepositoryType field.
func (o *ConfigurationUsage) SetRepositoryType(v string) {
	o.RepositoryType = &v
}

// GetQueueType returns the QueueType field value if set, zero value otherwise.
func (o *ConfigurationUsage) GetQueueType() string {
	if o == nil || IsNil(o.QueueType) {
		var ret string
		return ret
	}
	return *o.QueueType
}

// GetQueueTypeOk returns a tuple with the QueueType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationUsage) GetQueueTypeOk() (*string, bool) {
	if o == nil || IsNil(o.QueueType) {
		return nil, false
	}
	return o.QueueType, true
}

// HasQueueType returns a boolean if a field has been set.
func (o *ConfigurationUsage) HasQueueType() bool {
	if o != nil && !IsNil(o.QueueType) {
		return true
	}

	return false
}

// SetQueueType gets a reference to the given string and assigns it to the QueueType field.
func (o *ConfigurationUsage) SetQueueType(v string) {
	o.QueueType = &v
}

// GetStorageType returns the StorageType field value if set, zero value otherwise.
func (o *ConfigurationUsage) GetStorageType() string {
	if o == nil || IsNil(o.StorageType) {
		var ret string
		return ret
	}
	return *o.StorageType
}

// GetStorageTypeOk returns a tuple with the StorageType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationUsage) GetStorageTypeOk() (*string, bool) {
	if o == nil || IsNil(o.StorageType) {
		return nil, false
	}
	return o.StorageType, true
}

// HasStorageType returns a boolean if a field has been set.
func (o *ConfigurationUsage) HasStorageType() bool {
	if o != nil && !IsNil(o.StorageType) {
		return true
	}

	return false
}

// SetStorageType gets a reference to the given string and assigns it to the StorageType field.
func (o *ConfigurationUsage) SetStorageType(v string) {
	o.StorageType = &v
}

// GetSecretType returns the SecretType field value if set, zero value otherwise.
func (o *ConfigurationUsage) GetSecretType() string {
	if o == nil || IsNil(o.SecretType) {
		var ret string
		return ret
	}
	return *o.SecretType
}

// GetSecretTypeOk returns a tuple with the SecretType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationUsage) GetSecretTypeOk() (*string, bool) {
	if o == nil || IsNil(o.SecretType) {
		return nil, false
	}
	return o.SecretType, true
}

// HasSecretType returns a boolean if a field has been set.
func (o *ConfigurationUsage) HasSecretType() bool {
	if o != nil && !IsNil(o.SecretType) {
		return true
	}

	return false
}

// SetSecretType gets a reference to the given string and assigns it to the SecretType field.
func (o *ConfigurationUsage) SetSecretType(v string) {
	o.SecretType = &v
}

// GetJavaSecurityEnabled returns the JavaSecurityEnabled field value if set, zero value otherwise.
func (o *ConfigurationUsage) GetJavaSecurityEnabled() bool {
	if o == nil || IsNil(o.JavaSecurityEnabled) {
		var ret bool
		return ret
	}
	return *o.JavaSecurityEnabled
}

// GetJavaSecurityEnabledOk returns a tuple with the JavaSecurityEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationUsage) GetJavaSecurityEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.JavaSecurityEnabled) {
		return nil, false
	}
	return o.JavaSecurityEnabled, true
}

// HasJavaSecurityEnabled returns a boolean if a field has been set.
func (o *ConfigurationUsage) HasJavaSecurityEnabled() bool {
	if o != nil && !IsNil(o.JavaSecurityEnabled) {
		return true
	}

	return false
}

// SetJavaSecurityEnabled gets a reference to the given bool and assigns it to the JavaSecurityEnabled field.
func (o *ConfigurationUsage) SetJavaSecurityEnabled(v bool) {
	o.JavaSecurityEnabled = &v
}

func (o ConfigurationUsage) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigurationUsage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RepositoryType) {
		toSerialize["repositoryType"] = o.RepositoryType
	}
	if !IsNil(o.QueueType) {
		toSerialize["queueType"] = o.QueueType
	}
	if !IsNil(o.StorageType) {
		toSerialize["storageType"] = o.StorageType
	}
	if !IsNil(o.SecretType) {
		toSerialize["secretType"] = o.SecretType
	}
	if !IsNil(o.JavaSecurityEnabled) {
		toSerialize["javaSecurityEnabled"] = o.JavaSecurityEnabled
	}
	return toSerialize, nil
}

type NullableConfigurationUsage struct {
	value *ConfigurationUsage
	isSet bool
}

func (v NullableConfigurationUsage) Get() *ConfigurationUsage {
	return v.value
}

func (v *NullableConfigurationUsage) Set(val *ConfigurationUsage) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigurationUsage) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigurationUsage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigurationUsage(val *ConfigurationUsage) *NullableConfigurationUsage {
	return &NullableConfigurationUsage{value: val, isSet: true}
}

func (v NullableConfigurationUsage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigurationUsage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
