/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// UpdateFlowsInNamespaceFromJson200Response - struct for UpdateFlowsInNamespaceFromJson200Response
type UpdateFlowsInNamespaceFromJson200Response struct {
	ArrayOfFlow          *[]Flow
	ArrayOfFlowInterface *[]FlowInterface
}

// []FlowAsUpdateFlowsInNamespaceFromJson200Response is a convenience function that returns []Flow wrapped in UpdateFlowsInNamespaceFromJson200Response
func ArrayOfFlowAsUpdateFlowsInNamespaceFromJson200Response(v *[]Flow) UpdateFlowsInNamespaceFromJson200Response {
	return UpdateFlowsInNamespaceFromJson200Response{
		ArrayOfFlow: v,
	}
}

// []FlowInterfaceAsUpdateFlowsInNamespaceFromJson200Response is a convenience function that returns []FlowInterface wrapped in UpdateFlowsInNamespaceFromJson200Response
func ArrayOfFlowInterfaceAsUpdateFlowsInNamespaceFromJson200Response(v *[]FlowInterface) UpdateFlowsInNamespaceFromJson200Response {
	return UpdateFlowsInNamespaceFromJson200Response{
		ArrayOfFlowInterface: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *UpdateFlowsInNamespaceFromJson200Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ArrayOfFlow
	err = newStrictDecoder(data).Decode(&dst.ArrayOfFlow)
	if err == nil {
		jsonArrayOfFlow, _ := json.Marshal(dst.ArrayOfFlow)
		if string(jsonArrayOfFlow) == "{}" { // empty struct
			dst.ArrayOfFlow = nil
		} else {
			if err = validator.Validate(dst.ArrayOfFlow); err != nil {
				dst.ArrayOfFlow = nil
			} else {
				match++
			}
		}
	} else {
		dst.ArrayOfFlow = nil
	}

	// try to unmarshal data into ArrayOfFlowInterface
	err = newStrictDecoder(data).Decode(&dst.ArrayOfFlowInterface)
	if err == nil {
		jsonArrayOfFlowInterface, _ := json.Marshal(dst.ArrayOfFlowInterface)
		if string(jsonArrayOfFlowInterface) == "{}" { // empty struct
			dst.ArrayOfFlowInterface = nil
		} else {
			if err = validator.Validate(dst.ArrayOfFlowInterface); err != nil {
				dst.ArrayOfFlowInterface = nil
			} else {
				match++
			}
		}
	} else {
		dst.ArrayOfFlowInterface = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ArrayOfFlow = nil
		dst.ArrayOfFlowInterface = nil

		return fmt.Errorf("data matches more than one schema in oneOf(UpdateFlowsInNamespaceFromJson200Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(UpdateFlowsInNamespaceFromJson200Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src UpdateFlowsInNamespaceFromJson200Response) MarshalJSON() ([]byte, error) {
	if src.ArrayOfFlow != nil {
		return json.Marshal(&src.ArrayOfFlow)
	}

	if src.ArrayOfFlowInterface != nil {
		return json.Marshal(&src.ArrayOfFlowInterface)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *UpdateFlowsInNamespaceFromJson200Response) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ArrayOfFlow != nil {
		return obj.ArrayOfFlow
	}

	if obj.ArrayOfFlowInterface != nil {
		return obj.ArrayOfFlowInterface
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj UpdateFlowsInNamespaceFromJson200Response) GetActualInstanceValue() interface{} {
	if obj.ArrayOfFlow != nil {
		return *obj.ArrayOfFlow
	}

	if obj.ArrayOfFlowInterface != nil {
		return *obj.ArrayOfFlowInterface
	}

	// all schemas are nil
	return nil
}

type NullableUpdateFlowsInNamespaceFromJson200Response struct {
	value *UpdateFlowsInNamespaceFromJson200Response
	isSet bool
}

func (v NullableUpdateFlowsInNamespaceFromJson200Response) Get() *UpdateFlowsInNamespaceFromJson200Response {
	return v.value
}

func (v *NullableUpdateFlowsInNamespaceFromJson200Response) Set(val *UpdateFlowsInNamespaceFromJson200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateFlowsInNamespaceFromJson200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateFlowsInNamespaceFromJson200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateFlowsInNamespaceFromJson200Response(val *UpdateFlowsInNamespaceFromJson200Response) *NullableUpdateFlowsInNamespaceFromJson200Response {
	return &NullableUpdateFlowsInNamespaceFromJson200Response{value: val, isSet: true}
}

func (v NullableUpdateFlowsInNamespaceFromJson200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateFlowsInNamespaceFromJson200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
