/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
)

// checks if the ServiceProviderConfigurationFilterConfiguration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServiceProviderConfigurationFilterConfiguration{}

// ServiceProviderConfigurationFilterConfiguration struct for ServiceProviderConfigurationFilterConfiguration
type ServiceProviderConfigurationFilterConfiguration struct {
	Supported            *bool  `json:"supported,omitempty"`
	MaxResults           *int32 `json:"maxResults,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ServiceProviderConfigurationFilterConfiguration ServiceProviderConfigurationFilterConfiguration

// NewServiceProviderConfigurationFilterConfiguration instantiates a new ServiceProviderConfigurationFilterConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceProviderConfigurationFilterConfiguration() *ServiceProviderConfigurationFilterConfiguration {
	this := ServiceProviderConfigurationFilterConfiguration{}
	return &this
}

// NewServiceProviderConfigurationFilterConfigurationWithDefaults instantiates a new ServiceProviderConfigurationFilterConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceProviderConfigurationFilterConfigurationWithDefaults() *ServiceProviderConfigurationFilterConfiguration {
	this := ServiceProviderConfigurationFilterConfiguration{}
	return &this
}

// GetSupported returns the Supported field value if set, zero value otherwise.
func (o *ServiceProviderConfigurationFilterConfiguration) GetSupported() bool {
	if o == nil || IsNil(o.Supported) {
		var ret bool
		return ret
	}
	return *o.Supported
}

// GetSupportedOk returns a tuple with the Supported field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceProviderConfigurationFilterConfiguration) GetSupportedOk() (*bool, bool) {
	if o == nil || IsNil(o.Supported) {
		return nil, false
	}
	return o.Supported, true
}

// HasSupported returns a boolean if a field has been set.
func (o *ServiceProviderConfigurationFilterConfiguration) HasSupported() bool {
	if o != nil && !IsNil(o.Supported) {
		return true
	}

	return false
}

// SetSupported gets a reference to the given bool and assigns it to the Supported field.
func (o *ServiceProviderConfigurationFilterConfiguration) SetSupported(v bool) {
	o.Supported = &v
}

// GetMaxResults returns the MaxResults field value if set, zero value otherwise.
func (o *ServiceProviderConfigurationFilterConfiguration) GetMaxResults() int32 {
	if o == nil || IsNil(o.MaxResults) {
		var ret int32
		return ret
	}
	return *o.MaxResults
}

// GetMaxResultsOk returns a tuple with the MaxResults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceProviderConfigurationFilterConfiguration) GetMaxResultsOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxResults) {
		return nil, false
	}
	return o.MaxResults, true
}

// HasMaxResults returns a boolean if a field has been set.
func (o *ServiceProviderConfigurationFilterConfiguration) HasMaxResults() bool {
	if o != nil && !IsNil(o.MaxResults) {
		return true
	}

	return false
}

// SetMaxResults gets a reference to the given int32 and assigns it to the MaxResults field.
func (o *ServiceProviderConfigurationFilterConfiguration) SetMaxResults(v int32) {
	o.MaxResults = &v
}

func (o ServiceProviderConfigurationFilterConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServiceProviderConfigurationFilterConfiguration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Supported) {
		toSerialize["supported"] = o.Supported
	}
	if !IsNil(o.MaxResults) {
		toSerialize["maxResults"] = o.MaxResults
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ServiceProviderConfigurationFilterConfiguration) UnmarshalJSON(data []byte) (err error) {
	varServiceProviderConfigurationFilterConfiguration := _ServiceProviderConfigurationFilterConfiguration{}

	err = json.Unmarshal(data, &varServiceProviderConfigurationFilterConfiguration)

	if err != nil {
		return err
	}

	*o = ServiceProviderConfigurationFilterConfiguration(varServiceProviderConfigurationFilterConfiguration)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "supported")
		delete(additionalProperties, "maxResults")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableServiceProviderConfigurationFilterConfiguration struct {
	value *ServiceProviderConfigurationFilterConfiguration
	isSet bool
}

func (v NullableServiceProviderConfigurationFilterConfiguration) Get() *ServiceProviderConfigurationFilterConfiguration {
	return v.value
}

func (v *NullableServiceProviderConfigurationFilterConfiguration) Set(val *ServiceProviderConfigurationFilterConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceProviderConfigurationFilterConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceProviderConfigurationFilterConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceProviderConfigurationFilterConfiguration(val *ServiceProviderConfigurationFilterConfiguration) *NullableServiceProviderConfigurationFilterConfiguration {
	return &NullableServiceProviderConfigurationFilterConfiguration{value: val, isSet: true}
}

func (v NullableServiceProviderConfigurationFilterConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceProviderConfigurationFilterConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
