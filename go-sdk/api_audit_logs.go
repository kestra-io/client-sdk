/*
Kestra EE

All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"
)

// AuditLogsAPIService AuditLogsAPI service
type AuditLogsAPIService service

type ApiFindAuditLogRequest struct {
	ctx                           context.Context
	ApiService                    *AuditLogsAPIService
	tenant                        string
	auditLogControllerFindRequest *AuditLogControllerFindRequest
}

// The find request
func (r ApiFindAuditLogRequest) AuditLogControllerFindRequest(auditLogControllerFindRequest AuditLogControllerFindRequest) ApiFindAuditLogRequest {
	r.auditLogControllerFindRequest = &auditLogControllerFindRequest
	return r
}

func (r ApiFindAuditLogRequest) Execute() (*AuditLogControllerAuditLogWithUser, *http.Response, error) {
	return r.ApiService.FindAuditLogExecute(r)
}

/*
FindAuditLog Find a specific audit log

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param tenant
	@return ApiFindAuditLogRequest
*/
func (a *AuditLogsAPIService) FindAuditLog(ctx context.Context, tenant string) ApiFindAuditLogRequest {
	return ApiFindAuditLogRequest{
		ApiService: a,
		ctx:        ctx,
		tenant:     tenant,
	}
}

// Execute executes the request
//
//	@return AuditLogControllerAuditLogWithUser
func (a *AuditLogsAPIService) FindAuditLogExecute(r ApiFindAuditLogRequest) (*AuditLogControllerAuditLogWithUser, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AuditLogControllerAuditLogWithUser
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuditLogsAPIService.FindAuditLog")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/{tenant}/auditlogs/find"
	localVarPath = strings.Replace(localVarPath, "{"+"tenant"+"}", url.PathEscape(parameterValueToString(r.tenant, "tenant")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.auditLogControllerFindRequest == nil {
		return localVarReturnValue, nil, reportError("auditLogControllerFindRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.auditLogControllerFindRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetResourceDiffFromAuditLogRequest struct {
	ctx        context.Context
	ApiService *AuditLogsAPIService
	id         string
	tenant     string
	previousId *string
}

// The id of a previous audit log to compare with
func (r ApiGetResourceDiffFromAuditLogRequest) PreviousId(previousId string) ApiGetResourceDiffFromAuditLogRequest {
	r.previousId = &previousId
	return r
}

func (r ApiGetResourceDiffFromAuditLogRequest) Execute() (*AuditLogControllerAuditLogDiff, *http.Response, error) {
	return r.ApiService.GetResourceDiffFromAuditLogExecute(r)
}

/*
GetResourceDiffFromAuditLog Get the diff of an object between current version and a previous version. Can also compare two version from specific audit logs.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The id of the audit log
	@param tenant
	@return ApiGetResourceDiffFromAuditLogRequest
*/
func (a *AuditLogsAPIService) GetResourceDiffFromAuditLog(ctx context.Context, id string, tenant string) ApiGetResourceDiffFromAuditLogRequest {
	return ApiGetResourceDiffFromAuditLogRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		tenant:     tenant,
	}
}

// Execute executes the request
//
//	@return AuditLogControllerAuditLogDiff
func (a *AuditLogsAPIService) GetResourceDiffFromAuditLogExecute(r ApiGetResourceDiffFromAuditLogRequest) (*AuditLogControllerAuditLogDiff, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AuditLogControllerAuditLogDiff
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuditLogsAPIService.GetResourceDiffFromAuditLog")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/{tenant}/auditlogs/{id}/diff"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tenant"+"}", url.PathEscape(parameterValueToString(r.tenant, "tenant")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.previousId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "previousId", r.previousId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListAuditLogFromResourceIdRequest struct {
	ctx        context.Context
	ApiService *AuditLogsAPIService
	detailId   string
	tenant     string
}

func (r ApiListAuditLogFromResourceIdRequest) Execute() ([]AuditLogControllerAuditLogOption, *http.Response, error) {
	return r.ApiService.ListAuditLogFromResourceIdExecute(r)
}

/*
ListAuditLogFromResourceId Find all audit logs about a specific resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param detailId The resource Id
	@param tenant
	@return ApiListAuditLogFromResourceIdRequest
*/
func (a *AuditLogsAPIService) ListAuditLogFromResourceId(ctx context.Context, detailId string, tenant string) ApiListAuditLogFromResourceIdRequest {
	return ApiListAuditLogFromResourceIdRequest{
		ApiService: a,
		ctx:        ctx,
		detailId:   detailId,
		tenant:     tenant,
	}
}

// Execute executes the request
//
//	@return []AuditLogControllerAuditLogOption
func (a *AuditLogsAPIService) ListAuditLogFromResourceIdExecute(r ApiListAuditLogFromResourceIdRequest) ([]AuditLogControllerAuditLogOption, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []AuditLogControllerAuditLogOption
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuditLogsAPIService.ListAuditLogFromResourceId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/{tenant}/auditlogs/history/{detailId}"
	localVarPath = strings.Replace(localVarPath, "{"+"detailId"+"}", url.PathEscape(parameterValueToString(r.detailId, "detailId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tenant"+"}", url.PathEscape(parameterValueToString(r.tenant, "tenant")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSearchAuditLogsRequest struct {
	ctx         context.Context
	ApiService  *AuditLogsAPIService
	page        *int32
	size        *int32
	tenant      string
	q           *string
	sort        *[]string
	namespace   *string
	flowId      *string
	executionId *string
	userId      *string
	id          *string
	permission  *Permission
	startDate   *time.Time
	endDate     *time.Time
	details     *map[string]string
	type_       *CrudEventType
}

// The current page
func (r ApiSearchAuditLogsRequest) Page(page int32) ApiSearchAuditLogsRequest {
	r.page = &page
	return r
}

// The current page size
func (r ApiSearchAuditLogsRequest) Size(size int32) ApiSearchAuditLogsRequest {
	r.size = &size
	return r
}

// A string filter
func (r ApiSearchAuditLogsRequest) Q(q string) ApiSearchAuditLogsRequest {
	r.q = &q
	return r
}

// The sort of current page
func (r ApiSearchAuditLogsRequest) Sort(sort []string) ApiSearchAuditLogsRequest {
	r.sort = &sort
	return r
}

// A namespace filter
func (r ApiSearchAuditLogsRequest) Namespace(namespace string) ApiSearchAuditLogsRequest {
	r.namespace = &namespace
	return r
}

// A flow id filter
func (r ApiSearchAuditLogsRequest) FlowId(flowId string) ApiSearchAuditLogsRequest {
	r.flowId = &flowId
	return r
}

// An execution filter
func (r ApiSearchAuditLogsRequest) ExecutionId(executionId string) ApiSearchAuditLogsRequest {
	r.executionId = &executionId
	return r
}

// A user id filter
func (r ApiSearchAuditLogsRequest) UserId(userId string) ApiSearchAuditLogsRequest {
	r.userId = &userId
	return r
}

// A id filter
func (r ApiSearchAuditLogsRequest) Id(id string) ApiSearchAuditLogsRequest {
	r.id = &id
	return r
}

// A permission filter
func (r ApiSearchAuditLogsRequest) Permission(permission Permission) ApiSearchAuditLogsRequest {
	r.permission = &permission
	return r
}

// The start datetime
func (r ApiSearchAuditLogsRequest) StartDate(startDate time.Time) ApiSearchAuditLogsRequest {
	r.startDate = &startDate
	return r
}

// The end datetime
func (r ApiSearchAuditLogsRequest) EndDate(endDate time.Time) ApiSearchAuditLogsRequest {
	r.endDate = &endDate
	return r
}

// A list of auditLog details
func (r ApiSearchAuditLogsRequest) Details(details map[string]string) ApiSearchAuditLogsRequest {
	r.details = &details
	return r
}

// The event that create the audit log
func (r ApiSearchAuditLogsRequest) Type_(type_ CrudEventType) ApiSearchAuditLogsRequest {
	r.type_ = &type_
	return r
}

func (r ApiSearchAuditLogsRequest) Execute() (*PagedResultsAuditLogControllerAuditLogWithUser, *http.Response, error) {
	return r.ApiService.SearchAuditLogsExecute(r)
}

/*
SearchAuditLogs Search for audit logs

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param tenant
	@return ApiSearchAuditLogsRequest
*/
func (a *AuditLogsAPIService) SearchAuditLogs(ctx context.Context, tenant string) ApiSearchAuditLogsRequest {
	return ApiSearchAuditLogsRequest{
		ApiService: a,
		ctx:        ctx,
		tenant:     tenant,
	}
}

// Execute executes the request
//
//	@return PagedResultsAuditLogControllerAuditLogWithUser
func (a *AuditLogsAPIService) SearchAuditLogsExecute(r ApiSearchAuditLogsRequest) (*PagedResultsAuditLogControllerAuditLogWithUser, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PagedResultsAuditLogControllerAuditLogWithUser
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuditLogsAPIService.SearchAuditLogs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/{tenant}/auditlogs/search"
	localVarPath = strings.Replace(localVarPath, "{"+"tenant"+"}", url.PathEscape(parameterValueToString(r.tenant, "tenant")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.page == nil {
		return localVarReturnValue, nil, reportError("page is required and must be specified")
	}
	if r.size == nil {
		return localVarReturnValue, nil, reportError("size is required and must be specified")
	}

	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "form", "")
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "csv")
	}
	if r.namespace != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "namespace", r.namespace, "form", "")
	}
	if r.flowId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "flowId", r.flowId, "form", "")
	}
	if r.executionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "executionId", r.executionId, "form", "")
	}
	if r.userId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userId", r.userId, "form", "")
	}
	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "form", "")
	}
	if r.permission != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "permission", r.permission, "form", "")
	}
	if r.startDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startDate", r.startDate, "form", "")
	}
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "form", "")
	}
	if r.details != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "details", r.details, "form", "")
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
