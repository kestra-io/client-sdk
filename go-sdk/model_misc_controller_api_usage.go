/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
)

// checks if the MiscControllerApiUsage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MiscControllerApiUsage{}

// MiscControllerApiUsage struct for MiscControllerApiUsage
type MiscControllerApiUsage struct {
	Flows                *FlowUsage      `json:"flows,omitempty"`
	Executions           *ExecutionUsage `json:"executions,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _MiscControllerApiUsage MiscControllerApiUsage

// NewMiscControllerApiUsage instantiates a new MiscControllerApiUsage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMiscControllerApiUsage() *MiscControllerApiUsage {
	this := MiscControllerApiUsage{}
	return &this
}

// NewMiscControllerApiUsageWithDefaults instantiates a new MiscControllerApiUsage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMiscControllerApiUsageWithDefaults() *MiscControllerApiUsage {
	this := MiscControllerApiUsage{}
	return &this
}

// GetFlows returns the Flows field value if set, zero value otherwise.
func (o *MiscControllerApiUsage) GetFlows() FlowUsage {
	if o == nil || IsNil(o.Flows) {
		var ret FlowUsage
		return ret
	}
	return *o.Flows
}

// GetFlowsOk returns a tuple with the Flows field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MiscControllerApiUsage) GetFlowsOk() (*FlowUsage, bool) {
	if o == nil || IsNil(o.Flows) {
		return nil, false
	}
	return o.Flows, true
}

// HasFlows returns a boolean if a field has been set.
func (o *MiscControllerApiUsage) HasFlows() bool {
	if o != nil && !IsNil(o.Flows) {
		return true
	}

	return false
}

// SetFlows gets a reference to the given FlowUsage and assigns it to the Flows field.
func (o *MiscControllerApiUsage) SetFlows(v FlowUsage) {
	o.Flows = &v
}

// GetExecutions returns the Executions field value if set, zero value otherwise.
func (o *MiscControllerApiUsage) GetExecutions() ExecutionUsage {
	if o == nil || IsNil(o.Executions) {
		var ret ExecutionUsage
		return ret
	}
	return *o.Executions
}

// GetExecutionsOk returns a tuple with the Executions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MiscControllerApiUsage) GetExecutionsOk() (*ExecutionUsage, bool) {
	if o == nil || IsNil(o.Executions) {
		return nil, false
	}
	return o.Executions, true
}

// HasExecutions returns a boolean if a field has been set.
func (o *MiscControllerApiUsage) HasExecutions() bool {
	if o != nil && !IsNil(o.Executions) {
		return true
	}

	return false
}

// SetExecutions gets a reference to the given ExecutionUsage and assigns it to the Executions field.
func (o *MiscControllerApiUsage) SetExecutions(v ExecutionUsage) {
	o.Executions = &v
}

func (o MiscControllerApiUsage) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MiscControllerApiUsage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Flows) {
		toSerialize["flows"] = o.Flows
	}
	if !IsNil(o.Executions) {
		toSerialize["executions"] = o.Executions
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MiscControllerApiUsage) UnmarshalJSON(data []byte) (err error) {
	varMiscControllerApiUsage := _MiscControllerApiUsage{}

	err = json.Unmarshal(data, &varMiscControllerApiUsage)

	if err != nil {
		return err
	}

	*o = MiscControllerApiUsage(varMiscControllerApiUsage)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "flows")
		delete(additionalProperties, "executions")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMiscControllerApiUsage struct {
	value *MiscControllerApiUsage
	isSet bool
}

func (v NullableMiscControllerApiUsage) Get() *MiscControllerApiUsage {
	return v.value
}

func (v *NullableMiscControllerApiUsage) Set(val *MiscControllerApiUsage) {
	v.value = val
	v.isSet = true
}

func (v NullableMiscControllerApiUsage) IsSet() bool {
	return v.isSet
}

func (v *NullableMiscControllerApiUsage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMiscControllerApiUsage(val *MiscControllerApiUsage) *NullableMiscControllerApiUsage {
	return &NullableMiscControllerApiUsage{value: val, isSet: true}
}

func (v NullableMiscControllerApiUsage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMiscControllerApiUsage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
