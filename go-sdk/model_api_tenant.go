/*
Kestra EE

All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ApiTenant type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiTenant{}

// ApiTenant struct for ApiTenant
type ApiTenant struct {
	StorageIsolation         *Isolation                        `json:"storageIsolation,omitempty"`
	SecretIsolation          *Isolation                        `json:"secretIsolation,omitempty"`
	Id                       string                            `json:"id" validate:"regexp=^[a-z0-9][a-z0-9_-]*"`
	Name                     string                            `json:"name"`
	Deleted                  bool                              `json:"deleted"`
	WorkerGroup              *WorkerGroup                      `json:"workerGroup,omitempty"`
	StorageType              *string                           `json:"storageType,omitempty"`
	StorageConfiguration     map[string]map[string]interface{} `json:"storageConfiguration,omitempty"`
	SecretType               *string                           `json:"secretType,omitempty"`
	SecretReadOnly           *bool                             `json:"secretReadOnly,omitempty"`
	SecretConfiguration      map[string]map[string]interface{} `json:"secretConfiguration,omitempty"`
	RequireExistingNamespace *bool                             `json:"requireExistingNamespace,omitempty"`
	OutputsInInternalStorage *bool                             `json:"outputsInInternalStorage,omitempty"`
	Logo                     *string                           `json:"logo,omitempty"`
}

type _ApiTenant ApiTenant

// NewApiTenant instantiates a new ApiTenant object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiTenant(id string, name string, deleted bool) *ApiTenant {
	this := ApiTenant{}
	this.Id = id
	this.Name = name
	this.Deleted = deleted
	return &this
}

// NewApiTenantWithDefaults instantiates a new ApiTenant object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiTenantWithDefaults() *ApiTenant {
	this := ApiTenant{}
	return &this
}

// GetStorageIsolation returns the StorageIsolation field value if set, zero value otherwise.
func (o *ApiTenant) GetStorageIsolation() Isolation {
	if o == nil || IsNil(o.StorageIsolation) {
		var ret Isolation
		return ret
	}
	return *o.StorageIsolation
}

// GetStorageIsolationOk returns a tuple with the StorageIsolation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiTenant) GetStorageIsolationOk() (*Isolation, bool) {
	if o == nil || IsNil(o.StorageIsolation) {
		return nil, false
	}
	return o.StorageIsolation, true
}

// HasStorageIsolation returns a boolean if a field has been set.
func (o *ApiTenant) HasStorageIsolation() bool {
	if o != nil && !IsNil(o.StorageIsolation) {
		return true
	}

	return false
}

// SetStorageIsolation gets a reference to the given Isolation and assigns it to the StorageIsolation field.
func (o *ApiTenant) SetStorageIsolation(v Isolation) {
	o.StorageIsolation = &v
}

// GetSecretIsolation returns the SecretIsolation field value if set, zero value otherwise.
func (o *ApiTenant) GetSecretIsolation() Isolation {
	if o == nil || IsNil(o.SecretIsolation) {
		var ret Isolation
		return ret
	}
	return *o.SecretIsolation
}

// GetSecretIsolationOk returns a tuple with the SecretIsolation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiTenant) GetSecretIsolationOk() (*Isolation, bool) {
	if o == nil || IsNil(o.SecretIsolation) {
		return nil, false
	}
	return o.SecretIsolation, true
}

// HasSecretIsolation returns a boolean if a field has been set.
func (o *ApiTenant) HasSecretIsolation() bool {
	if o != nil && !IsNil(o.SecretIsolation) {
		return true
	}

	return false
}

// SetSecretIsolation gets a reference to the given Isolation and assigns it to the SecretIsolation field.
func (o *ApiTenant) SetSecretIsolation(v Isolation) {
	o.SecretIsolation = &v
}

// GetId returns the Id field value
func (o *ApiTenant) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ApiTenant) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ApiTenant) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *ApiTenant) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ApiTenant) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ApiTenant) SetName(v string) {
	o.Name = v
}

// GetDeleted returns the Deleted field value
func (o *ApiTenant) GetDeleted() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Deleted
}

// GetDeletedOk returns a tuple with the Deleted field value
// and a boolean to check if the value has been set.
func (o *ApiTenant) GetDeletedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Deleted, true
}

// SetDeleted sets field value
func (o *ApiTenant) SetDeleted(v bool) {
	o.Deleted = v
}

// GetWorkerGroup returns the WorkerGroup field value if set, zero value otherwise.
func (o *ApiTenant) GetWorkerGroup() WorkerGroup {
	if o == nil || IsNil(o.WorkerGroup) {
		var ret WorkerGroup
		return ret
	}
	return *o.WorkerGroup
}

// GetWorkerGroupOk returns a tuple with the WorkerGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiTenant) GetWorkerGroupOk() (*WorkerGroup, bool) {
	if o == nil || IsNil(o.WorkerGroup) {
		return nil, false
	}
	return o.WorkerGroup, true
}

// HasWorkerGroup returns a boolean if a field has been set.
func (o *ApiTenant) HasWorkerGroup() bool {
	if o != nil && !IsNil(o.WorkerGroup) {
		return true
	}

	return false
}

// SetWorkerGroup gets a reference to the given WorkerGroup and assigns it to the WorkerGroup field.
func (o *ApiTenant) SetWorkerGroup(v WorkerGroup) {
	o.WorkerGroup = &v
}

// GetStorageType returns the StorageType field value if set, zero value otherwise.
func (o *ApiTenant) GetStorageType() string {
	if o == nil || IsNil(o.StorageType) {
		var ret string
		return ret
	}
	return *o.StorageType
}

// GetStorageTypeOk returns a tuple with the StorageType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiTenant) GetStorageTypeOk() (*string, bool) {
	if o == nil || IsNil(o.StorageType) {
		return nil, false
	}
	return o.StorageType, true
}

// HasStorageType returns a boolean if a field has been set.
func (o *ApiTenant) HasStorageType() bool {
	if o != nil && !IsNil(o.StorageType) {
		return true
	}

	return false
}

// SetStorageType gets a reference to the given string and assigns it to the StorageType field.
func (o *ApiTenant) SetStorageType(v string) {
	o.StorageType = &v
}

// GetStorageConfiguration returns the StorageConfiguration field value if set, zero value otherwise.
func (o *ApiTenant) GetStorageConfiguration() map[string]map[string]interface{} {
	if o == nil || IsNil(o.StorageConfiguration) {
		var ret map[string]map[string]interface{}
		return ret
	}
	return o.StorageConfiguration
}

// GetStorageConfigurationOk returns a tuple with the StorageConfiguration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiTenant) GetStorageConfigurationOk() (map[string]map[string]interface{}, bool) {
	if o == nil || IsNil(o.StorageConfiguration) {
		return map[string]map[string]interface{}{}, false
	}
	return o.StorageConfiguration, true
}

// HasStorageConfiguration returns a boolean if a field has been set.
func (o *ApiTenant) HasStorageConfiguration() bool {
	if o != nil && !IsNil(o.StorageConfiguration) {
		return true
	}

	return false
}

// SetStorageConfiguration gets a reference to the given map[string]map[string]interface{} and assigns it to the StorageConfiguration field.
func (o *ApiTenant) SetStorageConfiguration(v map[string]map[string]interface{}) {
	o.StorageConfiguration = v
}

// GetSecretType returns the SecretType field value if set, zero value otherwise.
func (o *ApiTenant) GetSecretType() string {
	if o == nil || IsNil(o.SecretType) {
		var ret string
		return ret
	}
	return *o.SecretType
}

// GetSecretTypeOk returns a tuple with the SecretType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiTenant) GetSecretTypeOk() (*string, bool) {
	if o == nil || IsNil(o.SecretType) {
		return nil, false
	}
	return o.SecretType, true
}

// HasSecretType returns a boolean if a field has been set.
func (o *ApiTenant) HasSecretType() bool {
	if o != nil && !IsNil(o.SecretType) {
		return true
	}

	return false
}

// SetSecretType gets a reference to the given string and assigns it to the SecretType field.
func (o *ApiTenant) SetSecretType(v string) {
	o.SecretType = &v
}

// GetSecretReadOnly returns the SecretReadOnly field value if set, zero value otherwise.
func (o *ApiTenant) GetSecretReadOnly() bool {
	if o == nil || IsNil(o.SecretReadOnly) {
		var ret bool
		return ret
	}
	return *o.SecretReadOnly
}

// GetSecretReadOnlyOk returns a tuple with the SecretReadOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiTenant) GetSecretReadOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.SecretReadOnly) {
		return nil, false
	}
	return o.SecretReadOnly, true
}

// HasSecretReadOnly returns a boolean if a field has been set.
func (o *ApiTenant) HasSecretReadOnly() bool {
	if o != nil && !IsNil(o.SecretReadOnly) {
		return true
	}

	return false
}

// SetSecretReadOnly gets a reference to the given bool and assigns it to the SecretReadOnly field.
func (o *ApiTenant) SetSecretReadOnly(v bool) {
	o.SecretReadOnly = &v
}

// GetSecretConfiguration returns the SecretConfiguration field value if set, zero value otherwise.
func (o *ApiTenant) GetSecretConfiguration() map[string]map[string]interface{} {
	if o == nil || IsNil(o.SecretConfiguration) {
		var ret map[string]map[string]interface{}
		return ret
	}
	return o.SecretConfiguration
}

// GetSecretConfigurationOk returns a tuple with the SecretConfiguration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiTenant) GetSecretConfigurationOk() (map[string]map[string]interface{}, bool) {
	if o == nil || IsNil(o.SecretConfiguration) {
		return map[string]map[string]interface{}{}, false
	}
	return o.SecretConfiguration, true
}

// HasSecretConfiguration returns a boolean if a field has been set.
func (o *ApiTenant) HasSecretConfiguration() bool {
	if o != nil && !IsNil(o.SecretConfiguration) {
		return true
	}

	return false
}

// SetSecretConfiguration gets a reference to the given map[string]map[string]interface{} and assigns it to the SecretConfiguration field.
func (o *ApiTenant) SetSecretConfiguration(v map[string]map[string]interface{}) {
	o.SecretConfiguration = v
}

// GetRequireExistingNamespace returns the RequireExistingNamespace field value if set, zero value otherwise.
func (o *ApiTenant) GetRequireExistingNamespace() bool {
	if o == nil || IsNil(o.RequireExistingNamespace) {
		var ret bool
		return ret
	}
	return *o.RequireExistingNamespace
}

// GetRequireExistingNamespaceOk returns a tuple with the RequireExistingNamespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiTenant) GetRequireExistingNamespaceOk() (*bool, bool) {
	if o == nil || IsNil(o.RequireExistingNamespace) {
		return nil, false
	}
	return o.RequireExistingNamespace, true
}

// HasRequireExistingNamespace returns a boolean if a field has been set.
func (o *ApiTenant) HasRequireExistingNamespace() bool {
	if o != nil && !IsNil(o.RequireExistingNamespace) {
		return true
	}

	return false
}

// SetRequireExistingNamespace gets a reference to the given bool and assigns it to the RequireExistingNamespace field.
func (o *ApiTenant) SetRequireExistingNamespace(v bool) {
	o.RequireExistingNamespace = &v
}

// GetOutputsInInternalStorage returns the OutputsInInternalStorage field value if set, zero value otherwise.
func (o *ApiTenant) GetOutputsInInternalStorage() bool {
	if o == nil || IsNil(o.OutputsInInternalStorage) {
		var ret bool
		return ret
	}
	return *o.OutputsInInternalStorage
}

// GetOutputsInInternalStorageOk returns a tuple with the OutputsInInternalStorage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiTenant) GetOutputsInInternalStorageOk() (*bool, bool) {
	if o == nil || IsNil(o.OutputsInInternalStorage) {
		return nil, false
	}
	return o.OutputsInInternalStorage, true
}

// HasOutputsInInternalStorage returns a boolean if a field has been set.
func (o *ApiTenant) HasOutputsInInternalStorage() bool {
	if o != nil && !IsNil(o.OutputsInInternalStorage) {
		return true
	}

	return false
}

// SetOutputsInInternalStorage gets a reference to the given bool and assigns it to the OutputsInInternalStorage field.
func (o *ApiTenant) SetOutputsInInternalStorage(v bool) {
	o.OutputsInInternalStorage = &v
}

// GetLogo returns the Logo field value if set, zero value otherwise.
func (o *ApiTenant) GetLogo() string {
	if o == nil || IsNil(o.Logo) {
		var ret string
		return ret
	}
	return *o.Logo
}

// GetLogoOk returns a tuple with the Logo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiTenant) GetLogoOk() (*string, bool) {
	if o == nil || IsNil(o.Logo) {
		return nil, false
	}
	return o.Logo, true
}

// HasLogo returns a boolean if a field has been set.
func (o *ApiTenant) HasLogo() bool {
	if o != nil && !IsNil(o.Logo) {
		return true
	}

	return false
}

// SetLogo gets a reference to the given string and assigns it to the Logo field.
func (o *ApiTenant) SetLogo(v string) {
	o.Logo = &v
}

func (o ApiTenant) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiTenant) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.StorageIsolation) {
		toSerialize["storageIsolation"] = o.StorageIsolation
	}
	if !IsNil(o.SecretIsolation) {
		toSerialize["secretIsolation"] = o.SecretIsolation
	}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["deleted"] = o.Deleted
	if !IsNil(o.WorkerGroup) {
		toSerialize["workerGroup"] = o.WorkerGroup
	}
	if !IsNil(o.StorageType) {
		toSerialize["storageType"] = o.StorageType
	}
	if !IsNil(o.StorageConfiguration) {
		toSerialize["storageConfiguration"] = o.StorageConfiguration
	}
	if !IsNil(o.SecretType) {
		toSerialize["secretType"] = o.SecretType
	}
	if !IsNil(o.SecretReadOnly) {
		toSerialize["secretReadOnly"] = o.SecretReadOnly
	}
	if !IsNil(o.SecretConfiguration) {
		toSerialize["secretConfiguration"] = o.SecretConfiguration
	}
	if !IsNil(o.RequireExistingNamespace) {
		toSerialize["requireExistingNamespace"] = o.RequireExistingNamespace
	}
	if !IsNil(o.OutputsInInternalStorage) {
		toSerialize["outputsInInternalStorage"] = o.OutputsInInternalStorage
	}
	if !IsNil(o.Logo) {
		toSerialize["logo"] = o.Logo
	}
	return toSerialize, nil
}

func (o *ApiTenant) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"deleted",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varApiTenant := _ApiTenant{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varApiTenant)

	if err != nil {
		return err
	}

	*o = ApiTenant(varApiTenant)

	return err
}

type NullableApiTenant struct {
	value *ApiTenant
	isSet bool
}

func (v NullableApiTenant) Get() *ApiTenant {
	return v.value
}

func (v *NullableApiTenant) Set(val *ApiTenant) {
	v.value = val
	v.isSet = true
}

func (v NullableApiTenant) IsSet() bool {
	return v.isSet
}

func (v *NullableApiTenant) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiTenant(val *ApiTenant) *NullableApiTenant {
	return &NullableApiTenant{value: val, isSet: true}
}

func (v NullableApiTenant) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiTenant) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
