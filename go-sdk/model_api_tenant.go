/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
)

// checks if the ApiTenant type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiTenant{}

// ApiTenant struct for ApiTenant
type ApiTenant struct {
	StorageIsolation         Isolation                         `json:"storageIsolation"`
	SecretIsolation          Isolation                         `json:"secretIsolation"`
	Id                       string                            `json:"id" validate:"regexp=^[a-z0-9][a-z0-9_-]*"`
	Name                     string                            `json:"name"`
	Deleted                  bool                              `json:"deleted"`
	WorkerGroup              WorkerGroup                       `json:"workerGroup"`
	StorageType              string                            `json:"storageType"`
	StorageConfiguration     map[string]map[string]interface{} `json:"storageConfiguration"`
	SecretType               string                            `json:"secretType"`
	SecretReadOnly           bool                              `json:"secretReadOnly"`
	SecretConfiguration      map[string]map[string]interface{} `json:"secretConfiguration"`
	RequireExistingNamespace bool                              `json:"requireExistingNamespace"`
	OutputsInInternalStorage bool                              `json:"outputsInInternalStorage"`
	Logo                     string                            `json:"logo"`
	AdditionalProperties     map[string]interface{}
}

type _ApiTenant ApiTenant

// NewApiTenant instantiates a new ApiTenant object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiTenant(storageIsolation Isolation, secretIsolation Isolation, id string, name string, deleted bool, workerGroup WorkerGroup, storageType string, storageConfiguration map[string]map[string]interface{}, secretType string, secretReadOnly bool, secretConfiguration map[string]map[string]interface{}, requireExistingNamespace bool, outputsInInternalStorage bool, logo string) *ApiTenant {
	this := ApiTenant{}
	this.StorageIsolation = storageIsolation
	this.SecretIsolation = secretIsolation
	this.Id = id
	this.Name = name
	this.Deleted = deleted
	this.WorkerGroup = workerGroup
	this.StorageType = storageType
	this.StorageConfiguration = storageConfiguration
	this.SecretType = secretType
	this.SecretReadOnly = secretReadOnly
	this.SecretConfiguration = secretConfiguration
	this.RequireExistingNamespace = requireExistingNamespace
	this.OutputsInInternalStorage = outputsInInternalStorage
	this.Logo = logo
	return &this
}

// NewApiTenantWithDefaults instantiates a new ApiTenant object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiTenantWithDefaults() *ApiTenant {
	this := ApiTenant{}
	return &this
}

// GetStorageIsolation returns the StorageIsolation field value
func (o *ApiTenant) GetStorageIsolation() Isolation {
	if o == nil {
		var ret Isolation
		return ret
	}

	return o.StorageIsolation
}

// GetStorageIsolationOk returns a tuple with the StorageIsolation field value
// and a boolean to check if the value has been set.
func (o *ApiTenant) GetStorageIsolationOk() (*Isolation, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StorageIsolation, true
}

// SetStorageIsolation sets field value
func (o *ApiTenant) SetStorageIsolation(v Isolation) {
	o.StorageIsolation = v
}

// GetSecretIsolation returns the SecretIsolation field value
func (o *ApiTenant) GetSecretIsolation() Isolation {
	if o == nil {
		var ret Isolation
		return ret
	}

	return o.SecretIsolation
}

// GetSecretIsolationOk returns a tuple with the SecretIsolation field value
// and a boolean to check if the value has been set.
func (o *ApiTenant) GetSecretIsolationOk() (*Isolation, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SecretIsolation, true
}

// SetSecretIsolation sets field value
func (o *ApiTenant) SetSecretIsolation(v Isolation) {
	o.SecretIsolation = v
}

// GetId returns the Id field value
func (o *ApiTenant) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ApiTenant) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ApiTenant) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *ApiTenant) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ApiTenant) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ApiTenant) SetName(v string) {
	o.Name = v
}

// GetDeleted returns the Deleted field value
func (o *ApiTenant) GetDeleted() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Deleted
}

// GetDeletedOk returns a tuple with the Deleted field value
// and a boolean to check if the value has been set.
func (o *ApiTenant) GetDeletedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Deleted, true
}

// SetDeleted sets field value
func (o *ApiTenant) SetDeleted(v bool) {
	o.Deleted = v
}

// GetWorkerGroup returns the WorkerGroup field value
func (o *ApiTenant) GetWorkerGroup() WorkerGroup {
	if o == nil {
		var ret WorkerGroup
		return ret
	}

	return o.WorkerGroup
}

// GetWorkerGroupOk returns a tuple with the WorkerGroup field value
// and a boolean to check if the value has been set.
func (o *ApiTenant) GetWorkerGroupOk() (*WorkerGroup, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WorkerGroup, true
}

// SetWorkerGroup sets field value
func (o *ApiTenant) SetWorkerGroup(v WorkerGroup) {
	o.WorkerGroup = v
}

// GetStorageType returns the StorageType field value
func (o *ApiTenant) GetStorageType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StorageType
}

// GetStorageTypeOk returns a tuple with the StorageType field value
// and a boolean to check if the value has been set.
func (o *ApiTenant) GetStorageTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StorageType, true
}

// SetStorageType sets field value
func (o *ApiTenant) SetStorageType(v string) {
	o.StorageType = v
}

// GetStorageConfiguration returns the StorageConfiguration field value
func (o *ApiTenant) GetStorageConfiguration() map[string]map[string]interface{} {
	if o == nil {
		var ret map[string]map[string]interface{}
		return ret
	}

	return o.StorageConfiguration
}

// GetStorageConfigurationOk returns a tuple with the StorageConfiguration field value
// and a boolean to check if the value has been set.
func (o *ApiTenant) GetStorageConfigurationOk() (map[string]map[string]interface{}, bool) {
	if o == nil {
		return map[string]map[string]interface{}{}, false
	}
	return o.StorageConfiguration, true
}

// SetStorageConfiguration sets field value
func (o *ApiTenant) SetStorageConfiguration(v map[string]map[string]interface{}) {
	o.StorageConfiguration = v
}

// GetSecretType returns the SecretType field value
func (o *ApiTenant) GetSecretType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SecretType
}

// GetSecretTypeOk returns a tuple with the SecretType field value
// and a boolean to check if the value has been set.
func (o *ApiTenant) GetSecretTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SecretType, true
}

// SetSecretType sets field value
func (o *ApiTenant) SetSecretType(v string) {
	o.SecretType = v
}

// GetSecretReadOnly returns the SecretReadOnly field value
func (o *ApiTenant) GetSecretReadOnly() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.SecretReadOnly
}

// GetSecretReadOnlyOk returns a tuple with the SecretReadOnly field value
// and a boolean to check if the value has been set.
func (o *ApiTenant) GetSecretReadOnlyOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SecretReadOnly, true
}

// SetSecretReadOnly sets field value
func (o *ApiTenant) SetSecretReadOnly(v bool) {
	o.SecretReadOnly = v
}

// GetSecretConfiguration returns the SecretConfiguration field value
func (o *ApiTenant) GetSecretConfiguration() map[string]map[string]interface{} {
	if o == nil {
		var ret map[string]map[string]interface{}
		return ret
	}

	return o.SecretConfiguration
}

// GetSecretConfigurationOk returns a tuple with the SecretConfiguration field value
// and a boolean to check if the value has been set.
func (o *ApiTenant) GetSecretConfigurationOk() (map[string]map[string]interface{}, bool) {
	if o == nil {
		return map[string]map[string]interface{}{}, false
	}
	return o.SecretConfiguration, true
}

// SetSecretConfiguration sets field value
func (o *ApiTenant) SetSecretConfiguration(v map[string]map[string]interface{}) {
	o.SecretConfiguration = v
}

// GetRequireExistingNamespace returns the RequireExistingNamespace field value
func (o *ApiTenant) GetRequireExistingNamespace() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.RequireExistingNamespace
}

// GetRequireExistingNamespaceOk returns a tuple with the RequireExistingNamespace field value
// and a boolean to check if the value has been set.
func (o *ApiTenant) GetRequireExistingNamespaceOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RequireExistingNamespace, true
}

// SetRequireExistingNamespace sets field value
func (o *ApiTenant) SetRequireExistingNamespace(v bool) {
	o.RequireExistingNamespace = v
}

// GetOutputsInInternalStorage returns the OutputsInInternalStorage field value
func (o *ApiTenant) GetOutputsInInternalStorage() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.OutputsInInternalStorage
}

// GetOutputsInInternalStorageOk returns a tuple with the OutputsInInternalStorage field value
// and a boolean to check if the value has been set.
func (o *ApiTenant) GetOutputsInInternalStorageOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OutputsInInternalStorage, true
}

// SetOutputsInInternalStorage sets field value
func (o *ApiTenant) SetOutputsInInternalStorage(v bool) {
	o.OutputsInInternalStorage = v
}

// GetLogo returns the Logo field value
func (o *ApiTenant) GetLogo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Logo
}

// GetLogoOk returns a tuple with the Logo field value
// and a boolean to check if the value has been set.
func (o *ApiTenant) GetLogoOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Logo, true
}

// SetLogo sets field value
func (o *ApiTenant) SetLogo(v string) {
	o.Logo = v
}

func (o ApiTenant) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiTenant) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["storageIsolation"] = o.StorageIsolation
	toSerialize["secretIsolation"] = o.SecretIsolation
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["deleted"] = o.Deleted
	toSerialize["workerGroup"] = o.WorkerGroup
	toSerialize["storageType"] = o.StorageType
	toSerialize["storageConfiguration"] = o.StorageConfiguration
	toSerialize["secretType"] = o.SecretType
	toSerialize["secretReadOnly"] = o.SecretReadOnly
	toSerialize["secretConfiguration"] = o.SecretConfiguration
	toSerialize["requireExistingNamespace"] = o.RequireExistingNamespace
	toSerialize["outputsInInternalStorage"] = o.OutputsInInternalStorage
	toSerialize["logo"] = o.Logo

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ApiTenant) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"storageIsolation",
		"secretIsolation",
		"id",
		"name",
		"deleted",
		"workerGroup",
		"storageType",
		"storageConfiguration",
		"secretType",
		"secretReadOnly",
		"secretConfiguration",
		"requireExistingNamespace",
		"outputsInInternalStorage",
		"logo",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varApiTenant := _ApiTenant{}

	err = json.Unmarshal(data, &varApiTenant)

	if err != nil {
		return err
	}

	*o = ApiTenant(varApiTenant)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "storageIsolation")
		delete(additionalProperties, "secretIsolation")
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "deleted")
		delete(additionalProperties, "workerGroup")
		delete(additionalProperties, "storageType")
		delete(additionalProperties, "storageConfiguration")
		delete(additionalProperties, "secretType")
		delete(additionalProperties, "secretReadOnly")
		delete(additionalProperties, "secretConfiguration")
		delete(additionalProperties, "requireExistingNamespace")
		delete(additionalProperties, "outputsInInternalStorage")
		delete(additionalProperties, "logo")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableApiTenant struct {
	value *ApiTenant
	isSet bool
}

func (v NullableApiTenant) Get() *ApiTenant {
	return v.value
}

func (v *NullableApiTenant) Set(val *ApiTenant) {
	v.value = val
	v.isSet = true
}

func (v NullableApiTenant) IsSet() bool {
	return v.isSet
}

func (v *NullableApiTenant) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiTenant(val *ApiTenant) *NullableApiTenant {
	return &NullableApiTenant{value: val, isSet: true}
}

func (v NullableApiTenant) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiTenant) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
