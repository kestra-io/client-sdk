/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
)

// checks if the EventExecutionStatusEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventExecutionStatusEvent{}

// EventExecutionStatusEvent struct for EventExecutionStatusEvent
type EventExecutionStatusEvent struct {
	Data                 *ExecutionStatusEvent `json:"data,omitempty"`
	Id                   *string               `json:"id,omitempty"`
	Name                 *string               `json:"name,omitempty"`
	Comment              *string               `json:"comment,omitempty"`
	Retry                *string               `json:"retry,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _EventExecutionStatusEvent EventExecutionStatusEvent

// NewEventExecutionStatusEvent instantiates a new EventExecutionStatusEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventExecutionStatusEvent() *EventExecutionStatusEvent {
	this := EventExecutionStatusEvent{}
	return &this
}

// NewEventExecutionStatusEventWithDefaults instantiates a new EventExecutionStatusEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventExecutionStatusEventWithDefaults() *EventExecutionStatusEvent {
	this := EventExecutionStatusEvent{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *EventExecutionStatusEvent) GetData() ExecutionStatusEvent {
	if o == nil || IsNil(o.Data) {
		var ret ExecutionStatusEvent
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventExecutionStatusEvent) GetDataOk() (*ExecutionStatusEvent, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *EventExecutionStatusEvent) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given ExecutionStatusEvent and assigns it to the Data field.
func (o *EventExecutionStatusEvent) SetData(v ExecutionStatusEvent) {
	o.Data = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *EventExecutionStatusEvent) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventExecutionStatusEvent) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *EventExecutionStatusEvent) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *EventExecutionStatusEvent) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *EventExecutionStatusEvent) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventExecutionStatusEvent) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *EventExecutionStatusEvent) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *EventExecutionStatusEvent) SetName(v string) {
	o.Name = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *EventExecutionStatusEvent) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventExecutionStatusEvent) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *EventExecutionStatusEvent) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *EventExecutionStatusEvent) SetComment(v string) {
	o.Comment = &v
}

// GetRetry returns the Retry field value if set, zero value otherwise.
func (o *EventExecutionStatusEvent) GetRetry() string {
	if o == nil || IsNil(o.Retry) {
		var ret string
		return ret
	}
	return *o.Retry
}

// GetRetryOk returns a tuple with the Retry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventExecutionStatusEvent) GetRetryOk() (*string, bool) {
	if o == nil || IsNil(o.Retry) {
		return nil, false
	}
	return o.Retry, true
}

// HasRetry returns a boolean if a field has been set.
func (o *EventExecutionStatusEvent) HasRetry() bool {
	if o != nil && !IsNil(o.Retry) {
		return true
	}

	return false
}

// SetRetry gets a reference to the given string and assigns it to the Retry field.
func (o *EventExecutionStatusEvent) SetRetry(v string) {
	o.Retry = &v
}

func (o EventExecutionStatusEvent) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventExecutionStatusEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.Retry) {
		toSerialize["retry"] = o.Retry
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EventExecutionStatusEvent) UnmarshalJSON(data []byte) (err error) {
	varEventExecutionStatusEvent := _EventExecutionStatusEvent{}

	err = json.Unmarshal(data, &varEventExecutionStatusEvent)

	if err != nil {
		return err
	}

	*o = EventExecutionStatusEvent(varEventExecutionStatusEvent)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "data")
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "comment")
		delete(additionalProperties, "retry")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEventExecutionStatusEvent struct {
	value *EventExecutionStatusEvent
	isSet bool
}

func (v NullableEventExecutionStatusEvent) Get() *EventExecutionStatusEvent {
	return v.value
}

func (v *NullableEventExecutionStatusEvent) Set(val *EventExecutionStatusEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableEventExecutionStatusEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableEventExecutionStatusEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventExecutionStatusEvent(val *EventExecutionStatusEvent) *NullableEventExecutionStatusEvent {
	return &NullableEventExecutionStatusEvent{value: val, isSet: true}
}

func (v NullableEventExecutionStatusEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventExecutionStatusEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
