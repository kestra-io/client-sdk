/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
)

// checks if the IAMTenantAccessControllerApiGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IAMTenantAccessControllerApiGroup{}

// IAMTenantAccessControllerApiGroup struct for IAMTenantAccessControllerApiGroup
type IAMTenantAccessControllerApiGroup struct {
	Id                   string `json:"id"`
	Name                 string `json:"name"`
	External             bool   `json:"external"`
	AdditionalProperties map[string]interface{}
}

type _IAMTenantAccessControllerApiGroup IAMTenantAccessControllerApiGroup

// NewIAMTenantAccessControllerApiGroup instantiates a new IAMTenantAccessControllerApiGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIAMTenantAccessControllerApiGroup(id string, name string, external bool) *IAMTenantAccessControllerApiGroup {
	this := IAMTenantAccessControllerApiGroup{}
	this.Id = id
	this.Name = name
	this.External = external
	return &this
}

// NewIAMTenantAccessControllerApiGroupWithDefaults instantiates a new IAMTenantAccessControllerApiGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIAMTenantAccessControllerApiGroupWithDefaults() *IAMTenantAccessControllerApiGroup {
	this := IAMTenantAccessControllerApiGroup{}
	return &this
}

// GetId returns the Id field value
func (o *IAMTenantAccessControllerApiGroup) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *IAMTenantAccessControllerApiGroup) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *IAMTenantAccessControllerApiGroup) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *IAMTenantAccessControllerApiGroup) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *IAMTenantAccessControllerApiGroup) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *IAMTenantAccessControllerApiGroup) SetName(v string) {
	o.Name = v
}

// GetExternal returns the External field value
func (o *IAMTenantAccessControllerApiGroup) GetExternal() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.External
}

// GetExternalOk returns a tuple with the External field value
// and a boolean to check if the value has been set.
func (o *IAMTenantAccessControllerApiGroup) GetExternalOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.External, true
}

// SetExternal sets field value
func (o *IAMTenantAccessControllerApiGroup) SetExternal(v bool) {
	o.External = v
}

func (o IAMTenantAccessControllerApiGroup) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IAMTenantAccessControllerApiGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["external"] = o.External

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *IAMTenantAccessControllerApiGroup) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"external",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIAMTenantAccessControllerApiGroup := _IAMTenantAccessControllerApiGroup{}

	err = json.Unmarshal(data, &varIAMTenantAccessControllerApiGroup)

	if err != nil {
		return err
	}

	*o = IAMTenantAccessControllerApiGroup(varIAMTenantAccessControllerApiGroup)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "external")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIAMTenantAccessControllerApiGroup struct {
	value *IAMTenantAccessControllerApiGroup
	isSet bool
}

func (v NullableIAMTenantAccessControllerApiGroup) Get() *IAMTenantAccessControllerApiGroup {
	return v.value
}

func (v *NullableIAMTenantAccessControllerApiGroup) Set(val *IAMTenantAccessControllerApiGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableIAMTenantAccessControllerApiGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableIAMTenantAccessControllerApiGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIAMTenantAccessControllerApiGroup(val *IAMTenantAccessControllerApiGroup) *NullableIAMTenantAccessControllerApiGroup {
	return &NullableIAMTenantAccessControllerApiGroup{value: val, isSet: true}
}

func (v NullableIAMTenantAccessControllerApiGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIAMTenantAccessControllerApiGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
