/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
)

// ResourceType1 the model 'ResourceType1'
type ResourceType1 string

// List of ResourceType_1
const (
	RESOURCETYPE1_AUDITLOG             ResourceType1 = "AUDITLOG"
	RESOURCETYPE1_APP                  ResourceType1 = "APP"
	RESOURCETYPE1_APP_EXECUTION        ResourceType1 = "APP_EXECUTION"
	RESOURCETYPE1_BLUEPRINT            ResourceType1 = "BLUEPRINT"
	RESOURCETYPE1_BINDING              ResourceType1 = "BINDING"
	RESOURCETYPE1_DASHBOARD            ResourceType1 = "DASHBOARD"
	RESOURCETYPE1_EXECUTION            ResourceType1 = "EXECUTION"
	RESOURCETYPE1_FLOW                 ResourceType1 = "FLOW"
	RESOURCETYPE1_KV_STORE             ResourceType1 = "KV_STORE"
	RESOURCETYPE1_GROUP                ResourceType1 = "GROUP"
	RESOURCETYPE1_INVITATION           ResourceType1 = "INVITATION"
	RESOURCETYPE1_NAMESPACE            ResourceType1 = "NAMESPACE"
	RESOURCETYPE1_NAMESPACE_FILE       ResourceType1 = "NAMESPACE_FILE"
	RESOURCETYPE1_ROLE                 ResourceType1 = "ROLE"
	RESOURCETYPE1_SECURITY_INTEGRATION ResourceType1 = "SECURITY_INTEGRATION"
	RESOURCETYPE1_SECRET               ResourceType1 = "SECRET"
	RESOURCETYPE1_SETTING              ResourceType1 = "SETTING"
	RESOURCETYPE1_TEMPLATE             ResourceType1 = "TEMPLATE"
	RESOURCETYPE1_TRIGGER              ResourceType1 = "TRIGGER"
	RESOURCETYPE1_TENANT               ResourceType1 = "TENANT"
	RESOURCETYPE1_TENANT_ACCESS        ResourceType1 = "TENANT_ACCESS"
	RESOURCETYPE1_TESTSUITE            ResourceType1 = "TESTSUITE"
	RESOURCETYPE1_TESTSUITE_RUN        ResourceType1 = "TESTSUITE_RUN"
	RESOURCETYPE1_VERSIONED_PLUGIN     ResourceType1 = "VERSIONED_PLUGIN"
	RESOURCETYPE1_USER                 ResourceType1 = "USER"
	RESOURCETYPE1_WORKER_GROUP         ResourceType1 = "WORKER_GROUP"
	RESOURCETYPE1_INSTANCE             ResourceType1 = "INSTANCE"
	RESOURCETYPE1_UNKNOWN              ResourceType1 = "UNKNOWN"
)

// All allowed values of ResourceType1 enum
var AllowedResourceType1EnumValues = []ResourceType1{
	"AUDITLOG",
	"APP",
	"APP_EXECUTION",
	"BLUEPRINT",
	"BINDING",
	"DASHBOARD",
	"EXECUTION",
	"FLOW",
	"KV_STORE",
	"GROUP",
	"INVITATION",
	"NAMESPACE",
	"NAMESPACE_FILE",
	"ROLE",
	"SECURITY_INTEGRATION",
	"SECRET",
	"SETTING",
	"TEMPLATE",
	"TRIGGER",
	"TENANT",
	"TENANT_ACCESS",
	"TESTSUITE",
	"TESTSUITE_RUN",
	"VERSIONED_PLUGIN",
	"USER",
	"WORKER_GROUP",
	"INSTANCE",
	"UNKNOWN",
}

func (v *ResourceType1) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ResourceType1(value)
	for _, existing := range AllowedResourceType1EnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ResourceType1", value)
}

// NewResourceType1FromValue returns a pointer to a valid ResourceType1
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewResourceType1FromValue(v string) (*ResourceType1, error) {
	ev := ResourceType1(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ResourceType1: valid values are %v", v, AllowedResourceType1EnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ResourceType1) IsValid() bool {
	for _, existing := range AllowedResourceType1EnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ResourceType_1 value
func (v ResourceType1) Ptr() *ResourceType1 {
	return &v
}

type NullableResourceType1 struct {
	value *ResourceType1
	isSet bool
}

func (v NullableResourceType1) Get() *ResourceType1 {
	return v.value
}

func (v *NullableResourceType1) Set(val *ResourceType1) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceType1) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceType1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceType1(val *ResourceType1) *NullableResourceType1 {
	return &NullableResourceType1{value: val, isSet: true}
}

func (v NullableResourceType1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceType1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
