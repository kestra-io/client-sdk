/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
)

// checks if the FlowTopologyGraphEdge type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FlowTopologyGraphEdge{}

// FlowTopologyGraphEdge struct for FlowTopologyGraphEdge
type FlowTopologyGraphEdge struct {
	Source               string       `json:"source"`
	Target               string       `json:"target"`
	Relation             FlowRelation `json:"relation"`
	AdditionalProperties map[string]interface{}
}

type _FlowTopologyGraphEdge FlowTopologyGraphEdge

// NewFlowTopologyGraphEdge instantiates a new FlowTopologyGraphEdge object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFlowTopologyGraphEdge(source string, target string, relation FlowRelation) *FlowTopologyGraphEdge {
	this := FlowTopologyGraphEdge{}
	this.Source = source
	this.Target = target
	this.Relation = relation
	return &this
}

// NewFlowTopologyGraphEdgeWithDefaults instantiates a new FlowTopologyGraphEdge object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFlowTopologyGraphEdgeWithDefaults() *FlowTopologyGraphEdge {
	this := FlowTopologyGraphEdge{}
	return &this
}

// GetSource returns the Source field value
func (o *FlowTopologyGraphEdge) GetSource() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *FlowTopologyGraphEdge) GetSourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *FlowTopologyGraphEdge) SetSource(v string) {
	o.Source = v
}

// GetTarget returns the Target field value
func (o *FlowTopologyGraphEdge) GetTarget() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Target
}

// GetTargetOk returns a tuple with the Target field value
// and a boolean to check if the value has been set.
func (o *FlowTopologyGraphEdge) GetTargetOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Target, true
}

// SetTarget sets field value
func (o *FlowTopologyGraphEdge) SetTarget(v string) {
	o.Target = v
}

// GetRelation returns the Relation field value
func (o *FlowTopologyGraphEdge) GetRelation() FlowRelation {
	if o == nil {
		var ret FlowRelation
		return ret
	}

	return o.Relation
}

// GetRelationOk returns a tuple with the Relation field value
// and a boolean to check if the value has been set.
func (o *FlowTopologyGraphEdge) GetRelationOk() (*FlowRelation, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Relation, true
}

// SetRelation sets field value
func (o *FlowTopologyGraphEdge) SetRelation(v FlowRelation) {
	o.Relation = v
}

func (o FlowTopologyGraphEdge) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FlowTopologyGraphEdge) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["source"] = o.Source
	toSerialize["target"] = o.Target
	toSerialize["relation"] = o.Relation

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FlowTopologyGraphEdge) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"source",
		"target",
		"relation",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFlowTopologyGraphEdge := _FlowTopologyGraphEdge{}

	err = json.Unmarshal(data, &varFlowTopologyGraphEdge)

	if err != nil {
		return err
	}

	*o = FlowTopologyGraphEdge(varFlowTopologyGraphEdge)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "source")
		delete(additionalProperties, "target")
		delete(additionalProperties, "relation")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFlowTopologyGraphEdge struct {
	value *FlowTopologyGraphEdge
	isSet bool
}

func (v NullableFlowTopologyGraphEdge) Get() *FlowTopologyGraphEdge {
	return v.value
}

func (v *NullableFlowTopologyGraphEdge) Set(val *FlowTopologyGraphEdge) {
	v.value = val
	v.isSet = true
}

func (v NullableFlowTopologyGraphEdge) IsSet() bool {
	return v.isSet
}

func (v *NullableFlowTopologyGraphEdge) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFlowTopologyGraphEdge(val *FlowTopologyGraphEdge) *NullableFlowTopologyGraphEdge {
	return &NullableFlowTopologyGraphEdge{value: val, isSet: true}
}

func (v NullableFlowTopologyGraphEdge) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFlowTopologyGraphEdge) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
