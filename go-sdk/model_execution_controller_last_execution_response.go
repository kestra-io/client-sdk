/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"time"
)

// checks if the ExecutionControllerLastExecutionResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExecutionControllerLastExecutionResponse{}

// ExecutionControllerLastExecutionResponse struct for ExecutionControllerLastExecutionResponse
type ExecutionControllerLastExecutionResponse struct {
	Id                   *string    `json:"id,omitempty"`
	FlowId               *string    `json:"flowId,omitempty"`
	Namespace            *string    `json:"namespace,omitempty"`
	StartDate            *time.Time `json:"startDate,omitempty"`
	Status               *StateType `json:"status,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ExecutionControllerLastExecutionResponse ExecutionControllerLastExecutionResponse

// NewExecutionControllerLastExecutionResponse instantiates a new ExecutionControllerLastExecutionResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExecutionControllerLastExecutionResponse() *ExecutionControllerLastExecutionResponse {
	this := ExecutionControllerLastExecutionResponse{}
	return &this
}

// NewExecutionControllerLastExecutionResponseWithDefaults instantiates a new ExecutionControllerLastExecutionResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExecutionControllerLastExecutionResponseWithDefaults() *ExecutionControllerLastExecutionResponse {
	this := ExecutionControllerLastExecutionResponse{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ExecutionControllerLastExecutionResponse) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionControllerLastExecutionResponse) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ExecutionControllerLastExecutionResponse) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ExecutionControllerLastExecutionResponse) SetId(v string) {
	o.Id = &v
}

// GetFlowId returns the FlowId field value if set, zero value otherwise.
func (o *ExecutionControllerLastExecutionResponse) GetFlowId() string {
	if o == nil || IsNil(o.FlowId) {
		var ret string
		return ret
	}
	return *o.FlowId
}

// GetFlowIdOk returns a tuple with the FlowId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionControllerLastExecutionResponse) GetFlowIdOk() (*string, bool) {
	if o == nil || IsNil(o.FlowId) {
		return nil, false
	}
	return o.FlowId, true
}

// HasFlowId returns a boolean if a field has been set.
func (o *ExecutionControllerLastExecutionResponse) HasFlowId() bool {
	if o != nil && !IsNil(o.FlowId) {
		return true
	}

	return false
}

// SetFlowId gets a reference to the given string and assigns it to the FlowId field.
func (o *ExecutionControllerLastExecutionResponse) SetFlowId(v string) {
	o.FlowId = &v
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *ExecutionControllerLastExecutionResponse) GetNamespace() string {
	if o == nil || IsNil(o.Namespace) {
		var ret string
		return ret
	}
	return *o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionControllerLastExecutionResponse) GetNamespaceOk() (*string, bool) {
	if o == nil || IsNil(o.Namespace) {
		return nil, false
	}
	return o.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *ExecutionControllerLastExecutionResponse) HasNamespace() bool {
	if o != nil && !IsNil(o.Namespace) {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the Namespace field.
func (o *ExecutionControllerLastExecutionResponse) SetNamespace(v string) {
	o.Namespace = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *ExecutionControllerLastExecutionResponse) GetStartDate() time.Time {
	if o == nil || IsNil(o.StartDate) {
		var ret time.Time
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionControllerLastExecutionResponse) GetStartDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *ExecutionControllerLastExecutionResponse) HasStartDate() bool {
	if o != nil && !IsNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given time.Time and assigns it to the StartDate field.
func (o *ExecutionControllerLastExecutionResponse) SetStartDate(v time.Time) {
	o.StartDate = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ExecutionControllerLastExecutionResponse) GetStatus() StateType {
	if o == nil || IsNil(o.Status) {
		var ret StateType
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionControllerLastExecutionResponse) GetStatusOk() (*StateType, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ExecutionControllerLastExecutionResponse) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given StateType and assigns it to the Status field.
func (o *ExecutionControllerLastExecutionResponse) SetStatus(v StateType) {
	o.Status = &v
}

func (o ExecutionControllerLastExecutionResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExecutionControllerLastExecutionResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.FlowId) {
		toSerialize["flowId"] = o.FlowId
	}
	if !IsNil(o.Namespace) {
		toSerialize["namespace"] = o.Namespace
	}
	if !IsNil(o.StartDate) {
		toSerialize["startDate"] = o.StartDate
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ExecutionControllerLastExecutionResponse) UnmarshalJSON(data []byte) (err error) {
	varExecutionControllerLastExecutionResponse := _ExecutionControllerLastExecutionResponse{}

	err = json.Unmarshal(data, &varExecutionControllerLastExecutionResponse)

	if err != nil {
		return err
	}

	*o = ExecutionControllerLastExecutionResponse(varExecutionControllerLastExecutionResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "flowId")
		delete(additionalProperties, "namespace")
		delete(additionalProperties, "startDate")
		delete(additionalProperties, "status")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableExecutionControllerLastExecutionResponse struct {
	value *ExecutionControllerLastExecutionResponse
	isSet bool
}

func (v NullableExecutionControllerLastExecutionResponse) Get() *ExecutionControllerLastExecutionResponse {
	return v.value
}

func (v *NullableExecutionControllerLastExecutionResponse) Set(val *ExecutionControllerLastExecutionResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableExecutionControllerLastExecutionResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableExecutionControllerLastExecutionResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExecutionControllerLastExecutionResponse(val *ExecutionControllerLastExecutionResponse) *NullableExecutionControllerLastExecutionResponse {
	return &NullableExecutionControllerLastExecutionResponse{value: val, isSet: true}
}

func (v NullableExecutionControllerLastExecutionResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExecutionControllerLastExecutionResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
