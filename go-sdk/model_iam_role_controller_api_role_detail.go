/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
)

// checks if the IAMRoleControllerApiRoleDetail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IAMRoleControllerApiRoleDetail{}

// IAMRoleControllerApiRoleDetail struct for IAMRoleControllerApiRoleDetail
type IAMRoleControllerApiRoleDetail struct {
	Id                   *string                                                   `json:"id,omitempty"`
	Name                 *string                                                   `json:"name,omitempty"`
	Description          *string                                                   `json:"description,omitempty"`
	Permissions          *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions `json:"permissions,omitempty"`
	IsDefault            *bool                                                     `json:"isDefault,omitempty"`
	IsManaged            *bool                                                     `json:"isManaged,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _IAMRoleControllerApiRoleDetail IAMRoleControllerApiRoleDetail

// NewIAMRoleControllerApiRoleDetail instantiates a new IAMRoleControllerApiRoleDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIAMRoleControllerApiRoleDetail() *IAMRoleControllerApiRoleDetail {
	this := IAMRoleControllerApiRoleDetail{}
	return &this
}

// NewIAMRoleControllerApiRoleDetailWithDefaults instantiates a new IAMRoleControllerApiRoleDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIAMRoleControllerApiRoleDetailWithDefaults() *IAMRoleControllerApiRoleDetail {
	this := IAMRoleControllerApiRoleDetail{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *IAMRoleControllerApiRoleDetail) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IAMRoleControllerApiRoleDetail) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *IAMRoleControllerApiRoleDetail) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *IAMRoleControllerApiRoleDetail) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *IAMRoleControllerApiRoleDetail) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IAMRoleControllerApiRoleDetail) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *IAMRoleControllerApiRoleDetail) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *IAMRoleControllerApiRoleDetail) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *IAMRoleControllerApiRoleDetail) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IAMRoleControllerApiRoleDetail) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *IAMRoleControllerApiRoleDetail) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *IAMRoleControllerApiRoleDetail) SetDescription(v string) {
	o.Description = &v
}

// GetPermissions returns the Permissions field value if set, zero value otherwise.
func (o *IAMRoleControllerApiRoleDetail) GetPermissions() IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions {
	if o == nil || IsNil(o.Permissions) {
		var ret IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions
		return ret
	}
	return *o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IAMRoleControllerApiRoleDetail) GetPermissionsOk() (*IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions, bool) {
	if o == nil || IsNil(o.Permissions) {
		return nil, false
	}
	return o.Permissions, true
}

// HasPermissions returns a boolean if a field has been set.
func (o *IAMRoleControllerApiRoleDetail) HasPermissions() bool {
	if o != nil && !IsNil(o.Permissions) {
		return true
	}

	return false
}

// SetPermissions gets a reference to the given IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions and assigns it to the Permissions field.
func (o *IAMRoleControllerApiRoleDetail) SetPermissions(v IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) {
	o.Permissions = &v
}

// GetIsDefault returns the IsDefault field value if set, zero value otherwise.
func (o *IAMRoleControllerApiRoleDetail) GetIsDefault() bool {
	if o == nil || IsNil(o.IsDefault) {
		var ret bool
		return ret
	}
	return *o.IsDefault
}

// GetIsDefaultOk returns a tuple with the IsDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IAMRoleControllerApiRoleDetail) GetIsDefaultOk() (*bool, bool) {
	if o == nil || IsNil(o.IsDefault) {
		return nil, false
	}
	return o.IsDefault, true
}

// HasIsDefault returns a boolean if a field has been set.
func (o *IAMRoleControllerApiRoleDetail) HasIsDefault() bool {
	if o != nil && !IsNil(o.IsDefault) {
		return true
	}

	return false
}

// SetIsDefault gets a reference to the given bool and assigns it to the IsDefault field.
func (o *IAMRoleControllerApiRoleDetail) SetIsDefault(v bool) {
	o.IsDefault = &v
}

// GetIsManaged returns the IsManaged field value if set, zero value otherwise.
func (o *IAMRoleControllerApiRoleDetail) GetIsManaged() bool {
	if o == nil || IsNil(o.IsManaged) {
		var ret bool
		return ret
	}
	return *o.IsManaged
}

// GetIsManagedOk returns a tuple with the IsManaged field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IAMRoleControllerApiRoleDetail) GetIsManagedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsManaged) {
		return nil, false
	}
	return o.IsManaged, true
}

// HasIsManaged returns a boolean if a field has been set.
func (o *IAMRoleControllerApiRoleDetail) HasIsManaged() bool {
	if o != nil && !IsNil(o.IsManaged) {
		return true
	}

	return false
}

// SetIsManaged gets a reference to the given bool and assigns it to the IsManaged field.
func (o *IAMRoleControllerApiRoleDetail) SetIsManaged(v bool) {
	o.IsManaged = &v
}

func (o IAMRoleControllerApiRoleDetail) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IAMRoleControllerApiRoleDetail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Permissions) {
		toSerialize["permissions"] = o.Permissions
	}
	if !IsNil(o.IsDefault) {
		toSerialize["isDefault"] = o.IsDefault
	}
	if !IsNil(o.IsManaged) {
		toSerialize["isManaged"] = o.IsManaged
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *IAMRoleControllerApiRoleDetail) UnmarshalJSON(data []byte) (err error) {
	varIAMRoleControllerApiRoleDetail := _IAMRoleControllerApiRoleDetail{}

	err = json.Unmarshal(data, &varIAMRoleControllerApiRoleDetail)

	if err != nil {
		return err
	}

	*o = IAMRoleControllerApiRoleDetail(varIAMRoleControllerApiRoleDetail)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "permissions")
		delete(additionalProperties, "isDefault")
		delete(additionalProperties, "isManaged")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIAMRoleControllerApiRoleDetail struct {
	value *IAMRoleControllerApiRoleDetail
	isSet bool
}

func (v NullableIAMRoleControllerApiRoleDetail) Get() *IAMRoleControllerApiRoleDetail {
	return v.value
}

func (v *NullableIAMRoleControllerApiRoleDetail) Set(val *IAMRoleControllerApiRoleDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableIAMRoleControllerApiRoleDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableIAMRoleControllerApiRoleDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIAMRoleControllerApiRoleDetail(val *IAMRoleControllerApiRoleDetail) *NullableIAMRoleControllerApiRoleDetail {
	return &NullableIAMRoleControllerApiRoleDetail{value: val, isSet: true}
}

func (v NullableIAMRoleControllerApiRoleDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIAMRoleControllerApiRoleDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
