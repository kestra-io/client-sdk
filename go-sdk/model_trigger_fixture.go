/*
Kestra EE

All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the TriggerFixture type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TriggerFixture{}

// TriggerFixture struct for TriggerFixture
type TriggerFixture struct {
	Id        string                            `json:"id"`
	Type      string                            `json:"type"`
	Variables map[string]map[string]interface{} `json:"variables,omitempty"`
}

type _TriggerFixture TriggerFixture

// NewTriggerFixture instantiates a new TriggerFixture object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTriggerFixture(id string, type_ string) *TriggerFixture {
	this := TriggerFixture{}
	this.Id = id
	this.Type = type_
	return &this
}

// NewTriggerFixtureWithDefaults instantiates a new TriggerFixture object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTriggerFixtureWithDefaults() *TriggerFixture {
	this := TriggerFixture{}
	return &this
}

// GetId returns the Id field value
func (o *TriggerFixture) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *TriggerFixture) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *TriggerFixture) SetId(v string) {
	o.Id = v
}

// GetType returns the Type field value
func (o *TriggerFixture) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *TriggerFixture) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *TriggerFixture) SetType(v string) {
	o.Type = v
}

// GetVariables returns the Variables field value if set, zero value otherwise.
func (o *TriggerFixture) GetVariables() map[string]map[string]interface{} {
	if o == nil || IsNil(o.Variables) {
		var ret map[string]map[string]interface{}
		return ret
	}
	return o.Variables
}

// GetVariablesOk returns a tuple with the Variables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TriggerFixture) GetVariablesOk() (map[string]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Variables) {
		return map[string]map[string]interface{}{}, false
	}
	return o.Variables, true
}

// HasVariables returns a boolean if a field has been set.
func (o *TriggerFixture) HasVariables() bool {
	if o != nil && !IsNil(o.Variables) {
		return true
	}

	return false
}

// SetVariables gets a reference to the given map[string]map[string]interface{} and assigns it to the Variables field.
func (o *TriggerFixture) SetVariables(v map[string]map[string]interface{}) {
	o.Variables = v
}

func (o TriggerFixture) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TriggerFixture) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["type"] = o.Type
	if !IsNil(o.Variables) {
		toSerialize["variables"] = o.Variables
	}
	return toSerialize, nil
}

func (o *TriggerFixture) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTriggerFixture := _TriggerFixture{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTriggerFixture)

	if err != nil {
		return err
	}

	*o = TriggerFixture(varTriggerFixture)

	return err
}

type NullableTriggerFixture struct {
	value *TriggerFixture
	isSet bool
}

func (v NullableTriggerFixture) Get() *TriggerFixture {
	return v.value
}

func (v *NullableTriggerFixture) Set(val *TriggerFixture) {
	v.value = val
	v.isSet = true
}

func (v NullableTriggerFixture) IsSet() bool {
	return v.isSet
}

func (v *NullableTriggerFixture) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTriggerFixture(val *TriggerFixture) *NullableTriggerFixture {
	return &NullableTriggerFixture{value: val, isSet: true}
}

func (v NullableTriggerFixture) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTriggerFixture) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
