/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// FlowWithSourceAllOfLabels - struct for FlowWithSourceAllOfLabels
type FlowWithSourceAllOfLabels struct {
	MapObjectObject *MapObjectObject
	ArrayOfString   *[]string
}

// MapObjectObjectAsFlowWithSourceAllOfLabels is a convenience function that returns MapObjectObject wrapped in FlowWithSourceAllOfLabels
func MapObjectObjectAsFlowWithSourceAllOfLabels(v *MapObjectObject) FlowWithSourceAllOfLabels {
	return FlowWithSourceAllOfLabels{
		MapObjectObject: v,
	}
}

// []stringAsFlowWithSourceAllOfLabels is a convenience function that returns []string wrapped in FlowWithSourceAllOfLabels
func ArrayOfStringAsFlowWithSourceAllOfLabels(v *[]string) FlowWithSourceAllOfLabels {
	return FlowWithSourceAllOfLabels{
		ArrayOfString: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *FlowWithSourceAllOfLabels) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into MapObjectObject
	err = newStrictDecoder(data).Decode(&dst.MapObjectObject)
	if err == nil {
		jsonMapObjectObject, _ := json.Marshal(dst.MapObjectObject)
		if string(jsonMapObjectObject) == "{}" { // empty struct
			dst.MapObjectObject = nil
		} else {
			if err = validator.Validate(dst.MapObjectObject); err != nil {
				dst.MapObjectObject = nil
			} else {
				match++
			}
		}
	} else {
		dst.MapObjectObject = nil
	}

	// try to unmarshal data into ArrayOfString
	err = newStrictDecoder(data).Decode(&dst.ArrayOfString)
	if err == nil {
		jsonArrayOfString, _ := json.Marshal(dst.ArrayOfString)
		if string(jsonArrayOfString) == "{}" { // empty struct
			dst.ArrayOfString = nil
		} else {
			if err = validator.Validate(dst.ArrayOfString); err != nil {
				dst.ArrayOfString = nil
			} else {
				match++
			}
		}
	} else {
		dst.ArrayOfString = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.MapObjectObject = nil
		dst.ArrayOfString = nil

		return fmt.Errorf("data matches more than one schema in oneOf(FlowWithSourceAllOfLabels)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(FlowWithSourceAllOfLabels)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src FlowWithSourceAllOfLabels) MarshalJSON() ([]byte, error) {
	if src.MapObjectObject != nil {
		return json.Marshal(&src.MapObjectObject)
	}

	if src.ArrayOfString != nil {
		return json.Marshal(&src.ArrayOfString)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *FlowWithSourceAllOfLabels) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.MapObjectObject != nil {
		return obj.MapObjectObject
	}

	if obj.ArrayOfString != nil {
		return obj.ArrayOfString
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj FlowWithSourceAllOfLabels) GetActualInstanceValue() interface{} {
	if obj.MapObjectObject != nil {
		return *obj.MapObjectObject
	}

	if obj.ArrayOfString != nil {
		return *obj.ArrayOfString
	}

	// all schemas are nil
	return nil
}

type NullableFlowWithSourceAllOfLabels struct {
	value *FlowWithSourceAllOfLabels
	isSet bool
}

func (v NullableFlowWithSourceAllOfLabels) Get() *FlowWithSourceAllOfLabels {
	return v.value
}

func (v *NullableFlowWithSourceAllOfLabels) Set(val *FlowWithSourceAllOfLabels) {
	v.value = val
	v.isSet = true
}

func (v NullableFlowWithSourceAllOfLabels) IsSet() bool {
	return v.isSet
}

func (v *NullableFlowWithSourceAllOfLabels) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFlowWithSourceAllOfLabels(val *FlowWithSourceAllOfLabels) *NullableFlowWithSourceAllOfLabels {
	return &NullableFlowWithSourceAllOfLabels{value: val, isSet: true}
}

func (v NullableFlowWithSourceAllOfLabels) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFlowWithSourceAllOfLabels) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
