/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
)

// SLABehavior the model 'SLABehavior'
type SLABehavior string

// List of SLA.Behavior
const (
	SLABEHAVIOR_FAIL   SLABehavior = "FAIL"
	SLABEHAVIOR_CANCEL SLABehavior = "CANCEL"
	SLABEHAVIOR_NONE   SLABehavior = "NONE"
)

// All allowed values of SLABehavior enum
var AllowedSLABehaviorEnumValues = []SLABehavior{
	"FAIL",
	"CANCEL",
	"NONE",
}

func (v *SLABehavior) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SLABehavior(value)
	for _, existing := range AllowedSLABehaviorEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SLABehavior", value)
}

// NewSLABehaviorFromValue returns a pointer to a valid SLABehavior
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSLABehaviorFromValue(v string) (*SLABehavior, error) {
	ev := SLABehavior(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SLABehavior: valid values are %v", v, AllowedSLABehaviorEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SLABehavior) IsValid() bool {
	for _, existing := range AllowedSLABehaviorEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SLA.Behavior value
func (v SLABehavior) Ptr() *SLABehavior {
	return &v
}

type NullableSLABehavior struct {
	value *SLABehavior
	isSet bool
}

func (v NullableSLABehavior) Get() *SLABehavior {
	return v.value
}

func (v *NullableSLABehavior) Set(val *SLABehavior) {
	v.value = val
	v.isSet = true
}

func (v NullableSLABehavior) IsSet() bool {
	return v.isSet
}

func (v *NullableSLABehavior) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSLABehavior(val *SLABehavior) *NullableSLABehavior {
	return &NullableSLABehavior{value: val, isSet: true}
}

func (v NullableSLABehavior) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSLABehavior) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
