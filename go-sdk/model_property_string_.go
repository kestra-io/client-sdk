/*
Kestra EE

All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
)

// checks if the PropertyString type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PropertyString{}

// PropertyString struct for PropertyString
type PropertyString struct {
	Expression *string `json:"expression,omitempty"`
	Value      *string `json:"value,omitempty"`
}

// NewPropertyString instantiates a new PropertyString object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPropertyString() *PropertyString {
	this := PropertyString{}
	return &this
}

// NewPropertyStringWithDefaults instantiates a new PropertyString object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPropertyStringWithDefaults() *PropertyString {
	this := PropertyString{}
	return &this
}

// GetExpression returns the Expression field value if set, zero value otherwise.
func (o *PropertyString) GetExpression() string {
	if o == nil || IsNil(o.Expression) {
		var ret string
		return ret
	}
	return *o.Expression
}

// GetExpressionOk returns a tuple with the Expression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertyString) GetExpressionOk() (*string, bool) {
	if o == nil || IsNil(o.Expression) {
		return nil, false
	}
	return o.Expression, true
}

// HasExpression returns a boolean if a field has been set.
func (o *PropertyString) HasExpression() bool {
	if o != nil && !IsNil(o.Expression) {
		return true
	}

	return false
}

// SetExpression gets a reference to the given string and assigns it to the Expression field.
func (o *PropertyString) SetExpression(v string) {
	o.Expression = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *PropertyString) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertyString) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *PropertyString) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *PropertyString) SetValue(v string) {
	o.Value = &v
}

func (o PropertyString) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PropertyString) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Expression) {
		toSerialize["expression"] = o.Expression
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullablePropertyString struct {
	value *PropertyString
	isSet bool
}

func (v NullablePropertyString) Get() *PropertyString {
	return v.value
}

func (v *NullablePropertyString) Set(val *PropertyString) {
	v.value = val
	v.isSet = true
}

func (v NullablePropertyString) IsSet() bool {
	return v.isSet
}

func (v *NullablePropertyString) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePropertyString(val *PropertyString) *NullablePropertyString {
	return &NullablePropertyString{value: val, isSet: true}
}

func (v NullablePropertyString) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePropertyString) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
