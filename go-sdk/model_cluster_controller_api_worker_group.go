/*
Kestra EE

All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
)

// checks if the ClusterControllerApiWorkerGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClusterControllerApiWorkerGroup{}

// ClusterControllerApiWorkerGroup ApiWorkerGroup.
type ClusterControllerApiWorkerGroup struct {
	// The ID of worker group.
	Id *string `json:"id,omitempty"`
	// The key of the worker group.
	Key *string `json:"key,omitempty"`
	// The description of the worker group.
	Description    *string  `json:"description,omitempty"`
	AllowedTenants []string `json:"allowedTenants,omitempty"`
}

// NewClusterControllerApiWorkerGroup instantiates a new ClusterControllerApiWorkerGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterControllerApiWorkerGroup() *ClusterControllerApiWorkerGroup {
	this := ClusterControllerApiWorkerGroup{}
	return &this
}

// NewClusterControllerApiWorkerGroupWithDefaults instantiates a new ClusterControllerApiWorkerGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterControllerApiWorkerGroupWithDefaults() *ClusterControllerApiWorkerGroup {
	this := ClusterControllerApiWorkerGroup{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ClusterControllerApiWorkerGroup) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterControllerApiWorkerGroup) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ClusterControllerApiWorkerGroup) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ClusterControllerApiWorkerGroup) SetId(v string) {
	o.Id = &v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *ClusterControllerApiWorkerGroup) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterControllerApiWorkerGroup) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *ClusterControllerApiWorkerGroup) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *ClusterControllerApiWorkerGroup) SetKey(v string) {
	o.Key = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ClusterControllerApiWorkerGroup) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterControllerApiWorkerGroup) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ClusterControllerApiWorkerGroup) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ClusterControllerApiWorkerGroup) SetDescription(v string) {
	o.Description = &v
}

// GetAllowedTenants returns the AllowedTenants field value if set, zero value otherwise.
func (o *ClusterControllerApiWorkerGroup) GetAllowedTenants() []string {
	if o == nil || IsNil(o.AllowedTenants) {
		var ret []string
		return ret
	}
	return o.AllowedTenants
}

// GetAllowedTenantsOk returns a tuple with the AllowedTenants field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterControllerApiWorkerGroup) GetAllowedTenantsOk() ([]string, bool) {
	if o == nil || IsNil(o.AllowedTenants) {
		return nil, false
	}
	return o.AllowedTenants, true
}

// HasAllowedTenants returns a boolean if a field has been set.
func (o *ClusterControllerApiWorkerGroup) HasAllowedTenants() bool {
	if o != nil && !IsNil(o.AllowedTenants) {
		return true
	}

	return false
}

// SetAllowedTenants gets a reference to the given []string and assigns it to the AllowedTenants field.
func (o *ClusterControllerApiWorkerGroup) SetAllowedTenants(v []string) {
	o.AllowedTenants = v
}

func (o ClusterControllerApiWorkerGroup) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClusterControllerApiWorkerGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.AllowedTenants) {
		toSerialize["allowedTenants"] = o.AllowedTenants
	}
	return toSerialize, nil
}

type NullableClusterControllerApiWorkerGroup struct {
	value *ClusterControllerApiWorkerGroup
	isSet bool
}

func (v NullableClusterControllerApiWorkerGroup) Get() *ClusterControllerApiWorkerGroup {
	return v.value
}

func (v *NullableClusterControllerApiWorkerGroup) Set(val *ClusterControllerApiWorkerGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterControllerApiWorkerGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterControllerApiWorkerGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterControllerApiWorkerGroup(val *ClusterControllerApiWorkerGroup) *NullableClusterControllerApiWorkerGroup {
	return &NullableClusterControllerApiWorkerGroup{value: val, isSet: true}
}

func (v NullableClusterControllerApiWorkerGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterControllerApiWorkerGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
