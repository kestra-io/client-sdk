/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
)

// checks if the InstanceControllerApiCreateOrUpdateWorkerGroupRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InstanceControllerApiCreateOrUpdateWorkerGroupRequest{}

// InstanceControllerApiCreateOrUpdateWorkerGroupRequest ApiCreateWorkerGroupRequest.
type InstanceControllerApiCreateOrUpdateWorkerGroupRequest struct {
	// The key of the worker group.
	Key string `json:"key"`
	// The description of the worker group.
	Description          *string  `json:"description,omitempty"`
	AllowedTenants       []string `json:"allowedTenants,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _InstanceControllerApiCreateOrUpdateWorkerGroupRequest InstanceControllerApiCreateOrUpdateWorkerGroupRequest

// NewInstanceControllerApiCreateOrUpdateWorkerGroupRequest instantiates a new InstanceControllerApiCreateOrUpdateWorkerGroupRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstanceControllerApiCreateOrUpdateWorkerGroupRequest(key string) *InstanceControllerApiCreateOrUpdateWorkerGroupRequest {
	this := InstanceControllerApiCreateOrUpdateWorkerGroupRequest{}
	this.Key = key
	return &this
}

// NewInstanceControllerApiCreateOrUpdateWorkerGroupRequestWithDefaults instantiates a new InstanceControllerApiCreateOrUpdateWorkerGroupRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceControllerApiCreateOrUpdateWorkerGroupRequestWithDefaults() *InstanceControllerApiCreateOrUpdateWorkerGroupRequest {
	this := InstanceControllerApiCreateOrUpdateWorkerGroupRequest{}
	return &this
}

// GetKey returns the Key field value
func (o *InstanceControllerApiCreateOrUpdateWorkerGroupRequest) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *InstanceControllerApiCreateOrUpdateWorkerGroupRequest) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *InstanceControllerApiCreateOrUpdateWorkerGroupRequest) SetKey(v string) {
	o.Key = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *InstanceControllerApiCreateOrUpdateWorkerGroupRequest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceControllerApiCreateOrUpdateWorkerGroupRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *InstanceControllerApiCreateOrUpdateWorkerGroupRequest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *InstanceControllerApiCreateOrUpdateWorkerGroupRequest) SetDescription(v string) {
	o.Description = &v
}

// GetAllowedTenants returns the AllowedTenants field value if set, zero value otherwise.
func (o *InstanceControllerApiCreateOrUpdateWorkerGroupRequest) GetAllowedTenants() []string {
	if o == nil || IsNil(o.AllowedTenants) {
		var ret []string
		return ret
	}
	return o.AllowedTenants
}

// GetAllowedTenantsOk returns a tuple with the AllowedTenants field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceControllerApiCreateOrUpdateWorkerGroupRequest) GetAllowedTenantsOk() ([]string, bool) {
	if o == nil || IsNil(o.AllowedTenants) {
		return nil, false
	}
	return o.AllowedTenants, true
}

// HasAllowedTenants returns a boolean if a field has been set.
func (o *InstanceControllerApiCreateOrUpdateWorkerGroupRequest) HasAllowedTenants() bool {
	if o != nil && !IsNil(o.AllowedTenants) {
		return true
	}

	return false
}

// SetAllowedTenants gets a reference to the given []string and assigns it to the AllowedTenants field.
func (o *InstanceControllerApiCreateOrUpdateWorkerGroupRequest) SetAllowedTenants(v []string) {
	o.AllowedTenants = v
}

func (o InstanceControllerApiCreateOrUpdateWorkerGroupRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InstanceControllerApiCreateOrUpdateWorkerGroupRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["key"] = o.Key
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.AllowedTenants) {
		toSerialize["allowedTenants"] = o.AllowedTenants
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *InstanceControllerApiCreateOrUpdateWorkerGroupRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"key",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInstanceControllerApiCreateOrUpdateWorkerGroupRequest := _InstanceControllerApiCreateOrUpdateWorkerGroupRequest{}

	err = json.Unmarshal(data, &varInstanceControllerApiCreateOrUpdateWorkerGroupRequest)

	if err != nil {
		return err
	}

	*o = InstanceControllerApiCreateOrUpdateWorkerGroupRequest(varInstanceControllerApiCreateOrUpdateWorkerGroupRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "key")
		delete(additionalProperties, "description")
		delete(additionalProperties, "allowedTenants")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInstanceControllerApiCreateOrUpdateWorkerGroupRequest struct {
	value *InstanceControllerApiCreateOrUpdateWorkerGroupRequest
	isSet bool
}

func (v NullableInstanceControllerApiCreateOrUpdateWorkerGroupRequest) Get() *InstanceControllerApiCreateOrUpdateWorkerGroupRequest {
	return v.value
}

func (v *NullableInstanceControllerApiCreateOrUpdateWorkerGroupRequest) Set(val *InstanceControllerApiCreateOrUpdateWorkerGroupRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceControllerApiCreateOrUpdateWorkerGroupRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceControllerApiCreateOrUpdateWorkerGroupRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceControllerApiCreateOrUpdateWorkerGroupRequest(val *InstanceControllerApiCreateOrUpdateWorkerGroupRequest) *NullableInstanceControllerApiCreateOrUpdateWorkerGroupRequest {
	return &NullableInstanceControllerApiCreateOrUpdateWorkerGroupRequest{value: val, isSet: true}
}

func (v NullableInstanceControllerApiCreateOrUpdateWorkerGroupRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceControllerApiCreateOrUpdateWorkerGroupRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
