/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
)

// checks if the AbstractTrigger type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AbstractTrigger{}

// AbstractTrigger struct for AbstractTrigger
type AbstractTrigger struct {
	// Deprecated
	MinLogLevel          *Level                                `json:"minLogLevel,omitempty"`
	Id                   string                                `json:"id" validate:"regexp=^[a-zA-Z0-9][a-zA-Z0-9_-]*"`
	Type                 string                                `json:"type" validate:"regexp=\\\\p{javaJavaIdentifierStart}\\\\p{javaJavaIdentifierPart}*(\\\\.\\\\p{javaJavaIdentifierStart}\\\\p{javaJavaIdentifierPart}*)*"`
	Version              *string                               `json:"version,omitempty" validate:"regexp=\\\\d+\\\\.\\\\d+\\\\.\\\\d+(-[a-zA-Z0-9-]+)?|([a-zA-Z0-9]+)"`
	Description          *string                               `json:"description,omitempty"`
	Conditions           []Condition                           `json:"conditions,omitempty"`
	Disabled             bool                                  `json:"disabled"`
	WorkerGroup          *WorkerGroup                          `json:"workerGroup,omitempty"`
	LogLevel             *Level                                `json:"logLevel,omitempty"`
	Labels               *TheLabelsToPassToTheExecutionCreated `json:"labels,omitempty"`
	StopAfter            []StateType                           `json:"stopAfter,omitempty"`
	LogToFile            *bool                                 `json:"logToFile,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AbstractTrigger AbstractTrigger

// NewAbstractTrigger instantiates a new AbstractTrigger object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAbstractTrigger(id string, type_ string, disabled bool) *AbstractTrigger {
	this := AbstractTrigger{}
	this.Id = id
	this.Type = type_
	this.Disabled = disabled
	return &this
}

// NewAbstractTriggerWithDefaults instantiates a new AbstractTrigger object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAbstractTriggerWithDefaults() *AbstractTrigger {
	this := AbstractTrigger{}
	return &this
}

// GetMinLogLevel returns the MinLogLevel field value if set, zero value otherwise.
// Deprecated
func (o *AbstractTrigger) GetMinLogLevel() Level {
	if o == nil || IsNil(o.MinLogLevel) {
		var ret Level
		return ret
	}
	return *o.MinLogLevel
}

// GetMinLogLevelOk returns a tuple with the MinLogLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *AbstractTrigger) GetMinLogLevelOk() (*Level, bool) {
	if o == nil || IsNil(o.MinLogLevel) {
		return nil, false
	}
	return o.MinLogLevel, true
}

// HasMinLogLevel returns a boolean if a field has been set.
func (o *AbstractTrigger) HasMinLogLevel() bool {
	if o != nil && !IsNil(o.MinLogLevel) {
		return true
	}

	return false
}

// SetMinLogLevel gets a reference to the given Level and assigns it to the MinLogLevel field.
// Deprecated
func (o *AbstractTrigger) SetMinLogLevel(v Level) {
	o.MinLogLevel = &v
}

// GetId returns the Id field value
func (o *AbstractTrigger) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *AbstractTrigger) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *AbstractTrigger) SetId(v string) {
	o.Id = v
}

// GetType returns the Type field value
func (o *AbstractTrigger) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *AbstractTrigger) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *AbstractTrigger) SetType(v string) {
	o.Type = v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *AbstractTrigger) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AbstractTrigger) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *AbstractTrigger) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *AbstractTrigger) SetVersion(v string) {
	o.Version = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AbstractTrigger) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AbstractTrigger) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AbstractTrigger) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AbstractTrigger) SetDescription(v string) {
	o.Description = &v
}

// GetConditions returns the Conditions field value if set, zero value otherwise.
func (o *AbstractTrigger) GetConditions() []Condition {
	if o == nil || IsNil(o.Conditions) {
		var ret []Condition
		return ret
	}
	return o.Conditions
}

// GetConditionsOk returns a tuple with the Conditions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AbstractTrigger) GetConditionsOk() ([]Condition, bool) {
	if o == nil || IsNil(o.Conditions) {
		return nil, false
	}
	return o.Conditions, true
}

// HasConditions returns a boolean if a field has been set.
func (o *AbstractTrigger) HasConditions() bool {
	if o != nil && !IsNil(o.Conditions) {
		return true
	}

	return false
}

// SetConditions gets a reference to the given []Condition and assigns it to the Conditions field.
func (o *AbstractTrigger) SetConditions(v []Condition) {
	o.Conditions = v
}

// GetDisabled returns the Disabled field value
func (o *AbstractTrigger) GetDisabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value
// and a boolean to check if the value has been set.
func (o *AbstractTrigger) GetDisabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Disabled, true
}

// SetDisabled sets field value
func (o *AbstractTrigger) SetDisabled(v bool) {
	o.Disabled = v
}

// GetWorkerGroup returns the WorkerGroup field value if set, zero value otherwise.
func (o *AbstractTrigger) GetWorkerGroup() WorkerGroup {
	if o == nil || IsNil(o.WorkerGroup) {
		var ret WorkerGroup
		return ret
	}
	return *o.WorkerGroup
}

// GetWorkerGroupOk returns a tuple with the WorkerGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AbstractTrigger) GetWorkerGroupOk() (*WorkerGroup, bool) {
	if o == nil || IsNil(o.WorkerGroup) {
		return nil, false
	}
	return o.WorkerGroup, true
}

// HasWorkerGroup returns a boolean if a field has been set.
func (o *AbstractTrigger) HasWorkerGroup() bool {
	if o != nil && !IsNil(o.WorkerGroup) {
		return true
	}

	return false
}

// SetWorkerGroup gets a reference to the given WorkerGroup and assigns it to the WorkerGroup field.
func (o *AbstractTrigger) SetWorkerGroup(v WorkerGroup) {
	o.WorkerGroup = &v
}

// GetLogLevel returns the LogLevel field value if set, zero value otherwise.
func (o *AbstractTrigger) GetLogLevel() Level {
	if o == nil || IsNil(o.LogLevel) {
		var ret Level
		return ret
	}
	return *o.LogLevel
}

// GetLogLevelOk returns a tuple with the LogLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AbstractTrigger) GetLogLevelOk() (*Level, bool) {
	if o == nil || IsNil(o.LogLevel) {
		return nil, false
	}
	return o.LogLevel, true
}

// HasLogLevel returns a boolean if a field has been set.
func (o *AbstractTrigger) HasLogLevel() bool {
	if o != nil && !IsNil(o.LogLevel) {
		return true
	}

	return false
}

// SetLogLevel gets a reference to the given Level and assigns it to the LogLevel field.
func (o *AbstractTrigger) SetLogLevel(v Level) {
	o.LogLevel = &v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *AbstractTrigger) GetLabels() TheLabelsToPassToTheExecutionCreated {
	if o == nil || IsNil(o.Labels) {
		var ret TheLabelsToPassToTheExecutionCreated
		return ret
	}
	return *o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AbstractTrigger) GetLabelsOk() (*TheLabelsToPassToTheExecutionCreated, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *AbstractTrigger) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given TheLabelsToPassToTheExecutionCreated and assigns it to the Labels field.
func (o *AbstractTrigger) SetLabels(v TheLabelsToPassToTheExecutionCreated) {
	o.Labels = &v
}

// GetStopAfter returns the StopAfter field value if set, zero value otherwise.
func (o *AbstractTrigger) GetStopAfter() []StateType {
	if o == nil || IsNil(o.StopAfter) {
		var ret []StateType
		return ret
	}
	return o.StopAfter
}

// GetStopAfterOk returns a tuple with the StopAfter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AbstractTrigger) GetStopAfterOk() ([]StateType, bool) {
	if o == nil || IsNil(o.StopAfter) {
		return nil, false
	}
	return o.StopAfter, true
}

// HasStopAfter returns a boolean if a field has been set.
func (o *AbstractTrigger) HasStopAfter() bool {
	if o != nil && !IsNil(o.StopAfter) {
		return true
	}

	return false
}

// SetStopAfter gets a reference to the given []StateType and assigns it to the StopAfter field.
func (o *AbstractTrigger) SetStopAfter(v []StateType) {
	o.StopAfter = v
}

// GetLogToFile returns the LogToFile field value if set, zero value otherwise.
func (o *AbstractTrigger) GetLogToFile() bool {
	if o == nil || IsNil(o.LogToFile) {
		var ret bool
		return ret
	}
	return *o.LogToFile
}

// GetLogToFileOk returns a tuple with the LogToFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AbstractTrigger) GetLogToFileOk() (*bool, bool) {
	if o == nil || IsNil(o.LogToFile) {
		return nil, false
	}
	return o.LogToFile, true
}

// HasLogToFile returns a boolean if a field has been set.
func (o *AbstractTrigger) HasLogToFile() bool {
	if o != nil && !IsNil(o.LogToFile) {
		return true
	}

	return false
}

// SetLogToFile gets a reference to the given bool and assigns it to the LogToFile field.
func (o *AbstractTrigger) SetLogToFile(v bool) {
	o.LogToFile = &v
}

func (o AbstractTrigger) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AbstractTrigger) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MinLogLevel) {
		toSerialize["minLogLevel"] = o.MinLogLevel
	}
	toSerialize["id"] = o.Id
	toSerialize["type"] = o.Type
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Conditions) {
		toSerialize["conditions"] = o.Conditions
	}
	toSerialize["disabled"] = o.Disabled
	if !IsNil(o.WorkerGroup) {
		toSerialize["workerGroup"] = o.WorkerGroup
	}
	if !IsNil(o.LogLevel) {
		toSerialize["logLevel"] = o.LogLevel
	}
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	if !IsNil(o.StopAfter) {
		toSerialize["stopAfter"] = o.StopAfter
	}
	if !IsNil(o.LogToFile) {
		toSerialize["logToFile"] = o.LogToFile
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AbstractTrigger) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"type",
		"disabled",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAbstractTrigger := _AbstractTrigger{}

	err = json.Unmarshal(data, &varAbstractTrigger)

	if err != nil {
		return err
	}

	*o = AbstractTrigger(varAbstractTrigger)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "minLogLevel")
		delete(additionalProperties, "id")
		delete(additionalProperties, "type")
		delete(additionalProperties, "version")
		delete(additionalProperties, "description")
		delete(additionalProperties, "conditions")
		delete(additionalProperties, "disabled")
		delete(additionalProperties, "workerGroup")
		delete(additionalProperties, "logLevel")
		delete(additionalProperties, "labels")
		delete(additionalProperties, "stopAfter")
		delete(additionalProperties, "logToFile")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAbstractTrigger struct {
	value *AbstractTrigger
	isSet bool
}

func (v NullableAbstractTrigger) Get() *AbstractTrigger {
	return v.value
}

func (v *NullableAbstractTrigger) Set(val *AbstractTrigger) {
	v.value = val
	v.isSet = true
}

func (v NullableAbstractTrigger) IsSet() bool {
	return v.isSet
}

func (v *NullableAbstractTrigger) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAbstractTrigger(val *AbstractTrigger) *NullableAbstractTrigger {
	return &NullableAbstractTrigger{value: val, isSet: true}
}

func (v NullableAbstractTrigger) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAbstractTrigger) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
