/*
Kestra EE

All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ScimUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScimUser{}

// ScimUser Scim core schema.
type ScimUser struct {
	Schemas             []string                  `json:"schemas,omitempty"`
	BaseUrn             *string                   `json:"baseUrn,omitempty"`
	Extensions          *map[string]ScimExtension `json:"extensions,omitempty"`
	Meta                Meta                      `json:"meta"`
	Id                  *string                   `json:"id,omitempty"`
	ExternalId          *string                   `json:"externalId,omitempty"`
	ResourceType        *string                   `json:"resourceType,omitempty"`
	PrimaryEmailAddress NullableEmail             `json:"primaryEmailAddress,omitempty"`
	Active              *bool                     `json:"active,omitempty"`
	Emails              []Email                   `json:"emails,omitempty"`
	UserName            *string                   `json:"userName,omitempty"`
	Name                *Name                     `json:"name,omitempty"`
	Groups              []UserGroup               `json:"groups,omitempty"`
}

type _ScimUser ScimUser

// NewScimUser instantiates a new ScimUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScimUser(meta Meta) *ScimUser {
	this := ScimUser{}
	this.Meta = meta
	return &this
}

// NewScimUserWithDefaults instantiates a new ScimUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScimUserWithDefaults() *ScimUser {
	this := ScimUser{}
	return &this
}

// GetSchemas returns the Schemas field value if set, zero value otherwise.
func (o *ScimUser) GetSchemas() []string {
	if o == nil || IsNil(o.Schemas) {
		var ret []string
		return ret
	}
	return o.Schemas
}

// GetSchemasOk returns a tuple with the Schemas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScimUser) GetSchemasOk() ([]string, bool) {
	if o == nil || IsNil(o.Schemas) {
		return nil, false
	}
	return o.Schemas, true
}

// HasSchemas returns a boolean if a field has been set.
func (o *ScimUser) HasSchemas() bool {
	if o != nil && !IsNil(o.Schemas) {
		return true
	}

	return false
}

// SetSchemas gets a reference to the given []string and assigns it to the Schemas field.
func (o *ScimUser) SetSchemas(v []string) {
	o.Schemas = v
}

// GetBaseUrn returns the BaseUrn field value if set, zero value otherwise.
func (o *ScimUser) GetBaseUrn() string {
	if o == nil || IsNil(o.BaseUrn) {
		var ret string
		return ret
	}
	return *o.BaseUrn
}

// GetBaseUrnOk returns a tuple with the BaseUrn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScimUser) GetBaseUrnOk() (*string, bool) {
	if o == nil || IsNil(o.BaseUrn) {
		return nil, false
	}
	return o.BaseUrn, true
}

// HasBaseUrn returns a boolean if a field has been set.
func (o *ScimUser) HasBaseUrn() bool {
	if o != nil && !IsNil(o.BaseUrn) {
		return true
	}

	return false
}

// SetBaseUrn gets a reference to the given string and assigns it to the BaseUrn field.
func (o *ScimUser) SetBaseUrn(v string) {
	o.BaseUrn = &v
}

// GetExtensions returns the Extensions field value if set, zero value otherwise.
func (o *ScimUser) GetExtensions() map[string]ScimExtension {
	if o == nil || IsNil(o.Extensions) {
		var ret map[string]ScimExtension
		return ret
	}
	return *o.Extensions
}

// GetExtensionsOk returns a tuple with the Extensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScimUser) GetExtensionsOk() (*map[string]ScimExtension, bool) {
	if o == nil || IsNil(o.Extensions) {
		return nil, false
	}
	return o.Extensions, true
}

// HasExtensions returns a boolean if a field has been set.
func (o *ScimUser) HasExtensions() bool {
	if o != nil && !IsNil(o.Extensions) {
		return true
	}

	return false
}

// SetExtensions gets a reference to the given map[string]ScimExtension and assigns it to the Extensions field.
func (o *ScimUser) SetExtensions(v map[string]ScimExtension) {
	o.Extensions = &v
}

// GetMeta returns the Meta field value
func (o *ScimUser) GetMeta() Meta {
	if o == nil {
		var ret Meta
		return ret
	}

	return o.Meta
}

// GetMetaOk returns a tuple with the Meta field value
// and a boolean to check if the value has been set.
func (o *ScimUser) GetMetaOk() (*Meta, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Meta, true
}

// SetMeta sets field value
func (o *ScimUser) SetMeta(v Meta) {
	o.Meta = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ScimUser) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScimUser) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ScimUser) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ScimUser) SetId(v string) {
	o.Id = &v
}

// GetExternalId returns the ExternalId field value if set, zero value otherwise.
func (o *ScimUser) GetExternalId() string {
	if o == nil || IsNil(o.ExternalId) {
		var ret string
		return ret
	}
	return *o.ExternalId
}

// GetExternalIdOk returns a tuple with the ExternalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScimUser) GetExternalIdOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalId) {
		return nil, false
	}
	return o.ExternalId, true
}

// HasExternalId returns a boolean if a field has been set.
func (o *ScimUser) HasExternalId() bool {
	if o != nil && !IsNil(o.ExternalId) {
		return true
	}

	return false
}

// SetExternalId gets a reference to the given string and assigns it to the ExternalId field.
func (o *ScimUser) SetExternalId(v string) {
	o.ExternalId = &v
}

// GetResourceType returns the ResourceType field value if set, zero value otherwise.
func (o *ScimUser) GetResourceType() string {
	if o == nil || IsNil(o.ResourceType) {
		var ret string
		return ret
	}
	return *o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScimUser) GetResourceTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ResourceType) {
		return nil, false
	}
	return o.ResourceType, true
}

// HasResourceType returns a boolean if a field has been set.
func (o *ScimUser) HasResourceType() bool {
	if o != nil && !IsNil(o.ResourceType) {
		return true
	}

	return false
}

// SetResourceType gets a reference to the given string and assigns it to the ResourceType field.
func (o *ScimUser) SetResourceType(v string) {
	o.ResourceType = &v
}

// GetPrimaryEmailAddress returns the PrimaryEmailAddress field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ScimUser) GetPrimaryEmailAddress() Email {
	if o == nil || IsNil(o.PrimaryEmailAddress.Get()) {
		var ret Email
		return ret
	}
	return *o.PrimaryEmailAddress.Get()
}

// GetPrimaryEmailAddressOk returns a tuple with the PrimaryEmailAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ScimUser) GetPrimaryEmailAddressOk() (*Email, bool) {
	if o == nil {
		return nil, false
	}
	return o.PrimaryEmailAddress.Get(), o.PrimaryEmailAddress.IsSet()
}

// HasPrimaryEmailAddress returns a boolean if a field has been set.
func (o *ScimUser) HasPrimaryEmailAddress() bool {
	if o != nil && o.PrimaryEmailAddress.IsSet() {
		return true
	}

	return false
}

// SetPrimaryEmailAddress gets a reference to the given NullableEmail and assigns it to the PrimaryEmailAddress field.
func (o *ScimUser) SetPrimaryEmailAddress(v Email) {
	o.PrimaryEmailAddress.Set(&v)
}

// SetPrimaryEmailAddressNil sets the value for PrimaryEmailAddress to be an explicit nil
func (o *ScimUser) SetPrimaryEmailAddressNil() {
	o.PrimaryEmailAddress.Set(nil)
}

// UnsetPrimaryEmailAddress ensures that no value is present for PrimaryEmailAddress, not even an explicit nil
func (o *ScimUser) UnsetPrimaryEmailAddress() {
	o.PrimaryEmailAddress.Unset()
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *ScimUser) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScimUser) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *ScimUser) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *ScimUser) SetActive(v bool) {
	o.Active = &v
}

// GetEmails returns the Emails field value if set, zero value otherwise.
func (o *ScimUser) GetEmails() []Email {
	if o == nil || IsNil(o.Emails) {
		var ret []Email
		return ret
	}
	return o.Emails
}

// GetEmailsOk returns a tuple with the Emails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScimUser) GetEmailsOk() ([]Email, bool) {
	if o == nil || IsNil(o.Emails) {
		return nil, false
	}
	return o.Emails, true
}

// HasEmails returns a boolean if a field has been set.
func (o *ScimUser) HasEmails() bool {
	if o != nil && !IsNil(o.Emails) {
		return true
	}

	return false
}

// SetEmails gets a reference to the given []Email and assigns it to the Emails field.
func (o *ScimUser) SetEmails(v []Email) {
	o.Emails = v
}

// GetUserName returns the UserName field value if set, zero value otherwise.
func (o *ScimUser) GetUserName() string {
	if o == nil || IsNil(o.UserName) {
		var ret string
		return ret
	}
	return *o.UserName
}

// GetUserNameOk returns a tuple with the UserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScimUser) GetUserNameOk() (*string, bool) {
	if o == nil || IsNil(o.UserName) {
		return nil, false
	}
	return o.UserName, true
}

// HasUserName returns a boolean if a field has been set.
func (o *ScimUser) HasUserName() bool {
	if o != nil && !IsNil(o.UserName) {
		return true
	}

	return false
}

// SetUserName gets a reference to the given string and assigns it to the UserName field.
func (o *ScimUser) SetUserName(v string) {
	o.UserName = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ScimUser) GetName() Name {
	if o == nil || IsNil(o.Name) {
		var ret Name
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScimUser) GetNameOk() (*Name, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ScimUser) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given Name and assigns it to the Name field.
func (o *ScimUser) SetName(v Name) {
	o.Name = &v
}

// GetGroups returns the Groups field value if set, zero value otherwise.
func (o *ScimUser) GetGroups() []UserGroup {
	if o == nil || IsNil(o.Groups) {
		var ret []UserGroup
		return ret
	}
	return o.Groups
}

// GetGroupsOk returns a tuple with the Groups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScimUser) GetGroupsOk() ([]UserGroup, bool) {
	if o == nil || IsNil(o.Groups) {
		return nil, false
	}
	return o.Groups, true
}

// HasGroups returns a boolean if a field has been set.
func (o *ScimUser) HasGroups() bool {
	if o != nil && !IsNil(o.Groups) {
		return true
	}

	return false
}

// SetGroups gets a reference to the given []UserGroup and assigns it to the Groups field.
func (o *ScimUser) SetGroups(v []UserGroup) {
	o.Groups = v
}

func (o ScimUser) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScimUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Schemas) {
		toSerialize["schemas"] = o.Schemas
	}
	if !IsNil(o.BaseUrn) {
		toSerialize["baseUrn"] = o.BaseUrn
	}
	if !IsNil(o.Extensions) {
		toSerialize["extensions"] = o.Extensions
	}
	toSerialize["meta"] = o.Meta
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ExternalId) {
		toSerialize["externalId"] = o.ExternalId
	}
	if !IsNil(o.ResourceType) {
		toSerialize["resourceType"] = o.ResourceType
	}
	if o.PrimaryEmailAddress.IsSet() {
		toSerialize["primaryEmailAddress"] = o.PrimaryEmailAddress.Get()
	}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.Emails) {
		toSerialize["emails"] = o.Emails
	}
	if !IsNil(o.UserName) {
		toSerialize["userName"] = o.UserName
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Groups) {
		toSerialize["groups"] = o.Groups
	}
	return toSerialize, nil
}

func (o *ScimUser) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"meta",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varScimUser := _ScimUser{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varScimUser)

	if err != nil {
		return err
	}

	*o = ScimUser(varScimUser)

	return err
}

type NullableScimUser struct {
	value *ScimUser
	isSet bool
}

func (v NullableScimUser) Get() *ScimUser {
	return v.value
}

func (v *NullableScimUser) Set(val *ScimUser) {
	v.value = val
	v.isSet = true
}

func (v NullableScimUser) IsSet() bool {
	return v.isSet
}

func (v *NullableScimUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScimUser(val *ScimUser) *NullableScimUser {
	return &NullableScimUser{value: val, isSet: true}
}

func (v NullableScimUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScimUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
