/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
)

// SLAType the model 'SLAType'
type SLAType string

// List of SLA.Type
const (
	SLATYPE_MAX_DURATION        SLAType = "MAX_DURATION"
	SLATYPE_EXECUTION_ASSERTION SLAType = "EXECUTION_ASSERTION"
)

// All allowed values of SLAType enum
var AllowedSLATypeEnumValues = []SLAType{
	"MAX_DURATION",
	"EXECUTION_ASSERTION",
}

func (v *SLAType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SLAType(value)
	for _, existing := range AllowedSLATypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SLAType", value)
}

// NewSLATypeFromValue returns a pointer to a valid SLAType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSLATypeFromValue(v string) (*SLAType, error) {
	ev := SLAType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SLAType: valid values are %v", v, AllowedSLATypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SLAType) IsValid() bool {
	for _, existing := range AllowedSLATypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SLA.Type value
func (v SLAType) Ptr() *SLAType {
	return &v
}

type NullableSLAType struct {
	value *SLAType
	isSet bool
}

func (v NullableSLAType) Get() *SLAType {
	return v.value
}

func (v *NullableSLAType) Set(val *SLAType) {
	v.value = val
	v.isSet = true
}

func (v NullableSLAType) IsSet() bool {
	return v.isSet
}

func (v *NullableSLAType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSLAType(val *SLAType) *NullableSLAType {
	return &NullableSLAType{value: val, isSet: true}
}

func (v NullableSLAType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSLAType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
