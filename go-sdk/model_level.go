/*
Kestra EE

All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
)

// Level the model 'Level'
type Level string

// List of Level
const (
	LEVEL_ERROR Level = "ERROR"
	LEVEL_WARN  Level = "WARN"
	LEVEL_INFO  Level = "INFO"
	LEVEL_DEBUG Level = "DEBUG"
	LEVEL_TRACE Level = "TRACE"
)

// All allowed values of Level enum
var AllowedLevelEnumValues = []Level{
	"ERROR",
	"WARN",
	"INFO",
	"DEBUG",
	"TRACE",
}

func (v *Level) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Level(value)
	for _, existing := range AllowedLevelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Level", value)
}

// NewLevelFromValue returns a pointer to a valid Level
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLevelFromValue(v string) (*Level, error) {
	ev := Level(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Level: valid values are %v", v, AllowedLevelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Level) IsValid() bool {
	for _, existing := range AllowedLevelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Level value
func (v Level) Ptr() *Level {
	return &v
}

type NullableLevel struct {
	value *Level
	isSet bool
}

func (v NullableLevel) Get() *Level {
	return v.value
}

func (v *NullableLevel) Set(val *Level) {
	v.value = val
	v.isSet = true
}

func (v NullableLevel) IsSet() bool {
	return v.isSet
}

func (v *NullableLevel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLevel(val *Level) *NullableLevel {
	return &NullableLevel{value: val, isSet: true}
}

func (v NullableLevel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLevel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
