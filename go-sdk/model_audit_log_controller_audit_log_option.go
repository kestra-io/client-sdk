/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
	"time"
)

// checks if the AuditLogControllerAuditLogOption type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuditLogControllerAuditLogOption{}

// AuditLogControllerAuditLogOption struct for AuditLogControllerAuditLogOption
type AuditLogControllerAuditLogOption struct {
	Id                   string    `json:"id"`
	Date                 time.Time `json:"date"`
	Username             string    `json:"username"`
	AdditionalProperties map[string]interface{}
}

type _AuditLogControllerAuditLogOption AuditLogControllerAuditLogOption

// NewAuditLogControllerAuditLogOption instantiates a new AuditLogControllerAuditLogOption object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuditLogControllerAuditLogOption(id string, date time.Time, username string) *AuditLogControllerAuditLogOption {
	this := AuditLogControllerAuditLogOption{}
	this.Id = id
	this.Date = date
	this.Username = username
	return &this
}

// NewAuditLogControllerAuditLogOptionWithDefaults instantiates a new AuditLogControllerAuditLogOption object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuditLogControllerAuditLogOptionWithDefaults() *AuditLogControllerAuditLogOption {
	this := AuditLogControllerAuditLogOption{}
	return &this
}

// GetId returns the Id field value
func (o *AuditLogControllerAuditLogOption) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *AuditLogControllerAuditLogOption) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *AuditLogControllerAuditLogOption) SetId(v string) {
	o.Id = v
}

// GetDate returns the Date field value
func (o *AuditLogControllerAuditLogOption) GetDate() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Date
}

// GetDateOk returns a tuple with the Date field value
// and a boolean to check if the value has been set.
func (o *AuditLogControllerAuditLogOption) GetDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Date, true
}

// SetDate sets field value
func (o *AuditLogControllerAuditLogOption) SetDate(v time.Time) {
	o.Date = v
}

// GetUsername returns the Username field value
func (o *AuditLogControllerAuditLogOption) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *AuditLogControllerAuditLogOption) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *AuditLogControllerAuditLogOption) SetUsername(v string) {
	o.Username = v
}

func (o AuditLogControllerAuditLogOption) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuditLogControllerAuditLogOption) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["date"] = o.Date
	toSerialize["username"] = o.Username

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AuditLogControllerAuditLogOption) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"date",
		"username",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAuditLogControllerAuditLogOption := _AuditLogControllerAuditLogOption{}

	err = json.Unmarshal(data, &varAuditLogControllerAuditLogOption)

	if err != nil {
		return err
	}

	*o = AuditLogControllerAuditLogOption(varAuditLogControllerAuditLogOption)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "date")
		delete(additionalProperties, "username")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAuditLogControllerAuditLogOption struct {
	value *AuditLogControllerAuditLogOption
	isSet bool
}

func (v NullableAuditLogControllerAuditLogOption) Get() *AuditLogControllerAuditLogOption {
	return v.value
}

func (v *NullableAuditLogControllerAuditLogOption) Set(val *AuditLogControllerAuditLogOption) {
	v.value = val
	v.isSet = true
}

func (v NullableAuditLogControllerAuditLogOption) IsSet() bool {
	return v.isSet
}

func (v *NullableAuditLogControllerAuditLogOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuditLogControllerAuditLogOption(val *AuditLogControllerAuditLogOption) *NullableAuditLogControllerAuditLogOption {
	return &NullableAuditLogControllerAuditLogOption{value: val, isSet: true}
}

func (v NullableAuditLogControllerAuditLogOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuditLogControllerAuditLogOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
