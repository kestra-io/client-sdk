/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
)

// checks if the AuthControllerInvitationUserRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuthControllerInvitationUserRequest{}

// AuthControllerInvitationUserRequest struct for AuthControllerInvitationUserRequest
type AuthControllerInvitationUserRequest struct {
	FirstName            string `json:"firstName"`
	LastName             string `json:"lastName"`
	Password             string `json:"password"`
	AdditionalProperties map[string]interface{}
}

type _AuthControllerInvitationUserRequest AuthControllerInvitationUserRequest

// NewAuthControllerInvitationUserRequest instantiates a new AuthControllerInvitationUserRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthControllerInvitationUserRequest(firstName string, lastName string, password string) *AuthControllerInvitationUserRequest {
	this := AuthControllerInvitationUserRequest{}
	this.FirstName = firstName
	this.LastName = lastName
	this.Password = password
	return &this
}

// NewAuthControllerInvitationUserRequestWithDefaults instantiates a new AuthControllerInvitationUserRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthControllerInvitationUserRequestWithDefaults() *AuthControllerInvitationUserRequest {
	this := AuthControllerInvitationUserRequest{}
	return &this
}

// GetFirstName returns the FirstName field value
func (o *AuthControllerInvitationUserRequest) GetFirstName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value
// and a boolean to check if the value has been set.
func (o *AuthControllerInvitationUserRequest) GetFirstNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FirstName, true
}

// SetFirstName sets field value
func (o *AuthControllerInvitationUserRequest) SetFirstName(v string) {
	o.FirstName = v
}

// GetLastName returns the LastName field value
func (o *AuthControllerInvitationUserRequest) GetLastName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value
// and a boolean to check if the value has been set.
func (o *AuthControllerInvitationUserRequest) GetLastNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastName, true
}

// SetLastName sets field value
func (o *AuthControllerInvitationUserRequest) SetLastName(v string) {
	o.LastName = v
}

// GetPassword returns the Password field value
func (o *AuthControllerInvitationUserRequest) GetPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *AuthControllerInvitationUserRequest) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *AuthControllerInvitationUserRequest) SetPassword(v string) {
	o.Password = v
}

func (o AuthControllerInvitationUserRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuthControllerInvitationUserRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["firstName"] = o.FirstName
	toSerialize["lastName"] = o.LastName
	toSerialize["password"] = o.Password

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AuthControllerInvitationUserRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"firstName",
		"lastName",
		"password",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAuthControllerInvitationUserRequest := _AuthControllerInvitationUserRequest{}

	err = json.Unmarshal(data, &varAuthControllerInvitationUserRequest)

	if err != nil {
		return err
	}

	*o = AuthControllerInvitationUserRequest(varAuthControllerInvitationUserRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "firstName")
		delete(additionalProperties, "lastName")
		delete(additionalProperties, "password")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAuthControllerInvitationUserRequest struct {
	value *AuthControllerInvitationUserRequest
	isSet bool
}

func (v NullableAuthControllerInvitationUserRequest) Get() *AuthControllerInvitationUserRequest {
	return v.value
}

func (v *NullableAuthControllerInvitationUserRequest) Set(val *AuthControllerInvitationUserRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthControllerInvitationUserRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthControllerInvitationUserRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthControllerInvitationUserRequest(val *AuthControllerInvitationUserRequest) *NullableAuthControllerInvitationUserRequest {
	return &NullableAuthControllerInvitationUserRequest{value: val, isSet: true}
}

func (v NullableAuthControllerInvitationUserRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthControllerInvitationUserRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
