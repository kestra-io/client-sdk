/*
Kestra EE

All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
)

// checks if the PluginSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PluginSchema{}

// PluginSchema struct for PluginSchema
type PluginSchema struct {
	Properties  map[string]map[string]interface{} `json:"properties,omitempty"`
	Outputs     map[string]map[string]interface{} `json:"outputs,omitempty"`
	Definitions map[string]map[string]interface{} `json:"definitions,omitempty"`
}

// NewPluginSchema instantiates a new PluginSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPluginSchema() *PluginSchema {
	this := PluginSchema{}
	return &this
}

// NewPluginSchemaWithDefaults instantiates a new PluginSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPluginSchemaWithDefaults() *PluginSchema {
	this := PluginSchema{}
	return &this
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *PluginSchema) GetProperties() map[string]map[string]interface{} {
	if o == nil || IsNil(o.Properties) {
		var ret map[string]map[string]interface{}
		return ret
	}
	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginSchema) GetPropertiesOk() (map[string]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Properties) {
		return map[string]map[string]interface{}{}, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *PluginSchema) HasProperties() bool {
	if o != nil && !IsNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given map[string]map[string]interface{} and assigns it to the Properties field.
func (o *PluginSchema) SetProperties(v map[string]map[string]interface{}) {
	o.Properties = v
}

// GetOutputs returns the Outputs field value if set, zero value otherwise.
func (o *PluginSchema) GetOutputs() map[string]map[string]interface{} {
	if o == nil || IsNil(o.Outputs) {
		var ret map[string]map[string]interface{}
		return ret
	}
	return o.Outputs
}

// GetOutputsOk returns a tuple with the Outputs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginSchema) GetOutputsOk() (map[string]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Outputs) {
		return map[string]map[string]interface{}{}, false
	}
	return o.Outputs, true
}

// HasOutputs returns a boolean if a field has been set.
func (o *PluginSchema) HasOutputs() bool {
	if o != nil && !IsNil(o.Outputs) {
		return true
	}

	return false
}

// SetOutputs gets a reference to the given map[string]map[string]interface{} and assigns it to the Outputs field.
func (o *PluginSchema) SetOutputs(v map[string]map[string]interface{}) {
	o.Outputs = v
}

// GetDefinitions returns the Definitions field value if set, zero value otherwise.
func (o *PluginSchema) GetDefinitions() map[string]map[string]interface{} {
	if o == nil || IsNil(o.Definitions) {
		var ret map[string]map[string]interface{}
		return ret
	}
	return o.Definitions
}

// GetDefinitionsOk returns a tuple with the Definitions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginSchema) GetDefinitionsOk() (map[string]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Definitions) {
		return map[string]map[string]interface{}{}, false
	}
	return o.Definitions, true
}

// HasDefinitions returns a boolean if a field has been set.
func (o *PluginSchema) HasDefinitions() bool {
	if o != nil && !IsNil(o.Definitions) {
		return true
	}

	return false
}

// SetDefinitions gets a reference to the given map[string]map[string]interface{} and assigns it to the Definitions field.
func (o *PluginSchema) SetDefinitions(v map[string]map[string]interface{}) {
	o.Definitions = v
}

func (o PluginSchema) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PluginSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Properties) {
		toSerialize["properties"] = o.Properties
	}
	if !IsNil(o.Outputs) {
		toSerialize["outputs"] = o.Outputs
	}
	if !IsNil(o.Definitions) {
		toSerialize["definitions"] = o.Definitions
	}
	return toSerialize, nil
}

type NullablePluginSchema struct {
	value *PluginSchema
	isSet bool
}

func (v NullablePluginSchema) Get() *PluginSchema {
	return v.value
}

func (v *NullablePluginSchema) Set(val *PluginSchema) {
	v.value = val
	v.isSet = true
}

func (v NullablePluginSchema) IsSet() bool {
	return v.isSet
}

func (v *NullablePluginSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePluginSchema(val *PluginSchema) *NullablePluginSchema {
	return &NullablePluginSchema{value: val, isSet: true}
}

func (v NullablePluginSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePluginSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
