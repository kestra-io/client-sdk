/*
Kestra EE

All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the NamespaceAllowedTrigger type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NamespaceAllowedTrigger{}

// NamespaceAllowedTrigger struct for NamespaceAllowedTrigger
type NamespaceAllowedTrigger struct {
	Namespace string  `json:"namespace"`
	FlowId    *string `json:"flowId,omitempty"`
}

type _NamespaceAllowedTrigger NamespaceAllowedTrigger

// NewNamespaceAllowedTrigger instantiates a new NamespaceAllowedTrigger object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNamespaceAllowedTrigger(namespace string) *NamespaceAllowedTrigger {
	this := NamespaceAllowedTrigger{}
	this.Namespace = namespace
	return &this
}

// NewNamespaceAllowedTriggerWithDefaults instantiates a new NamespaceAllowedTrigger object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNamespaceAllowedTriggerWithDefaults() *NamespaceAllowedTrigger {
	this := NamespaceAllowedTrigger{}
	return &this
}

// GetNamespace returns the Namespace field value
func (o *NamespaceAllowedTrigger) GetNamespace() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value
// and a boolean to check if the value has been set.
func (o *NamespaceAllowedTrigger) GetNamespaceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Namespace, true
}

// SetNamespace sets field value
func (o *NamespaceAllowedTrigger) SetNamespace(v string) {
	o.Namespace = v
}

// GetFlowId returns the FlowId field value if set, zero value otherwise.
func (o *NamespaceAllowedTrigger) GetFlowId() string {
	if o == nil || IsNil(o.FlowId) {
		var ret string
		return ret
	}
	return *o.FlowId
}

// GetFlowIdOk returns a tuple with the FlowId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NamespaceAllowedTrigger) GetFlowIdOk() (*string, bool) {
	if o == nil || IsNil(o.FlowId) {
		return nil, false
	}
	return o.FlowId, true
}

// HasFlowId returns a boolean if a field has been set.
func (o *NamespaceAllowedTrigger) HasFlowId() bool {
	if o != nil && !IsNil(o.FlowId) {
		return true
	}

	return false
}

// SetFlowId gets a reference to the given string and assigns it to the FlowId field.
func (o *NamespaceAllowedTrigger) SetFlowId(v string) {
	o.FlowId = &v
}

func (o NamespaceAllowedTrigger) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NamespaceAllowedTrigger) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["namespace"] = o.Namespace
	if !IsNil(o.FlowId) {
		toSerialize["flowId"] = o.FlowId
	}
	return toSerialize, nil
}

func (o *NamespaceAllowedTrigger) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"namespace",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNamespaceAllowedTrigger := _NamespaceAllowedTrigger{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNamespaceAllowedTrigger)

	if err != nil {
		return err
	}

	*o = NamespaceAllowedTrigger(varNamespaceAllowedTrigger)

	return err
}

type NullableNamespaceAllowedTrigger struct {
	value *NamespaceAllowedTrigger
	isSet bool
}

func (v NullableNamespaceAllowedTrigger) Get() *NamespaceAllowedTrigger {
	return v.value
}

func (v *NullableNamespaceAllowedTrigger) Set(val *NamespaceAllowedTrigger) {
	v.value = val
	v.isSet = true
}

func (v NullableNamespaceAllowedTrigger) IsSet() bool {
	return v.isSet
}

func (v *NullableNamespaceAllowedTrigger) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNamespaceAllowedTrigger(val *NamespaceAllowedTrigger) *NullableNamespaceAllowedTrigger {
	return &NullableNamespaceAllowedTrigger{value: val, isSet: true}
}

func (v NullableNamespaceAllowedTrigger) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNamespaceAllowedTrigger) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
