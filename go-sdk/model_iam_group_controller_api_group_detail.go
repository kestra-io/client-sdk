/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
)

// checks if the IAMGroupControllerApiGroupDetail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IAMGroupControllerApiGroupDetail{}

// IAMGroupControllerApiGroupDetail struct for IAMGroupControllerApiGroupDetail
type IAMGroupControllerApiGroupDetail struct {
	Id                   string `json:"id"`
	Name                 string `json:"name"`
	Description          string `json:"description"`
	AdditionalProperties map[string]interface{}
}

type _IAMGroupControllerApiGroupDetail IAMGroupControllerApiGroupDetail

// NewIAMGroupControllerApiGroupDetail instantiates a new IAMGroupControllerApiGroupDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIAMGroupControllerApiGroupDetail(id string, name string, description string) *IAMGroupControllerApiGroupDetail {
	this := IAMGroupControllerApiGroupDetail{}
	this.Id = id
	this.Name = name
	this.Description = description
	return &this
}

// NewIAMGroupControllerApiGroupDetailWithDefaults instantiates a new IAMGroupControllerApiGroupDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIAMGroupControllerApiGroupDetailWithDefaults() *IAMGroupControllerApiGroupDetail {
	this := IAMGroupControllerApiGroupDetail{}
	return &this
}

// GetId returns the Id field value
func (o *IAMGroupControllerApiGroupDetail) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *IAMGroupControllerApiGroupDetail) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *IAMGroupControllerApiGroupDetail) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *IAMGroupControllerApiGroupDetail) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *IAMGroupControllerApiGroupDetail) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *IAMGroupControllerApiGroupDetail) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value
func (o *IAMGroupControllerApiGroupDetail) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *IAMGroupControllerApiGroupDetail) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *IAMGroupControllerApiGroupDetail) SetDescription(v string) {
	o.Description = v
}

func (o IAMGroupControllerApiGroupDetail) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IAMGroupControllerApiGroupDetail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["description"] = o.Description

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *IAMGroupControllerApiGroupDetail) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"description",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIAMGroupControllerApiGroupDetail := _IAMGroupControllerApiGroupDetail{}

	err = json.Unmarshal(data, &varIAMGroupControllerApiGroupDetail)

	if err != nil {
		return err
	}

	*o = IAMGroupControllerApiGroupDetail(varIAMGroupControllerApiGroupDetail)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIAMGroupControllerApiGroupDetail struct {
	value *IAMGroupControllerApiGroupDetail
	isSet bool
}

func (v NullableIAMGroupControllerApiGroupDetail) Get() *IAMGroupControllerApiGroupDetail {
	return v.value
}

func (v *NullableIAMGroupControllerApiGroupDetail) Set(val *IAMGroupControllerApiGroupDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableIAMGroupControllerApiGroupDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableIAMGroupControllerApiGroupDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIAMGroupControllerApiGroupDetail(val *IAMGroupControllerApiGroupDetail) *NullableIAMGroupControllerApiGroupDetail {
	return &NullableIAMGroupControllerApiGroupDetail{value: val, isSet: true}
}

func (v NullableIAMGroupControllerApiGroupDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIAMGroupControllerApiGroupDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
