/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
)

// checks if the UserUsage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserUsage{}

// UserUsage struct for UserUsage
type UserUsage struct {
	Count                int64 `json:"count"`
	ApiKeyCount          int64 `json:"apiKeyCount"`
	OidcCount            int64 `json:"oidcCount"`
	BasicAuthCount       int64 `json:"basicAuthCount"`
	AdditionalProperties map[string]interface{}
}

type _UserUsage UserUsage

// NewUserUsage instantiates a new UserUsage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserUsage(count int64, apiKeyCount int64, oidcCount int64, basicAuthCount int64) *UserUsage {
	this := UserUsage{}
	this.Count = count
	this.ApiKeyCount = apiKeyCount
	this.OidcCount = oidcCount
	this.BasicAuthCount = basicAuthCount
	return &this
}

// NewUserUsageWithDefaults instantiates a new UserUsage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserUsageWithDefaults() *UserUsage {
	this := UserUsage{}
	return &this
}

// GetCount returns the Count field value
func (o *UserUsage) GetCount() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *UserUsage) GetCountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *UserUsage) SetCount(v int64) {
	o.Count = v
}

// GetApiKeyCount returns the ApiKeyCount field value
func (o *UserUsage) GetApiKeyCount() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ApiKeyCount
}

// GetApiKeyCountOk returns a tuple with the ApiKeyCount field value
// and a boolean to check if the value has been set.
func (o *UserUsage) GetApiKeyCountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApiKeyCount, true
}

// SetApiKeyCount sets field value
func (o *UserUsage) SetApiKeyCount(v int64) {
	o.ApiKeyCount = v
}

// GetOidcCount returns the OidcCount field value
func (o *UserUsage) GetOidcCount() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.OidcCount
}

// GetOidcCountOk returns a tuple with the OidcCount field value
// and a boolean to check if the value has been set.
func (o *UserUsage) GetOidcCountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OidcCount, true
}

// SetOidcCount sets field value
func (o *UserUsage) SetOidcCount(v int64) {
	o.OidcCount = v
}

// GetBasicAuthCount returns the BasicAuthCount field value
func (o *UserUsage) GetBasicAuthCount() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.BasicAuthCount
}

// GetBasicAuthCountOk returns a tuple with the BasicAuthCount field value
// and a boolean to check if the value has been set.
func (o *UserUsage) GetBasicAuthCountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BasicAuthCount, true
}

// SetBasicAuthCount sets field value
func (o *UserUsage) SetBasicAuthCount(v int64) {
	o.BasicAuthCount = v
}

func (o UserUsage) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserUsage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["count"] = o.Count
	toSerialize["apiKeyCount"] = o.ApiKeyCount
	toSerialize["oidcCount"] = o.OidcCount
	toSerialize["basicAuthCount"] = o.BasicAuthCount

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UserUsage) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"count",
		"apiKeyCount",
		"oidcCount",
		"basicAuthCount",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserUsage := _UserUsage{}

	err = json.Unmarshal(data, &varUserUsage)

	if err != nil {
		return err
	}

	*o = UserUsage(varUserUsage)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "count")
		delete(additionalProperties, "apiKeyCount")
		delete(additionalProperties, "oidcCount")
		delete(additionalProperties, "basicAuthCount")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUserUsage struct {
	value *UserUsage
	isSet bool
}

func (v NullableUserUsage) Get() *UserUsage {
	return v.value
}

func (v *NullableUserUsage) Set(val *UserUsage) {
	v.value = val
	v.isSet = true
}

func (v NullableUserUsage) IsSet() bool {
	return v.isSet
}

func (v *NullableUserUsage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserUsage(val *UserUsage) *NullableUserUsage {
	return &NullableUserUsage{value: val, isSet: true}
}

func (v NullableUserUsage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserUsage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
