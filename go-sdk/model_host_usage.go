/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
)

// checks if the HostUsage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HostUsage{}

// HostUsage struct for HostUsage
type HostUsage struct {
	Uuid                 *string            `json:"uuid,omitempty"`
	Hardware             *HostUsageHardware `json:"hardware,omitempty"`
	Os                   *HostUsageOs       `json:"os,omitempty"`
	Jvm                  *HostUsageJvm      `json:"jvm,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _HostUsage HostUsage

// NewHostUsage instantiates a new HostUsage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHostUsage() *HostUsage {
	this := HostUsage{}
	return &this
}

// NewHostUsageWithDefaults instantiates a new HostUsage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHostUsageWithDefaults() *HostUsage {
	this := HostUsage{}
	return &this
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *HostUsage) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HostUsage) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *HostUsage) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *HostUsage) SetUuid(v string) {
	o.Uuid = &v
}

// GetHardware returns the Hardware field value if set, zero value otherwise.
func (o *HostUsage) GetHardware() HostUsageHardware {
	if o == nil || IsNil(o.Hardware) {
		var ret HostUsageHardware
		return ret
	}
	return *o.Hardware
}

// GetHardwareOk returns a tuple with the Hardware field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HostUsage) GetHardwareOk() (*HostUsageHardware, bool) {
	if o == nil || IsNil(o.Hardware) {
		return nil, false
	}
	return o.Hardware, true
}

// HasHardware returns a boolean if a field has been set.
func (o *HostUsage) HasHardware() bool {
	if o != nil && !IsNil(o.Hardware) {
		return true
	}

	return false
}

// SetHardware gets a reference to the given HostUsageHardware and assigns it to the Hardware field.
func (o *HostUsage) SetHardware(v HostUsageHardware) {
	o.Hardware = &v
}

// GetOs returns the Os field value if set, zero value otherwise.
func (o *HostUsage) GetOs() HostUsageOs {
	if o == nil || IsNil(o.Os) {
		var ret HostUsageOs
		return ret
	}
	return *o.Os
}

// GetOsOk returns a tuple with the Os field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HostUsage) GetOsOk() (*HostUsageOs, bool) {
	if o == nil || IsNil(o.Os) {
		return nil, false
	}
	return o.Os, true
}

// HasOs returns a boolean if a field has been set.
func (o *HostUsage) HasOs() bool {
	if o != nil && !IsNil(o.Os) {
		return true
	}

	return false
}

// SetOs gets a reference to the given HostUsageOs and assigns it to the Os field.
func (o *HostUsage) SetOs(v HostUsageOs) {
	o.Os = &v
}

// GetJvm returns the Jvm field value if set, zero value otherwise.
func (o *HostUsage) GetJvm() HostUsageJvm {
	if o == nil || IsNil(o.Jvm) {
		var ret HostUsageJvm
		return ret
	}
	return *o.Jvm
}

// GetJvmOk returns a tuple with the Jvm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HostUsage) GetJvmOk() (*HostUsageJvm, bool) {
	if o == nil || IsNil(o.Jvm) {
		return nil, false
	}
	return o.Jvm, true
}

// HasJvm returns a boolean if a field has been set.
func (o *HostUsage) HasJvm() bool {
	if o != nil && !IsNil(o.Jvm) {
		return true
	}

	return false
}

// SetJvm gets a reference to the given HostUsageJvm and assigns it to the Jvm field.
func (o *HostUsage) SetJvm(v HostUsageJvm) {
	o.Jvm = &v
}

func (o HostUsage) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HostUsage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	if !IsNil(o.Hardware) {
		toSerialize["hardware"] = o.Hardware
	}
	if !IsNil(o.Os) {
		toSerialize["os"] = o.Os
	}
	if !IsNil(o.Jvm) {
		toSerialize["jvm"] = o.Jvm
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *HostUsage) UnmarshalJSON(data []byte) (err error) {
	varHostUsage := _HostUsage{}

	err = json.Unmarshal(data, &varHostUsage)

	if err != nil {
		return err
	}

	*o = HostUsage(varHostUsage)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "uuid")
		delete(additionalProperties, "hardware")
		delete(additionalProperties, "os")
		delete(additionalProperties, "jvm")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableHostUsage struct {
	value *HostUsage
	isSet bool
}

func (v NullableHostUsage) Get() *HostUsage {
	return v.value
}

func (v *NullableHostUsage) Set(val *HostUsage) {
	v.value = val
	v.isSet = true
}

func (v NullableHostUsage) IsSet() bool {
	return v.isSet
}

func (v *NullableHostUsage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHostUsage(val *HostUsage) *NullableHostUsage {
	return &NullableHostUsage{value: val, isSet: true}
}

func (v NullableHostUsage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHostUsage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
