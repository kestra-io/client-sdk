/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
)

// checks if the LeftSidebarConfiguration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LeftSidebarConfiguration{}

// LeftSidebarConfiguration struct for LeftSidebarConfiguration
type LeftSidebarConfiguration struct {
	DisabledMenus        []string `json:"disabledMenus,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _LeftSidebarConfiguration LeftSidebarConfiguration

// NewLeftSidebarConfiguration instantiates a new LeftSidebarConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLeftSidebarConfiguration() *LeftSidebarConfiguration {
	this := LeftSidebarConfiguration{}
	return &this
}

// NewLeftSidebarConfigurationWithDefaults instantiates a new LeftSidebarConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLeftSidebarConfigurationWithDefaults() *LeftSidebarConfiguration {
	this := LeftSidebarConfiguration{}
	return &this
}

// GetDisabledMenus returns the DisabledMenus field value if set, zero value otherwise.
func (o *LeftSidebarConfiguration) GetDisabledMenus() []string {
	if o == nil || IsNil(o.DisabledMenus) {
		var ret []string
		return ret
	}
	return o.DisabledMenus
}

// GetDisabledMenusOk returns a tuple with the DisabledMenus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LeftSidebarConfiguration) GetDisabledMenusOk() ([]string, bool) {
	if o == nil || IsNil(o.DisabledMenus) {
		return nil, false
	}
	return o.DisabledMenus, true
}

// HasDisabledMenus returns a boolean if a field has been set.
func (o *LeftSidebarConfiguration) HasDisabledMenus() bool {
	if o != nil && !IsNil(o.DisabledMenus) {
		return true
	}

	return false
}

// SetDisabledMenus gets a reference to the given []string and assigns it to the DisabledMenus field.
func (o *LeftSidebarConfiguration) SetDisabledMenus(v []string) {
	o.DisabledMenus = v
}

func (o LeftSidebarConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LeftSidebarConfiguration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DisabledMenus) {
		toSerialize["disabledMenus"] = o.DisabledMenus
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *LeftSidebarConfiguration) UnmarshalJSON(data []byte) (err error) {
	varLeftSidebarConfiguration := _LeftSidebarConfiguration{}

	err = json.Unmarshal(data, &varLeftSidebarConfiguration)

	if err != nil {
		return err
	}

	*o = LeftSidebarConfiguration(varLeftSidebarConfiguration)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "disabledMenus")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLeftSidebarConfiguration struct {
	value *LeftSidebarConfiguration
	isSet bool
}

func (v NullableLeftSidebarConfiguration) Get() *LeftSidebarConfiguration {
	return v.value
}

func (v *NullableLeftSidebarConfiguration) Set(val *LeftSidebarConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableLeftSidebarConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableLeftSidebarConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLeftSidebarConfiguration(val *LeftSidebarConfiguration) *NullableLeftSidebarConfiguration {
	return &NullableLeftSidebarConfiguration{value: val, isSet: true}
}

func (v NullableLeftSidebarConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLeftSidebarConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
