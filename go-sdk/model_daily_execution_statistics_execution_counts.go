/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
)

// checks if the DailyExecutionStatisticsExecutionCounts type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DailyExecutionStatisticsExecutionCounts{}

// DailyExecutionStatisticsExecutionCounts struct for DailyExecutionStatisticsExecutionCounts
type DailyExecutionStatisticsExecutionCounts struct {
	CREATED              *int64 `json:"CREATED,omitempty"`
	RUNNING              *int64 `json:"RUNNING,omitempty"`
	PAUSED               *int64 `json:"PAUSED,omitempty"`
	RESTARTED            *int64 `json:"RESTARTED,omitempty"`
	KILLING              *int64 `json:"KILLING,omitempty"`
	SUCCESS              *int64 `json:"SUCCESS,omitempty"`
	WARNING              *int64 `json:"WARNING,omitempty"`
	FAILED               *int64 `json:"FAILED,omitempty"`
	KILLED               *int64 `json:"KILLED,omitempty"`
	CANCELLED            *int64 `json:"CANCELLED,omitempty"`
	QUEUED               *int64 `json:"QUEUED,omitempty"`
	RETRYING             *int64 `json:"RETRYING,omitempty"`
	RETRIED              *int64 `json:"RETRIED,omitempty"`
	SKIPPED              *int64 `json:"SKIPPED,omitempty"`
	BREAKPOINT           *int64 `json:"BREAKPOINT,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DailyExecutionStatisticsExecutionCounts DailyExecutionStatisticsExecutionCounts

// NewDailyExecutionStatisticsExecutionCounts instantiates a new DailyExecutionStatisticsExecutionCounts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDailyExecutionStatisticsExecutionCounts() *DailyExecutionStatisticsExecutionCounts {
	this := DailyExecutionStatisticsExecutionCounts{}
	return &this
}

// NewDailyExecutionStatisticsExecutionCountsWithDefaults instantiates a new DailyExecutionStatisticsExecutionCounts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDailyExecutionStatisticsExecutionCountsWithDefaults() *DailyExecutionStatisticsExecutionCounts {
	this := DailyExecutionStatisticsExecutionCounts{}
	return &this
}

// GetCREATED returns the CREATED field value if set, zero value otherwise.
func (o *DailyExecutionStatisticsExecutionCounts) GetCREATED() int64 {
	if o == nil || IsNil(o.CREATED) {
		var ret int64
		return ret
	}
	return *o.CREATED
}

// GetCREATEDOk returns a tuple with the CREATED field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DailyExecutionStatisticsExecutionCounts) GetCREATEDOk() (*int64, bool) {
	if o == nil || IsNil(o.CREATED) {
		return nil, false
	}
	return o.CREATED, true
}

// HasCREATED returns a boolean if a field has been set.
func (o *DailyExecutionStatisticsExecutionCounts) HasCREATED() bool {
	if o != nil && !IsNil(o.CREATED) {
		return true
	}

	return false
}

// SetCREATED gets a reference to the given int64 and assigns it to the CREATED field.
func (o *DailyExecutionStatisticsExecutionCounts) SetCREATED(v int64) {
	o.CREATED = &v
}

// GetRUNNING returns the RUNNING field value if set, zero value otherwise.
func (o *DailyExecutionStatisticsExecutionCounts) GetRUNNING() int64 {
	if o == nil || IsNil(o.RUNNING) {
		var ret int64
		return ret
	}
	return *o.RUNNING
}

// GetRUNNINGOk returns a tuple with the RUNNING field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DailyExecutionStatisticsExecutionCounts) GetRUNNINGOk() (*int64, bool) {
	if o == nil || IsNil(o.RUNNING) {
		return nil, false
	}
	return o.RUNNING, true
}

// HasRUNNING returns a boolean if a field has been set.
func (o *DailyExecutionStatisticsExecutionCounts) HasRUNNING() bool {
	if o != nil && !IsNil(o.RUNNING) {
		return true
	}

	return false
}

// SetRUNNING gets a reference to the given int64 and assigns it to the RUNNING field.
func (o *DailyExecutionStatisticsExecutionCounts) SetRUNNING(v int64) {
	o.RUNNING = &v
}

// GetPAUSED returns the PAUSED field value if set, zero value otherwise.
func (o *DailyExecutionStatisticsExecutionCounts) GetPAUSED() int64 {
	if o == nil || IsNil(o.PAUSED) {
		var ret int64
		return ret
	}
	return *o.PAUSED
}

// GetPAUSEDOk returns a tuple with the PAUSED field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DailyExecutionStatisticsExecutionCounts) GetPAUSEDOk() (*int64, bool) {
	if o == nil || IsNil(o.PAUSED) {
		return nil, false
	}
	return o.PAUSED, true
}

// HasPAUSED returns a boolean if a field has been set.
func (o *DailyExecutionStatisticsExecutionCounts) HasPAUSED() bool {
	if o != nil && !IsNil(o.PAUSED) {
		return true
	}

	return false
}

// SetPAUSED gets a reference to the given int64 and assigns it to the PAUSED field.
func (o *DailyExecutionStatisticsExecutionCounts) SetPAUSED(v int64) {
	o.PAUSED = &v
}

// GetRESTARTED returns the RESTARTED field value if set, zero value otherwise.
func (o *DailyExecutionStatisticsExecutionCounts) GetRESTARTED() int64 {
	if o == nil || IsNil(o.RESTARTED) {
		var ret int64
		return ret
	}
	return *o.RESTARTED
}

// GetRESTARTEDOk returns a tuple with the RESTARTED field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DailyExecutionStatisticsExecutionCounts) GetRESTARTEDOk() (*int64, bool) {
	if o == nil || IsNil(o.RESTARTED) {
		return nil, false
	}
	return o.RESTARTED, true
}

// HasRESTARTED returns a boolean if a field has been set.
func (o *DailyExecutionStatisticsExecutionCounts) HasRESTARTED() bool {
	if o != nil && !IsNil(o.RESTARTED) {
		return true
	}

	return false
}

// SetRESTARTED gets a reference to the given int64 and assigns it to the RESTARTED field.
func (o *DailyExecutionStatisticsExecutionCounts) SetRESTARTED(v int64) {
	o.RESTARTED = &v
}

// GetKILLING returns the KILLING field value if set, zero value otherwise.
func (o *DailyExecutionStatisticsExecutionCounts) GetKILLING() int64 {
	if o == nil || IsNil(o.KILLING) {
		var ret int64
		return ret
	}
	return *o.KILLING
}

// GetKILLINGOk returns a tuple with the KILLING field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DailyExecutionStatisticsExecutionCounts) GetKILLINGOk() (*int64, bool) {
	if o == nil || IsNil(o.KILLING) {
		return nil, false
	}
	return o.KILLING, true
}

// HasKILLING returns a boolean if a field has been set.
func (o *DailyExecutionStatisticsExecutionCounts) HasKILLING() bool {
	if o != nil && !IsNil(o.KILLING) {
		return true
	}

	return false
}

// SetKILLING gets a reference to the given int64 and assigns it to the KILLING field.
func (o *DailyExecutionStatisticsExecutionCounts) SetKILLING(v int64) {
	o.KILLING = &v
}

// GetSUCCESS returns the SUCCESS field value if set, zero value otherwise.
func (o *DailyExecutionStatisticsExecutionCounts) GetSUCCESS() int64 {
	if o == nil || IsNil(o.SUCCESS) {
		var ret int64
		return ret
	}
	return *o.SUCCESS
}

// GetSUCCESSOk returns a tuple with the SUCCESS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DailyExecutionStatisticsExecutionCounts) GetSUCCESSOk() (*int64, bool) {
	if o == nil || IsNil(o.SUCCESS) {
		return nil, false
	}
	return o.SUCCESS, true
}

// HasSUCCESS returns a boolean if a field has been set.
func (o *DailyExecutionStatisticsExecutionCounts) HasSUCCESS() bool {
	if o != nil && !IsNil(o.SUCCESS) {
		return true
	}

	return false
}

// SetSUCCESS gets a reference to the given int64 and assigns it to the SUCCESS field.
func (o *DailyExecutionStatisticsExecutionCounts) SetSUCCESS(v int64) {
	o.SUCCESS = &v
}

// GetWARNING returns the WARNING field value if set, zero value otherwise.
func (o *DailyExecutionStatisticsExecutionCounts) GetWARNING() int64 {
	if o == nil || IsNil(o.WARNING) {
		var ret int64
		return ret
	}
	return *o.WARNING
}

// GetWARNINGOk returns a tuple with the WARNING field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DailyExecutionStatisticsExecutionCounts) GetWARNINGOk() (*int64, bool) {
	if o == nil || IsNil(o.WARNING) {
		return nil, false
	}
	return o.WARNING, true
}

// HasWARNING returns a boolean if a field has been set.
func (o *DailyExecutionStatisticsExecutionCounts) HasWARNING() bool {
	if o != nil && !IsNil(o.WARNING) {
		return true
	}

	return false
}

// SetWARNING gets a reference to the given int64 and assigns it to the WARNING field.
func (o *DailyExecutionStatisticsExecutionCounts) SetWARNING(v int64) {
	o.WARNING = &v
}

// GetFAILED returns the FAILED field value if set, zero value otherwise.
func (o *DailyExecutionStatisticsExecutionCounts) GetFAILED() int64 {
	if o == nil || IsNil(o.FAILED) {
		var ret int64
		return ret
	}
	return *o.FAILED
}

// GetFAILEDOk returns a tuple with the FAILED field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DailyExecutionStatisticsExecutionCounts) GetFAILEDOk() (*int64, bool) {
	if o == nil || IsNil(o.FAILED) {
		return nil, false
	}
	return o.FAILED, true
}

// HasFAILED returns a boolean if a field has been set.
func (o *DailyExecutionStatisticsExecutionCounts) HasFAILED() bool {
	if o != nil && !IsNil(o.FAILED) {
		return true
	}

	return false
}

// SetFAILED gets a reference to the given int64 and assigns it to the FAILED field.
func (o *DailyExecutionStatisticsExecutionCounts) SetFAILED(v int64) {
	o.FAILED = &v
}

// GetKILLED returns the KILLED field value if set, zero value otherwise.
func (o *DailyExecutionStatisticsExecutionCounts) GetKILLED() int64 {
	if o == nil || IsNil(o.KILLED) {
		var ret int64
		return ret
	}
	return *o.KILLED
}

// GetKILLEDOk returns a tuple with the KILLED field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DailyExecutionStatisticsExecutionCounts) GetKILLEDOk() (*int64, bool) {
	if o == nil || IsNil(o.KILLED) {
		return nil, false
	}
	return o.KILLED, true
}

// HasKILLED returns a boolean if a field has been set.
func (o *DailyExecutionStatisticsExecutionCounts) HasKILLED() bool {
	if o != nil && !IsNil(o.KILLED) {
		return true
	}

	return false
}

// SetKILLED gets a reference to the given int64 and assigns it to the KILLED field.
func (o *DailyExecutionStatisticsExecutionCounts) SetKILLED(v int64) {
	o.KILLED = &v
}

// GetCANCELLED returns the CANCELLED field value if set, zero value otherwise.
func (o *DailyExecutionStatisticsExecutionCounts) GetCANCELLED() int64 {
	if o == nil || IsNil(o.CANCELLED) {
		var ret int64
		return ret
	}
	return *o.CANCELLED
}

// GetCANCELLEDOk returns a tuple with the CANCELLED field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DailyExecutionStatisticsExecutionCounts) GetCANCELLEDOk() (*int64, bool) {
	if o == nil || IsNil(o.CANCELLED) {
		return nil, false
	}
	return o.CANCELLED, true
}

// HasCANCELLED returns a boolean if a field has been set.
func (o *DailyExecutionStatisticsExecutionCounts) HasCANCELLED() bool {
	if o != nil && !IsNil(o.CANCELLED) {
		return true
	}

	return false
}

// SetCANCELLED gets a reference to the given int64 and assigns it to the CANCELLED field.
func (o *DailyExecutionStatisticsExecutionCounts) SetCANCELLED(v int64) {
	o.CANCELLED = &v
}

// GetQUEUED returns the QUEUED field value if set, zero value otherwise.
func (o *DailyExecutionStatisticsExecutionCounts) GetQUEUED() int64 {
	if o == nil || IsNil(o.QUEUED) {
		var ret int64
		return ret
	}
	return *o.QUEUED
}

// GetQUEUEDOk returns a tuple with the QUEUED field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DailyExecutionStatisticsExecutionCounts) GetQUEUEDOk() (*int64, bool) {
	if o == nil || IsNil(o.QUEUED) {
		return nil, false
	}
	return o.QUEUED, true
}

// HasQUEUED returns a boolean if a field has been set.
func (o *DailyExecutionStatisticsExecutionCounts) HasQUEUED() bool {
	if o != nil && !IsNil(o.QUEUED) {
		return true
	}

	return false
}

// SetQUEUED gets a reference to the given int64 and assigns it to the QUEUED field.
func (o *DailyExecutionStatisticsExecutionCounts) SetQUEUED(v int64) {
	o.QUEUED = &v
}

// GetRETRYING returns the RETRYING field value if set, zero value otherwise.
func (o *DailyExecutionStatisticsExecutionCounts) GetRETRYING() int64 {
	if o == nil || IsNil(o.RETRYING) {
		var ret int64
		return ret
	}
	return *o.RETRYING
}

// GetRETRYINGOk returns a tuple with the RETRYING field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DailyExecutionStatisticsExecutionCounts) GetRETRYINGOk() (*int64, bool) {
	if o == nil || IsNil(o.RETRYING) {
		return nil, false
	}
	return o.RETRYING, true
}

// HasRETRYING returns a boolean if a field has been set.
func (o *DailyExecutionStatisticsExecutionCounts) HasRETRYING() bool {
	if o != nil && !IsNil(o.RETRYING) {
		return true
	}

	return false
}

// SetRETRYING gets a reference to the given int64 and assigns it to the RETRYING field.
func (o *DailyExecutionStatisticsExecutionCounts) SetRETRYING(v int64) {
	o.RETRYING = &v
}

// GetRETRIED returns the RETRIED field value if set, zero value otherwise.
func (o *DailyExecutionStatisticsExecutionCounts) GetRETRIED() int64 {
	if o == nil || IsNil(o.RETRIED) {
		var ret int64
		return ret
	}
	return *o.RETRIED
}

// GetRETRIEDOk returns a tuple with the RETRIED field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DailyExecutionStatisticsExecutionCounts) GetRETRIEDOk() (*int64, bool) {
	if o == nil || IsNil(o.RETRIED) {
		return nil, false
	}
	return o.RETRIED, true
}

// HasRETRIED returns a boolean if a field has been set.
func (o *DailyExecutionStatisticsExecutionCounts) HasRETRIED() bool {
	if o != nil && !IsNil(o.RETRIED) {
		return true
	}

	return false
}

// SetRETRIED gets a reference to the given int64 and assigns it to the RETRIED field.
func (o *DailyExecutionStatisticsExecutionCounts) SetRETRIED(v int64) {
	o.RETRIED = &v
}

// GetSKIPPED returns the SKIPPED field value if set, zero value otherwise.
func (o *DailyExecutionStatisticsExecutionCounts) GetSKIPPED() int64 {
	if o == nil || IsNil(o.SKIPPED) {
		var ret int64
		return ret
	}
	return *o.SKIPPED
}

// GetSKIPPEDOk returns a tuple with the SKIPPED field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DailyExecutionStatisticsExecutionCounts) GetSKIPPEDOk() (*int64, bool) {
	if o == nil || IsNil(o.SKIPPED) {
		return nil, false
	}
	return o.SKIPPED, true
}

// HasSKIPPED returns a boolean if a field has been set.
func (o *DailyExecutionStatisticsExecutionCounts) HasSKIPPED() bool {
	if o != nil && !IsNil(o.SKIPPED) {
		return true
	}

	return false
}

// SetSKIPPED gets a reference to the given int64 and assigns it to the SKIPPED field.
func (o *DailyExecutionStatisticsExecutionCounts) SetSKIPPED(v int64) {
	o.SKIPPED = &v
}

// GetBREAKPOINT returns the BREAKPOINT field value if set, zero value otherwise.
func (o *DailyExecutionStatisticsExecutionCounts) GetBREAKPOINT() int64 {
	if o == nil || IsNil(o.BREAKPOINT) {
		var ret int64
		return ret
	}
	return *o.BREAKPOINT
}

// GetBREAKPOINTOk returns a tuple with the BREAKPOINT field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DailyExecutionStatisticsExecutionCounts) GetBREAKPOINTOk() (*int64, bool) {
	if o == nil || IsNil(o.BREAKPOINT) {
		return nil, false
	}
	return o.BREAKPOINT, true
}

// HasBREAKPOINT returns a boolean if a field has been set.
func (o *DailyExecutionStatisticsExecutionCounts) HasBREAKPOINT() bool {
	if o != nil && !IsNil(o.BREAKPOINT) {
		return true
	}

	return false
}

// SetBREAKPOINT gets a reference to the given int64 and assigns it to the BREAKPOINT field.
func (o *DailyExecutionStatisticsExecutionCounts) SetBREAKPOINT(v int64) {
	o.BREAKPOINT = &v
}

func (o DailyExecutionStatisticsExecutionCounts) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DailyExecutionStatisticsExecutionCounts) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CREATED) {
		toSerialize["CREATED"] = o.CREATED
	}
	if !IsNil(o.RUNNING) {
		toSerialize["RUNNING"] = o.RUNNING
	}
	if !IsNil(o.PAUSED) {
		toSerialize["PAUSED"] = o.PAUSED
	}
	if !IsNil(o.RESTARTED) {
		toSerialize["RESTARTED"] = o.RESTARTED
	}
	if !IsNil(o.KILLING) {
		toSerialize["KILLING"] = o.KILLING
	}
	if !IsNil(o.SUCCESS) {
		toSerialize["SUCCESS"] = o.SUCCESS
	}
	if !IsNil(o.WARNING) {
		toSerialize["WARNING"] = o.WARNING
	}
	if !IsNil(o.FAILED) {
		toSerialize["FAILED"] = o.FAILED
	}
	if !IsNil(o.KILLED) {
		toSerialize["KILLED"] = o.KILLED
	}
	if !IsNil(o.CANCELLED) {
		toSerialize["CANCELLED"] = o.CANCELLED
	}
	if !IsNil(o.QUEUED) {
		toSerialize["QUEUED"] = o.QUEUED
	}
	if !IsNil(o.RETRYING) {
		toSerialize["RETRYING"] = o.RETRYING
	}
	if !IsNil(o.RETRIED) {
		toSerialize["RETRIED"] = o.RETRIED
	}
	if !IsNil(o.SKIPPED) {
		toSerialize["SKIPPED"] = o.SKIPPED
	}
	if !IsNil(o.BREAKPOINT) {
		toSerialize["BREAKPOINT"] = o.BREAKPOINT
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DailyExecutionStatisticsExecutionCounts) UnmarshalJSON(data []byte) (err error) {
	varDailyExecutionStatisticsExecutionCounts := _DailyExecutionStatisticsExecutionCounts{}

	err = json.Unmarshal(data, &varDailyExecutionStatisticsExecutionCounts)

	if err != nil {
		return err
	}

	*o = DailyExecutionStatisticsExecutionCounts(varDailyExecutionStatisticsExecutionCounts)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "CREATED")
		delete(additionalProperties, "RUNNING")
		delete(additionalProperties, "PAUSED")
		delete(additionalProperties, "RESTARTED")
		delete(additionalProperties, "KILLING")
		delete(additionalProperties, "SUCCESS")
		delete(additionalProperties, "WARNING")
		delete(additionalProperties, "FAILED")
		delete(additionalProperties, "KILLED")
		delete(additionalProperties, "CANCELLED")
		delete(additionalProperties, "QUEUED")
		delete(additionalProperties, "RETRYING")
		delete(additionalProperties, "RETRIED")
		delete(additionalProperties, "SKIPPED")
		delete(additionalProperties, "BREAKPOINT")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDailyExecutionStatisticsExecutionCounts struct {
	value *DailyExecutionStatisticsExecutionCounts
	isSet bool
}

func (v NullableDailyExecutionStatisticsExecutionCounts) Get() *DailyExecutionStatisticsExecutionCounts {
	return v.value
}

func (v *NullableDailyExecutionStatisticsExecutionCounts) Set(val *DailyExecutionStatisticsExecutionCounts) {
	v.value = val
	v.isSet = true
}

func (v NullableDailyExecutionStatisticsExecutionCounts) IsSet() bool {
	return v.isSet
}

func (v *NullableDailyExecutionStatisticsExecutionCounts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDailyExecutionStatisticsExecutionCounts(val *DailyExecutionStatisticsExecutionCounts) *NullableDailyExecutionStatisticsExecutionCounts {
	return &NullableDailyExecutionStatisticsExecutionCounts{value: val, isSet: true}
}

func (v NullableDailyExecutionStatisticsExecutionCounts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDailyExecutionStatisticsExecutionCounts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
