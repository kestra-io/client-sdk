/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
)

// checks if the InstanceControllerApiPluginArtifact type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InstanceControllerApiPluginArtifact{}

// InstanceControllerApiPluginArtifact struct for InstanceControllerApiPluginArtifact
type InstanceControllerApiPluginArtifact struct {
	Title                string   `json:"title"`
	Icon                 string   `json:"icon"`
	GroupId              string   `json:"groupId"`
	ArtifactId           string   `json:"artifactId"`
	Versions             []string `json:"versions"`
	AdditionalProperties map[string]interface{}
}

type _InstanceControllerApiPluginArtifact InstanceControllerApiPluginArtifact

// NewInstanceControllerApiPluginArtifact instantiates a new InstanceControllerApiPluginArtifact object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstanceControllerApiPluginArtifact(title string, icon string, groupId string, artifactId string, versions []string) *InstanceControllerApiPluginArtifact {
	this := InstanceControllerApiPluginArtifact{}
	this.Title = title
	this.Icon = icon
	this.GroupId = groupId
	this.ArtifactId = artifactId
	this.Versions = versions
	return &this
}

// NewInstanceControllerApiPluginArtifactWithDefaults instantiates a new InstanceControllerApiPluginArtifact object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceControllerApiPluginArtifactWithDefaults() *InstanceControllerApiPluginArtifact {
	this := InstanceControllerApiPluginArtifact{}
	return &this
}

// GetTitle returns the Title field value
func (o *InstanceControllerApiPluginArtifact) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *InstanceControllerApiPluginArtifact) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *InstanceControllerApiPluginArtifact) SetTitle(v string) {
	o.Title = v
}

// GetIcon returns the Icon field value
func (o *InstanceControllerApiPluginArtifact) GetIcon() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Icon
}

// GetIconOk returns a tuple with the Icon field value
// and a boolean to check if the value has been set.
func (o *InstanceControllerApiPluginArtifact) GetIconOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Icon, true
}

// SetIcon sets field value
func (o *InstanceControllerApiPluginArtifact) SetIcon(v string) {
	o.Icon = v
}

// GetGroupId returns the GroupId field value
func (o *InstanceControllerApiPluginArtifact) GetGroupId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value
// and a boolean to check if the value has been set.
func (o *InstanceControllerApiPluginArtifact) GetGroupIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GroupId, true
}

// SetGroupId sets field value
func (o *InstanceControllerApiPluginArtifact) SetGroupId(v string) {
	o.GroupId = v
}

// GetArtifactId returns the ArtifactId field value
func (o *InstanceControllerApiPluginArtifact) GetArtifactId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ArtifactId
}

// GetArtifactIdOk returns a tuple with the ArtifactId field value
// and a boolean to check if the value has been set.
func (o *InstanceControllerApiPluginArtifact) GetArtifactIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ArtifactId, true
}

// SetArtifactId sets field value
func (o *InstanceControllerApiPluginArtifact) SetArtifactId(v string) {
	o.ArtifactId = v
}

// GetVersions returns the Versions field value
func (o *InstanceControllerApiPluginArtifact) GetVersions() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Versions
}

// GetVersionsOk returns a tuple with the Versions field value
// and a boolean to check if the value has been set.
func (o *InstanceControllerApiPluginArtifact) GetVersionsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Versions, true
}

// SetVersions sets field value
func (o *InstanceControllerApiPluginArtifact) SetVersions(v []string) {
	o.Versions = v
}

func (o InstanceControllerApiPluginArtifact) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InstanceControllerApiPluginArtifact) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["title"] = o.Title
	toSerialize["icon"] = o.Icon
	toSerialize["groupId"] = o.GroupId
	toSerialize["artifactId"] = o.ArtifactId
	toSerialize["versions"] = o.Versions

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *InstanceControllerApiPluginArtifact) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"title",
		"icon",
		"groupId",
		"artifactId",
		"versions",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInstanceControllerApiPluginArtifact := _InstanceControllerApiPluginArtifact{}

	err = json.Unmarshal(data, &varInstanceControllerApiPluginArtifact)

	if err != nil {
		return err
	}

	*o = InstanceControllerApiPluginArtifact(varInstanceControllerApiPluginArtifact)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "title")
		delete(additionalProperties, "icon")
		delete(additionalProperties, "groupId")
		delete(additionalProperties, "artifactId")
		delete(additionalProperties, "versions")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInstanceControllerApiPluginArtifact struct {
	value *InstanceControllerApiPluginArtifact
	isSet bool
}

func (v NullableInstanceControllerApiPluginArtifact) Get() *InstanceControllerApiPluginArtifact {
	return v.value
}

func (v *NullableInstanceControllerApiPluginArtifact) Set(val *InstanceControllerApiPluginArtifact) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceControllerApiPluginArtifact) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceControllerApiPluginArtifact) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceControllerApiPluginArtifact(val *InstanceControllerApiPluginArtifact) *NullableInstanceControllerApiPluginArtifact {
	return &NullableInstanceControllerApiPluginArtifact{value: val, isSet: true}
}

func (v NullableInstanceControllerApiPluginArtifact) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceControllerApiPluginArtifact) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
