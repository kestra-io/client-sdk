/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
)

// PluginSubGroupPluginCategory the model 'PluginSubGroupPluginCategory'
type PluginSubGroupPluginCategory string

// List of PluginSubGroup.PluginCategory
const (
	PLUGINSUBGROUPPLUGINCATEGORY_DATABASE       PluginSubGroupPluginCategory = "DATABASE"
	PLUGINSUBGROUPPLUGINCATEGORY_MESSAGING      PluginSubGroupPluginCategory = "MESSAGING"
	PLUGINSUBGROUPPLUGINCATEGORY_SCRIPT         PluginSubGroupPluginCategory = "SCRIPT"
	PLUGINSUBGROUPPLUGINCATEGORY_TRANSFORMATION PluginSubGroupPluginCategory = "TRANSFORMATION"
	PLUGINSUBGROUPPLUGINCATEGORY_BATCH          PluginSubGroupPluginCategory = "BATCH"
	PLUGINSUBGROUPPLUGINCATEGORY_ALERTING       PluginSubGroupPluginCategory = "ALERTING"
	PLUGINSUBGROUPPLUGINCATEGORY_CLOUD          PluginSubGroupPluginCategory = "CLOUD"
	PLUGINSUBGROUPPLUGINCATEGORY_STORAGE        PluginSubGroupPluginCategory = "STORAGE"
	PLUGINSUBGROUPPLUGINCATEGORY_OTHER          PluginSubGroupPluginCategory = "OTHER"
	PLUGINSUBGROUPPLUGINCATEGORY_TOOL           PluginSubGroupPluginCategory = "TOOL"
	PLUGINSUBGROUPPLUGINCATEGORY_AI             PluginSubGroupPluginCategory = "AI"
	PLUGINSUBGROUPPLUGINCATEGORY_CORE           PluginSubGroupPluginCategory = "CORE"
	PLUGINSUBGROUPPLUGINCATEGORY_INGESTION      PluginSubGroupPluginCategory = "INGESTION"
	PLUGINSUBGROUPPLUGINCATEGORY_BI             PluginSubGroupPluginCategory = "BI"
)

// All allowed values of PluginSubGroupPluginCategory enum
var AllowedPluginSubGroupPluginCategoryEnumValues = []PluginSubGroupPluginCategory{
	"DATABASE",
	"MESSAGING",
	"SCRIPT",
	"TRANSFORMATION",
	"BATCH",
	"ALERTING",
	"CLOUD",
	"STORAGE",
	"OTHER",
	"TOOL",
	"AI",
	"CORE",
	"INGESTION",
	"BI",
}

func (v *PluginSubGroupPluginCategory) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PluginSubGroupPluginCategory(value)
	for _, existing := range AllowedPluginSubGroupPluginCategoryEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PluginSubGroupPluginCategory", value)
}

// NewPluginSubGroupPluginCategoryFromValue returns a pointer to a valid PluginSubGroupPluginCategory
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPluginSubGroupPluginCategoryFromValue(v string) (*PluginSubGroupPluginCategory, error) {
	ev := PluginSubGroupPluginCategory(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PluginSubGroupPluginCategory: valid values are %v", v, AllowedPluginSubGroupPluginCategoryEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PluginSubGroupPluginCategory) IsValid() bool {
	for _, existing := range AllowedPluginSubGroupPluginCategoryEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PluginSubGroup.PluginCategory value
func (v PluginSubGroupPluginCategory) Ptr() *PluginSubGroupPluginCategory {
	return &v
}

type NullablePluginSubGroupPluginCategory struct {
	value *PluginSubGroupPluginCategory
	isSet bool
}

func (v NullablePluginSubGroupPluginCategory) Get() *PluginSubGroupPluginCategory {
	return v.value
}

func (v *NullablePluginSubGroupPluginCategory) Set(val *PluginSubGroupPluginCategory) {
	v.value = val
	v.isSet = true
}

func (v NullablePluginSubGroupPluginCategory) IsSet() bool {
	return v.isSet
}

func (v *NullablePluginSubGroupPluginCategory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePluginSubGroupPluginCategory(val *PluginSubGroupPluginCategory) *NullablePluginSubGroupPluginCategory {
	return &NullablePluginSubGroupPluginCategory{value: val, isSet: true}
}

func (v NullablePluginSubGroupPluginCategory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePluginSubGroupPluginCategory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
