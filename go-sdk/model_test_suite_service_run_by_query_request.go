/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
)

// checks if the TestSuiteServiceRunByQueryRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TestSuiteServiceRunByQueryRequest{}

// TestSuiteServiceRunByQueryRequest struct for TestSuiteServiceRunByQueryRequest
type TestSuiteServiceRunByQueryRequest struct {
	Namespace NullableString `json:"namespace"`
	FlowId    NullableString `json:"flowId"`
	// Should child namespaces be included or not
	IncludeChildNamespaces bool `json:"includeChildNamespaces"`
	AdditionalProperties   map[string]interface{}
}

type _TestSuiteServiceRunByQueryRequest TestSuiteServiceRunByQueryRequest

// NewTestSuiteServiceRunByQueryRequest instantiates a new TestSuiteServiceRunByQueryRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTestSuiteServiceRunByQueryRequest(namespace NullableString, flowId NullableString, includeChildNamespaces bool) *TestSuiteServiceRunByQueryRequest {
	this := TestSuiteServiceRunByQueryRequest{}
	this.Namespace = namespace
	this.FlowId = flowId
	this.IncludeChildNamespaces = includeChildNamespaces
	return &this
}

// NewTestSuiteServiceRunByQueryRequestWithDefaults instantiates a new TestSuiteServiceRunByQueryRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTestSuiteServiceRunByQueryRequestWithDefaults() *TestSuiteServiceRunByQueryRequest {
	this := TestSuiteServiceRunByQueryRequest{}
	var includeChildNamespaces bool = true
	this.IncludeChildNamespaces = includeChildNamespaces
	return &this
}

// GetNamespace returns the Namespace field value
// If the value is explicit nil, the zero value for string will be returned
func (o *TestSuiteServiceRunByQueryRequest) GetNamespace() string {
	if o == nil || o.Namespace.Get() == nil {
		var ret string
		return ret
	}

	return *o.Namespace.Get()
}

// GetNamespaceOk returns a tuple with the Namespace field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestSuiteServiceRunByQueryRequest) GetNamespaceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Namespace.Get(), o.Namespace.IsSet()
}

// SetNamespace sets field value
func (o *TestSuiteServiceRunByQueryRequest) SetNamespace(v string) {
	o.Namespace.Set(&v)
}

// GetFlowId returns the FlowId field value
// If the value is explicit nil, the zero value for string will be returned
func (o *TestSuiteServiceRunByQueryRequest) GetFlowId() string {
	if o == nil || o.FlowId.Get() == nil {
		var ret string
		return ret
	}

	return *o.FlowId.Get()
}

// GetFlowIdOk returns a tuple with the FlowId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestSuiteServiceRunByQueryRequest) GetFlowIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FlowId.Get(), o.FlowId.IsSet()
}

// SetFlowId sets field value
func (o *TestSuiteServiceRunByQueryRequest) SetFlowId(v string) {
	o.FlowId.Set(&v)
}

// GetIncludeChildNamespaces returns the IncludeChildNamespaces field value
func (o *TestSuiteServiceRunByQueryRequest) GetIncludeChildNamespaces() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IncludeChildNamespaces
}

// GetIncludeChildNamespacesOk returns a tuple with the IncludeChildNamespaces field value
// and a boolean to check if the value has been set.
func (o *TestSuiteServiceRunByQueryRequest) GetIncludeChildNamespacesOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IncludeChildNamespaces, true
}

// SetIncludeChildNamespaces sets field value
func (o *TestSuiteServiceRunByQueryRequest) SetIncludeChildNamespaces(v bool) {
	o.IncludeChildNamespaces = v
}

func (o TestSuiteServiceRunByQueryRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TestSuiteServiceRunByQueryRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["namespace"] = o.Namespace.Get()
	toSerialize["flowId"] = o.FlowId.Get()
	toSerialize["includeChildNamespaces"] = o.IncludeChildNamespaces

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TestSuiteServiceRunByQueryRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"namespace",
		"flowId",
		"includeChildNamespaces",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTestSuiteServiceRunByQueryRequest := _TestSuiteServiceRunByQueryRequest{}

	err = json.Unmarshal(data, &varTestSuiteServiceRunByQueryRequest)

	if err != nil {
		return err
	}

	*o = TestSuiteServiceRunByQueryRequest(varTestSuiteServiceRunByQueryRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "namespace")
		delete(additionalProperties, "flowId")
		delete(additionalProperties, "includeChildNamespaces")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTestSuiteServiceRunByQueryRequest struct {
	value *TestSuiteServiceRunByQueryRequest
	isSet bool
}

func (v NullableTestSuiteServiceRunByQueryRequest) Get() *TestSuiteServiceRunByQueryRequest {
	return v.value
}

func (v *NullableTestSuiteServiceRunByQueryRequest) Set(val *TestSuiteServiceRunByQueryRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableTestSuiteServiceRunByQueryRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableTestSuiteServiceRunByQueryRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestSuiteServiceRunByQueryRequest(val *TestSuiteServiceRunByQueryRequest) *NullableTestSuiteServiceRunByQueryRequest {
	return &NullableTestSuiteServiceRunByQueryRequest{value: val, isSet: true}
}

func (v NullableTestSuiteServiceRunByQueryRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestSuiteServiceRunByQueryRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
