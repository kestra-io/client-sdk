/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
)

// checks if the AuthControllerAuth type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuthControllerAuth{}

// AuthControllerAuth struct for AuthControllerAuth
type AuthControllerAuth struct {
	LoginPassword        *bool    `json:"loginPassword,omitempty"`
	MailsEnabled         *bool    `json:"mailsEnabled,omitempty"`
	Passwordless         *bool    `json:"passwordless,omitempty"`
	Oauths               []string `json:"oauths,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AuthControllerAuth AuthControllerAuth

// NewAuthControllerAuth instantiates a new AuthControllerAuth object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthControllerAuth() *AuthControllerAuth {
	this := AuthControllerAuth{}
	return &this
}

// NewAuthControllerAuthWithDefaults instantiates a new AuthControllerAuth object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthControllerAuthWithDefaults() *AuthControllerAuth {
	this := AuthControllerAuth{}
	return &this
}

// GetLoginPassword returns the LoginPassword field value if set, zero value otherwise.
func (o *AuthControllerAuth) GetLoginPassword() bool {
	if o == nil || IsNil(o.LoginPassword) {
		var ret bool
		return ret
	}
	return *o.LoginPassword
}

// GetLoginPasswordOk returns a tuple with the LoginPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthControllerAuth) GetLoginPasswordOk() (*bool, bool) {
	if o == nil || IsNil(o.LoginPassword) {
		return nil, false
	}
	return o.LoginPassword, true
}

// HasLoginPassword returns a boolean if a field has been set.
func (o *AuthControllerAuth) HasLoginPassword() bool {
	if o != nil && !IsNil(o.LoginPassword) {
		return true
	}

	return false
}

// SetLoginPassword gets a reference to the given bool and assigns it to the LoginPassword field.
func (o *AuthControllerAuth) SetLoginPassword(v bool) {
	o.LoginPassword = &v
}

// GetMailsEnabled returns the MailsEnabled field value if set, zero value otherwise.
func (o *AuthControllerAuth) GetMailsEnabled() bool {
	if o == nil || IsNil(o.MailsEnabled) {
		var ret bool
		return ret
	}
	return *o.MailsEnabled
}

// GetMailsEnabledOk returns a tuple with the MailsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthControllerAuth) GetMailsEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.MailsEnabled) {
		return nil, false
	}
	return o.MailsEnabled, true
}

// HasMailsEnabled returns a boolean if a field has been set.
func (o *AuthControllerAuth) HasMailsEnabled() bool {
	if o != nil && !IsNil(o.MailsEnabled) {
		return true
	}

	return false
}

// SetMailsEnabled gets a reference to the given bool and assigns it to the MailsEnabled field.
func (o *AuthControllerAuth) SetMailsEnabled(v bool) {
	o.MailsEnabled = &v
}

// GetPasswordless returns the Passwordless field value if set, zero value otherwise.
func (o *AuthControllerAuth) GetPasswordless() bool {
	if o == nil || IsNil(o.Passwordless) {
		var ret bool
		return ret
	}
	return *o.Passwordless
}

// GetPasswordlessOk returns a tuple with the Passwordless field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthControllerAuth) GetPasswordlessOk() (*bool, bool) {
	if o == nil || IsNil(o.Passwordless) {
		return nil, false
	}
	return o.Passwordless, true
}

// HasPasswordless returns a boolean if a field has been set.
func (o *AuthControllerAuth) HasPasswordless() bool {
	if o != nil && !IsNil(o.Passwordless) {
		return true
	}

	return false
}

// SetPasswordless gets a reference to the given bool and assigns it to the Passwordless field.
func (o *AuthControllerAuth) SetPasswordless(v bool) {
	o.Passwordless = &v
}

// GetOauths returns the Oauths field value if set, zero value otherwise.
func (o *AuthControllerAuth) GetOauths() []string {
	if o == nil || IsNil(o.Oauths) {
		var ret []string
		return ret
	}
	return o.Oauths
}

// GetOauthsOk returns a tuple with the Oauths field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthControllerAuth) GetOauthsOk() ([]string, bool) {
	if o == nil || IsNil(o.Oauths) {
		return nil, false
	}
	return o.Oauths, true
}

// HasOauths returns a boolean if a field has been set.
func (o *AuthControllerAuth) HasOauths() bool {
	if o != nil && !IsNil(o.Oauths) {
		return true
	}

	return false
}

// SetOauths gets a reference to the given []string and assigns it to the Oauths field.
func (o *AuthControllerAuth) SetOauths(v []string) {
	o.Oauths = v
}

func (o AuthControllerAuth) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuthControllerAuth) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LoginPassword) {
		toSerialize["loginPassword"] = o.LoginPassword
	}
	if !IsNil(o.MailsEnabled) {
		toSerialize["mailsEnabled"] = o.MailsEnabled
	}
	if !IsNil(o.Passwordless) {
		toSerialize["passwordless"] = o.Passwordless
	}
	if !IsNil(o.Oauths) {
		toSerialize["oauths"] = o.Oauths
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AuthControllerAuth) UnmarshalJSON(data []byte) (err error) {
	varAuthControllerAuth := _AuthControllerAuth{}

	err = json.Unmarshal(data, &varAuthControllerAuth)

	if err != nil {
		return err
	}

	*o = AuthControllerAuth(varAuthControllerAuth)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "loginPassword")
		delete(additionalProperties, "mailsEnabled")
		delete(additionalProperties, "passwordless")
		delete(additionalProperties, "oauths")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAuthControllerAuth struct {
	value *AuthControllerAuth
	isSet bool
}

func (v NullableAuthControllerAuth) Get() *AuthControllerAuth {
	return v.value
}

func (v *NullableAuthControllerAuth) Set(val *AuthControllerAuth) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthControllerAuth) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthControllerAuth) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthControllerAuth(val *AuthControllerAuth) *NullableAuthControllerAuth {
	return &NullableAuthControllerAuth{value: val, isSet: true}
}

func (v NullableAuthControllerAuth) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthControllerAuth) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
