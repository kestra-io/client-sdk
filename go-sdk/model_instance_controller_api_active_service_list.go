/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
)

// checks if the InstanceControllerApiActiveServiceList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InstanceControllerApiActiveServiceList{}

// InstanceControllerApiActiveServiceList struct for InstanceControllerApiActiveServiceList
type InstanceControllerApiActiveServiceList struct {
	Total                *int32                               `json:"total,omitempty"`
	Services             []InstanceControllerApiActiveService `json:"services,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _InstanceControllerApiActiveServiceList InstanceControllerApiActiveServiceList

// NewInstanceControllerApiActiveServiceList instantiates a new InstanceControllerApiActiveServiceList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstanceControllerApiActiveServiceList() *InstanceControllerApiActiveServiceList {
	this := InstanceControllerApiActiveServiceList{}
	return &this
}

// NewInstanceControllerApiActiveServiceListWithDefaults instantiates a new InstanceControllerApiActiveServiceList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceControllerApiActiveServiceListWithDefaults() *InstanceControllerApiActiveServiceList {
	this := InstanceControllerApiActiveServiceList{}
	return &this
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *InstanceControllerApiActiveServiceList) GetTotal() int32 {
	if o == nil || IsNil(o.Total) {
		var ret int32
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceControllerApiActiveServiceList) GetTotalOk() (*int32, bool) {
	if o == nil || IsNil(o.Total) {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *InstanceControllerApiActiveServiceList) HasTotal() bool {
	if o != nil && !IsNil(o.Total) {
		return true
	}

	return false
}

// SetTotal gets a reference to the given int32 and assigns it to the Total field.
func (o *InstanceControllerApiActiveServiceList) SetTotal(v int32) {
	o.Total = &v
}

// GetServices returns the Services field value if set, zero value otherwise.
func (o *InstanceControllerApiActiveServiceList) GetServices() []InstanceControllerApiActiveService {
	if o == nil || IsNil(o.Services) {
		var ret []InstanceControllerApiActiveService
		return ret
	}
	return o.Services
}

// GetServicesOk returns a tuple with the Services field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceControllerApiActiveServiceList) GetServicesOk() ([]InstanceControllerApiActiveService, bool) {
	if o == nil || IsNil(o.Services) {
		return nil, false
	}
	return o.Services, true
}

// HasServices returns a boolean if a field has been set.
func (o *InstanceControllerApiActiveServiceList) HasServices() bool {
	if o != nil && !IsNil(o.Services) {
		return true
	}

	return false
}

// SetServices gets a reference to the given []InstanceControllerApiActiveService and assigns it to the Services field.
func (o *InstanceControllerApiActiveServiceList) SetServices(v []InstanceControllerApiActiveService) {
	o.Services = v
}

func (o InstanceControllerApiActiveServiceList) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InstanceControllerApiActiveServiceList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Total) {
		toSerialize["total"] = o.Total
	}
	if !IsNil(o.Services) {
		toSerialize["services"] = o.Services
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *InstanceControllerApiActiveServiceList) UnmarshalJSON(data []byte) (err error) {
	varInstanceControllerApiActiveServiceList := _InstanceControllerApiActiveServiceList{}

	err = json.Unmarshal(data, &varInstanceControllerApiActiveServiceList)

	if err != nil {
		return err
	}

	*o = InstanceControllerApiActiveServiceList(varInstanceControllerApiActiveServiceList)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "total")
		delete(additionalProperties, "services")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInstanceControllerApiActiveServiceList struct {
	value *InstanceControllerApiActiveServiceList
	isSet bool
}

func (v NullableInstanceControllerApiActiveServiceList) Get() *InstanceControllerApiActiveServiceList {
	return v.value
}

func (v *NullableInstanceControllerApiActiveServiceList) Set(val *InstanceControllerApiActiveServiceList) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceControllerApiActiveServiceList) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceControllerApiActiveServiceList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceControllerApiActiveServiceList(val *InstanceControllerApiActiveServiceList) *NullableInstanceControllerApiActiveServiceList {
	return &NullableInstanceControllerApiActiveServiceList{value: val, isSet: true}
}

func (v NullableInstanceControllerApiActiveServiceList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceControllerApiActiveServiceList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
