/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
)

// checks if the ClusterControllerApiPluginVersionDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClusterControllerApiPluginVersionDetails{}

// ClusterControllerApiPluginVersionDetails struct for ClusterControllerApiPluginVersionDetails
type ClusterControllerApiPluginVersionDetails struct {
	ArtifactId           string                                                     `json:"artifactId"`
	GroupId              string                                                     `json:"groupId"`
	Version              string                                                     `json:"version"`
	Title                string                                                     `json:"title"`
	Description          string                                                     `json:"description"`
	Icon                 string                                                     `json:"icon"`
	Classes              []ClusterControllerApiPluginVersionDetailsApiPluginClasses `json:"classes"`
	AdditionalProperties map[string]interface{}
}

type _ClusterControllerApiPluginVersionDetails ClusterControllerApiPluginVersionDetails

// NewClusterControllerApiPluginVersionDetails instantiates a new ClusterControllerApiPluginVersionDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterControllerApiPluginVersionDetails(artifactId string, groupId string, version string, title string, description string, icon string, classes []ClusterControllerApiPluginVersionDetailsApiPluginClasses) *ClusterControllerApiPluginVersionDetails {
	this := ClusterControllerApiPluginVersionDetails{}
	this.ArtifactId = artifactId
	this.GroupId = groupId
	this.Version = version
	this.Title = title
	this.Description = description
	this.Icon = icon
	this.Classes = classes
	return &this
}

// NewClusterControllerApiPluginVersionDetailsWithDefaults instantiates a new ClusterControllerApiPluginVersionDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterControllerApiPluginVersionDetailsWithDefaults() *ClusterControllerApiPluginVersionDetails {
	this := ClusterControllerApiPluginVersionDetails{}
	return &this
}

// GetArtifactId returns the ArtifactId field value
func (o *ClusterControllerApiPluginVersionDetails) GetArtifactId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ArtifactId
}

// GetArtifactIdOk returns a tuple with the ArtifactId field value
// and a boolean to check if the value has been set.
func (o *ClusterControllerApiPluginVersionDetails) GetArtifactIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ArtifactId, true
}

// SetArtifactId sets field value
func (o *ClusterControllerApiPluginVersionDetails) SetArtifactId(v string) {
	o.ArtifactId = v
}

// GetGroupId returns the GroupId field value
func (o *ClusterControllerApiPluginVersionDetails) GetGroupId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value
// and a boolean to check if the value has been set.
func (o *ClusterControllerApiPluginVersionDetails) GetGroupIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GroupId, true
}

// SetGroupId sets field value
func (o *ClusterControllerApiPluginVersionDetails) SetGroupId(v string) {
	o.GroupId = v
}

// GetVersion returns the Version field value
func (o *ClusterControllerApiPluginVersionDetails) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *ClusterControllerApiPluginVersionDetails) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *ClusterControllerApiPluginVersionDetails) SetVersion(v string) {
	o.Version = v
}

// GetTitle returns the Title field value
func (o *ClusterControllerApiPluginVersionDetails) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *ClusterControllerApiPluginVersionDetails) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *ClusterControllerApiPluginVersionDetails) SetTitle(v string) {
	o.Title = v
}

// GetDescription returns the Description field value
func (o *ClusterControllerApiPluginVersionDetails) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *ClusterControllerApiPluginVersionDetails) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *ClusterControllerApiPluginVersionDetails) SetDescription(v string) {
	o.Description = v
}

// GetIcon returns the Icon field value
func (o *ClusterControllerApiPluginVersionDetails) GetIcon() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Icon
}

// GetIconOk returns a tuple with the Icon field value
// and a boolean to check if the value has been set.
func (o *ClusterControllerApiPluginVersionDetails) GetIconOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Icon, true
}

// SetIcon sets field value
func (o *ClusterControllerApiPluginVersionDetails) SetIcon(v string) {
	o.Icon = v
}

// GetClasses returns the Classes field value
func (o *ClusterControllerApiPluginVersionDetails) GetClasses() []ClusterControllerApiPluginVersionDetailsApiPluginClasses {
	if o == nil {
		var ret []ClusterControllerApiPluginVersionDetailsApiPluginClasses
		return ret
	}

	return o.Classes
}

// GetClassesOk returns a tuple with the Classes field value
// and a boolean to check if the value has been set.
func (o *ClusterControllerApiPluginVersionDetails) GetClassesOk() ([]ClusterControllerApiPluginVersionDetailsApiPluginClasses, bool) {
	if o == nil {
		return nil, false
	}
	return o.Classes, true
}

// SetClasses sets field value
func (o *ClusterControllerApiPluginVersionDetails) SetClasses(v []ClusterControllerApiPluginVersionDetailsApiPluginClasses) {
	o.Classes = v
}

func (o ClusterControllerApiPluginVersionDetails) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClusterControllerApiPluginVersionDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["artifactId"] = o.ArtifactId
	toSerialize["groupId"] = o.GroupId
	toSerialize["version"] = o.Version
	toSerialize["title"] = o.Title
	toSerialize["description"] = o.Description
	toSerialize["icon"] = o.Icon
	toSerialize["classes"] = o.Classes

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ClusterControllerApiPluginVersionDetails) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"artifactId",
		"groupId",
		"version",
		"title",
		"description",
		"icon",
		"classes",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varClusterControllerApiPluginVersionDetails := _ClusterControllerApiPluginVersionDetails{}

	err = json.Unmarshal(data, &varClusterControllerApiPluginVersionDetails)

	if err != nil {
		return err
	}

	*o = ClusterControllerApiPluginVersionDetails(varClusterControllerApiPluginVersionDetails)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "artifactId")
		delete(additionalProperties, "groupId")
		delete(additionalProperties, "version")
		delete(additionalProperties, "title")
		delete(additionalProperties, "description")
		delete(additionalProperties, "icon")
		delete(additionalProperties, "classes")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableClusterControllerApiPluginVersionDetails struct {
	value *ClusterControllerApiPluginVersionDetails
	isSet bool
}

func (v NullableClusterControllerApiPluginVersionDetails) Get() *ClusterControllerApiPluginVersionDetails {
	return v.value
}

func (v *NullableClusterControllerApiPluginVersionDetails) Set(val *ClusterControllerApiPluginVersionDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterControllerApiPluginVersionDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterControllerApiPluginVersionDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterControllerApiPluginVersionDetails(val *ClusterControllerApiPluginVersionDetails) *NullableClusterControllerApiPluginVersionDetails {
	return &NullableClusterControllerApiPluginVersionDetails{value: val, isSet: true}
}

func (v NullableClusterControllerApiPluginVersionDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterControllerApiPluginVersionDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
