/*
Kestra EE

All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
)

// checks if the ClusterControllerApiPluginVersionDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClusterControllerApiPluginVersionDetails{}

// ClusterControllerApiPluginVersionDetails struct for ClusterControllerApiPluginVersionDetails
type ClusterControllerApiPluginVersionDetails struct {
	ArtifactId  *string                                                    `json:"artifactId,omitempty"`
	GroupId     *string                                                    `json:"groupId,omitempty"`
	Version     *string                                                    `json:"version,omitempty"`
	Title       *string                                                    `json:"title,omitempty"`
	Description *string                                                    `json:"description,omitempty"`
	Icon        *string                                                    `json:"icon,omitempty"`
	Classes     []ClusterControllerApiPluginVersionDetailsApiPluginClasses `json:"classes,omitempty"`
}

// NewClusterControllerApiPluginVersionDetails instantiates a new ClusterControllerApiPluginVersionDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterControllerApiPluginVersionDetails() *ClusterControllerApiPluginVersionDetails {
	this := ClusterControllerApiPluginVersionDetails{}
	return &this
}

// NewClusterControllerApiPluginVersionDetailsWithDefaults instantiates a new ClusterControllerApiPluginVersionDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterControllerApiPluginVersionDetailsWithDefaults() *ClusterControllerApiPluginVersionDetails {
	this := ClusterControllerApiPluginVersionDetails{}
	return &this
}

// GetArtifactId returns the ArtifactId field value if set, zero value otherwise.
func (o *ClusterControllerApiPluginVersionDetails) GetArtifactId() string {
	if o == nil || IsNil(o.ArtifactId) {
		var ret string
		return ret
	}
	return *o.ArtifactId
}

// GetArtifactIdOk returns a tuple with the ArtifactId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterControllerApiPluginVersionDetails) GetArtifactIdOk() (*string, bool) {
	if o == nil || IsNil(o.ArtifactId) {
		return nil, false
	}
	return o.ArtifactId, true
}

// HasArtifactId returns a boolean if a field has been set.
func (o *ClusterControllerApiPluginVersionDetails) HasArtifactId() bool {
	if o != nil && !IsNil(o.ArtifactId) {
		return true
	}

	return false
}

// SetArtifactId gets a reference to the given string and assigns it to the ArtifactId field.
func (o *ClusterControllerApiPluginVersionDetails) SetArtifactId(v string) {
	o.ArtifactId = &v
}

// GetGroupId returns the GroupId field value if set, zero value otherwise.
func (o *ClusterControllerApiPluginVersionDetails) GetGroupId() string {
	if o == nil || IsNil(o.GroupId) {
		var ret string
		return ret
	}
	return *o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterControllerApiPluginVersionDetails) GetGroupIdOk() (*string, bool) {
	if o == nil || IsNil(o.GroupId) {
		return nil, false
	}
	return o.GroupId, true
}

// HasGroupId returns a boolean if a field has been set.
func (o *ClusterControllerApiPluginVersionDetails) HasGroupId() bool {
	if o != nil && !IsNil(o.GroupId) {
		return true
	}

	return false
}

// SetGroupId gets a reference to the given string and assigns it to the GroupId field.
func (o *ClusterControllerApiPluginVersionDetails) SetGroupId(v string) {
	o.GroupId = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *ClusterControllerApiPluginVersionDetails) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterControllerApiPluginVersionDetails) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *ClusterControllerApiPluginVersionDetails) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *ClusterControllerApiPluginVersionDetails) SetVersion(v string) {
	o.Version = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *ClusterControllerApiPluginVersionDetails) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterControllerApiPluginVersionDetails) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *ClusterControllerApiPluginVersionDetails) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *ClusterControllerApiPluginVersionDetails) SetTitle(v string) {
	o.Title = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ClusterControllerApiPluginVersionDetails) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterControllerApiPluginVersionDetails) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ClusterControllerApiPluginVersionDetails) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ClusterControllerApiPluginVersionDetails) SetDescription(v string) {
	o.Description = &v
}

// GetIcon returns the Icon field value if set, zero value otherwise.
func (o *ClusterControllerApiPluginVersionDetails) GetIcon() string {
	if o == nil || IsNil(o.Icon) {
		var ret string
		return ret
	}
	return *o.Icon
}

// GetIconOk returns a tuple with the Icon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterControllerApiPluginVersionDetails) GetIconOk() (*string, bool) {
	if o == nil || IsNil(o.Icon) {
		return nil, false
	}
	return o.Icon, true
}

// HasIcon returns a boolean if a field has been set.
func (o *ClusterControllerApiPluginVersionDetails) HasIcon() bool {
	if o != nil && !IsNil(o.Icon) {
		return true
	}

	return false
}

// SetIcon gets a reference to the given string and assigns it to the Icon field.
func (o *ClusterControllerApiPluginVersionDetails) SetIcon(v string) {
	o.Icon = &v
}

// GetClasses returns the Classes field value if set, zero value otherwise.
func (o *ClusterControllerApiPluginVersionDetails) GetClasses() []ClusterControllerApiPluginVersionDetailsApiPluginClasses {
	if o == nil || IsNil(o.Classes) {
		var ret []ClusterControllerApiPluginVersionDetailsApiPluginClasses
		return ret
	}
	return o.Classes
}

// GetClassesOk returns a tuple with the Classes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterControllerApiPluginVersionDetails) GetClassesOk() ([]ClusterControllerApiPluginVersionDetailsApiPluginClasses, bool) {
	if o == nil || IsNil(o.Classes) {
		return nil, false
	}
	return o.Classes, true
}

// HasClasses returns a boolean if a field has been set.
func (o *ClusterControllerApiPluginVersionDetails) HasClasses() bool {
	if o != nil && !IsNil(o.Classes) {
		return true
	}

	return false
}

// SetClasses gets a reference to the given []ClusterControllerApiPluginVersionDetailsApiPluginClasses and assigns it to the Classes field.
func (o *ClusterControllerApiPluginVersionDetails) SetClasses(v []ClusterControllerApiPluginVersionDetailsApiPluginClasses) {
	o.Classes = v
}

func (o ClusterControllerApiPluginVersionDetails) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClusterControllerApiPluginVersionDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ArtifactId) {
		toSerialize["artifactId"] = o.ArtifactId
	}
	if !IsNil(o.GroupId) {
		toSerialize["groupId"] = o.GroupId
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Icon) {
		toSerialize["icon"] = o.Icon
	}
	if !IsNil(o.Classes) {
		toSerialize["classes"] = o.Classes
	}
	return toSerialize, nil
}

type NullableClusterControllerApiPluginVersionDetails struct {
	value *ClusterControllerApiPluginVersionDetails
	isSet bool
}

func (v NullableClusterControllerApiPluginVersionDetails) Get() *ClusterControllerApiPluginVersionDetails {
	return v.value
}

func (v *NullableClusterControllerApiPluginVersionDetails) Set(val *ClusterControllerApiPluginVersionDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterControllerApiPluginVersionDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterControllerApiPluginVersionDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterControllerApiPluginVersionDetails(val *ClusterControllerApiPluginVersionDetails) *NullableClusterControllerApiPluginVersionDetails {
	return &NullableClusterControllerApiPluginVersionDetails{value: val, isSet: true}
}

func (v NullableClusterControllerApiPluginVersionDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterControllerApiPluginVersionDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
