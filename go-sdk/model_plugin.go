/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
)

// checks if the Plugin type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Plugin{}

// Plugin struct for Plugin
type Plugin struct {
	Name                 *string                        `json:"name,omitempty"`
	Title                *string                        `json:"title,omitempty"`
	Description          *string                        `json:"description,omitempty"`
	License              *string                        `json:"license,omitempty"`
	LongDescription      *string                        `json:"longDescription,omitempty"`
	Group                *string                        `json:"group,omitempty"`
	Version              *string                        `json:"version,omitempty"`
	Manifest             *map[string]string             `json:"manifest,omitempty"`
	Guides               []string                       `json:"guides,omitempty"`
	Aliases              []string                       `json:"aliases,omitempty"`
	Tasks                []PluginPluginElementMetadata  `json:"tasks,omitempty"`
	Triggers             []PluginPluginElementMetadata  `json:"triggers,omitempty"`
	Conditions           []PluginPluginElementMetadata  `json:"conditions,omitempty"`
	Controllers          []PluginPluginElementMetadata  `json:"controllers,omitempty"`
	Storages             []PluginPluginElementMetadata  `json:"storages,omitempty"`
	Secrets              []PluginPluginElementMetadata  `json:"secrets,omitempty"`
	TaskRunners          []PluginPluginElementMetadata  `json:"taskRunners,omitempty"`
	Apps                 []PluginPluginElementMetadata  `json:"apps,omitempty"`
	AppBlocks            []PluginPluginElementMetadata  `json:"appBlocks,omitempty"`
	Charts               []PluginPluginElementMetadata  `json:"charts,omitempty"`
	DataFilters          []PluginPluginElementMetadata  `json:"dataFilters,omitempty"`
	DataFiltersKPI       []PluginPluginElementMetadata  `json:"dataFiltersKPI,omitempty"`
	LogExporters         []PluginPluginElementMetadata  `json:"logExporters,omitempty"`
	AdditionalPlugins    []PluginPluginElementMetadata  `json:"additionalPlugins,omitempty"`
	Categories           []PluginSubGroupPluginCategory `json:"categories,omitempty"`
	SubGroup             *string                        `json:"subGroup,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Plugin Plugin

// NewPlugin instantiates a new Plugin object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlugin() *Plugin {
	this := Plugin{}
	return &this
}

// NewPluginWithDefaults instantiates a new Plugin object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPluginWithDefaults() *Plugin {
	this := Plugin{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Plugin) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Plugin) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Plugin) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Plugin) SetName(v string) {
	o.Name = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *Plugin) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Plugin) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *Plugin) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *Plugin) SetTitle(v string) {
	o.Title = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Plugin) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Plugin) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Plugin) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Plugin) SetDescription(v string) {
	o.Description = &v
}

// GetLicense returns the License field value if set, zero value otherwise.
func (o *Plugin) GetLicense() string {
	if o == nil || IsNil(o.License) {
		var ret string
		return ret
	}
	return *o.License
}

// GetLicenseOk returns a tuple with the License field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Plugin) GetLicenseOk() (*string, bool) {
	if o == nil || IsNil(o.License) {
		return nil, false
	}
	return o.License, true
}

// HasLicense returns a boolean if a field has been set.
func (o *Plugin) HasLicense() bool {
	if o != nil && !IsNil(o.License) {
		return true
	}

	return false
}

// SetLicense gets a reference to the given string and assigns it to the License field.
func (o *Plugin) SetLicense(v string) {
	o.License = &v
}

// GetLongDescription returns the LongDescription field value if set, zero value otherwise.
func (o *Plugin) GetLongDescription() string {
	if o == nil || IsNil(o.LongDescription) {
		var ret string
		return ret
	}
	return *o.LongDescription
}

// GetLongDescriptionOk returns a tuple with the LongDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Plugin) GetLongDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.LongDescription) {
		return nil, false
	}
	return o.LongDescription, true
}

// HasLongDescription returns a boolean if a field has been set.
func (o *Plugin) HasLongDescription() bool {
	if o != nil && !IsNil(o.LongDescription) {
		return true
	}

	return false
}

// SetLongDescription gets a reference to the given string and assigns it to the LongDescription field.
func (o *Plugin) SetLongDescription(v string) {
	o.LongDescription = &v
}

// GetGroup returns the Group field value if set, zero value otherwise.
func (o *Plugin) GetGroup() string {
	if o == nil || IsNil(o.Group) {
		var ret string
		return ret
	}
	return *o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Plugin) GetGroupOk() (*string, bool) {
	if o == nil || IsNil(o.Group) {
		return nil, false
	}
	return o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *Plugin) HasGroup() bool {
	if o != nil && !IsNil(o.Group) {
		return true
	}

	return false
}

// SetGroup gets a reference to the given string and assigns it to the Group field.
func (o *Plugin) SetGroup(v string) {
	o.Group = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *Plugin) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Plugin) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *Plugin) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *Plugin) SetVersion(v string) {
	o.Version = &v
}

// GetManifest returns the Manifest field value if set, zero value otherwise.
func (o *Plugin) GetManifest() map[string]string {
	if o == nil || IsNil(o.Manifest) {
		var ret map[string]string
		return ret
	}
	return *o.Manifest
}

// GetManifestOk returns a tuple with the Manifest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Plugin) GetManifestOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Manifest) {
		return nil, false
	}
	return o.Manifest, true
}

// HasManifest returns a boolean if a field has been set.
func (o *Plugin) HasManifest() bool {
	if o != nil && !IsNil(o.Manifest) {
		return true
	}

	return false
}

// SetManifest gets a reference to the given map[string]string and assigns it to the Manifest field.
func (o *Plugin) SetManifest(v map[string]string) {
	o.Manifest = &v
}

// GetGuides returns the Guides field value if set, zero value otherwise.
func (o *Plugin) GetGuides() []string {
	if o == nil || IsNil(o.Guides) {
		var ret []string
		return ret
	}
	return o.Guides
}

// GetGuidesOk returns a tuple with the Guides field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Plugin) GetGuidesOk() ([]string, bool) {
	if o == nil || IsNil(o.Guides) {
		return nil, false
	}
	return o.Guides, true
}

// HasGuides returns a boolean if a field has been set.
func (o *Plugin) HasGuides() bool {
	if o != nil && !IsNil(o.Guides) {
		return true
	}

	return false
}

// SetGuides gets a reference to the given []string and assigns it to the Guides field.
func (o *Plugin) SetGuides(v []string) {
	o.Guides = v
}

// GetAliases returns the Aliases field value if set, zero value otherwise.
func (o *Plugin) GetAliases() []string {
	if o == nil || IsNil(o.Aliases) {
		var ret []string
		return ret
	}
	return o.Aliases
}

// GetAliasesOk returns a tuple with the Aliases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Plugin) GetAliasesOk() ([]string, bool) {
	if o == nil || IsNil(o.Aliases) {
		return nil, false
	}
	return o.Aliases, true
}

// HasAliases returns a boolean if a field has been set.
func (o *Plugin) HasAliases() bool {
	if o != nil && !IsNil(o.Aliases) {
		return true
	}

	return false
}

// SetAliases gets a reference to the given []string and assigns it to the Aliases field.
func (o *Plugin) SetAliases(v []string) {
	o.Aliases = v
}

// GetTasks returns the Tasks field value if set, zero value otherwise.
func (o *Plugin) GetTasks() []PluginPluginElementMetadata {
	if o == nil || IsNil(o.Tasks) {
		var ret []PluginPluginElementMetadata
		return ret
	}
	return o.Tasks
}

// GetTasksOk returns a tuple with the Tasks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Plugin) GetTasksOk() ([]PluginPluginElementMetadata, bool) {
	if o == nil || IsNil(o.Tasks) {
		return nil, false
	}
	return o.Tasks, true
}

// HasTasks returns a boolean if a field has been set.
func (o *Plugin) HasTasks() bool {
	if o != nil && !IsNil(o.Tasks) {
		return true
	}

	return false
}

// SetTasks gets a reference to the given []PluginPluginElementMetadata and assigns it to the Tasks field.
func (o *Plugin) SetTasks(v []PluginPluginElementMetadata) {
	o.Tasks = v
}

// GetTriggers returns the Triggers field value if set, zero value otherwise.
func (o *Plugin) GetTriggers() []PluginPluginElementMetadata {
	if o == nil || IsNil(o.Triggers) {
		var ret []PluginPluginElementMetadata
		return ret
	}
	return o.Triggers
}

// GetTriggersOk returns a tuple with the Triggers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Plugin) GetTriggersOk() ([]PluginPluginElementMetadata, bool) {
	if o == nil || IsNil(o.Triggers) {
		return nil, false
	}
	return o.Triggers, true
}

// HasTriggers returns a boolean if a field has been set.
func (o *Plugin) HasTriggers() bool {
	if o != nil && !IsNil(o.Triggers) {
		return true
	}

	return false
}

// SetTriggers gets a reference to the given []PluginPluginElementMetadata and assigns it to the Triggers field.
func (o *Plugin) SetTriggers(v []PluginPluginElementMetadata) {
	o.Triggers = v
}

// GetConditions returns the Conditions field value if set, zero value otherwise.
func (o *Plugin) GetConditions() []PluginPluginElementMetadata {
	if o == nil || IsNil(o.Conditions) {
		var ret []PluginPluginElementMetadata
		return ret
	}
	return o.Conditions
}

// GetConditionsOk returns a tuple with the Conditions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Plugin) GetConditionsOk() ([]PluginPluginElementMetadata, bool) {
	if o == nil || IsNil(o.Conditions) {
		return nil, false
	}
	return o.Conditions, true
}

// HasConditions returns a boolean if a field has been set.
func (o *Plugin) HasConditions() bool {
	if o != nil && !IsNil(o.Conditions) {
		return true
	}

	return false
}

// SetConditions gets a reference to the given []PluginPluginElementMetadata and assigns it to the Conditions field.
func (o *Plugin) SetConditions(v []PluginPluginElementMetadata) {
	o.Conditions = v
}

// GetControllers returns the Controllers field value if set, zero value otherwise.
func (o *Plugin) GetControllers() []PluginPluginElementMetadata {
	if o == nil || IsNil(o.Controllers) {
		var ret []PluginPluginElementMetadata
		return ret
	}
	return o.Controllers
}

// GetControllersOk returns a tuple with the Controllers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Plugin) GetControllersOk() ([]PluginPluginElementMetadata, bool) {
	if o == nil || IsNil(o.Controllers) {
		return nil, false
	}
	return o.Controllers, true
}

// HasControllers returns a boolean if a field has been set.
func (o *Plugin) HasControllers() bool {
	if o != nil && !IsNil(o.Controllers) {
		return true
	}

	return false
}

// SetControllers gets a reference to the given []PluginPluginElementMetadata and assigns it to the Controllers field.
func (o *Plugin) SetControllers(v []PluginPluginElementMetadata) {
	o.Controllers = v
}

// GetStorages returns the Storages field value if set, zero value otherwise.
func (o *Plugin) GetStorages() []PluginPluginElementMetadata {
	if o == nil || IsNil(o.Storages) {
		var ret []PluginPluginElementMetadata
		return ret
	}
	return o.Storages
}

// GetStoragesOk returns a tuple with the Storages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Plugin) GetStoragesOk() ([]PluginPluginElementMetadata, bool) {
	if o == nil || IsNil(o.Storages) {
		return nil, false
	}
	return o.Storages, true
}

// HasStorages returns a boolean if a field has been set.
func (o *Plugin) HasStorages() bool {
	if o != nil && !IsNil(o.Storages) {
		return true
	}

	return false
}

// SetStorages gets a reference to the given []PluginPluginElementMetadata and assigns it to the Storages field.
func (o *Plugin) SetStorages(v []PluginPluginElementMetadata) {
	o.Storages = v
}

// GetSecrets returns the Secrets field value if set, zero value otherwise.
func (o *Plugin) GetSecrets() []PluginPluginElementMetadata {
	if o == nil || IsNil(o.Secrets) {
		var ret []PluginPluginElementMetadata
		return ret
	}
	return o.Secrets
}

// GetSecretsOk returns a tuple with the Secrets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Plugin) GetSecretsOk() ([]PluginPluginElementMetadata, bool) {
	if o == nil || IsNil(o.Secrets) {
		return nil, false
	}
	return o.Secrets, true
}

// HasSecrets returns a boolean if a field has been set.
func (o *Plugin) HasSecrets() bool {
	if o != nil && !IsNil(o.Secrets) {
		return true
	}

	return false
}

// SetSecrets gets a reference to the given []PluginPluginElementMetadata and assigns it to the Secrets field.
func (o *Plugin) SetSecrets(v []PluginPluginElementMetadata) {
	o.Secrets = v
}

// GetTaskRunners returns the TaskRunners field value if set, zero value otherwise.
func (o *Plugin) GetTaskRunners() []PluginPluginElementMetadata {
	if o == nil || IsNil(o.TaskRunners) {
		var ret []PluginPluginElementMetadata
		return ret
	}
	return o.TaskRunners
}

// GetTaskRunnersOk returns a tuple with the TaskRunners field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Plugin) GetTaskRunnersOk() ([]PluginPluginElementMetadata, bool) {
	if o == nil || IsNil(o.TaskRunners) {
		return nil, false
	}
	return o.TaskRunners, true
}

// HasTaskRunners returns a boolean if a field has been set.
func (o *Plugin) HasTaskRunners() bool {
	if o != nil && !IsNil(o.TaskRunners) {
		return true
	}

	return false
}

// SetTaskRunners gets a reference to the given []PluginPluginElementMetadata and assigns it to the TaskRunners field.
func (o *Plugin) SetTaskRunners(v []PluginPluginElementMetadata) {
	o.TaskRunners = v
}

// GetApps returns the Apps field value if set, zero value otherwise.
func (o *Plugin) GetApps() []PluginPluginElementMetadata {
	if o == nil || IsNil(o.Apps) {
		var ret []PluginPluginElementMetadata
		return ret
	}
	return o.Apps
}

// GetAppsOk returns a tuple with the Apps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Plugin) GetAppsOk() ([]PluginPluginElementMetadata, bool) {
	if o == nil || IsNil(o.Apps) {
		return nil, false
	}
	return o.Apps, true
}

// HasApps returns a boolean if a field has been set.
func (o *Plugin) HasApps() bool {
	if o != nil && !IsNil(o.Apps) {
		return true
	}

	return false
}

// SetApps gets a reference to the given []PluginPluginElementMetadata and assigns it to the Apps field.
func (o *Plugin) SetApps(v []PluginPluginElementMetadata) {
	o.Apps = v
}

// GetAppBlocks returns the AppBlocks field value if set, zero value otherwise.
func (o *Plugin) GetAppBlocks() []PluginPluginElementMetadata {
	if o == nil || IsNil(o.AppBlocks) {
		var ret []PluginPluginElementMetadata
		return ret
	}
	return o.AppBlocks
}

// GetAppBlocksOk returns a tuple with the AppBlocks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Plugin) GetAppBlocksOk() ([]PluginPluginElementMetadata, bool) {
	if o == nil || IsNil(o.AppBlocks) {
		return nil, false
	}
	return o.AppBlocks, true
}

// HasAppBlocks returns a boolean if a field has been set.
func (o *Plugin) HasAppBlocks() bool {
	if o != nil && !IsNil(o.AppBlocks) {
		return true
	}

	return false
}

// SetAppBlocks gets a reference to the given []PluginPluginElementMetadata and assigns it to the AppBlocks field.
func (o *Plugin) SetAppBlocks(v []PluginPluginElementMetadata) {
	o.AppBlocks = v
}

// GetCharts returns the Charts field value if set, zero value otherwise.
func (o *Plugin) GetCharts() []PluginPluginElementMetadata {
	if o == nil || IsNil(o.Charts) {
		var ret []PluginPluginElementMetadata
		return ret
	}
	return o.Charts
}

// GetChartsOk returns a tuple with the Charts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Plugin) GetChartsOk() ([]PluginPluginElementMetadata, bool) {
	if o == nil || IsNil(o.Charts) {
		return nil, false
	}
	return o.Charts, true
}

// HasCharts returns a boolean if a field has been set.
func (o *Plugin) HasCharts() bool {
	if o != nil && !IsNil(o.Charts) {
		return true
	}

	return false
}

// SetCharts gets a reference to the given []PluginPluginElementMetadata and assigns it to the Charts field.
func (o *Plugin) SetCharts(v []PluginPluginElementMetadata) {
	o.Charts = v
}

// GetDataFilters returns the DataFilters field value if set, zero value otherwise.
func (o *Plugin) GetDataFilters() []PluginPluginElementMetadata {
	if o == nil || IsNil(o.DataFilters) {
		var ret []PluginPluginElementMetadata
		return ret
	}
	return o.DataFilters
}

// GetDataFiltersOk returns a tuple with the DataFilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Plugin) GetDataFiltersOk() ([]PluginPluginElementMetadata, bool) {
	if o == nil || IsNil(o.DataFilters) {
		return nil, false
	}
	return o.DataFilters, true
}

// HasDataFilters returns a boolean if a field has been set.
func (o *Plugin) HasDataFilters() bool {
	if o != nil && !IsNil(o.DataFilters) {
		return true
	}

	return false
}

// SetDataFilters gets a reference to the given []PluginPluginElementMetadata and assigns it to the DataFilters field.
func (o *Plugin) SetDataFilters(v []PluginPluginElementMetadata) {
	o.DataFilters = v
}

// GetDataFiltersKPI returns the DataFiltersKPI field value if set, zero value otherwise.
func (o *Plugin) GetDataFiltersKPI() []PluginPluginElementMetadata {
	if o == nil || IsNil(o.DataFiltersKPI) {
		var ret []PluginPluginElementMetadata
		return ret
	}
	return o.DataFiltersKPI
}

// GetDataFiltersKPIOk returns a tuple with the DataFiltersKPI field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Plugin) GetDataFiltersKPIOk() ([]PluginPluginElementMetadata, bool) {
	if o == nil || IsNil(o.DataFiltersKPI) {
		return nil, false
	}
	return o.DataFiltersKPI, true
}

// HasDataFiltersKPI returns a boolean if a field has been set.
func (o *Plugin) HasDataFiltersKPI() bool {
	if o != nil && !IsNil(o.DataFiltersKPI) {
		return true
	}

	return false
}

// SetDataFiltersKPI gets a reference to the given []PluginPluginElementMetadata and assigns it to the DataFiltersKPI field.
func (o *Plugin) SetDataFiltersKPI(v []PluginPluginElementMetadata) {
	o.DataFiltersKPI = v
}

// GetLogExporters returns the LogExporters field value if set, zero value otherwise.
func (o *Plugin) GetLogExporters() []PluginPluginElementMetadata {
	if o == nil || IsNil(o.LogExporters) {
		var ret []PluginPluginElementMetadata
		return ret
	}
	return o.LogExporters
}

// GetLogExportersOk returns a tuple with the LogExporters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Plugin) GetLogExportersOk() ([]PluginPluginElementMetadata, bool) {
	if o == nil || IsNil(o.LogExporters) {
		return nil, false
	}
	return o.LogExporters, true
}

// HasLogExporters returns a boolean if a field has been set.
func (o *Plugin) HasLogExporters() bool {
	if o != nil && !IsNil(o.LogExporters) {
		return true
	}

	return false
}

// SetLogExporters gets a reference to the given []PluginPluginElementMetadata and assigns it to the LogExporters field.
func (o *Plugin) SetLogExporters(v []PluginPluginElementMetadata) {
	o.LogExporters = v
}

// GetAdditionalPlugins returns the AdditionalPlugins field value if set, zero value otherwise.
func (o *Plugin) GetAdditionalPlugins() []PluginPluginElementMetadata {
	if o == nil || IsNil(o.AdditionalPlugins) {
		var ret []PluginPluginElementMetadata
		return ret
	}
	return o.AdditionalPlugins
}

// GetAdditionalPluginsOk returns a tuple with the AdditionalPlugins field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Plugin) GetAdditionalPluginsOk() ([]PluginPluginElementMetadata, bool) {
	if o == nil || IsNil(o.AdditionalPlugins) {
		return nil, false
	}
	return o.AdditionalPlugins, true
}

// HasAdditionalPlugins returns a boolean if a field has been set.
func (o *Plugin) HasAdditionalPlugins() bool {
	if o != nil && !IsNil(o.AdditionalPlugins) {
		return true
	}

	return false
}

// SetAdditionalPlugins gets a reference to the given []PluginPluginElementMetadata and assigns it to the AdditionalPlugins field.
func (o *Plugin) SetAdditionalPlugins(v []PluginPluginElementMetadata) {
	o.AdditionalPlugins = v
}

// GetCategories returns the Categories field value if set, zero value otherwise.
func (o *Plugin) GetCategories() []PluginSubGroupPluginCategory {
	if o == nil || IsNil(o.Categories) {
		var ret []PluginSubGroupPluginCategory
		return ret
	}
	return o.Categories
}

// GetCategoriesOk returns a tuple with the Categories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Plugin) GetCategoriesOk() ([]PluginSubGroupPluginCategory, bool) {
	if o == nil || IsNil(o.Categories) {
		return nil, false
	}
	return o.Categories, true
}

// HasCategories returns a boolean if a field has been set.
func (o *Plugin) HasCategories() bool {
	if o != nil && !IsNil(o.Categories) {
		return true
	}

	return false
}

// SetCategories gets a reference to the given []PluginSubGroupPluginCategory and assigns it to the Categories field.
func (o *Plugin) SetCategories(v []PluginSubGroupPluginCategory) {
	o.Categories = v
}

// GetSubGroup returns the SubGroup field value if set, zero value otherwise.
func (o *Plugin) GetSubGroup() string {
	if o == nil || IsNil(o.SubGroup) {
		var ret string
		return ret
	}
	return *o.SubGroup
}

// GetSubGroupOk returns a tuple with the SubGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Plugin) GetSubGroupOk() (*string, bool) {
	if o == nil || IsNil(o.SubGroup) {
		return nil, false
	}
	return o.SubGroup, true
}

// HasSubGroup returns a boolean if a field has been set.
func (o *Plugin) HasSubGroup() bool {
	if o != nil && !IsNil(o.SubGroup) {
		return true
	}

	return false
}

// SetSubGroup gets a reference to the given string and assigns it to the SubGroup field.
func (o *Plugin) SetSubGroup(v string) {
	o.SubGroup = &v
}

func (o Plugin) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Plugin) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.License) {
		toSerialize["license"] = o.License
	}
	if !IsNil(o.LongDescription) {
		toSerialize["longDescription"] = o.LongDescription
	}
	if !IsNil(o.Group) {
		toSerialize["group"] = o.Group
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.Manifest) {
		toSerialize["manifest"] = o.Manifest
	}
	if !IsNil(o.Guides) {
		toSerialize["guides"] = o.Guides
	}
	if !IsNil(o.Aliases) {
		toSerialize["aliases"] = o.Aliases
	}
	if !IsNil(o.Tasks) {
		toSerialize["tasks"] = o.Tasks
	}
	if !IsNil(o.Triggers) {
		toSerialize["triggers"] = o.Triggers
	}
	if !IsNil(o.Conditions) {
		toSerialize["conditions"] = o.Conditions
	}
	if !IsNil(o.Controllers) {
		toSerialize["controllers"] = o.Controllers
	}
	if !IsNil(o.Storages) {
		toSerialize["storages"] = o.Storages
	}
	if !IsNil(o.Secrets) {
		toSerialize["secrets"] = o.Secrets
	}
	if !IsNil(o.TaskRunners) {
		toSerialize["taskRunners"] = o.TaskRunners
	}
	if !IsNil(o.Apps) {
		toSerialize["apps"] = o.Apps
	}
	if !IsNil(o.AppBlocks) {
		toSerialize["appBlocks"] = o.AppBlocks
	}
	if !IsNil(o.Charts) {
		toSerialize["charts"] = o.Charts
	}
	if !IsNil(o.DataFilters) {
		toSerialize["dataFilters"] = o.DataFilters
	}
	if !IsNil(o.DataFiltersKPI) {
		toSerialize["dataFiltersKPI"] = o.DataFiltersKPI
	}
	if !IsNil(o.LogExporters) {
		toSerialize["logExporters"] = o.LogExporters
	}
	if !IsNil(o.AdditionalPlugins) {
		toSerialize["additionalPlugins"] = o.AdditionalPlugins
	}
	if !IsNil(o.Categories) {
		toSerialize["categories"] = o.Categories
	}
	if !IsNil(o.SubGroup) {
		toSerialize["subGroup"] = o.SubGroup
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Plugin) UnmarshalJSON(data []byte) (err error) {
	varPlugin := _Plugin{}

	err = json.Unmarshal(data, &varPlugin)

	if err != nil {
		return err
	}

	*o = Plugin(varPlugin)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "title")
		delete(additionalProperties, "description")
		delete(additionalProperties, "license")
		delete(additionalProperties, "longDescription")
		delete(additionalProperties, "group")
		delete(additionalProperties, "version")
		delete(additionalProperties, "manifest")
		delete(additionalProperties, "guides")
		delete(additionalProperties, "aliases")
		delete(additionalProperties, "tasks")
		delete(additionalProperties, "triggers")
		delete(additionalProperties, "conditions")
		delete(additionalProperties, "controllers")
		delete(additionalProperties, "storages")
		delete(additionalProperties, "secrets")
		delete(additionalProperties, "taskRunners")
		delete(additionalProperties, "apps")
		delete(additionalProperties, "appBlocks")
		delete(additionalProperties, "charts")
		delete(additionalProperties, "dataFilters")
		delete(additionalProperties, "dataFiltersKPI")
		delete(additionalProperties, "logExporters")
		delete(additionalProperties, "additionalPlugins")
		delete(additionalProperties, "categories")
		delete(additionalProperties, "subGroup")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePlugin struct {
	value *Plugin
	isSet bool
}

func (v NullablePlugin) Get() *Plugin {
	return v.value
}

func (v *NullablePlugin) Set(val *Plugin) {
	v.value = val
	v.isSet = true
}

func (v NullablePlugin) IsSet() bool {
	return v.isSet
}

func (v *NullablePlugin) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlugin(val *Plugin) *NullablePlugin {
	return &NullablePlugin{value: val, isSet: true}
}

func (v NullablePlugin) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlugin) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
