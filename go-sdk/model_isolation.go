/*
Kestra EE

All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
)

// checks if the Isolation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Isolation{}

// Isolation struct for Isolation
type Isolation struct {
	DeniedServices []ServiceType `json:"deniedServices,omitempty"`
	Enabled        *bool         `json:"enabled,omitempty"`
}

// NewIsolation instantiates a new Isolation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIsolation() *Isolation {
	this := Isolation{}
	return &this
}

// NewIsolationWithDefaults instantiates a new Isolation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIsolationWithDefaults() *Isolation {
	this := Isolation{}
	return &this
}

// GetDeniedServices returns the DeniedServices field value if set, zero value otherwise.
func (o *Isolation) GetDeniedServices() []ServiceType {
	if o == nil || IsNil(o.DeniedServices) {
		var ret []ServiceType
		return ret
	}
	return o.DeniedServices
}

// GetDeniedServicesOk returns a tuple with the DeniedServices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Isolation) GetDeniedServicesOk() ([]ServiceType, bool) {
	if o == nil || IsNil(o.DeniedServices) {
		return nil, false
	}
	return o.DeniedServices, true
}

// HasDeniedServices returns a boolean if a field has been set.
func (o *Isolation) HasDeniedServices() bool {
	if o != nil && !IsNil(o.DeniedServices) {
		return true
	}

	return false
}

// SetDeniedServices gets a reference to the given []ServiceType and assigns it to the DeniedServices field.
func (o *Isolation) SetDeniedServices(v []ServiceType) {
	o.DeniedServices = v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *Isolation) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Isolation) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *Isolation) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *Isolation) SetEnabled(v bool) {
	o.Enabled = &v
}

func (o Isolation) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Isolation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DeniedServices) {
		toSerialize["deniedServices"] = o.DeniedServices
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	return toSerialize, nil
}

type NullableIsolation struct {
	value *Isolation
	isSet bool
}

func (v NullableIsolation) Get() *Isolation {
	return v.value
}

func (v *NullableIsolation) Set(val *Isolation) {
	v.value = val
	v.isSet = true
}

func (v NullableIsolation) IsSet() bool {
	return v.isSet
}

func (v *NullableIsolation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIsolation(val *Isolation) *NullableIsolation {
	return &NullableIsolation{value: val, isSet: true}
}

func (v NullableIsolation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIsolation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
