/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
)

// checks if the TestSuiteControllerSearchTestsLastResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TestSuiteControllerSearchTestsLastResult{}

// TestSuiteControllerSearchTestsLastResult struct for TestSuiteControllerSearchTestsLastResult
type TestSuiteControllerSearchTestsLastResult struct {
	TestSuiteIds         []TestSuiteControllerTestSuiteApiId `json:"testSuiteIds"`
	AdditionalProperties map[string]interface{}
}

type _TestSuiteControllerSearchTestsLastResult TestSuiteControllerSearchTestsLastResult

// NewTestSuiteControllerSearchTestsLastResult instantiates a new TestSuiteControllerSearchTestsLastResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTestSuiteControllerSearchTestsLastResult(testSuiteIds []TestSuiteControllerTestSuiteApiId) *TestSuiteControllerSearchTestsLastResult {
	this := TestSuiteControllerSearchTestsLastResult{}
	this.TestSuiteIds = testSuiteIds
	return &this
}

// NewTestSuiteControllerSearchTestsLastResultWithDefaults instantiates a new TestSuiteControllerSearchTestsLastResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTestSuiteControllerSearchTestsLastResultWithDefaults() *TestSuiteControllerSearchTestsLastResult {
	this := TestSuiteControllerSearchTestsLastResult{}
	return &this
}

// GetTestSuiteIds returns the TestSuiteIds field value
func (o *TestSuiteControllerSearchTestsLastResult) GetTestSuiteIds() []TestSuiteControllerTestSuiteApiId {
	if o == nil {
		var ret []TestSuiteControllerTestSuiteApiId
		return ret
	}

	return o.TestSuiteIds
}

// GetTestSuiteIdsOk returns a tuple with the TestSuiteIds field value
// and a boolean to check if the value has been set.
func (o *TestSuiteControllerSearchTestsLastResult) GetTestSuiteIdsOk() ([]TestSuiteControllerTestSuiteApiId, bool) {
	if o == nil {
		return nil, false
	}
	return o.TestSuiteIds, true
}

// SetTestSuiteIds sets field value
func (o *TestSuiteControllerSearchTestsLastResult) SetTestSuiteIds(v []TestSuiteControllerTestSuiteApiId) {
	o.TestSuiteIds = v
}

func (o TestSuiteControllerSearchTestsLastResult) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TestSuiteControllerSearchTestsLastResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["testSuiteIds"] = o.TestSuiteIds

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TestSuiteControllerSearchTestsLastResult) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"testSuiteIds",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTestSuiteControllerSearchTestsLastResult := _TestSuiteControllerSearchTestsLastResult{}

	err = json.Unmarshal(data, &varTestSuiteControllerSearchTestsLastResult)

	if err != nil {
		return err
	}

	*o = TestSuiteControllerSearchTestsLastResult(varTestSuiteControllerSearchTestsLastResult)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "testSuiteIds")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTestSuiteControllerSearchTestsLastResult struct {
	value *TestSuiteControllerSearchTestsLastResult
	isSet bool
}

func (v NullableTestSuiteControllerSearchTestsLastResult) Get() *TestSuiteControllerSearchTestsLastResult {
	return v.value
}

func (v *NullableTestSuiteControllerSearchTestsLastResult) Set(val *TestSuiteControllerSearchTestsLastResult) {
	v.value = val
	v.isSet = true
}

func (v NullableTestSuiteControllerSearchTestsLastResult) IsSet() bool {
	return v.isSet
}

func (v *NullableTestSuiteControllerSearchTestsLastResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestSuiteControllerSearchTestsLastResult(val *TestSuiteControllerSearchTestsLastResult) *NullableTestSuiteControllerSearchTestsLastResult {
	return &NullableTestSuiteControllerSearchTestsLastResult{value: val, isSet: true}
}

func (v NullableTestSuiteControllerSearchTestsLastResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestSuiteControllerSearchTestsLastResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
