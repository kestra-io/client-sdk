/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
	"time"
)

// checks if the Usage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Usage{}

// Usage struct for Usage
type Usage struct {
	Uuid                 string               `json:"uuid"`
	StartUuid            string               `json:"startUuid"`
	InstanceUuid         string               `json:"instanceUuid"`
	ServerType           ServerType           `json:"serverType"`
	Version              string               `json:"version"`
	ZoneId               string               `json:"zoneId"`
	Uri                  NullableString       `json:"uri,omitempty"`
	Environments         []string             `json:"environments,omitempty"`
	StartTime            time.Time            `json:"startTime"`
	Host                 HostUsage            `json:"host"`
	Configurations       ConfigurationUsage   `json:"configurations"`
	Plugins              []PluginUsage        `json:"plugins"`
	Flows                FlowUsage            `json:"flows"`
	Executions           ExecutionUsage       `json:"executions"`
	Services             NullableServiceUsage `json:"services,omitempty"`
	PluginMetrics        []PluginMetric       `json:"pluginMetrics,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Usage Usage

// NewUsage instantiates a new Usage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsage(uuid string, startUuid string, instanceUuid string, serverType ServerType, version string, zoneId string, startTime time.Time, host HostUsage, configurations ConfigurationUsage, plugins []PluginUsage, flows FlowUsage, executions ExecutionUsage) *Usage {
	this := Usage{}
	this.Uuid = uuid
	this.StartUuid = startUuid
	this.InstanceUuid = instanceUuid
	this.ServerType = serverType
	this.Version = version
	this.ZoneId = zoneId
	this.StartTime = startTime
	this.Host = host
	this.Configurations = configurations
	this.Plugins = plugins
	this.Flows = flows
	this.Executions = executions
	return &this
}

// NewUsageWithDefaults instantiates a new Usage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsageWithDefaults() *Usage {
	this := Usage{}
	return &this
}

// GetUuid returns the Uuid field value
func (o *Usage) GetUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value
// and a boolean to check if the value has been set.
func (o *Usage) GetUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uuid, true
}

// SetUuid sets field value
func (o *Usage) SetUuid(v string) {
	o.Uuid = v
}

// GetStartUuid returns the StartUuid field value
func (o *Usage) GetStartUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StartUuid
}

// GetStartUuidOk returns a tuple with the StartUuid field value
// and a boolean to check if the value has been set.
func (o *Usage) GetStartUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartUuid, true
}

// SetStartUuid sets field value
func (o *Usage) SetStartUuid(v string) {
	o.StartUuid = v
}

// GetInstanceUuid returns the InstanceUuid field value
func (o *Usage) GetInstanceUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InstanceUuid
}

// GetInstanceUuidOk returns a tuple with the InstanceUuid field value
// and a boolean to check if the value has been set.
func (o *Usage) GetInstanceUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InstanceUuid, true
}

// SetInstanceUuid sets field value
func (o *Usage) SetInstanceUuid(v string) {
	o.InstanceUuid = v
}

// GetServerType returns the ServerType field value
func (o *Usage) GetServerType() ServerType {
	if o == nil {
		var ret ServerType
		return ret
	}

	return o.ServerType
}

// GetServerTypeOk returns a tuple with the ServerType field value
// and a boolean to check if the value has been set.
func (o *Usage) GetServerTypeOk() (*ServerType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServerType, true
}

// SetServerType sets field value
func (o *Usage) SetServerType(v ServerType) {
	o.ServerType = v
}

// GetVersion returns the Version field value
func (o *Usage) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *Usage) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *Usage) SetVersion(v string) {
	o.Version = v
}

// GetZoneId returns the ZoneId field value
func (o *Usage) GetZoneId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ZoneId
}

// GetZoneIdOk returns a tuple with the ZoneId field value
// and a boolean to check if the value has been set.
func (o *Usage) GetZoneIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ZoneId, true
}

// SetZoneId sets field value
func (o *Usage) SetZoneId(v string) {
	o.ZoneId = v
}

// GetUri returns the Uri field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Usage) GetUri() string {
	if o == nil || IsNil(o.Uri.Get()) {
		var ret string
		return ret
	}
	return *o.Uri.Get()
}

// GetUriOk returns a tuple with the Uri field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Usage) GetUriOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Uri.Get(), o.Uri.IsSet()
}

// HasUri returns a boolean if a field has been set.
func (o *Usage) HasUri() bool {
	if o != nil && o.Uri.IsSet() {
		return true
	}

	return false
}

// SetUri gets a reference to the given NullableString and assigns it to the Uri field.
func (o *Usage) SetUri(v string) {
	o.Uri.Set(&v)
}

// SetUriNil sets the value for Uri to be an explicit nil
func (o *Usage) SetUriNil() {
	o.Uri.Set(nil)
}

// UnsetUri ensures that no value is present for Uri, not even an explicit nil
func (o *Usage) UnsetUri() {
	o.Uri.Unset()
}

// GetEnvironments returns the Environments field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Usage) GetEnvironments() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Environments
}

// GetEnvironmentsOk returns a tuple with the Environments field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Usage) GetEnvironmentsOk() ([]string, bool) {
	if o == nil || IsNil(o.Environments) {
		return nil, false
	}
	return o.Environments, true
}

// HasEnvironments returns a boolean if a field has been set.
func (o *Usage) HasEnvironments() bool {
	if o != nil && !IsNil(o.Environments) {
		return true
	}

	return false
}

// SetEnvironments gets a reference to the given []string and assigns it to the Environments field.
func (o *Usage) SetEnvironments(v []string) {
	o.Environments = v
}

// GetStartTime returns the StartTime field value
func (o *Usage) GetStartTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value
// and a boolean to check if the value has been set.
func (o *Usage) GetStartTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartTime, true
}

// SetStartTime sets field value
func (o *Usage) SetStartTime(v time.Time) {
	o.StartTime = v
}

// GetHost returns the Host field value
func (o *Usage) GetHost() HostUsage {
	if o == nil {
		var ret HostUsage
		return ret
	}

	return o.Host
}

// GetHostOk returns a tuple with the Host field value
// and a boolean to check if the value has been set.
func (o *Usage) GetHostOk() (*HostUsage, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Host, true
}

// SetHost sets field value
func (o *Usage) SetHost(v HostUsage) {
	o.Host = v
}

// GetConfigurations returns the Configurations field value
func (o *Usage) GetConfigurations() ConfigurationUsage {
	if o == nil {
		var ret ConfigurationUsage
		return ret
	}

	return o.Configurations
}

// GetConfigurationsOk returns a tuple with the Configurations field value
// and a boolean to check if the value has been set.
func (o *Usage) GetConfigurationsOk() (*ConfigurationUsage, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Configurations, true
}

// SetConfigurations sets field value
func (o *Usage) SetConfigurations(v ConfigurationUsage) {
	o.Configurations = v
}

// GetPlugins returns the Plugins field value
func (o *Usage) GetPlugins() []PluginUsage {
	if o == nil {
		var ret []PluginUsage
		return ret
	}

	return o.Plugins
}

// GetPluginsOk returns a tuple with the Plugins field value
// and a boolean to check if the value has been set.
func (o *Usage) GetPluginsOk() ([]PluginUsage, bool) {
	if o == nil {
		return nil, false
	}
	return o.Plugins, true
}

// SetPlugins sets field value
func (o *Usage) SetPlugins(v []PluginUsage) {
	o.Plugins = v
}

// GetFlows returns the Flows field value
func (o *Usage) GetFlows() FlowUsage {
	if o == nil {
		var ret FlowUsage
		return ret
	}

	return o.Flows
}

// GetFlowsOk returns a tuple with the Flows field value
// and a boolean to check if the value has been set.
func (o *Usage) GetFlowsOk() (*FlowUsage, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Flows, true
}

// SetFlows sets field value
func (o *Usage) SetFlows(v FlowUsage) {
	o.Flows = v
}

// GetExecutions returns the Executions field value
func (o *Usage) GetExecutions() ExecutionUsage {
	if o == nil {
		var ret ExecutionUsage
		return ret
	}

	return o.Executions
}

// GetExecutionsOk returns a tuple with the Executions field value
// and a boolean to check if the value has been set.
func (o *Usage) GetExecutionsOk() (*ExecutionUsage, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Executions, true
}

// SetExecutions sets field value
func (o *Usage) SetExecutions(v ExecutionUsage) {
	o.Executions = v
}

// GetServices returns the Services field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Usage) GetServices() ServiceUsage {
	if o == nil || IsNil(o.Services.Get()) {
		var ret ServiceUsage
		return ret
	}
	return *o.Services.Get()
}

// GetServicesOk returns a tuple with the Services field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Usage) GetServicesOk() (*ServiceUsage, bool) {
	if o == nil {
		return nil, false
	}
	return o.Services.Get(), o.Services.IsSet()
}

// HasServices returns a boolean if a field has been set.
func (o *Usage) HasServices() bool {
	if o != nil && o.Services.IsSet() {
		return true
	}

	return false
}

// SetServices gets a reference to the given NullableServiceUsage and assigns it to the Services field.
func (o *Usage) SetServices(v ServiceUsage) {
	o.Services.Set(&v)
}

// SetServicesNil sets the value for Services to be an explicit nil
func (o *Usage) SetServicesNil() {
	o.Services.Set(nil)
}

// UnsetServices ensures that no value is present for Services, not even an explicit nil
func (o *Usage) UnsetServices() {
	o.Services.Unset()
}

// GetPluginMetrics returns the PluginMetrics field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Usage) GetPluginMetrics() []PluginMetric {
	if o == nil {
		var ret []PluginMetric
		return ret
	}
	return o.PluginMetrics
}

// GetPluginMetricsOk returns a tuple with the PluginMetrics field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Usage) GetPluginMetricsOk() ([]PluginMetric, bool) {
	if o == nil || IsNil(o.PluginMetrics) {
		return nil, false
	}
	return o.PluginMetrics, true
}

// HasPluginMetrics returns a boolean if a field has been set.
func (o *Usage) HasPluginMetrics() bool {
	if o != nil && !IsNil(o.PluginMetrics) {
		return true
	}

	return false
}

// SetPluginMetrics gets a reference to the given []PluginMetric and assigns it to the PluginMetrics field.
func (o *Usage) SetPluginMetrics(v []PluginMetric) {
	o.PluginMetrics = v
}

func (o Usage) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Usage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["uuid"] = o.Uuid
	toSerialize["startUuid"] = o.StartUuid
	toSerialize["instanceUuid"] = o.InstanceUuid
	toSerialize["serverType"] = o.ServerType
	toSerialize["version"] = o.Version
	toSerialize["zoneId"] = o.ZoneId
	if o.Uri.IsSet() {
		toSerialize["uri"] = o.Uri.Get()
	}
	if o.Environments != nil {
		toSerialize["environments"] = o.Environments
	}
	toSerialize["startTime"] = o.StartTime
	toSerialize["host"] = o.Host
	toSerialize["configurations"] = o.Configurations
	toSerialize["plugins"] = o.Plugins
	toSerialize["flows"] = o.Flows
	toSerialize["executions"] = o.Executions
	if o.Services.IsSet() {
		toSerialize["services"] = o.Services.Get()
	}
	if o.PluginMetrics != nil {
		toSerialize["pluginMetrics"] = o.PluginMetrics
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Usage) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"uuid",
		"startUuid",
		"instanceUuid",
		"serverType",
		"version",
		"zoneId",
		"startTime",
		"host",
		"configurations",
		"plugins",
		"flows",
		"executions",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUsage := _Usage{}

	err = json.Unmarshal(data, &varUsage)

	if err != nil {
		return err
	}

	*o = Usage(varUsage)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "uuid")
		delete(additionalProperties, "startUuid")
		delete(additionalProperties, "instanceUuid")
		delete(additionalProperties, "serverType")
		delete(additionalProperties, "version")
		delete(additionalProperties, "zoneId")
		delete(additionalProperties, "uri")
		delete(additionalProperties, "environments")
		delete(additionalProperties, "startTime")
		delete(additionalProperties, "host")
		delete(additionalProperties, "configurations")
		delete(additionalProperties, "plugins")
		delete(additionalProperties, "flows")
		delete(additionalProperties, "executions")
		delete(additionalProperties, "services")
		delete(additionalProperties, "pluginMetrics")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUsage struct {
	value *Usage
	isSet bool
}

func (v NullableUsage) Get() *Usage {
	return v.value
}

func (v *NullableUsage) Set(val *Usage) {
	v.value = val
	v.isSet = true
}

func (v NullableUsage) IsSet() bool {
	return v.isSet
}

func (v *NullableUsage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsage(val *Usage) *NullableUsage {
	return &NullableUsage{value: val, isSet: true}
}

func (v NullableUsage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
