/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"time"
)

// checks if the KVEntry type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KVEntry{}

// KVEntry struct for KVEntry
type KVEntry struct {
	Key                  *string    `json:"key,omitempty"`
	Description          *string    `json:"description,omitempty"`
	CreationDate         *time.Time `json:"creationDate,omitempty"`
	UpdateDate           *time.Time `json:"updateDate,omitempty"`
	ExpirationDate       *time.Time `json:"expirationDate,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _KVEntry KVEntry

// NewKVEntry instantiates a new KVEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKVEntry() *KVEntry {
	this := KVEntry{}
	return &this
}

// NewKVEntryWithDefaults instantiates a new KVEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKVEntryWithDefaults() *KVEntry {
	this := KVEntry{}
	return &this
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *KVEntry) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KVEntry) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *KVEntry) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *KVEntry) SetKey(v string) {
	o.Key = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *KVEntry) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KVEntry) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *KVEntry) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *KVEntry) SetDescription(v string) {
	o.Description = &v
}

// GetCreationDate returns the CreationDate field value if set, zero value otherwise.
func (o *KVEntry) GetCreationDate() time.Time {
	if o == nil || IsNil(o.CreationDate) {
		var ret time.Time
		return ret
	}
	return *o.CreationDate
}

// GetCreationDateOk returns a tuple with the CreationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KVEntry) GetCreationDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreationDate) {
		return nil, false
	}
	return o.CreationDate, true
}

// HasCreationDate returns a boolean if a field has been set.
func (o *KVEntry) HasCreationDate() bool {
	if o != nil && !IsNil(o.CreationDate) {
		return true
	}

	return false
}

// SetCreationDate gets a reference to the given time.Time and assigns it to the CreationDate field.
func (o *KVEntry) SetCreationDate(v time.Time) {
	o.CreationDate = &v
}

// GetUpdateDate returns the UpdateDate field value if set, zero value otherwise.
func (o *KVEntry) GetUpdateDate() time.Time {
	if o == nil || IsNil(o.UpdateDate) {
		var ret time.Time
		return ret
	}
	return *o.UpdateDate
}

// GetUpdateDateOk returns a tuple with the UpdateDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KVEntry) GetUpdateDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdateDate) {
		return nil, false
	}
	return o.UpdateDate, true
}

// HasUpdateDate returns a boolean if a field has been set.
func (o *KVEntry) HasUpdateDate() bool {
	if o != nil && !IsNil(o.UpdateDate) {
		return true
	}

	return false
}

// SetUpdateDate gets a reference to the given time.Time and assigns it to the UpdateDate field.
func (o *KVEntry) SetUpdateDate(v time.Time) {
	o.UpdateDate = &v
}

// GetExpirationDate returns the ExpirationDate field value if set, zero value otherwise.
func (o *KVEntry) GetExpirationDate() time.Time {
	if o == nil || IsNil(o.ExpirationDate) {
		var ret time.Time
		return ret
	}
	return *o.ExpirationDate
}

// GetExpirationDateOk returns a tuple with the ExpirationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KVEntry) GetExpirationDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ExpirationDate) {
		return nil, false
	}
	return o.ExpirationDate, true
}

// HasExpirationDate returns a boolean if a field has been set.
func (o *KVEntry) HasExpirationDate() bool {
	if o != nil && !IsNil(o.ExpirationDate) {
		return true
	}

	return false
}

// SetExpirationDate gets a reference to the given time.Time and assigns it to the ExpirationDate field.
func (o *KVEntry) SetExpirationDate(v time.Time) {
	o.ExpirationDate = &v
}

func (o KVEntry) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KVEntry) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.CreationDate) {
		toSerialize["creationDate"] = o.CreationDate
	}
	if !IsNil(o.UpdateDate) {
		toSerialize["updateDate"] = o.UpdateDate
	}
	if !IsNil(o.ExpirationDate) {
		toSerialize["expirationDate"] = o.ExpirationDate
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *KVEntry) UnmarshalJSON(data []byte) (err error) {
	varKVEntry := _KVEntry{}

	err = json.Unmarshal(data, &varKVEntry)

	if err != nil {
		return err
	}

	*o = KVEntry(varKVEntry)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "key")
		delete(additionalProperties, "description")
		delete(additionalProperties, "creationDate")
		delete(additionalProperties, "updateDate")
		delete(additionalProperties, "expirationDate")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableKVEntry struct {
	value *KVEntry
	isSet bool
}

func (v NullableKVEntry) Get() *KVEntry {
	return v.value
}

func (v *NullableKVEntry) Set(val *KVEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableKVEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableKVEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKVEntry(val *KVEntry) *NullableKVEntry {
	return &NullableKVEntry{value: val, isSet: true}
}

func (v NullableKVEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKVEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
