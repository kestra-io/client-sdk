/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
)

// checks if the InstanceControllerApiActiveService type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InstanceControllerApiActiveService{}

// InstanceControllerApiActiveService struct for InstanceControllerApiActiveService
type InstanceControllerApiActiveService struct {
	Type                 *ServiceType `json:"type,omitempty"`
	Total                *int64       `json:"total,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _InstanceControllerApiActiveService InstanceControllerApiActiveService

// NewInstanceControllerApiActiveService instantiates a new InstanceControllerApiActiveService object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstanceControllerApiActiveService() *InstanceControllerApiActiveService {
	this := InstanceControllerApiActiveService{}
	return &this
}

// NewInstanceControllerApiActiveServiceWithDefaults instantiates a new InstanceControllerApiActiveService object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceControllerApiActiveServiceWithDefaults() *InstanceControllerApiActiveService {
	this := InstanceControllerApiActiveService{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *InstanceControllerApiActiveService) GetType() ServiceType {
	if o == nil || IsNil(o.Type) {
		var ret ServiceType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceControllerApiActiveService) GetTypeOk() (*ServiceType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *InstanceControllerApiActiveService) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given ServiceType and assigns it to the Type field.
func (o *InstanceControllerApiActiveService) SetType(v ServiceType) {
	o.Type = &v
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *InstanceControllerApiActiveService) GetTotal() int64 {
	if o == nil || IsNil(o.Total) {
		var ret int64
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceControllerApiActiveService) GetTotalOk() (*int64, bool) {
	if o == nil || IsNil(o.Total) {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *InstanceControllerApiActiveService) HasTotal() bool {
	if o != nil && !IsNil(o.Total) {
		return true
	}

	return false
}

// SetTotal gets a reference to the given int64 and assigns it to the Total field.
func (o *InstanceControllerApiActiveService) SetTotal(v int64) {
	o.Total = &v
}

func (o InstanceControllerApiActiveService) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InstanceControllerApiActiveService) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Total) {
		toSerialize["total"] = o.Total
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *InstanceControllerApiActiveService) UnmarshalJSON(data []byte) (err error) {
	varInstanceControllerApiActiveService := _InstanceControllerApiActiveService{}

	err = json.Unmarshal(data, &varInstanceControllerApiActiveService)

	if err != nil {
		return err
	}

	*o = InstanceControllerApiActiveService(varInstanceControllerApiActiveService)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "total")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInstanceControllerApiActiveService struct {
	value *InstanceControllerApiActiveService
	isSet bool
}

func (v NullableInstanceControllerApiActiveService) Get() *InstanceControllerApiActiveService {
	return v.value
}

func (v *NullableInstanceControllerApiActiveService) Set(val *InstanceControllerApiActiveService) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceControllerApiActiveService) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceControllerApiActiveService) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceControllerApiActiveService(val *InstanceControllerApiActiveService) *NullableInstanceControllerApiActiveService {
	return &NullableInstanceControllerApiActiveService{value: val, isSet: true}
}

func (v NullableInstanceControllerApiActiveService) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceControllerApiActiveService) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
