/*
Kestra EE

All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
)

// checks if the ClusterControllerApiPluginVersionDetailsApiPluginClasses type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClusterControllerApiPluginVersionDetailsApiPluginClasses{}

// ClusterControllerApiPluginVersionDetailsApiPluginClasses struct for ClusterControllerApiPluginVersionDetailsApiPluginClasses
type ClusterControllerApiPluginVersionDetailsApiPluginClasses struct {
	Type    *string                                                  `json:"type,omitempty"`
	Classes []ClusterControllerApiPluginVersionDetailsApiPluginClass `json:"classes,omitempty"`
}

// NewClusterControllerApiPluginVersionDetailsApiPluginClasses instantiates a new ClusterControllerApiPluginVersionDetailsApiPluginClasses object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterControllerApiPluginVersionDetailsApiPluginClasses() *ClusterControllerApiPluginVersionDetailsApiPluginClasses {
	this := ClusterControllerApiPluginVersionDetailsApiPluginClasses{}
	return &this
}

// NewClusterControllerApiPluginVersionDetailsApiPluginClassesWithDefaults instantiates a new ClusterControllerApiPluginVersionDetailsApiPluginClasses object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterControllerApiPluginVersionDetailsApiPluginClassesWithDefaults() *ClusterControllerApiPluginVersionDetailsApiPluginClasses {
	this := ClusterControllerApiPluginVersionDetailsApiPluginClasses{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ClusterControllerApiPluginVersionDetailsApiPluginClasses) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterControllerApiPluginVersionDetailsApiPluginClasses) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ClusterControllerApiPluginVersionDetailsApiPluginClasses) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ClusterControllerApiPluginVersionDetailsApiPluginClasses) SetType(v string) {
	o.Type = &v
}

// GetClasses returns the Classes field value if set, zero value otherwise.
func (o *ClusterControllerApiPluginVersionDetailsApiPluginClasses) GetClasses() []ClusterControllerApiPluginVersionDetailsApiPluginClass {
	if o == nil || IsNil(o.Classes) {
		var ret []ClusterControllerApiPluginVersionDetailsApiPluginClass
		return ret
	}
	return o.Classes
}

// GetClassesOk returns a tuple with the Classes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterControllerApiPluginVersionDetailsApiPluginClasses) GetClassesOk() ([]ClusterControllerApiPluginVersionDetailsApiPluginClass, bool) {
	if o == nil || IsNil(o.Classes) {
		return nil, false
	}
	return o.Classes, true
}

// HasClasses returns a boolean if a field has been set.
func (o *ClusterControllerApiPluginVersionDetailsApiPluginClasses) HasClasses() bool {
	if o != nil && !IsNil(o.Classes) {
		return true
	}

	return false
}

// SetClasses gets a reference to the given []ClusterControllerApiPluginVersionDetailsApiPluginClass and assigns it to the Classes field.
func (o *ClusterControllerApiPluginVersionDetailsApiPluginClasses) SetClasses(v []ClusterControllerApiPluginVersionDetailsApiPluginClass) {
	o.Classes = v
}

func (o ClusterControllerApiPluginVersionDetailsApiPluginClasses) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClusterControllerApiPluginVersionDetailsApiPluginClasses) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Classes) {
		toSerialize["classes"] = o.Classes
	}
	return toSerialize, nil
}

type NullableClusterControllerApiPluginVersionDetailsApiPluginClasses struct {
	value *ClusterControllerApiPluginVersionDetailsApiPluginClasses
	isSet bool
}

func (v NullableClusterControllerApiPluginVersionDetailsApiPluginClasses) Get() *ClusterControllerApiPluginVersionDetailsApiPluginClasses {
	return v.value
}

func (v *NullableClusterControllerApiPluginVersionDetailsApiPluginClasses) Set(val *ClusterControllerApiPluginVersionDetailsApiPluginClasses) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterControllerApiPluginVersionDetailsApiPluginClasses) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterControllerApiPluginVersionDetailsApiPluginClasses) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterControllerApiPluginVersionDetailsApiPluginClasses(val *ClusterControllerApiPluginVersionDetailsApiPluginClasses) *NullableClusterControllerApiPluginVersionDetailsApiPluginClasses {
	return &NullableClusterControllerApiPluginVersionDetailsApiPluginClasses{value: val, isSet: true}
}

func (v NullableClusterControllerApiPluginVersionDetailsApiPluginClasses) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterControllerApiPluginVersionDetailsApiPluginClasses) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
