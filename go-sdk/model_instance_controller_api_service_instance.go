/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
	"time"
)

// checks if the InstanceControllerApiServiceInstance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InstanceControllerApiServiceInstance{}

// InstanceControllerApiServiceInstance struct for InstanceControllerApiServiceInstance
type InstanceControllerApiServiceInstance struct {
	Id                   string                              `json:"id"`
	Type                 ServiceType                         `json:"type"`
	State                ServiceServiceState                 `json:"state"`
	Server               InstanceControllerApiServerInstance `json:"server"`
	CreatedAt            time.Time                           `json:"createdAt"`
	UpdatedAt            time.Time                           `json:"updatedAt"`
	AdditionalProperties map[string]interface{}
}

type _InstanceControllerApiServiceInstance InstanceControllerApiServiceInstance

// NewInstanceControllerApiServiceInstance instantiates a new InstanceControllerApiServiceInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstanceControllerApiServiceInstance(id string, type_ ServiceType, state ServiceServiceState, server InstanceControllerApiServerInstance, createdAt time.Time, updatedAt time.Time) *InstanceControllerApiServiceInstance {
	this := InstanceControllerApiServiceInstance{}
	this.Id = id
	this.Type = type_
	this.State = state
	this.Server = server
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	return &this
}

// NewInstanceControllerApiServiceInstanceWithDefaults instantiates a new InstanceControllerApiServiceInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceControllerApiServiceInstanceWithDefaults() *InstanceControllerApiServiceInstance {
	this := InstanceControllerApiServiceInstance{}
	return &this
}

// GetId returns the Id field value
func (o *InstanceControllerApiServiceInstance) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *InstanceControllerApiServiceInstance) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *InstanceControllerApiServiceInstance) SetId(v string) {
	o.Id = v
}

// GetType returns the Type field value
func (o *InstanceControllerApiServiceInstance) GetType() ServiceType {
	if o == nil {
		var ret ServiceType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *InstanceControllerApiServiceInstance) GetTypeOk() (*ServiceType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *InstanceControllerApiServiceInstance) SetType(v ServiceType) {
	o.Type = v
}

// GetState returns the State field value
func (o *InstanceControllerApiServiceInstance) GetState() ServiceServiceState {
	if o == nil {
		var ret ServiceServiceState
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *InstanceControllerApiServiceInstance) GetStateOk() (*ServiceServiceState, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *InstanceControllerApiServiceInstance) SetState(v ServiceServiceState) {
	o.State = v
}

// GetServer returns the Server field value
func (o *InstanceControllerApiServiceInstance) GetServer() InstanceControllerApiServerInstance {
	if o == nil {
		var ret InstanceControllerApiServerInstance
		return ret
	}

	return o.Server
}

// GetServerOk returns a tuple with the Server field value
// and a boolean to check if the value has been set.
func (o *InstanceControllerApiServiceInstance) GetServerOk() (*InstanceControllerApiServerInstance, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Server, true
}

// SetServer sets field value
func (o *InstanceControllerApiServiceInstance) SetServer(v InstanceControllerApiServerInstance) {
	o.Server = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *InstanceControllerApiServiceInstance) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *InstanceControllerApiServiceInstance) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *InstanceControllerApiServiceInstance) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *InstanceControllerApiServiceInstance) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *InstanceControllerApiServiceInstance) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *InstanceControllerApiServiceInstance) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

func (o InstanceControllerApiServiceInstance) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InstanceControllerApiServiceInstance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["type"] = o.Type
	toSerialize["state"] = o.State
	toSerialize["server"] = o.Server
	toSerialize["createdAt"] = o.CreatedAt
	toSerialize["updatedAt"] = o.UpdatedAt

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *InstanceControllerApiServiceInstance) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"type",
		"state",
		"server",
		"createdAt",
		"updatedAt",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInstanceControllerApiServiceInstance := _InstanceControllerApiServiceInstance{}

	err = json.Unmarshal(data, &varInstanceControllerApiServiceInstance)

	if err != nil {
		return err
	}

	*o = InstanceControllerApiServiceInstance(varInstanceControllerApiServiceInstance)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "type")
		delete(additionalProperties, "state")
		delete(additionalProperties, "server")
		delete(additionalProperties, "createdAt")
		delete(additionalProperties, "updatedAt")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInstanceControllerApiServiceInstance struct {
	value *InstanceControllerApiServiceInstance
	isSet bool
}

func (v NullableInstanceControllerApiServiceInstance) Get() *InstanceControllerApiServiceInstance {
	return v.value
}

func (v *NullableInstanceControllerApiServiceInstance) Set(val *InstanceControllerApiServiceInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceControllerApiServiceInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceControllerApiServiceInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceControllerApiServiceInstance(val *InstanceControllerApiServiceInstance) *NullableInstanceControllerApiServiceInstance {
	return &NullableInstanceControllerApiServiceInstance{value: val, isSet: true}
}

func (v NullableInstanceControllerApiServiceInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceControllerApiServiceInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
