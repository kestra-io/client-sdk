/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
)

// ServerType the model 'ServerType'
type ServerType string

// List of ServerType
const (
	SERVERTYPE_EXECUTOR   ServerType = "EXECUTOR"
	SERVERTYPE_INDEXER    ServerType = "INDEXER"
	SERVERTYPE_SCHEDULER  ServerType = "SCHEDULER"
	SERVERTYPE_STANDALONE ServerType = "STANDALONE"
	SERVERTYPE_WEBSERVER  ServerType = "WEBSERVER"
	SERVERTYPE_WORKER     ServerType = "WORKER"
)

// All allowed values of ServerType enum
var AllowedServerTypeEnumValues = []ServerType{
	"EXECUTOR",
	"INDEXER",
	"SCHEDULER",
	"STANDALONE",
	"WEBSERVER",
	"WORKER",
}

func (v *ServerType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ServerType(value)
	for _, existing := range AllowedServerTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ServerType", value)
}

// NewServerTypeFromValue returns a pointer to a valid ServerType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewServerTypeFromValue(v string) (*ServerType, error) {
	ev := ServerType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ServerType: valid values are %v", v, AllowedServerTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ServerType) IsValid() bool {
	for _, existing := range AllowedServerTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ServerType value
func (v ServerType) Ptr() *ServerType {
	return &v
}

type NullableServerType struct {
	value *ServerType
	isSet bool
}

func (v NullableServerType) Get() *ServerType {
	return v.value
}

func (v *NullableServerType) Set(val *ServerType) {
	v.value = val
	v.isSet = true
}

func (v NullableServerType) IsSet() bool {
	return v.isSet
}

func (v *NullableServerType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerType(val *ServerType) *NullableServerType {
	return &NullableServerType{value: val, isSet: true}
}

func (v NullableServerType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
