/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
	"time"
)

// checks if the DailyExecutionStatistics type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DailyExecutionStatistics{}

// DailyExecutionStatistics struct for DailyExecutionStatistics
type DailyExecutionStatistics struct {
	StartDate            time.Time                               `json:"startDate"`
	Duration             DailyExecutionStatisticsDuration        `json:"duration"`
	ExecutionCounts      DailyExecutionStatisticsExecutionCounts `json:"executionCounts"`
	GroupBy              string                                  `json:"groupBy"`
	AdditionalProperties map[string]interface{}
}

type _DailyExecutionStatistics DailyExecutionStatistics

// NewDailyExecutionStatistics instantiates a new DailyExecutionStatistics object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDailyExecutionStatistics(startDate time.Time, duration DailyExecutionStatisticsDuration, executionCounts DailyExecutionStatisticsExecutionCounts, groupBy string) *DailyExecutionStatistics {
	this := DailyExecutionStatistics{}
	this.StartDate = startDate
	this.Duration = duration
	this.ExecutionCounts = executionCounts
	this.GroupBy = groupBy
	return &this
}

// NewDailyExecutionStatisticsWithDefaults instantiates a new DailyExecutionStatistics object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDailyExecutionStatisticsWithDefaults() *DailyExecutionStatistics {
	this := DailyExecutionStatistics{}
	return &this
}

// GetStartDate returns the StartDate field value
func (o *DailyExecutionStatistics) GetStartDate() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value
// and a boolean to check if the value has been set.
func (o *DailyExecutionStatistics) GetStartDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartDate, true
}

// SetStartDate sets field value
func (o *DailyExecutionStatistics) SetStartDate(v time.Time) {
	o.StartDate = v
}

// GetDuration returns the Duration field value
func (o *DailyExecutionStatistics) GetDuration() DailyExecutionStatisticsDuration {
	if o == nil {
		var ret DailyExecutionStatisticsDuration
		return ret
	}

	return o.Duration
}

// GetDurationOk returns a tuple with the Duration field value
// and a boolean to check if the value has been set.
func (o *DailyExecutionStatistics) GetDurationOk() (*DailyExecutionStatisticsDuration, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Duration, true
}

// SetDuration sets field value
func (o *DailyExecutionStatistics) SetDuration(v DailyExecutionStatisticsDuration) {
	o.Duration = v
}

// GetExecutionCounts returns the ExecutionCounts field value
func (o *DailyExecutionStatistics) GetExecutionCounts() DailyExecutionStatisticsExecutionCounts {
	if o == nil {
		var ret DailyExecutionStatisticsExecutionCounts
		return ret
	}

	return o.ExecutionCounts
}

// GetExecutionCountsOk returns a tuple with the ExecutionCounts field value
// and a boolean to check if the value has been set.
func (o *DailyExecutionStatistics) GetExecutionCountsOk() (*DailyExecutionStatisticsExecutionCounts, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExecutionCounts, true
}

// SetExecutionCounts sets field value
func (o *DailyExecutionStatistics) SetExecutionCounts(v DailyExecutionStatisticsExecutionCounts) {
	o.ExecutionCounts = v
}

// GetGroupBy returns the GroupBy field value
func (o *DailyExecutionStatistics) GetGroupBy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GroupBy
}

// GetGroupByOk returns a tuple with the GroupBy field value
// and a boolean to check if the value has been set.
func (o *DailyExecutionStatistics) GetGroupByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GroupBy, true
}

// SetGroupBy sets field value
func (o *DailyExecutionStatistics) SetGroupBy(v string) {
	o.GroupBy = v
}

func (o DailyExecutionStatistics) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DailyExecutionStatistics) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["startDate"] = o.StartDate
	toSerialize["duration"] = o.Duration
	toSerialize["executionCounts"] = o.ExecutionCounts
	toSerialize["groupBy"] = o.GroupBy

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DailyExecutionStatistics) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"startDate",
		"duration",
		"executionCounts",
		"groupBy",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDailyExecutionStatistics := _DailyExecutionStatistics{}

	err = json.Unmarshal(data, &varDailyExecutionStatistics)

	if err != nil {
		return err
	}

	*o = DailyExecutionStatistics(varDailyExecutionStatistics)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "startDate")
		delete(additionalProperties, "duration")
		delete(additionalProperties, "executionCounts")
		delete(additionalProperties, "groupBy")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDailyExecutionStatistics struct {
	value *DailyExecutionStatistics
	isSet bool
}

func (v NullableDailyExecutionStatistics) Get() *DailyExecutionStatistics {
	return v.value
}

func (v *NullableDailyExecutionStatistics) Set(val *DailyExecutionStatistics) {
	v.value = val
	v.isSet = true
}

func (v NullableDailyExecutionStatistics) IsSet() bool {
	return v.isSet
}

func (v *NullableDailyExecutionStatistics) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDailyExecutionStatistics(val *DailyExecutionStatistics) *NullableDailyExecutionStatistics {
	return &NullableDailyExecutionStatistics{value: val, isSet: true}
}

func (v NullableDailyExecutionStatistics) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDailyExecutionStatistics) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
