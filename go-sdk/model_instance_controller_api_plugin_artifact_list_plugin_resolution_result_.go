/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
)

// checks if the InstanceControllerApiPluginArtifactListPluginResolutionResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InstanceControllerApiPluginArtifactListPluginResolutionResult{}

// InstanceControllerApiPluginArtifactListPluginResolutionResult struct for InstanceControllerApiPluginArtifactListPluginResolutionResult
type InstanceControllerApiPluginArtifactListPluginResolutionResult struct {
	Total                *int32                   `json:"total,omitempty"`
	Results              []map[string]interface{} `json:"results,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _InstanceControllerApiPluginArtifactListPluginResolutionResult InstanceControllerApiPluginArtifactListPluginResolutionResult

// NewInstanceControllerApiPluginArtifactListPluginResolutionResult instantiates a new InstanceControllerApiPluginArtifactListPluginResolutionResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstanceControllerApiPluginArtifactListPluginResolutionResult() *InstanceControllerApiPluginArtifactListPluginResolutionResult {
	this := InstanceControllerApiPluginArtifactListPluginResolutionResult{}
	return &this
}

// NewInstanceControllerApiPluginArtifactListPluginResolutionResultWithDefaults instantiates a new InstanceControllerApiPluginArtifactListPluginResolutionResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceControllerApiPluginArtifactListPluginResolutionResultWithDefaults() *InstanceControllerApiPluginArtifactListPluginResolutionResult {
	this := InstanceControllerApiPluginArtifactListPluginResolutionResult{}
	return &this
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *InstanceControllerApiPluginArtifactListPluginResolutionResult) GetTotal() int32 {
	if o == nil || IsNil(o.Total) {
		var ret int32
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceControllerApiPluginArtifactListPluginResolutionResult) GetTotalOk() (*int32, bool) {
	if o == nil || IsNil(o.Total) {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *InstanceControllerApiPluginArtifactListPluginResolutionResult) HasTotal() bool {
	if o != nil && !IsNil(o.Total) {
		return true
	}

	return false
}

// SetTotal gets a reference to the given int32 and assigns it to the Total field.
func (o *InstanceControllerApiPluginArtifactListPluginResolutionResult) SetTotal(v int32) {
	o.Total = &v
}

// GetResults returns the Results field value if set, zero value otherwise.
func (o *InstanceControllerApiPluginArtifactListPluginResolutionResult) GetResults() []map[string]interface{} {
	if o == nil || IsNil(o.Results) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Results
}

// GetResultsOk returns a tuple with the Results field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceControllerApiPluginArtifactListPluginResolutionResult) GetResultsOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Results) {
		return nil, false
	}
	return o.Results, true
}

// HasResults returns a boolean if a field has been set.
func (o *InstanceControllerApiPluginArtifactListPluginResolutionResult) HasResults() bool {
	if o != nil && !IsNil(o.Results) {
		return true
	}

	return false
}

// SetResults gets a reference to the given []map[string]interface{} and assigns it to the Results field.
func (o *InstanceControllerApiPluginArtifactListPluginResolutionResult) SetResults(v []map[string]interface{}) {
	o.Results = v
}

func (o InstanceControllerApiPluginArtifactListPluginResolutionResult) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InstanceControllerApiPluginArtifactListPluginResolutionResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Total) {
		toSerialize["total"] = o.Total
	}
	if !IsNil(o.Results) {
		toSerialize["results"] = o.Results
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *InstanceControllerApiPluginArtifactListPluginResolutionResult) UnmarshalJSON(data []byte) (err error) {
	varInstanceControllerApiPluginArtifactListPluginResolutionResult := _InstanceControllerApiPluginArtifactListPluginResolutionResult{}

	err = json.Unmarshal(data, &varInstanceControllerApiPluginArtifactListPluginResolutionResult)

	if err != nil {
		return err
	}

	*o = InstanceControllerApiPluginArtifactListPluginResolutionResult(varInstanceControllerApiPluginArtifactListPluginResolutionResult)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "total")
		delete(additionalProperties, "results")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInstanceControllerApiPluginArtifactListPluginResolutionResult struct {
	value *InstanceControllerApiPluginArtifactListPluginResolutionResult
	isSet bool
}

func (v NullableInstanceControllerApiPluginArtifactListPluginResolutionResult) Get() *InstanceControllerApiPluginArtifactListPluginResolutionResult {
	return v.value
}

func (v *NullableInstanceControllerApiPluginArtifactListPluginResolutionResult) Set(val *InstanceControllerApiPluginArtifactListPluginResolutionResult) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceControllerApiPluginArtifactListPluginResolutionResult) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceControllerApiPluginArtifactListPluginResolutionResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceControllerApiPluginArtifactListPluginResolutionResult(val *InstanceControllerApiPluginArtifactListPluginResolutionResult) *NullableInstanceControllerApiPluginArtifactListPluginResolutionResult {
	return &NullableInstanceControllerApiPluginArtifactListPluginResolutionResult{value: val, isSet: true}
}

func (v NullableInstanceControllerApiPluginArtifactListPluginResolutionResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceControllerApiPluginArtifactListPluginResolutionResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
