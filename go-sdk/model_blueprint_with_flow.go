/*
Kestra EE

All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the BlueprintWithFlow type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlueprintWithFlow{}

// BlueprintWithFlow struct for BlueprintWithFlow
type BlueprintWithFlow struct {
	Id            *string    `json:"id,omitempty"`
	Title         string     `json:"title"`
	Description   *string    `json:"description,omitempty"`
	Tags          []string   `json:"tags,omitempty"`
	IncludedTasks []string   `json:"includedTasks,omitempty"`
	PublishedAt   *time.Time `json:"publishedAt,omitempty"`
	Deleted       bool       `json:"deleted"`
	Flow          string     `json:"flow"`
}

type _BlueprintWithFlow BlueprintWithFlow

// NewBlueprintWithFlow instantiates a new BlueprintWithFlow object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlueprintWithFlow(title string, deleted bool, flow string) *BlueprintWithFlow {
	this := BlueprintWithFlow{}
	this.Title = title
	this.Deleted = deleted
	this.Flow = flow
	return &this
}

// NewBlueprintWithFlowWithDefaults instantiates a new BlueprintWithFlow object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlueprintWithFlowWithDefaults() *BlueprintWithFlow {
	this := BlueprintWithFlow{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *BlueprintWithFlow) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlueprintWithFlow) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *BlueprintWithFlow) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *BlueprintWithFlow) SetId(v string) {
	o.Id = &v
}

// GetTitle returns the Title field value
func (o *BlueprintWithFlow) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *BlueprintWithFlow) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *BlueprintWithFlow) SetTitle(v string) {
	o.Title = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *BlueprintWithFlow) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlueprintWithFlow) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *BlueprintWithFlow) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *BlueprintWithFlow) SetDescription(v string) {
	o.Description = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *BlueprintWithFlow) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlueprintWithFlow) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *BlueprintWithFlow) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *BlueprintWithFlow) SetTags(v []string) {
	o.Tags = v
}

// GetIncludedTasks returns the IncludedTasks field value if set, zero value otherwise.
func (o *BlueprintWithFlow) GetIncludedTasks() []string {
	if o == nil || IsNil(o.IncludedTasks) {
		var ret []string
		return ret
	}
	return o.IncludedTasks
}

// GetIncludedTasksOk returns a tuple with the IncludedTasks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlueprintWithFlow) GetIncludedTasksOk() ([]string, bool) {
	if o == nil || IsNil(o.IncludedTasks) {
		return nil, false
	}
	return o.IncludedTasks, true
}

// HasIncludedTasks returns a boolean if a field has been set.
func (o *BlueprintWithFlow) HasIncludedTasks() bool {
	if o != nil && !IsNil(o.IncludedTasks) {
		return true
	}

	return false
}

// SetIncludedTasks gets a reference to the given []string and assigns it to the IncludedTasks field.
func (o *BlueprintWithFlow) SetIncludedTasks(v []string) {
	o.IncludedTasks = v
}

// GetPublishedAt returns the PublishedAt field value if set, zero value otherwise.
func (o *BlueprintWithFlow) GetPublishedAt() time.Time {
	if o == nil || IsNil(o.PublishedAt) {
		var ret time.Time
		return ret
	}
	return *o.PublishedAt
}

// GetPublishedAtOk returns a tuple with the PublishedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlueprintWithFlow) GetPublishedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.PublishedAt) {
		return nil, false
	}
	return o.PublishedAt, true
}

// HasPublishedAt returns a boolean if a field has been set.
func (o *BlueprintWithFlow) HasPublishedAt() bool {
	if o != nil && !IsNil(o.PublishedAt) {
		return true
	}

	return false
}

// SetPublishedAt gets a reference to the given time.Time and assigns it to the PublishedAt field.
func (o *BlueprintWithFlow) SetPublishedAt(v time.Time) {
	o.PublishedAt = &v
}

// GetDeleted returns the Deleted field value
func (o *BlueprintWithFlow) GetDeleted() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Deleted
}

// GetDeletedOk returns a tuple with the Deleted field value
// and a boolean to check if the value has been set.
func (o *BlueprintWithFlow) GetDeletedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Deleted, true
}

// SetDeleted sets field value
func (o *BlueprintWithFlow) SetDeleted(v bool) {
	o.Deleted = v
}

// GetFlow returns the Flow field value
func (o *BlueprintWithFlow) GetFlow() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Flow
}

// GetFlowOk returns a tuple with the Flow field value
// and a boolean to check if the value has been set.
func (o *BlueprintWithFlow) GetFlowOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Flow, true
}

// SetFlow sets field value
func (o *BlueprintWithFlow) SetFlow(v string) {
	o.Flow = v
}

func (o BlueprintWithFlow) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlueprintWithFlow) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["title"] = o.Title
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.IncludedTasks) {
		toSerialize["includedTasks"] = o.IncludedTasks
	}
	if !IsNil(o.PublishedAt) {
		toSerialize["publishedAt"] = o.PublishedAt
	}
	toSerialize["deleted"] = o.Deleted
	toSerialize["flow"] = o.Flow
	return toSerialize, nil
}

func (o *BlueprintWithFlow) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"title",
		"deleted",
		"flow",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBlueprintWithFlow := _BlueprintWithFlow{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBlueprintWithFlow)

	if err != nil {
		return err
	}

	*o = BlueprintWithFlow(varBlueprintWithFlow)

	return err
}

type NullableBlueprintWithFlow struct {
	value *BlueprintWithFlow
	isSet bool
}

func (v NullableBlueprintWithFlow) Get() *BlueprintWithFlow {
	return v.value
}

func (v *NullableBlueprintWithFlow) Set(val *BlueprintWithFlow) {
	v.value = val
	v.isSet = true
}

func (v NullableBlueprintWithFlow) IsSet() bool {
	return v.isSet
}

func (v *NullableBlueprintWithFlow) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlueprintWithFlow(val *BlueprintWithFlow) *NullableBlueprintWithFlow {
	return &NullableBlueprintWithFlow{value: val, isSet: true}
}

func (v NullableBlueprintWithFlow) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlueprintWithFlow) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
