/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
)

// checks if the Namespace type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Namespace{}

// Namespace A namespace is a logical grouping of flows and tasks. It is used to organize and manage flows and tasks within Kestra.
type Namespace struct {
	Id      string `json:"id" validate:"regexp=^[a-z0-9][a-z0-9._-]*"`
	Deleted bool   `json:"deleted"`
	// Deprecated
	AllowedTriggers          []NamespaceAllowedTrigger         `json:"allowedTriggers,omitempty"`
	StorageIsolation         *Isolation                        `json:"storageIsolation,omitempty"`
	SecretIsolation          *Isolation                        `json:"secretIsolation,omitempty"`
	Description              *string                           `json:"description,omitempty"`
	Variables                map[string]map[string]interface{} `json:"variables,omitempty"`
	PluginDefaults           []PluginDefault                   `json:"pluginDefaults,omitempty"`
	AllowedNamespaces        []NamespaceAllowedNamespace       `json:"allowedNamespaces,omitempty"`
	WorkerGroup              *WorkerGroup                      `json:"workerGroup,omitempty"`
	StorageType              *string                           `json:"storageType,omitempty"`
	StorageConfiguration     map[string]map[string]interface{} `json:"storageConfiguration,omitempty"`
	SecretType               *string                           `json:"secretType,omitempty"`
	SecretReadOnly           *bool                             `json:"secretReadOnly,omitempty"`
	SecretConfiguration      map[string]map[string]interface{} `json:"secretConfiguration,omitempty"`
	OutputsInInternalStorage *bool                             `json:"outputsInInternalStorage,omitempty"`
	AdditionalProperties     map[string]interface{}
}

type _Namespace Namespace

// NewNamespace instantiates a new Namespace object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNamespace(id string, deleted bool) *Namespace {
	this := Namespace{}
	this.Id = id
	this.Deleted = deleted
	return &this
}

// NewNamespaceWithDefaults instantiates a new Namespace object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNamespaceWithDefaults() *Namespace {
	this := Namespace{}
	return &this
}

// GetId returns the Id field value
func (o *Namespace) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Namespace) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Namespace) SetId(v string) {
	o.Id = v
}

// GetDeleted returns the Deleted field value
func (o *Namespace) GetDeleted() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Deleted
}

// GetDeletedOk returns a tuple with the Deleted field value
// and a boolean to check if the value has been set.
func (o *Namespace) GetDeletedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Deleted, true
}

// SetDeleted sets field value
func (o *Namespace) SetDeleted(v bool) {
	o.Deleted = v
}

// GetAllowedTriggers returns the AllowedTriggers field value if set, zero value otherwise.
// Deprecated
func (o *Namespace) GetAllowedTriggers() []NamespaceAllowedTrigger {
	if o == nil || IsNil(o.AllowedTriggers) {
		var ret []NamespaceAllowedTrigger
		return ret
	}
	return o.AllowedTriggers
}

// GetAllowedTriggersOk returns a tuple with the AllowedTriggers field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *Namespace) GetAllowedTriggersOk() ([]NamespaceAllowedTrigger, bool) {
	if o == nil || IsNil(o.AllowedTriggers) {
		return nil, false
	}
	return o.AllowedTriggers, true
}

// HasAllowedTriggers returns a boolean if a field has been set.
func (o *Namespace) HasAllowedTriggers() bool {
	if o != nil && !IsNil(o.AllowedTriggers) {
		return true
	}

	return false
}

// SetAllowedTriggers gets a reference to the given []NamespaceAllowedTrigger and assigns it to the AllowedTriggers field.
// Deprecated
func (o *Namespace) SetAllowedTriggers(v []NamespaceAllowedTrigger) {
	o.AllowedTriggers = v
}

// GetStorageIsolation returns the StorageIsolation field value if set, zero value otherwise.
func (o *Namespace) GetStorageIsolation() Isolation {
	if o == nil || IsNil(o.StorageIsolation) {
		var ret Isolation
		return ret
	}
	return *o.StorageIsolation
}

// GetStorageIsolationOk returns a tuple with the StorageIsolation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Namespace) GetStorageIsolationOk() (*Isolation, bool) {
	if o == nil || IsNil(o.StorageIsolation) {
		return nil, false
	}
	return o.StorageIsolation, true
}

// HasStorageIsolation returns a boolean if a field has been set.
func (o *Namespace) HasStorageIsolation() bool {
	if o != nil && !IsNil(o.StorageIsolation) {
		return true
	}

	return false
}

// SetStorageIsolation gets a reference to the given Isolation and assigns it to the StorageIsolation field.
func (o *Namespace) SetStorageIsolation(v Isolation) {
	o.StorageIsolation = &v
}

// GetSecretIsolation returns the SecretIsolation field value if set, zero value otherwise.
func (o *Namespace) GetSecretIsolation() Isolation {
	if o == nil || IsNil(o.SecretIsolation) {
		var ret Isolation
		return ret
	}
	return *o.SecretIsolation
}

// GetSecretIsolationOk returns a tuple with the SecretIsolation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Namespace) GetSecretIsolationOk() (*Isolation, bool) {
	if o == nil || IsNil(o.SecretIsolation) {
		return nil, false
	}
	return o.SecretIsolation, true
}

// HasSecretIsolation returns a boolean if a field has been set.
func (o *Namespace) HasSecretIsolation() bool {
	if o != nil && !IsNil(o.SecretIsolation) {
		return true
	}

	return false
}

// SetSecretIsolation gets a reference to the given Isolation and assigns it to the SecretIsolation field.
func (o *Namespace) SetSecretIsolation(v Isolation) {
	o.SecretIsolation = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Namespace) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Namespace) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Namespace) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Namespace) SetDescription(v string) {
	o.Description = &v
}

// GetVariables returns the Variables field value if set, zero value otherwise.
func (o *Namespace) GetVariables() map[string]map[string]interface{} {
	if o == nil || IsNil(o.Variables) {
		var ret map[string]map[string]interface{}
		return ret
	}
	return o.Variables
}

// GetVariablesOk returns a tuple with the Variables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Namespace) GetVariablesOk() (map[string]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Variables) {
		return map[string]map[string]interface{}{}, false
	}
	return o.Variables, true
}

// HasVariables returns a boolean if a field has been set.
func (o *Namespace) HasVariables() bool {
	if o != nil && !IsNil(o.Variables) {
		return true
	}

	return false
}

// SetVariables gets a reference to the given map[string]map[string]interface{} and assigns it to the Variables field.
func (o *Namespace) SetVariables(v map[string]map[string]interface{}) {
	o.Variables = v
}

// GetPluginDefaults returns the PluginDefaults field value if set, zero value otherwise.
func (o *Namespace) GetPluginDefaults() []PluginDefault {
	if o == nil || IsNil(o.PluginDefaults) {
		var ret []PluginDefault
		return ret
	}
	return o.PluginDefaults
}

// GetPluginDefaultsOk returns a tuple with the PluginDefaults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Namespace) GetPluginDefaultsOk() ([]PluginDefault, bool) {
	if o == nil || IsNil(o.PluginDefaults) {
		return nil, false
	}
	return o.PluginDefaults, true
}

// HasPluginDefaults returns a boolean if a field has been set.
func (o *Namespace) HasPluginDefaults() bool {
	if o != nil && !IsNil(o.PluginDefaults) {
		return true
	}

	return false
}

// SetPluginDefaults gets a reference to the given []PluginDefault and assigns it to the PluginDefaults field.
func (o *Namespace) SetPluginDefaults(v []PluginDefault) {
	o.PluginDefaults = v
}

// GetAllowedNamespaces returns the AllowedNamespaces field value if set, zero value otherwise.
func (o *Namespace) GetAllowedNamespaces() []NamespaceAllowedNamespace {
	if o == nil || IsNil(o.AllowedNamespaces) {
		var ret []NamespaceAllowedNamespace
		return ret
	}
	return o.AllowedNamespaces
}

// GetAllowedNamespacesOk returns a tuple with the AllowedNamespaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Namespace) GetAllowedNamespacesOk() ([]NamespaceAllowedNamespace, bool) {
	if o == nil || IsNil(o.AllowedNamespaces) {
		return nil, false
	}
	return o.AllowedNamespaces, true
}

// HasAllowedNamespaces returns a boolean if a field has been set.
func (o *Namespace) HasAllowedNamespaces() bool {
	if o != nil && !IsNil(o.AllowedNamespaces) {
		return true
	}

	return false
}

// SetAllowedNamespaces gets a reference to the given []NamespaceAllowedNamespace and assigns it to the AllowedNamespaces field.
func (o *Namespace) SetAllowedNamespaces(v []NamespaceAllowedNamespace) {
	o.AllowedNamespaces = v
}

// GetWorkerGroup returns the WorkerGroup field value if set, zero value otherwise.
func (o *Namespace) GetWorkerGroup() WorkerGroup {
	if o == nil || IsNil(o.WorkerGroup) {
		var ret WorkerGroup
		return ret
	}
	return *o.WorkerGroup
}

// GetWorkerGroupOk returns a tuple with the WorkerGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Namespace) GetWorkerGroupOk() (*WorkerGroup, bool) {
	if o == nil || IsNil(o.WorkerGroup) {
		return nil, false
	}
	return o.WorkerGroup, true
}

// HasWorkerGroup returns a boolean if a field has been set.
func (o *Namespace) HasWorkerGroup() bool {
	if o != nil && !IsNil(o.WorkerGroup) {
		return true
	}

	return false
}

// SetWorkerGroup gets a reference to the given WorkerGroup and assigns it to the WorkerGroup field.
func (o *Namespace) SetWorkerGroup(v WorkerGroup) {
	o.WorkerGroup = &v
}

// GetStorageType returns the StorageType field value if set, zero value otherwise.
func (o *Namespace) GetStorageType() string {
	if o == nil || IsNil(o.StorageType) {
		var ret string
		return ret
	}
	return *o.StorageType
}

// GetStorageTypeOk returns a tuple with the StorageType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Namespace) GetStorageTypeOk() (*string, bool) {
	if o == nil || IsNil(o.StorageType) {
		return nil, false
	}
	return o.StorageType, true
}

// HasStorageType returns a boolean if a field has been set.
func (o *Namespace) HasStorageType() bool {
	if o != nil && !IsNil(o.StorageType) {
		return true
	}

	return false
}

// SetStorageType gets a reference to the given string and assigns it to the StorageType field.
func (o *Namespace) SetStorageType(v string) {
	o.StorageType = &v
}

// GetStorageConfiguration returns the StorageConfiguration field value if set, zero value otherwise.
func (o *Namespace) GetStorageConfiguration() map[string]map[string]interface{} {
	if o == nil || IsNil(o.StorageConfiguration) {
		var ret map[string]map[string]interface{}
		return ret
	}
	return o.StorageConfiguration
}

// GetStorageConfigurationOk returns a tuple with the StorageConfiguration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Namespace) GetStorageConfigurationOk() (map[string]map[string]interface{}, bool) {
	if o == nil || IsNil(o.StorageConfiguration) {
		return map[string]map[string]interface{}{}, false
	}
	return o.StorageConfiguration, true
}

// HasStorageConfiguration returns a boolean if a field has been set.
func (o *Namespace) HasStorageConfiguration() bool {
	if o != nil && !IsNil(o.StorageConfiguration) {
		return true
	}

	return false
}

// SetStorageConfiguration gets a reference to the given map[string]map[string]interface{} and assigns it to the StorageConfiguration field.
func (o *Namespace) SetStorageConfiguration(v map[string]map[string]interface{}) {
	o.StorageConfiguration = v
}

// GetSecretType returns the SecretType field value if set, zero value otherwise.
func (o *Namespace) GetSecretType() string {
	if o == nil || IsNil(o.SecretType) {
		var ret string
		return ret
	}
	return *o.SecretType
}

// GetSecretTypeOk returns a tuple with the SecretType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Namespace) GetSecretTypeOk() (*string, bool) {
	if o == nil || IsNil(o.SecretType) {
		return nil, false
	}
	return o.SecretType, true
}

// HasSecretType returns a boolean if a field has been set.
func (o *Namespace) HasSecretType() bool {
	if o != nil && !IsNil(o.SecretType) {
		return true
	}

	return false
}

// SetSecretType gets a reference to the given string and assigns it to the SecretType field.
func (o *Namespace) SetSecretType(v string) {
	o.SecretType = &v
}

// GetSecretReadOnly returns the SecretReadOnly field value if set, zero value otherwise.
func (o *Namespace) GetSecretReadOnly() bool {
	if o == nil || IsNil(o.SecretReadOnly) {
		var ret bool
		return ret
	}
	return *o.SecretReadOnly
}

// GetSecretReadOnlyOk returns a tuple with the SecretReadOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Namespace) GetSecretReadOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.SecretReadOnly) {
		return nil, false
	}
	return o.SecretReadOnly, true
}

// HasSecretReadOnly returns a boolean if a field has been set.
func (o *Namespace) HasSecretReadOnly() bool {
	if o != nil && !IsNil(o.SecretReadOnly) {
		return true
	}

	return false
}

// SetSecretReadOnly gets a reference to the given bool and assigns it to the SecretReadOnly field.
func (o *Namespace) SetSecretReadOnly(v bool) {
	o.SecretReadOnly = &v
}

// GetSecretConfiguration returns the SecretConfiguration field value if set, zero value otherwise.
func (o *Namespace) GetSecretConfiguration() map[string]map[string]interface{} {
	if o == nil || IsNil(o.SecretConfiguration) {
		var ret map[string]map[string]interface{}
		return ret
	}
	return o.SecretConfiguration
}

// GetSecretConfigurationOk returns a tuple with the SecretConfiguration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Namespace) GetSecretConfigurationOk() (map[string]map[string]interface{}, bool) {
	if o == nil || IsNil(o.SecretConfiguration) {
		return map[string]map[string]interface{}{}, false
	}
	return o.SecretConfiguration, true
}

// HasSecretConfiguration returns a boolean if a field has been set.
func (o *Namespace) HasSecretConfiguration() bool {
	if o != nil && !IsNil(o.SecretConfiguration) {
		return true
	}

	return false
}

// SetSecretConfiguration gets a reference to the given map[string]map[string]interface{} and assigns it to the SecretConfiguration field.
func (o *Namespace) SetSecretConfiguration(v map[string]map[string]interface{}) {
	o.SecretConfiguration = v
}

// GetOutputsInInternalStorage returns the OutputsInInternalStorage field value if set, zero value otherwise.
func (o *Namespace) GetOutputsInInternalStorage() bool {
	if o == nil || IsNil(o.OutputsInInternalStorage) {
		var ret bool
		return ret
	}
	return *o.OutputsInInternalStorage
}

// GetOutputsInInternalStorageOk returns a tuple with the OutputsInInternalStorage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Namespace) GetOutputsInInternalStorageOk() (*bool, bool) {
	if o == nil || IsNil(o.OutputsInInternalStorage) {
		return nil, false
	}
	return o.OutputsInInternalStorage, true
}

// HasOutputsInInternalStorage returns a boolean if a field has been set.
func (o *Namespace) HasOutputsInInternalStorage() bool {
	if o != nil && !IsNil(o.OutputsInInternalStorage) {
		return true
	}

	return false
}

// SetOutputsInInternalStorage gets a reference to the given bool and assigns it to the OutputsInInternalStorage field.
func (o *Namespace) SetOutputsInInternalStorage(v bool) {
	o.OutputsInInternalStorage = &v
}

func (o Namespace) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Namespace) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["deleted"] = o.Deleted
	if !IsNil(o.AllowedTriggers) {
		toSerialize["allowedTriggers"] = o.AllowedTriggers
	}
	if !IsNil(o.StorageIsolation) {
		toSerialize["storageIsolation"] = o.StorageIsolation
	}
	if !IsNil(o.SecretIsolation) {
		toSerialize["secretIsolation"] = o.SecretIsolation
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Variables) {
		toSerialize["variables"] = o.Variables
	}
	if !IsNil(o.PluginDefaults) {
		toSerialize["pluginDefaults"] = o.PluginDefaults
	}
	if !IsNil(o.AllowedNamespaces) {
		toSerialize["allowedNamespaces"] = o.AllowedNamespaces
	}
	if !IsNil(o.WorkerGroup) {
		toSerialize["workerGroup"] = o.WorkerGroup
	}
	if !IsNil(o.StorageType) {
		toSerialize["storageType"] = o.StorageType
	}
	if !IsNil(o.StorageConfiguration) {
		toSerialize["storageConfiguration"] = o.StorageConfiguration
	}
	if !IsNil(o.SecretType) {
		toSerialize["secretType"] = o.SecretType
	}
	if !IsNil(o.SecretReadOnly) {
		toSerialize["secretReadOnly"] = o.SecretReadOnly
	}
	if !IsNil(o.SecretConfiguration) {
		toSerialize["secretConfiguration"] = o.SecretConfiguration
	}
	if !IsNil(o.OutputsInInternalStorage) {
		toSerialize["outputsInInternalStorage"] = o.OutputsInInternalStorage
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Namespace) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"deleted",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNamespace := _Namespace{}

	err = json.Unmarshal(data, &varNamespace)

	if err != nil {
		return err
	}

	*o = Namespace(varNamespace)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "deleted")
		delete(additionalProperties, "allowedTriggers")
		delete(additionalProperties, "storageIsolation")
		delete(additionalProperties, "secretIsolation")
		delete(additionalProperties, "description")
		delete(additionalProperties, "variables")
		delete(additionalProperties, "pluginDefaults")
		delete(additionalProperties, "allowedNamespaces")
		delete(additionalProperties, "workerGroup")
		delete(additionalProperties, "storageType")
		delete(additionalProperties, "storageConfiguration")
		delete(additionalProperties, "secretType")
		delete(additionalProperties, "secretReadOnly")
		delete(additionalProperties, "secretConfiguration")
		delete(additionalProperties, "outputsInInternalStorage")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNamespace struct {
	value *Namespace
	isSet bool
}

func (v NullableNamespace) Get() *Namespace {
	return v.value
}

func (v *NullableNamespace) Set(val *Namespace) {
	v.value = val
	v.isSet = true
}

func (v NullableNamespace) IsSet() bool {
	return v.isSet
}

func (v *NullableNamespace) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNamespace(val *Namespace) *NullableNamespace {
	return &NullableNamespace{value: val, isSet: true}
}

func (v NullableNamespace) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNamespace) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
