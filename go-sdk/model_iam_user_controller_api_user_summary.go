/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
)

// checks if the IAMUserControllerApiUserSummary type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IAMUserControllerApiUserSummary{}

// IAMUserControllerApiUserSummary struct for IAMUserControllerApiUserSummary
type IAMUserControllerApiUserSummary struct {
	Id                   *string                        `json:"id,omitempty"`
	Username             *string                        `json:"username,omitempty"`
	DisplayName          *string                        `json:"displayName,omitempty"`
	Tenants              []ApiTenantSummary             `json:"tenants,omitempty"`
	Auths                []IAMUserControllerApiUserAuth `json:"auths,omitempty"`
	SuperAdmin           *bool                          `json:"superAdmin,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _IAMUserControllerApiUserSummary IAMUserControllerApiUserSummary

// NewIAMUserControllerApiUserSummary instantiates a new IAMUserControllerApiUserSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIAMUserControllerApiUserSummary() *IAMUserControllerApiUserSummary {
	this := IAMUserControllerApiUserSummary{}
	return &this
}

// NewIAMUserControllerApiUserSummaryWithDefaults instantiates a new IAMUserControllerApiUserSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIAMUserControllerApiUserSummaryWithDefaults() *IAMUserControllerApiUserSummary {
	this := IAMUserControllerApiUserSummary{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *IAMUserControllerApiUserSummary) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IAMUserControllerApiUserSummary) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *IAMUserControllerApiUserSummary) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *IAMUserControllerApiUserSummary) SetId(v string) {
	o.Id = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *IAMUserControllerApiUserSummary) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IAMUserControllerApiUserSummary) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *IAMUserControllerApiUserSummary) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *IAMUserControllerApiUserSummary) SetUsername(v string) {
	o.Username = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *IAMUserControllerApiUserSummary) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IAMUserControllerApiUserSummary) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *IAMUserControllerApiUserSummary) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *IAMUserControllerApiUserSummary) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetTenants returns the Tenants field value if set, zero value otherwise.
func (o *IAMUserControllerApiUserSummary) GetTenants() []ApiTenantSummary {
	if o == nil || IsNil(o.Tenants) {
		var ret []ApiTenantSummary
		return ret
	}
	return o.Tenants
}

// GetTenantsOk returns a tuple with the Tenants field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IAMUserControllerApiUserSummary) GetTenantsOk() ([]ApiTenantSummary, bool) {
	if o == nil || IsNil(o.Tenants) {
		return nil, false
	}
	return o.Tenants, true
}

// HasTenants returns a boolean if a field has been set.
func (o *IAMUserControllerApiUserSummary) HasTenants() bool {
	if o != nil && !IsNil(o.Tenants) {
		return true
	}

	return false
}

// SetTenants gets a reference to the given []ApiTenantSummary and assigns it to the Tenants field.
func (o *IAMUserControllerApiUserSummary) SetTenants(v []ApiTenantSummary) {
	o.Tenants = v
}

// GetAuths returns the Auths field value if set, zero value otherwise.
func (o *IAMUserControllerApiUserSummary) GetAuths() []IAMUserControllerApiUserAuth {
	if o == nil || IsNil(o.Auths) {
		var ret []IAMUserControllerApiUserAuth
		return ret
	}
	return o.Auths
}

// GetAuthsOk returns a tuple with the Auths field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IAMUserControllerApiUserSummary) GetAuthsOk() ([]IAMUserControllerApiUserAuth, bool) {
	if o == nil || IsNil(o.Auths) {
		return nil, false
	}
	return o.Auths, true
}

// HasAuths returns a boolean if a field has been set.
func (o *IAMUserControllerApiUserSummary) HasAuths() bool {
	if o != nil && !IsNil(o.Auths) {
		return true
	}

	return false
}

// SetAuths gets a reference to the given []IAMUserControllerApiUserAuth and assigns it to the Auths field.
func (o *IAMUserControllerApiUserSummary) SetAuths(v []IAMUserControllerApiUserAuth) {
	o.Auths = v
}

// GetSuperAdmin returns the SuperAdmin field value if set, zero value otherwise.
func (o *IAMUserControllerApiUserSummary) GetSuperAdmin() bool {
	if o == nil || IsNil(o.SuperAdmin) {
		var ret bool
		return ret
	}
	return *o.SuperAdmin
}

// GetSuperAdminOk returns a tuple with the SuperAdmin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IAMUserControllerApiUserSummary) GetSuperAdminOk() (*bool, bool) {
	if o == nil || IsNil(o.SuperAdmin) {
		return nil, false
	}
	return o.SuperAdmin, true
}

// HasSuperAdmin returns a boolean if a field has been set.
func (o *IAMUserControllerApiUserSummary) HasSuperAdmin() bool {
	if o != nil && !IsNil(o.SuperAdmin) {
		return true
	}

	return false
}

// SetSuperAdmin gets a reference to the given bool and assigns it to the SuperAdmin field.
func (o *IAMUserControllerApiUserSummary) SetSuperAdmin(v bool) {
	o.SuperAdmin = &v
}

func (o IAMUserControllerApiUserSummary) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IAMUserControllerApiUserSummary) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.Tenants) {
		toSerialize["tenants"] = o.Tenants
	}
	if !IsNil(o.Auths) {
		toSerialize["auths"] = o.Auths
	}
	if !IsNil(o.SuperAdmin) {
		toSerialize["superAdmin"] = o.SuperAdmin
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *IAMUserControllerApiUserSummary) UnmarshalJSON(data []byte) (err error) {
	varIAMUserControllerApiUserSummary := _IAMUserControllerApiUserSummary{}

	err = json.Unmarshal(data, &varIAMUserControllerApiUserSummary)

	if err != nil {
		return err
	}

	*o = IAMUserControllerApiUserSummary(varIAMUserControllerApiUserSummary)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "username")
		delete(additionalProperties, "displayName")
		delete(additionalProperties, "tenants")
		delete(additionalProperties, "auths")
		delete(additionalProperties, "superAdmin")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIAMUserControllerApiUserSummary struct {
	value *IAMUserControllerApiUserSummary
	isSet bool
}

func (v NullableIAMUserControllerApiUserSummary) Get() *IAMUserControllerApiUserSummary {
	return v.value
}

func (v *NullableIAMUserControllerApiUserSummary) Set(val *IAMUserControllerApiUserSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableIAMUserControllerApiUserSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableIAMUserControllerApiUserSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIAMUserControllerApiUserSummary(val *IAMUserControllerApiUserSummary) *NullableIAMUserControllerApiUserSummary {
	return &NullableIAMUserControllerApiUserSummary{value: val, isSet: true}
}

func (v NullableIAMUserControllerApiUserSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIAMUserControllerApiUserSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
