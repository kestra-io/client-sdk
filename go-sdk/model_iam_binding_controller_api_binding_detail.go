/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
)

// checks if the IAMBindingControllerApiBindingDetail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IAMBindingControllerApiBindingDetail{}

// IAMBindingControllerApiBindingDetail struct for IAMBindingControllerApiBindingDetail
type IAMBindingControllerApiBindingDetail struct {
	Id                   *string                                     `json:"id,omitempty"`
	Type                 *BindingType                                `json:"type,omitempty"`
	Namespace            NullableString                              `json:"namespace,omitempty"`
	Role                 *IAMBindingControllerApiRole                `json:"role,omitempty"`
	Group                NullableIAMBindingControllerApiBindingGroup `json:"group,omitempty"`
	User                 NullableIAMBindingControllerApiBindingUser  `json:"user,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _IAMBindingControllerApiBindingDetail IAMBindingControllerApiBindingDetail

// NewIAMBindingControllerApiBindingDetail instantiates a new IAMBindingControllerApiBindingDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIAMBindingControllerApiBindingDetail() *IAMBindingControllerApiBindingDetail {
	this := IAMBindingControllerApiBindingDetail{}
	return &this
}

// NewIAMBindingControllerApiBindingDetailWithDefaults instantiates a new IAMBindingControllerApiBindingDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIAMBindingControllerApiBindingDetailWithDefaults() *IAMBindingControllerApiBindingDetail {
	this := IAMBindingControllerApiBindingDetail{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *IAMBindingControllerApiBindingDetail) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IAMBindingControllerApiBindingDetail) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *IAMBindingControllerApiBindingDetail) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *IAMBindingControllerApiBindingDetail) SetId(v string) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *IAMBindingControllerApiBindingDetail) GetType() BindingType {
	if o == nil || IsNil(o.Type) {
		var ret BindingType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IAMBindingControllerApiBindingDetail) GetTypeOk() (*BindingType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *IAMBindingControllerApiBindingDetail) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given BindingType and assigns it to the Type field.
func (o *IAMBindingControllerApiBindingDetail) SetType(v BindingType) {
	o.Type = &v
}

// GetNamespace returns the Namespace field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IAMBindingControllerApiBindingDetail) GetNamespace() string {
	if o == nil || IsNil(o.Namespace.Get()) {
		var ret string
		return ret
	}
	return *o.Namespace.Get()
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IAMBindingControllerApiBindingDetail) GetNamespaceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Namespace.Get(), o.Namespace.IsSet()
}

// HasNamespace returns a boolean if a field has been set.
func (o *IAMBindingControllerApiBindingDetail) HasNamespace() bool {
	if o != nil && o.Namespace.IsSet() {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given NullableString and assigns it to the Namespace field.
func (o *IAMBindingControllerApiBindingDetail) SetNamespace(v string) {
	o.Namespace.Set(&v)
}

// SetNamespaceNil sets the value for Namespace to be an explicit nil
func (o *IAMBindingControllerApiBindingDetail) SetNamespaceNil() {
	o.Namespace.Set(nil)
}

// UnsetNamespace ensures that no value is present for Namespace, not even an explicit nil
func (o *IAMBindingControllerApiBindingDetail) UnsetNamespace() {
	o.Namespace.Unset()
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *IAMBindingControllerApiBindingDetail) GetRole() IAMBindingControllerApiRole {
	if o == nil || IsNil(o.Role) {
		var ret IAMBindingControllerApiRole
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IAMBindingControllerApiBindingDetail) GetRoleOk() (*IAMBindingControllerApiRole, bool) {
	if o == nil || IsNil(o.Role) {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *IAMBindingControllerApiBindingDetail) HasRole() bool {
	if o != nil && !IsNil(o.Role) {
		return true
	}

	return false
}

// SetRole gets a reference to the given IAMBindingControllerApiRole and assigns it to the Role field.
func (o *IAMBindingControllerApiBindingDetail) SetRole(v IAMBindingControllerApiRole) {
	o.Role = &v
}

// GetGroup returns the Group field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IAMBindingControllerApiBindingDetail) GetGroup() IAMBindingControllerApiBindingGroup {
	if o == nil || IsNil(o.Group.Get()) {
		var ret IAMBindingControllerApiBindingGroup
		return ret
	}
	return *o.Group.Get()
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IAMBindingControllerApiBindingDetail) GetGroupOk() (*IAMBindingControllerApiBindingGroup, bool) {
	if o == nil {
		return nil, false
	}
	return o.Group.Get(), o.Group.IsSet()
}

// HasGroup returns a boolean if a field has been set.
func (o *IAMBindingControllerApiBindingDetail) HasGroup() bool {
	if o != nil && o.Group.IsSet() {
		return true
	}

	return false
}

// SetGroup gets a reference to the given NullableIAMBindingControllerApiBindingGroup and assigns it to the Group field.
func (o *IAMBindingControllerApiBindingDetail) SetGroup(v IAMBindingControllerApiBindingGroup) {
	o.Group.Set(&v)
}

// SetGroupNil sets the value for Group to be an explicit nil
func (o *IAMBindingControllerApiBindingDetail) SetGroupNil() {
	o.Group.Set(nil)
}

// UnsetGroup ensures that no value is present for Group, not even an explicit nil
func (o *IAMBindingControllerApiBindingDetail) UnsetGroup() {
	o.Group.Unset()
}

// GetUser returns the User field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IAMBindingControllerApiBindingDetail) GetUser() IAMBindingControllerApiBindingUser {
	if o == nil || IsNil(o.User.Get()) {
		var ret IAMBindingControllerApiBindingUser
		return ret
	}
	return *o.User.Get()
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IAMBindingControllerApiBindingDetail) GetUserOk() (*IAMBindingControllerApiBindingUser, bool) {
	if o == nil {
		return nil, false
	}
	return o.User.Get(), o.User.IsSet()
}

// HasUser returns a boolean if a field has been set.
func (o *IAMBindingControllerApiBindingDetail) HasUser() bool {
	if o != nil && o.User.IsSet() {
		return true
	}

	return false
}

// SetUser gets a reference to the given NullableIAMBindingControllerApiBindingUser and assigns it to the User field.
func (o *IAMBindingControllerApiBindingDetail) SetUser(v IAMBindingControllerApiBindingUser) {
	o.User.Set(&v)
}

// SetUserNil sets the value for User to be an explicit nil
func (o *IAMBindingControllerApiBindingDetail) SetUserNil() {
	o.User.Set(nil)
}

// UnsetUser ensures that no value is present for User, not even an explicit nil
func (o *IAMBindingControllerApiBindingDetail) UnsetUser() {
	o.User.Unset()
}

func (o IAMBindingControllerApiBindingDetail) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IAMBindingControllerApiBindingDetail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if o.Namespace.IsSet() {
		toSerialize["namespace"] = o.Namespace.Get()
	}
	if !IsNil(o.Role) {
		toSerialize["role"] = o.Role
	}
	if o.Group.IsSet() {
		toSerialize["group"] = o.Group.Get()
	}
	if o.User.IsSet() {
		toSerialize["user"] = o.User.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *IAMBindingControllerApiBindingDetail) UnmarshalJSON(data []byte) (err error) {
	varIAMBindingControllerApiBindingDetail := _IAMBindingControllerApiBindingDetail{}

	err = json.Unmarshal(data, &varIAMBindingControllerApiBindingDetail)

	if err != nil {
		return err
	}

	*o = IAMBindingControllerApiBindingDetail(varIAMBindingControllerApiBindingDetail)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "type")
		delete(additionalProperties, "namespace")
		delete(additionalProperties, "role")
		delete(additionalProperties, "group")
		delete(additionalProperties, "user")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIAMBindingControllerApiBindingDetail struct {
	value *IAMBindingControllerApiBindingDetail
	isSet bool
}

func (v NullableIAMBindingControllerApiBindingDetail) Get() *IAMBindingControllerApiBindingDetail {
	return v.value
}

func (v *NullableIAMBindingControllerApiBindingDetail) Set(val *IAMBindingControllerApiBindingDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableIAMBindingControllerApiBindingDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableIAMBindingControllerApiBindingDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIAMBindingControllerApiBindingDetail(val *IAMBindingControllerApiBindingDetail) *NullableIAMBindingControllerApiBindingDetail {
	return &NullableIAMBindingControllerApiBindingDetail{value: val, isSet: true}
}

func (v NullableIAMBindingControllerApiBindingDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIAMBindingControllerApiBindingDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
