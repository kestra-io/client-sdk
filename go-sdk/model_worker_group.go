/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
)

// checks if the WorkerGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WorkerGroup{}

// WorkerGroup struct for WorkerGroup
type WorkerGroup struct {
	Key                  *string              `json:"key,omitempty"`
	Fallback             *WorkerGroupFallback `json:"fallback,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _WorkerGroup WorkerGroup

// NewWorkerGroup instantiates a new WorkerGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkerGroup() *WorkerGroup {
	this := WorkerGroup{}
	return &this
}

// NewWorkerGroupWithDefaults instantiates a new WorkerGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkerGroupWithDefaults() *WorkerGroup {
	this := WorkerGroup{}
	return &this
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *WorkerGroup) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkerGroup) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *WorkerGroup) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *WorkerGroup) SetKey(v string) {
	o.Key = &v
}

// GetFallback returns the Fallback field value if set, zero value otherwise.
func (o *WorkerGroup) GetFallback() WorkerGroupFallback {
	if o == nil || IsNil(o.Fallback) {
		var ret WorkerGroupFallback
		return ret
	}
	return *o.Fallback
}

// GetFallbackOk returns a tuple with the Fallback field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkerGroup) GetFallbackOk() (*WorkerGroupFallback, bool) {
	if o == nil || IsNil(o.Fallback) {
		return nil, false
	}
	return o.Fallback, true
}

// HasFallback returns a boolean if a field has been set.
func (o *WorkerGroup) HasFallback() bool {
	if o != nil && !IsNil(o.Fallback) {
		return true
	}

	return false
}

// SetFallback gets a reference to the given WorkerGroupFallback and assigns it to the Fallback field.
func (o *WorkerGroup) SetFallback(v WorkerGroupFallback) {
	o.Fallback = &v
}

func (o WorkerGroup) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WorkerGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.Fallback) {
		toSerialize["fallback"] = o.Fallback
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *WorkerGroup) UnmarshalJSON(data []byte) (err error) {
	varWorkerGroup := _WorkerGroup{}

	err = json.Unmarshal(data, &varWorkerGroup)

	if err != nil {
		return err
	}

	*o = WorkerGroup(varWorkerGroup)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "key")
		delete(additionalProperties, "fallback")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableWorkerGroup struct {
	value *WorkerGroup
	isSet bool
}

func (v NullableWorkerGroup) Get() *WorkerGroup {
	return v.value
}

func (v *NullableWorkerGroup) Set(val *WorkerGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkerGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkerGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkerGroup(val *WorkerGroup) *NullableWorkerGroup {
	return &NullableWorkerGroup{value: val, isSet: true}
}

func (v NullableWorkerGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkerGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
