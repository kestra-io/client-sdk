/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
)

// checks if the TestSuite type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TestSuite{}

// TestSuite struct for TestSuite
type TestSuite struct {
	Id                   string     `json:"id" validate:"regexp=^[a-zA-Z0-9][a-zA-Z0-9_-]*"`
	Description          *string    `json:"description,omitempty"`
	Namespace            string     `json:"namespace" validate:"regexp=^[a-z0-9][a-z0-9._-]*"`
	FlowId               string     `json:"flowId" validate:"regexp=^[a-zA-Z0-9][a-zA-Z0-9._-]*"`
	Source               *string    `json:"source,omitempty"`
	TestCases            []UnitTest `json:"testCases"`
	Deleted              *bool      `json:"deleted,omitempty"`
	Disabled             *bool      `json:"disabled,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _TestSuite TestSuite

// NewTestSuite instantiates a new TestSuite object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTestSuite(id string, namespace string, flowId string, testCases []UnitTest) *TestSuite {
	this := TestSuite{}
	this.Id = id
	this.Namespace = namespace
	this.FlowId = flowId
	this.TestCases = testCases
	return &this
}

// NewTestSuiteWithDefaults instantiates a new TestSuite object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTestSuiteWithDefaults() *TestSuite {
	this := TestSuite{}
	return &this
}

// GetId returns the Id field value
func (o *TestSuite) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *TestSuite) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *TestSuite) SetId(v string) {
	o.Id = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *TestSuite) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestSuite) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *TestSuite) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *TestSuite) SetDescription(v string) {
	o.Description = &v
}

// GetNamespace returns the Namespace field value
func (o *TestSuite) GetNamespace() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value
// and a boolean to check if the value has been set.
func (o *TestSuite) GetNamespaceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Namespace, true
}

// SetNamespace sets field value
func (o *TestSuite) SetNamespace(v string) {
	o.Namespace = v
}

// GetFlowId returns the FlowId field value
func (o *TestSuite) GetFlowId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FlowId
}

// GetFlowIdOk returns a tuple with the FlowId field value
// and a boolean to check if the value has been set.
func (o *TestSuite) GetFlowIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FlowId, true
}

// SetFlowId sets field value
func (o *TestSuite) SetFlowId(v string) {
	o.FlowId = v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *TestSuite) GetSource() string {
	if o == nil || IsNil(o.Source) {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestSuite) GetSourceOk() (*string, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *TestSuite) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *TestSuite) SetSource(v string) {
	o.Source = &v
}

// GetTestCases returns the TestCases field value
func (o *TestSuite) GetTestCases() []UnitTest {
	if o == nil {
		var ret []UnitTest
		return ret
	}

	return o.TestCases
}

// GetTestCasesOk returns a tuple with the TestCases field value
// and a boolean to check if the value has been set.
func (o *TestSuite) GetTestCasesOk() ([]UnitTest, bool) {
	if o == nil {
		return nil, false
	}
	return o.TestCases, true
}

// SetTestCases sets field value
func (o *TestSuite) SetTestCases(v []UnitTest) {
	o.TestCases = v
}

// GetDeleted returns the Deleted field value if set, zero value otherwise.
func (o *TestSuite) GetDeleted() bool {
	if o == nil || IsNil(o.Deleted) {
		var ret bool
		return ret
	}
	return *o.Deleted
}

// GetDeletedOk returns a tuple with the Deleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestSuite) GetDeletedOk() (*bool, bool) {
	if o == nil || IsNil(o.Deleted) {
		return nil, false
	}
	return o.Deleted, true
}

// HasDeleted returns a boolean if a field has been set.
func (o *TestSuite) HasDeleted() bool {
	if o != nil && !IsNil(o.Deleted) {
		return true
	}

	return false
}

// SetDeleted gets a reference to the given bool and assigns it to the Deleted field.
func (o *TestSuite) SetDeleted(v bool) {
	o.Deleted = &v
}

// GetDisabled returns the Disabled field value if set, zero value otherwise.
func (o *TestSuite) GetDisabled() bool {
	if o == nil || IsNil(o.Disabled) {
		var ret bool
		return ret
	}
	return *o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestSuite) GetDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Disabled) {
		return nil, false
	}
	return o.Disabled, true
}

// HasDisabled returns a boolean if a field has been set.
func (o *TestSuite) HasDisabled() bool {
	if o != nil && !IsNil(o.Disabled) {
		return true
	}

	return false
}

// SetDisabled gets a reference to the given bool and assigns it to the Disabled field.
func (o *TestSuite) SetDisabled(v bool) {
	o.Disabled = &v
}

func (o TestSuite) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TestSuite) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["namespace"] = o.Namespace
	toSerialize["flowId"] = o.FlowId
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	toSerialize["testCases"] = o.TestCases
	if !IsNil(o.Deleted) {
		toSerialize["deleted"] = o.Deleted
	}
	if !IsNil(o.Disabled) {
		toSerialize["disabled"] = o.Disabled
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TestSuite) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"namespace",
		"flowId",
		"testCases",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTestSuite := _TestSuite{}

	err = json.Unmarshal(data, &varTestSuite)

	if err != nil {
		return err
	}

	*o = TestSuite(varTestSuite)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "description")
		delete(additionalProperties, "namespace")
		delete(additionalProperties, "flowId")
		delete(additionalProperties, "source")
		delete(additionalProperties, "testCases")
		delete(additionalProperties, "deleted")
		delete(additionalProperties, "disabled")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTestSuite struct {
	value *TestSuite
	isSet bool
}

func (v NullableTestSuite) Get() *TestSuite {
	return v.value
}

func (v *NullableTestSuite) Set(val *TestSuite) {
	v.value = val
	v.isSet = true
}

func (v NullableTestSuite) IsSet() bool {
	return v.isSet
}

func (v *NullableTestSuite) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestSuite(val *TestSuite) *NullableTestSuite {
	return &NullableTestSuite{value: val, isSet: true}
}

func (v NullableTestSuite) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestSuite) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
