/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
)

// checks if the Fixtures type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Fixtures{}

// Fixtures struct for Fixtures
type Fixtures struct {
	Inputs               map[string]interface{} `json:"inputs,omitempty"`
	Files                *map[string]string     `json:"files,omitempty"`
	Tasks                []TaskFixture          `json:"tasks,omitempty"`
	Trigger              *TriggerFixture        `json:"trigger,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Fixtures Fixtures

// NewFixtures instantiates a new Fixtures object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFixtures() *Fixtures {
	this := Fixtures{}
	return &this
}

// NewFixturesWithDefaults instantiates a new Fixtures object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFixturesWithDefaults() *Fixtures {
	this := Fixtures{}
	return &this
}

// GetInputs returns the Inputs field value if set, zero value otherwise.
func (o *Fixtures) GetInputs() map[string]interface{} {
	if o == nil || IsNil(o.Inputs) {
		var ret map[string]interface{}
		return ret
	}
	return o.Inputs
}

// GetInputsOk returns a tuple with the Inputs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fixtures) GetInputsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Inputs) {
		return map[string]interface{}{}, false
	}
	return o.Inputs, true
}

// HasInputs returns a boolean if a field has been set.
func (o *Fixtures) HasInputs() bool {
	if o != nil && !IsNil(o.Inputs) {
		return true
	}

	return false
}

// SetInputs gets a reference to the given map[string]interface{} and assigns it to the Inputs field.
func (o *Fixtures) SetInputs(v map[string]interface{}) {
	o.Inputs = v
}

// GetFiles returns the Files field value if set, zero value otherwise.
func (o *Fixtures) GetFiles() map[string]string {
	if o == nil || IsNil(o.Files) {
		var ret map[string]string
		return ret
	}
	return *o.Files
}

// GetFilesOk returns a tuple with the Files field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fixtures) GetFilesOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Files) {
		return nil, false
	}
	return o.Files, true
}

// HasFiles returns a boolean if a field has been set.
func (o *Fixtures) HasFiles() bool {
	if o != nil && !IsNil(o.Files) {
		return true
	}

	return false
}

// SetFiles gets a reference to the given map[string]string and assigns it to the Files field.
func (o *Fixtures) SetFiles(v map[string]string) {
	o.Files = &v
}

// GetTasks returns the Tasks field value if set, zero value otherwise.
func (o *Fixtures) GetTasks() []TaskFixture {
	if o == nil || IsNil(o.Tasks) {
		var ret []TaskFixture
		return ret
	}
	return o.Tasks
}

// GetTasksOk returns a tuple with the Tasks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fixtures) GetTasksOk() ([]TaskFixture, bool) {
	if o == nil || IsNil(o.Tasks) {
		return nil, false
	}
	return o.Tasks, true
}

// HasTasks returns a boolean if a field has been set.
func (o *Fixtures) HasTasks() bool {
	if o != nil && !IsNil(o.Tasks) {
		return true
	}

	return false
}

// SetTasks gets a reference to the given []TaskFixture and assigns it to the Tasks field.
func (o *Fixtures) SetTasks(v []TaskFixture) {
	o.Tasks = v
}

// GetTrigger returns the Trigger field value if set, zero value otherwise.
func (o *Fixtures) GetTrigger() TriggerFixture {
	if o == nil || IsNil(o.Trigger) {
		var ret TriggerFixture
		return ret
	}
	return *o.Trigger
}

// GetTriggerOk returns a tuple with the Trigger field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fixtures) GetTriggerOk() (*TriggerFixture, bool) {
	if o == nil || IsNil(o.Trigger) {
		return nil, false
	}
	return o.Trigger, true
}

// HasTrigger returns a boolean if a field has been set.
func (o *Fixtures) HasTrigger() bool {
	if o != nil && !IsNil(o.Trigger) {
		return true
	}

	return false
}

// SetTrigger gets a reference to the given TriggerFixture and assigns it to the Trigger field.
func (o *Fixtures) SetTrigger(v TriggerFixture) {
	o.Trigger = &v
}

func (o Fixtures) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Fixtures) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Inputs) {
		toSerialize["inputs"] = o.Inputs
	}
	if !IsNil(o.Files) {
		toSerialize["files"] = o.Files
	}
	if !IsNil(o.Tasks) {
		toSerialize["tasks"] = o.Tasks
	}
	if !IsNil(o.Trigger) {
		toSerialize["trigger"] = o.Trigger
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Fixtures) UnmarshalJSON(data []byte) (err error) {
	varFixtures := _Fixtures{}

	err = json.Unmarshal(data, &varFixtures)

	if err != nil {
		return err
	}

	*o = Fixtures(varFixtures)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "inputs")
		delete(additionalProperties, "files")
		delete(additionalProperties, "tasks")
		delete(additionalProperties, "trigger")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFixtures struct {
	value *Fixtures
	isSet bool
}

func (v NullableFixtures) Get() *Fixtures {
	return v.value
}

func (v *NullableFixtures) Set(val *Fixtures) {
	v.value = val
	v.isSet = true
}

func (v NullableFixtures) IsSet() bool {
	return v.isSet
}

func (v *NullableFixtures) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFixtures(val *Fixtures) *NullableFixtures {
	return &NullableFixtures{value: val, isSet: true}
}

func (v NullableFixtures) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFixtures) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
