/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"time"
)

// checks if the IAMInvitationControllerApiInvitationDetail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IAMInvitationControllerApiInvitationDetail{}

// IAMInvitationControllerApiInvitationDetail struct for IAMInvitationControllerApiInvitationDetail
type IAMInvitationControllerApiInvitationDetail struct {
	Id                   *string                     `json:"id,omitempty"`
	Roles                []ApiRoleSummary            `json:"roles,omitempty"`
	Groups               []ApiGroupSummary           `json:"groups,omitempty"`
	TenantId             *string                     `json:"tenantId,omitempty"`
	Email                *string                     `json:"email,omitempty"`
	Status               *InvitationInvitationStatus `json:"status,omitempty"`
	SentAt               *time.Time                  `json:"sentAt,omitempty"`
	ExpiredAt            *time.Time                  `json:"expiredAt,omitempty"`
	AcceptedAt           *time.Time                  `json:"acceptedAt,omitempty"`
	SuperAdmin           *bool                       `json:"superAdmin,omitempty"`
	Link                 *string                     `json:"link,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _IAMInvitationControllerApiInvitationDetail IAMInvitationControllerApiInvitationDetail

// NewIAMInvitationControllerApiInvitationDetail instantiates a new IAMInvitationControllerApiInvitationDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIAMInvitationControllerApiInvitationDetail() *IAMInvitationControllerApiInvitationDetail {
	this := IAMInvitationControllerApiInvitationDetail{}
	return &this
}

// NewIAMInvitationControllerApiInvitationDetailWithDefaults instantiates a new IAMInvitationControllerApiInvitationDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIAMInvitationControllerApiInvitationDetailWithDefaults() *IAMInvitationControllerApiInvitationDetail {
	this := IAMInvitationControllerApiInvitationDetail{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *IAMInvitationControllerApiInvitationDetail) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IAMInvitationControllerApiInvitationDetail) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *IAMInvitationControllerApiInvitationDetail) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *IAMInvitationControllerApiInvitationDetail) SetId(v string) {
	o.Id = &v
}

// GetRoles returns the Roles field value if set, zero value otherwise.
func (o *IAMInvitationControllerApiInvitationDetail) GetRoles() []ApiRoleSummary {
	if o == nil || IsNil(o.Roles) {
		var ret []ApiRoleSummary
		return ret
	}
	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IAMInvitationControllerApiInvitationDetail) GetRolesOk() ([]ApiRoleSummary, bool) {
	if o == nil || IsNil(o.Roles) {
		return nil, false
	}
	return o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *IAMInvitationControllerApiInvitationDetail) HasRoles() bool {
	if o != nil && !IsNil(o.Roles) {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []ApiRoleSummary and assigns it to the Roles field.
func (o *IAMInvitationControllerApiInvitationDetail) SetRoles(v []ApiRoleSummary) {
	o.Roles = v
}

// GetGroups returns the Groups field value if set, zero value otherwise.
func (o *IAMInvitationControllerApiInvitationDetail) GetGroups() []ApiGroupSummary {
	if o == nil || IsNil(o.Groups) {
		var ret []ApiGroupSummary
		return ret
	}
	return o.Groups
}

// GetGroupsOk returns a tuple with the Groups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IAMInvitationControllerApiInvitationDetail) GetGroupsOk() ([]ApiGroupSummary, bool) {
	if o == nil || IsNil(o.Groups) {
		return nil, false
	}
	return o.Groups, true
}

// HasGroups returns a boolean if a field has been set.
func (o *IAMInvitationControllerApiInvitationDetail) HasGroups() bool {
	if o != nil && !IsNil(o.Groups) {
		return true
	}

	return false
}

// SetGroups gets a reference to the given []ApiGroupSummary and assigns it to the Groups field.
func (o *IAMInvitationControllerApiInvitationDetail) SetGroups(v []ApiGroupSummary) {
	o.Groups = v
}

// GetTenantId returns the TenantId field value if set, zero value otherwise.
func (o *IAMInvitationControllerApiInvitationDetail) GetTenantId() string {
	if o == nil || IsNil(o.TenantId) {
		var ret string
		return ret
	}
	return *o.TenantId
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IAMInvitationControllerApiInvitationDetail) GetTenantIdOk() (*string, bool) {
	if o == nil || IsNil(o.TenantId) {
		return nil, false
	}
	return o.TenantId, true
}

// HasTenantId returns a boolean if a field has been set.
func (o *IAMInvitationControllerApiInvitationDetail) HasTenantId() bool {
	if o != nil && !IsNil(o.TenantId) {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given string and assigns it to the TenantId field.
func (o *IAMInvitationControllerApiInvitationDetail) SetTenantId(v string) {
	o.TenantId = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *IAMInvitationControllerApiInvitationDetail) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IAMInvitationControllerApiInvitationDetail) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *IAMInvitationControllerApiInvitationDetail) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *IAMInvitationControllerApiInvitationDetail) SetEmail(v string) {
	o.Email = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *IAMInvitationControllerApiInvitationDetail) GetStatus() InvitationInvitationStatus {
	if o == nil || IsNil(o.Status) {
		var ret InvitationInvitationStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IAMInvitationControllerApiInvitationDetail) GetStatusOk() (*InvitationInvitationStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *IAMInvitationControllerApiInvitationDetail) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given InvitationInvitationStatus and assigns it to the Status field.
func (o *IAMInvitationControllerApiInvitationDetail) SetStatus(v InvitationInvitationStatus) {
	o.Status = &v
}

// GetSentAt returns the SentAt field value if set, zero value otherwise.
func (o *IAMInvitationControllerApiInvitationDetail) GetSentAt() time.Time {
	if o == nil || IsNil(o.SentAt) {
		var ret time.Time
		return ret
	}
	return *o.SentAt
}

// GetSentAtOk returns a tuple with the SentAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IAMInvitationControllerApiInvitationDetail) GetSentAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.SentAt) {
		return nil, false
	}
	return o.SentAt, true
}

// HasSentAt returns a boolean if a field has been set.
func (o *IAMInvitationControllerApiInvitationDetail) HasSentAt() bool {
	if o != nil && !IsNil(o.SentAt) {
		return true
	}

	return false
}

// SetSentAt gets a reference to the given time.Time and assigns it to the SentAt field.
func (o *IAMInvitationControllerApiInvitationDetail) SetSentAt(v time.Time) {
	o.SentAt = &v
}

// GetExpiredAt returns the ExpiredAt field value if set, zero value otherwise.
func (o *IAMInvitationControllerApiInvitationDetail) GetExpiredAt() time.Time {
	if o == nil || IsNil(o.ExpiredAt) {
		var ret time.Time
		return ret
	}
	return *o.ExpiredAt
}

// GetExpiredAtOk returns a tuple with the ExpiredAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IAMInvitationControllerApiInvitationDetail) GetExpiredAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ExpiredAt) {
		return nil, false
	}
	return o.ExpiredAt, true
}

// HasExpiredAt returns a boolean if a field has been set.
func (o *IAMInvitationControllerApiInvitationDetail) HasExpiredAt() bool {
	if o != nil && !IsNil(o.ExpiredAt) {
		return true
	}

	return false
}

// SetExpiredAt gets a reference to the given time.Time and assigns it to the ExpiredAt field.
func (o *IAMInvitationControllerApiInvitationDetail) SetExpiredAt(v time.Time) {
	o.ExpiredAt = &v
}

// GetAcceptedAt returns the AcceptedAt field value if set, zero value otherwise.
func (o *IAMInvitationControllerApiInvitationDetail) GetAcceptedAt() time.Time {
	if o == nil || IsNil(o.AcceptedAt) {
		var ret time.Time
		return ret
	}
	return *o.AcceptedAt
}

// GetAcceptedAtOk returns a tuple with the AcceptedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IAMInvitationControllerApiInvitationDetail) GetAcceptedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.AcceptedAt) {
		return nil, false
	}
	return o.AcceptedAt, true
}

// HasAcceptedAt returns a boolean if a field has been set.
func (o *IAMInvitationControllerApiInvitationDetail) HasAcceptedAt() bool {
	if o != nil && !IsNil(o.AcceptedAt) {
		return true
	}

	return false
}

// SetAcceptedAt gets a reference to the given time.Time and assigns it to the AcceptedAt field.
func (o *IAMInvitationControllerApiInvitationDetail) SetAcceptedAt(v time.Time) {
	o.AcceptedAt = &v
}

// GetSuperAdmin returns the SuperAdmin field value if set, zero value otherwise.
func (o *IAMInvitationControllerApiInvitationDetail) GetSuperAdmin() bool {
	if o == nil || IsNil(o.SuperAdmin) {
		var ret bool
		return ret
	}
	return *o.SuperAdmin
}

// GetSuperAdminOk returns a tuple with the SuperAdmin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IAMInvitationControllerApiInvitationDetail) GetSuperAdminOk() (*bool, bool) {
	if o == nil || IsNil(o.SuperAdmin) {
		return nil, false
	}
	return o.SuperAdmin, true
}

// HasSuperAdmin returns a boolean if a field has been set.
func (o *IAMInvitationControllerApiInvitationDetail) HasSuperAdmin() bool {
	if o != nil && !IsNil(o.SuperAdmin) {
		return true
	}

	return false
}

// SetSuperAdmin gets a reference to the given bool and assigns it to the SuperAdmin field.
func (o *IAMInvitationControllerApiInvitationDetail) SetSuperAdmin(v bool) {
	o.SuperAdmin = &v
}

// GetLink returns the Link field value if set, zero value otherwise.
func (o *IAMInvitationControllerApiInvitationDetail) GetLink() string {
	if o == nil || IsNil(o.Link) {
		var ret string
		return ret
	}
	return *o.Link
}

// GetLinkOk returns a tuple with the Link field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IAMInvitationControllerApiInvitationDetail) GetLinkOk() (*string, bool) {
	if o == nil || IsNil(o.Link) {
		return nil, false
	}
	return o.Link, true
}

// HasLink returns a boolean if a field has been set.
func (o *IAMInvitationControllerApiInvitationDetail) HasLink() bool {
	if o != nil && !IsNil(o.Link) {
		return true
	}

	return false
}

// SetLink gets a reference to the given string and assigns it to the Link field.
func (o *IAMInvitationControllerApiInvitationDetail) SetLink(v string) {
	o.Link = &v
}

func (o IAMInvitationControllerApiInvitationDetail) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IAMInvitationControllerApiInvitationDetail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Roles) {
		toSerialize["roles"] = o.Roles
	}
	if !IsNil(o.Groups) {
		toSerialize["groups"] = o.Groups
	}
	if !IsNil(o.TenantId) {
		toSerialize["tenantId"] = o.TenantId
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.SentAt) {
		toSerialize["sentAt"] = o.SentAt
	}
	if !IsNil(o.ExpiredAt) {
		toSerialize["expiredAt"] = o.ExpiredAt
	}
	if !IsNil(o.AcceptedAt) {
		toSerialize["acceptedAt"] = o.AcceptedAt
	}
	if !IsNil(o.SuperAdmin) {
		toSerialize["superAdmin"] = o.SuperAdmin
	}
	if !IsNil(o.Link) {
		toSerialize["link"] = o.Link
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *IAMInvitationControllerApiInvitationDetail) UnmarshalJSON(data []byte) (err error) {
	varIAMInvitationControllerApiInvitationDetail := _IAMInvitationControllerApiInvitationDetail{}

	err = json.Unmarshal(data, &varIAMInvitationControllerApiInvitationDetail)

	if err != nil {
		return err
	}

	*o = IAMInvitationControllerApiInvitationDetail(varIAMInvitationControllerApiInvitationDetail)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "roles")
		delete(additionalProperties, "groups")
		delete(additionalProperties, "tenantId")
		delete(additionalProperties, "email")
		delete(additionalProperties, "status")
		delete(additionalProperties, "sentAt")
		delete(additionalProperties, "expiredAt")
		delete(additionalProperties, "acceptedAt")
		delete(additionalProperties, "superAdmin")
		delete(additionalProperties, "link")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIAMInvitationControllerApiInvitationDetail struct {
	value *IAMInvitationControllerApiInvitationDetail
	isSet bool
}

func (v NullableIAMInvitationControllerApiInvitationDetail) Get() *IAMInvitationControllerApiInvitationDetail {
	return v.value
}

func (v *NullableIAMInvitationControllerApiInvitationDetail) Set(val *IAMInvitationControllerApiInvitationDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableIAMInvitationControllerApiInvitationDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableIAMInvitationControllerApiInvitationDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIAMInvitationControllerApiInvitationDetail(val *IAMInvitationControllerApiInvitationDetail) *NullableIAMInvitationControllerApiInvitationDetail {
	return &NullableIAMInvitationControllerApiInvitationDetail{value: val, isSet: true}
}

func (v NullableIAMInvitationControllerApiInvitationDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIAMInvitationControllerApiInvitationDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
