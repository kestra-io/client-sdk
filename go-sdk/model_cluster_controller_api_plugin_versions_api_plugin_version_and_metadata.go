/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
)

// checks if the ClusterControllerApiPluginVersionsApiPluginVersionAndMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClusterControllerApiPluginVersionsApiPluginVersionAndMetadata{}

// ClusterControllerApiPluginVersionsApiPluginVersionAndMetadata struct for ClusterControllerApiPluginVersionsApiPluginVersionAndMetadata
type ClusterControllerApiPluginVersionsApiPluginVersionAndMetadata struct {
	Version              string                 `json:"version"`
	Metadata             PluginArtifactMetadata `json:"metadata"`
	AdditionalProperties map[string]interface{}
}

type _ClusterControllerApiPluginVersionsApiPluginVersionAndMetadata ClusterControllerApiPluginVersionsApiPluginVersionAndMetadata

// NewClusterControllerApiPluginVersionsApiPluginVersionAndMetadata instantiates a new ClusterControllerApiPluginVersionsApiPluginVersionAndMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterControllerApiPluginVersionsApiPluginVersionAndMetadata(version string, metadata PluginArtifactMetadata) *ClusterControllerApiPluginVersionsApiPluginVersionAndMetadata {
	this := ClusterControllerApiPluginVersionsApiPluginVersionAndMetadata{}
	this.Version = version
	this.Metadata = metadata
	return &this
}

// NewClusterControllerApiPluginVersionsApiPluginVersionAndMetadataWithDefaults instantiates a new ClusterControllerApiPluginVersionsApiPluginVersionAndMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterControllerApiPluginVersionsApiPluginVersionAndMetadataWithDefaults() *ClusterControllerApiPluginVersionsApiPluginVersionAndMetadata {
	this := ClusterControllerApiPluginVersionsApiPluginVersionAndMetadata{}
	return &this
}

// GetVersion returns the Version field value
func (o *ClusterControllerApiPluginVersionsApiPluginVersionAndMetadata) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *ClusterControllerApiPluginVersionsApiPluginVersionAndMetadata) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *ClusterControllerApiPluginVersionsApiPluginVersionAndMetadata) SetVersion(v string) {
	o.Version = v
}

// GetMetadata returns the Metadata field value
func (o *ClusterControllerApiPluginVersionsApiPluginVersionAndMetadata) GetMetadata() PluginArtifactMetadata {
	if o == nil {
		var ret PluginArtifactMetadata
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *ClusterControllerApiPluginVersionsApiPluginVersionAndMetadata) GetMetadataOk() (*PluginArtifactMetadata, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Metadata, true
}

// SetMetadata sets field value
func (o *ClusterControllerApiPluginVersionsApiPluginVersionAndMetadata) SetMetadata(v PluginArtifactMetadata) {
	o.Metadata = v
}

func (o ClusterControllerApiPluginVersionsApiPluginVersionAndMetadata) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClusterControllerApiPluginVersionsApiPluginVersionAndMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["version"] = o.Version
	toSerialize["metadata"] = o.Metadata

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ClusterControllerApiPluginVersionsApiPluginVersionAndMetadata) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"version",
		"metadata",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varClusterControllerApiPluginVersionsApiPluginVersionAndMetadata := _ClusterControllerApiPluginVersionsApiPluginVersionAndMetadata{}

	err = json.Unmarshal(data, &varClusterControllerApiPluginVersionsApiPluginVersionAndMetadata)

	if err != nil {
		return err
	}

	*o = ClusterControllerApiPluginVersionsApiPluginVersionAndMetadata(varClusterControllerApiPluginVersionsApiPluginVersionAndMetadata)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "version")
		delete(additionalProperties, "metadata")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableClusterControllerApiPluginVersionsApiPluginVersionAndMetadata struct {
	value *ClusterControllerApiPluginVersionsApiPluginVersionAndMetadata
	isSet bool
}

func (v NullableClusterControllerApiPluginVersionsApiPluginVersionAndMetadata) Get() *ClusterControllerApiPluginVersionsApiPluginVersionAndMetadata {
	return v.value
}

func (v *NullableClusterControllerApiPluginVersionsApiPluginVersionAndMetadata) Set(val *ClusterControllerApiPluginVersionsApiPluginVersionAndMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterControllerApiPluginVersionsApiPluginVersionAndMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterControllerApiPluginVersionsApiPluginVersionAndMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterControllerApiPluginVersionsApiPluginVersionAndMetadata(val *ClusterControllerApiPluginVersionsApiPluginVersionAndMetadata) *NullableClusterControllerApiPluginVersionsApiPluginVersionAndMetadata {
	return &NullableClusterControllerApiPluginVersionsApiPluginVersionAndMetadata{value: val, isSet: true}
}

func (v NullableClusterControllerApiPluginVersionsApiPluginVersionAndMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterControllerApiPluginVersionsApiPluginVersionAndMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
