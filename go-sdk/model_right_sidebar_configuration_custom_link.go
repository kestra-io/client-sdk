/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
)

// checks if the RightSidebarConfigurationCustomLink type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RightSidebarConfigurationCustomLink{}

// RightSidebarConfigurationCustomLink struct for RightSidebarConfigurationCustomLink
type RightSidebarConfigurationCustomLink struct {
	Title                string `json:"title"`
	Url                  string `json:"url"`
	AdditionalProperties map[string]interface{}
}

type _RightSidebarConfigurationCustomLink RightSidebarConfigurationCustomLink

// NewRightSidebarConfigurationCustomLink instantiates a new RightSidebarConfigurationCustomLink object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRightSidebarConfigurationCustomLink(title string, url string) *RightSidebarConfigurationCustomLink {
	this := RightSidebarConfigurationCustomLink{}
	this.Title = title
	this.Url = url
	return &this
}

// NewRightSidebarConfigurationCustomLinkWithDefaults instantiates a new RightSidebarConfigurationCustomLink object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRightSidebarConfigurationCustomLinkWithDefaults() *RightSidebarConfigurationCustomLink {
	this := RightSidebarConfigurationCustomLink{}
	return &this
}

// GetTitle returns the Title field value
func (o *RightSidebarConfigurationCustomLink) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *RightSidebarConfigurationCustomLink) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *RightSidebarConfigurationCustomLink) SetTitle(v string) {
	o.Title = v
}

// GetUrl returns the Url field value
func (o *RightSidebarConfigurationCustomLink) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *RightSidebarConfigurationCustomLink) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *RightSidebarConfigurationCustomLink) SetUrl(v string) {
	o.Url = v
}

func (o RightSidebarConfigurationCustomLink) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RightSidebarConfigurationCustomLink) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["title"] = o.Title
	toSerialize["url"] = o.Url

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RightSidebarConfigurationCustomLink) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"title",
		"url",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRightSidebarConfigurationCustomLink := _RightSidebarConfigurationCustomLink{}

	err = json.Unmarshal(data, &varRightSidebarConfigurationCustomLink)

	if err != nil {
		return err
	}

	*o = RightSidebarConfigurationCustomLink(varRightSidebarConfigurationCustomLink)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "title")
		delete(additionalProperties, "url")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRightSidebarConfigurationCustomLink struct {
	value *RightSidebarConfigurationCustomLink
	isSet bool
}

func (v NullableRightSidebarConfigurationCustomLink) Get() *RightSidebarConfigurationCustomLink {
	return v.value
}

func (v *NullableRightSidebarConfigurationCustomLink) Set(val *RightSidebarConfigurationCustomLink) {
	v.value = val
	v.isSet = true
}

func (v NullableRightSidebarConfigurationCustomLink) IsSet() bool {
	return v.isSet
}

func (v *NullableRightSidebarConfigurationCustomLink) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRightSidebarConfigurationCustomLink(val *RightSidebarConfigurationCustomLink) *NullableRightSidebarConfigurationCustomLink {
	return &NullableRightSidebarConfigurationCustomLink{value: val, isSet: true}
}

func (v NullableRightSidebarConfigurationCustomLink) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRightSidebarConfigurationCustomLink) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
