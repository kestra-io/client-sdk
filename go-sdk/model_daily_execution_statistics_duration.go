/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
)

// checks if the DailyExecutionStatisticsDuration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DailyExecutionStatisticsDuration{}

// DailyExecutionStatisticsDuration struct for DailyExecutionStatisticsDuration
type DailyExecutionStatisticsDuration struct {
	Min                  string `json:"min"`
	Avg                  string `json:"avg"`
	Max                  string `json:"max"`
	Sum                  string `json:"sum"`
	Count                int64  `json:"count"`
	AdditionalProperties map[string]interface{}
}

type _DailyExecutionStatisticsDuration DailyExecutionStatisticsDuration

// NewDailyExecutionStatisticsDuration instantiates a new DailyExecutionStatisticsDuration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDailyExecutionStatisticsDuration(min string, avg string, max string, sum string, count int64) *DailyExecutionStatisticsDuration {
	this := DailyExecutionStatisticsDuration{}
	this.Min = min
	this.Avg = avg
	this.Max = max
	this.Sum = sum
	this.Count = count
	return &this
}

// NewDailyExecutionStatisticsDurationWithDefaults instantiates a new DailyExecutionStatisticsDuration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDailyExecutionStatisticsDurationWithDefaults() *DailyExecutionStatisticsDuration {
	this := DailyExecutionStatisticsDuration{}
	return &this
}

// GetMin returns the Min field value
func (o *DailyExecutionStatisticsDuration) GetMin() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Min
}

// GetMinOk returns a tuple with the Min field value
// and a boolean to check if the value has been set.
func (o *DailyExecutionStatisticsDuration) GetMinOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Min, true
}

// SetMin sets field value
func (o *DailyExecutionStatisticsDuration) SetMin(v string) {
	o.Min = v
}

// GetAvg returns the Avg field value
func (o *DailyExecutionStatisticsDuration) GetAvg() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Avg
}

// GetAvgOk returns a tuple with the Avg field value
// and a boolean to check if the value has been set.
func (o *DailyExecutionStatisticsDuration) GetAvgOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Avg, true
}

// SetAvg sets field value
func (o *DailyExecutionStatisticsDuration) SetAvg(v string) {
	o.Avg = v
}

// GetMax returns the Max field value
func (o *DailyExecutionStatisticsDuration) GetMax() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Max
}

// GetMaxOk returns a tuple with the Max field value
// and a boolean to check if the value has been set.
func (o *DailyExecutionStatisticsDuration) GetMaxOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Max, true
}

// SetMax sets field value
func (o *DailyExecutionStatisticsDuration) SetMax(v string) {
	o.Max = v
}

// GetSum returns the Sum field value
func (o *DailyExecutionStatisticsDuration) GetSum() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Sum
}

// GetSumOk returns a tuple with the Sum field value
// and a boolean to check if the value has been set.
func (o *DailyExecutionStatisticsDuration) GetSumOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sum, true
}

// SetSum sets field value
func (o *DailyExecutionStatisticsDuration) SetSum(v string) {
	o.Sum = v
}

// GetCount returns the Count field value
func (o *DailyExecutionStatisticsDuration) GetCount() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *DailyExecutionStatisticsDuration) GetCountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *DailyExecutionStatisticsDuration) SetCount(v int64) {
	o.Count = v
}

func (o DailyExecutionStatisticsDuration) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DailyExecutionStatisticsDuration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["min"] = o.Min
	toSerialize["avg"] = o.Avg
	toSerialize["max"] = o.Max
	toSerialize["sum"] = o.Sum
	toSerialize["count"] = o.Count

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DailyExecutionStatisticsDuration) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"min",
		"avg",
		"max",
		"sum",
		"count",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDailyExecutionStatisticsDuration := _DailyExecutionStatisticsDuration{}

	err = json.Unmarshal(data, &varDailyExecutionStatisticsDuration)

	if err != nil {
		return err
	}

	*o = DailyExecutionStatisticsDuration(varDailyExecutionStatisticsDuration)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "min")
		delete(additionalProperties, "avg")
		delete(additionalProperties, "max")
		delete(additionalProperties, "sum")
		delete(additionalProperties, "count")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDailyExecutionStatisticsDuration struct {
	value *DailyExecutionStatisticsDuration
	isSet bool
}

func (v NullableDailyExecutionStatisticsDuration) Get() *DailyExecutionStatisticsDuration {
	return v.value
}

func (v *NullableDailyExecutionStatisticsDuration) Set(val *DailyExecutionStatisticsDuration) {
	v.value = val
	v.isSet = true
}

func (v NullableDailyExecutionStatisticsDuration) IsSet() bool {
	return v.isSet
}

func (v *NullableDailyExecutionStatisticsDuration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDailyExecutionStatisticsDuration(val *DailyExecutionStatisticsDuration) *NullableDailyExecutionStatisticsDuration {
	return &NullableDailyExecutionStatisticsDuration{value: val, isSet: true}
}

func (v NullableDailyExecutionStatisticsDuration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDailyExecutionStatisticsDuration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
