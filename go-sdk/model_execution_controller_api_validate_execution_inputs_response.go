/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
)

// checks if the ExecutionControllerApiValidateExecutionInputsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExecutionControllerApiValidateExecutionInputsResponse{}

// ExecutionControllerApiValidateExecutionInputsResponse struct for ExecutionControllerApiValidateExecutionInputsResponse
type ExecutionControllerApiValidateExecutionInputsResponse struct {
	Id                   string                                                                  `json:"id"`
	Namespace            string                                                                  `json:"namespace"`
	Inputs               []ExecutionControllerApiValidateExecutionInputsResponseApiInputAndValue `json:"inputs"`
	AdditionalProperties map[string]interface{}
}

type _ExecutionControllerApiValidateExecutionInputsResponse ExecutionControllerApiValidateExecutionInputsResponse

// NewExecutionControllerApiValidateExecutionInputsResponse instantiates a new ExecutionControllerApiValidateExecutionInputsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExecutionControllerApiValidateExecutionInputsResponse(id string, namespace string, inputs []ExecutionControllerApiValidateExecutionInputsResponseApiInputAndValue) *ExecutionControllerApiValidateExecutionInputsResponse {
	this := ExecutionControllerApiValidateExecutionInputsResponse{}
	this.Id = id
	this.Namespace = namespace
	this.Inputs = inputs
	return &this
}

// NewExecutionControllerApiValidateExecutionInputsResponseWithDefaults instantiates a new ExecutionControllerApiValidateExecutionInputsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExecutionControllerApiValidateExecutionInputsResponseWithDefaults() *ExecutionControllerApiValidateExecutionInputsResponse {
	this := ExecutionControllerApiValidateExecutionInputsResponse{}
	return &this
}

// GetId returns the Id field value
func (o *ExecutionControllerApiValidateExecutionInputsResponse) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ExecutionControllerApiValidateExecutionInputsResponse) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ExecutionControllerApiValidateExecutionInputsResponse) SetId(v string) {
	o.Id = v
}

// GetNamespace returns the Namespace field value
func (o *ExecutionControllerApiValidateExecutionInputsResponse) GetNamespace() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value
// and a boolean to check if the value has been set.
func (o *ExecutionControllerApiValidateExecutionInputsResponse) GetNamespaceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Namespace, true
}

// SetNamespace sets field value
func (o *ExecutionControllerApiValidateExecutionInputsResponse) SetNamespace(v string) {
	o.Namespace = v
}

// GetInputs returns the Inputs field value
func (o *ExecutionControllerApiValidateExecutionInputsResponse) GetInputs() []ExecutionControllerApiValidateExecutionInputsResponseApiInputAndValue {
	if o == nil {
		var ret []ExecutionControllerApiValidateExecutionInputsResponseApiInputAndValue
		return ret
	}

	return o.Inputs
}

// GetInputsOk returns a tuple with the Inputs field value
// and a boolean to check if the value has been set.
func (o *ExecutionControllerApiValidateExecutionInputsResponse) GetInputsOk() ([]ExecutionControllerApiValidateExecutionInputsResponseApiInputAndValue, bool) {
	if o == nil {
		return nil, false
	}
	return o.Inputs, true
}

// SetInputs sets field value
func (o *ExecutionControllerApiValidateExecutionInputsResponse) SetInputs(v []ExecutionControllerApiValidateExecutionInputsResponseApiInputAndValue) {
	o.Inputs = v
}

func (o ExecutionControllerApiValidateExecutionInputsResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExecutionControllerApiValidateExecutionInputsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["namespace"] = o.Namespace
	toSerialize["inputs"] = o.Inputs

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ExecutionControllerApiValidateExecutionInputsResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"namespace",
		"inputs",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varExecutionControllerApiValidateExecutionInputsResponse := _ExecutionControllerApiValidateExecutionInputsResponse{}

	err = json.Unmarshal(data, &varExecutionControllerApiValidateExecutionInputsResponse)

	if err != nil {
		return err
	}

	*o = ExecutionControllerApiValidateExecutionInputsResponse(varExecutionControllerApiValidateExecutionInputsResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "namespace")
		delete(additionalProperties, "inputs")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableExecutionControllerApiValidateExecutionInputsResponse struct {
	value *ExecutionControllerApiValidateExecutionInputsResponse
	isSet bool
}

func (v NullableExecutionControllerApiValidateExecutionInputsResponse) Get() *ExecutionControllerApiValidateExecutionInputsResponse {
	return v.value
}

func (v *NullableExecutionControllerApiValidateExecutionInputsResponse) Set(val *ExecutionControllerApiValidateExecutionInputsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableExecutionControllerApiValidateExecutionInputsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableExecutionControllerApiValidateExecutionInputsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExecutionControllerApiValidateExecutionInputsResponse(val *ExecutionControllerApiValidateExecutionInputsResponse) *NullableExecutionControllerApiValidateExecutionInputsResponse {
	return &NullableExecutionControllerApiValidateExecutionInputsResponse{value: val, isSet: true}
}

func (v NullableExecutionControllerApiValidateExecutionInputsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExecutionControllerApiValidateExecutionInputsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
