/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
)

// checks if the PropertyBoolean type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PropertyBoolean{}

// PropertyBoolean struct for PropertyBoolean
type PropertyBoolean struct {
	Expression           *string `json:"expression,omitempty"`
	Value                *bool   `json:"value,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PropertyBoolean PropertyBoolean

// NewPropertyBoolean instantiates a new PropertyBoolean object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPropertyBoolean() *PropertyBoolean {
	this := PropertyBoolean{}
	return &this
}

// NewPropertyBooleanWithDefaults instantiates a new PropertyBoolean object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPropertyBooleanWithDefaults() *PropertyBoolean {
	this := PropertyBoolean{}
	return &this
}

// GetExpression returns the Expression field value if set, zero value otherwise.
func (o *PropertyBoolean) GetExpression() string {
	if o == nil || IsNil(o.Expression) {
		var ret string
		return ret
	}
	return *o.Expression
}

// GetExpressionOk returns a tuple with the Expression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertyBoolean) GetExpressionOk() (*string, bool) {
	if o == nil || IsNil(o.Expression) {
		return nil, false
	}
	return o.Expression, true
}

// HasExpression returns a boolean if a field has been set.
func (o *PropertyBoolean) HasExpression() bool {
	if o != nil && !IsNil(o.Expression) {
		return true
	}

	return false
}

// SetExpression gets a reference to the given string and assigns it to the Expression field.
func (o *PropertyBoolean) SetExpression(v string) {
	o.Expression = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *PropertyBoolean) GetValue() bool {
	if o == nil || IsNil(o.Value) {
		var ret bool
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertyBoolean) GetValueOk() (*bool, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *PropertyBoolean) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given bool and assigns it to the Value field.
func (o *PropertyBoolean) SetValue(v bool) {
	o.Value = &v
}

func (o PropertyBoolean) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PropertyBoolean) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Expression) {
		toSerialize["expression"] = o.Expression
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PropertyBoolean) UnmarshalJSON(data []byte) (err error) {
	varPropertyBoolean := _PropertyBoolean{}

	err = json.Unmarshal(data, &varPropertyBoolean)

	if err != nil {
		return err
	}

	*o = PropertyBoolean(varPropertyBoolean)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "expression")
		delete(additionalProperties, "value")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePropertyBoolean struct {
	value *PropertyBoolean
	isSet bool
}

func (v NullablePropertyBoolean) Get() *PropertyBoolean {
	return v.value
}

func (v *NullablePropertyBoolean) Set(val *PropertyBoolean) {
	v.value = val
	v.isSet = true
}

func (v NullablePropertyBoolean) IsSet() bool {
	return v.isSet
}

func (v *NullablePropertyBoolean) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePropertyBoolean(val *PropertyBoolean) *NullablePropertyBoolean {
	return &NullablePropertyBoolean{value: val, isSet: true}
}

func (v NullablePropertyBoolean) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePropertyBoolean) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
