/*
Kestra EE

All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
)

// checks if the RolePermissions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RolePermissions{}

// RolePermissions struct for RolePermissions
type RolePermissions struct {
	FLOW           []string `json:"FLOW,omitempty"`
	BLUEPRINT      []string `json:"BLUEPRINT,omitempty"`
	TEMPLATE       []string `json:"TEMPLATE,omitempty"`
	NAMESPACE      []string `json:"NAMESPACE,omitempty"`
	EXECUTION      []string `json:"EXECUTION,omitempty"`
	USER           []string `json:"USER,omitempty"`
	GROUP          []string `json:"GROUP,omitempty"`
	ROLE           []string `json:"ROLE,omitempty"`
	BINDING        []string `json:"BINDING,omitempty"`
	AUDITLOG       []string `json:"AUDITLOG,omitempty"`
	SECRET         []string `json:"SECRET,omitempty"`
	KVSTORE        []string `json:"KVSTORE,omitempty"`
	IMPERSONATE    []string `json:"IMPERSONATE,omitempty"`
	SETTING        []string `json:"SETTING,omitempty"`
	INFRASTRUCTURE []string `json:"INFRASTRUCTURE,omitempty"`
	APP            []string `json:"APP,omitempty"`
	APPEXECUTION   []string `json:"APPEXECUTION,omitempty"`
	TEST           []string `json:"TEST,omitempty"`
	ME             []string `json:"ME,omitempty"`
	APITOKEN       []string `json:"APITOKEN,omitempty"`
	DASHBOARD      []string `json:"DASHBOARD,omitempty"`
	TENANT         []string `json:"TENANT,omitempty"`
	UNKNOWN        []string `json:"UNKNOWN,omitempty"`
}

// NewRolePermissions instantiates a new RolePermissions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRolePermissions() *RolePermissions {
	this := RolePermissions{}
	return &this
}

// NewRolePermissionsWithDefaults instantiates a new RolePermissions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRolePermissionsWithDefaults() *RolePermissions {
	this := RolePermissions{}
	return &this
}

// GetFLOW returns the FLOW field value if set, zero value otherwise.
func (o *RolePermissions) GetFLOW() []string {
	if o == nil || IsNil(o.FLOW) {
		var ret []string
		return ret
	}
	return o.FLOW
}

// GetFLOWOk returns a tuple with the FLOW field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolePermissions) GetFLOWOk() ([]string, bool) {
	if o == nil || IsNil(o.FLOW) {
		return nil, false
	}
	return o.FLOW, true
}

// HasFLOW returns a boolean if a field has been set.
func (o *RolePermissions) HasFLOW() bool {
	if o != nil && !IsNil(o.FLOW) {
		return true
	}

	return false
}

// SetFLOW gets a reference to the given []string and assigns it to the FLOW field.
func (o *RolePermissions) SetFLOW(v []string) {
	o.FLOW = v
}

// GetBLUEPRINT returns the BLUEPRINT field value if set, zero value otherwise.
func (o *RolePermissions) GetBLUEPRINT() []string {
	if o == nil || IsNil(o.BLUEPRINT) {
		var ret []string
		return ret
	}
	return o.BLUEPRINT
}

// GetBLUEPRINTOk returns a tuple with the BLUEPRINT field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolePermissions) GetBLUEPRINTOk() ([]string, bool) {
	if o == nil || IsNil(o.BLUEPRINT) {
		return nil, false
	}
	return o.BLUEPRINT, true
}

// HasBLUEPRINT returns a boolean if a field has been set.
func (o *RolePermissions) HasBLUEPRINT() bool {
	if o != nil && !IsNil(o.BLUEPRINT) {
		return true
	}

	return false
}

// SetBLUEPRINT gets a reference to the given []string and assigns it to the BLUEPRINT field.
func (o *RolePermissions) SetBLUEPRINT(v []string) {
	o.BLUEPRINT = v
}

// GetTEMPLATE returns the TEMPLATE field value if set, zero value otherwise.
func (o *RolePermissions) GetTEMPLATE() []string {
	if o == nil || IsNil(o.TEMPLATE) {
		var ret []string
		return ret
	}
	return o.TEMPLATE
}

// GetTEMPLATEOk returns a tuple with the TEMPLATE field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolePermissions) GetTEMPLATEOk() ([]string, bool) {
	if o == nil || IsNil(o.TEMPLATE) {
		return nil, false
	}
	return o.TEMPLATE, true
}

// HasTEMPLATE returns a boolean if a field has been set.
func (o *RolePermissions) HasTEMPLATE() bool {
	if o != nil && !IsNil(o.TEMPLATE) {
		return true
	}

	return false
}

// SetTEMPLATE gets a reference to the given []string and assigns it to the TEMPLATE field.
func (o *RolePermissions) SetTEMPLATE(v []string) {
	o.TEMPLATE = v
}

// GetNAMESPACE returns the NAMESPACE field value if set, zero value otherwise.
func (o *RolePermissions) GetNAMESPACE() []string {
	if o == nil || IsNil(o.NAMESPACE) {
		var ret []string
		return ret
	}
	return o.NAMESPACE
}

// GetNAMESPACEOk returns a tuple with the NAMESPACE field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolePermissions) GetNAMESPACEOk() ([]string, bool) {
	if o == nil || IsNil(o.NAMESPACE) {
		return nil, false
	}
	return o.NAMESPACE, true
}

// HasNAMESPACE returns a boolean if a field has been set.
func (o *RolePermissions) HasNAMESPACE() bool {
	if o != nil && !IsNil(o.NAMESPACE) {
		return true
	}

	return false
}

// SetNAMESPACE gets a reference to the given []string and assigns it to the NAMESPACE field.
func (o *RolePermissions) SetNAMESPACE(v []string) {
	o.NAMESPACE = v
}

// GetEXECUTION returns the EXECUTION field value if set, zero value otherwise.
func (o *RolePermissions) GetEXECUTION() []string {
	if o == nil || IsNil(o.EXECUTION) {
		var ret []string
		return ret
	}
	return o.EXECUTION
}

// GetEXECUTIONOk returns a tuple with the EXECUTION field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolePermissions) GetEXECUTIONOk() ([]string, bool) {
	if o == nil || IsNil(o.EXECUTION) {
		return nil, false
	}
	return o.EXECUTION, true
}

// HasEXECUTION returns a boolean if a field has been set.
func (o *RolePermissions) HasEXECUTION() bool {
	if o != nil && !IsNil(o.EXECUTION) {
		return true
	}

	return false
}

// SetEXECUTION gets a reference to the given []string and assigns it to the EXECUTION field.
func (o *RolePermissions) SetEXECUTION(v []string) {
	o.EXECUTION = v
}

// GetUSER returns the USER field value if set, zero value otherwise.
func (o *RolePermissions) GetUSER() []string {
	if o == nil || IsNil(o.USER) {
		var ret []string
		return ret
	}
	return o.USER
}

// GetUSEROk returns a tuple with the USER field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolePermissions) GetUSEROk() ([]string, bool) {
	if o == nil || IsNil(o.USER) {
		return nil, false
	}
	return o.USER, true
}

// HasUSER returns a boolean if a field has been set.
func (o *RolePermissions) HasUSER() bool {
	if o != nil && !IsNil(o.USER) {
		return true
	}

	return false
}

// SetUSER gets a reference to the given []string and assigns it to the USER field.
func (o *RolePermissions) SetUSER(v []string) {
	o.USER = v
}

// GetGROUP returns the GROUP field value if set, zero value otherwise.
func (o *RolePermissions) GetGROUP() []string {
	if o == nil || IsNil(o.GROUP) {
		var ret []string
		return ret
	}
	return o.GROUP
}

// GetGROUPOk returns a tuple with the GROUP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolePermissions) GetGROUPOk() ([]string, bool) {
	if o == nil || IsNil(o.GROUP) {
		return nil, false
	}
	return o.GROUP, true
}

// HasGROUP returns a boolean if a field has been set.
func (o *RolePermissions) HasGROUP() bool {
	if o != nil && !IsNil(o.GROUP) {
		return true
	}

	return false
}

// SetGROUP gets a reference to the given []string and assigns it to the GROUP field.
func (o *RolePermissions) SetGROUP(v []string) {
	o.GROUP = v
}

// GetROLE returns the ROLE field value if set, zero value otherwise.
func (o *RolePermissions) GetROLE() []string {
	if o == nil || IsNil(o.ROLE) {
		var ret []string
		return ret
	}
	return o.ROLE
}

// GetROLEOk returns a tuple with the ROLE field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolePermissions) GetROLEOk() ([]string, bool) {
	if o == nil || IsNil(o.ROLE) {
		return nil, false
	}
	return o.ROLE, true
}

// HasROLE returns a boolean if a field has been set.
func (o *RolePermissions) HasROLE() bool {
	if o != nil && !IsNil(o.ROLE) {
		return true
	}

	return false
}

// SetROLE gets a reference to the given []string and assigns it to the ROLE field.
func (o *RolePermissions) SetROLE(v []string) {
	o.ROLE = v
}

// GetBINDING returns the BINDING field value if set, zero value otherwise.
func (o *RolePermissions) GetBINDING() []string {
	if o == nil || IsNil(o.BINDING) {
		var ret []string
		return ret
	}
	return o.BINDING
}

// GetBINDINGOk returns a tuple with the BINDING field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolePermissions) GetBINDINGOk() ([]string, bool) {
	if o == nil || IsNil(o.BINDING) {
		return nil, false
	}
	return o.BINDING, true
}

// HasBINDING returns a boolean if a field has been set.
func (o *RolePermissions) HasBINDING() bool {
	if o != nil && !IsNil(o.BINDING) {
		return true
	}

	return false
}

// SetBINDING gets a reference to the given []string and assigns it to the BINDING field.
func (o *RolePermissions) SetBINDING(v []string) {
	o.BINDING = v
}

// GetAUDITLOG returns the AUDITLOG field value if set, zero value otherwise.
func (o *RolePermissions) GetAUDITLOG() []string {
	if o == nil || IsNil(o.AUDITLOG) {
		var ret []string
		return ret
	}
	return o.AUDITLOG
}

// GetAUDITLOGOk returns a tuple with the AUDITLOG field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolePermissions) GetAUDITLOGOk() ([]string, bool) {
	if o == nil || IsNil(o.AUDITLOG) {
		return nil, false
	}
	return o.AUDITLOG, true
}

// HasAUDITLOG returns a boolean if a field has been set.
func (o *RolePermissions) HasAUDITLOG() bool {
	if o != nil && !IsNil(o.AUDITLOG) {
		return true
	}

	return false
}

// SetAUDITLOG gets a reference to the given []string and assigns it to the AUDITLOG field.
func (o *RolePermissions) SetAUDITLOG(v []string) {
	o.AUDITLOG = v
}

// GetSECRET returns the SECRET field value if set, zero value otherwise.
func (o *RolePermissions) GetSECRET() []string {
	if o == nil || IsNil(o.SECRET) {
		var ret []string
		return ret
	}
	return o.SECRET
}

// GetSECRETOk returns a tuple with the SECRET field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolePermissions) GetSECRETOk() ([]string, bool) {
	if o == nil || IsNil(o.SECRET) {
		return nil, false
	}
	return o.SECRET, true
}

// HasSECRET returns a boolean if a field has been set.
func (o *RolePermissions) HasSECRET() bool {
	if o != nil && !IsNil(o.SECRET) {
		return true
	}

	return false
}

// SetSECRET gets a reference to the given []string and assigns it to the SECRET field.
func (o *RolePermissions) SetSECRET(v []string) {
	o.SECRET = v
}

// GetKVSTORE returns the KVSTORE field value if set, zero value otherwise.
func (o *RolePermissions) GetKVSTORE() []string {
	if o == nil || IsNil(o.KVSTORE) {
		var ret []string
		return ret
	}
	return o.KVSTORE
}

// GetKVSTOREOk returns a tuple with the KVSTORE field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolePermissions) GetKVSTOREOk() ([]string, bool) {
	if o == nil || IsNil(o.KVSTORE) {
		return nil, false
	}
	return o.KVSTORE, true
}

// HasKVSTORE returns a boolean if a field has been set.
func (o *RolePermissions) HasKVSTORE() bool {
	if o != nil && !IsNil(o.KVSTORE) {
		return true
	}

	return false
}

// SetKVSTORE gets a reference to the given []string and assigns it to the KVSTORE field.
func (o *RolePermissions) SetKVSTORE(v []string) {
	o.KVSTORE = v
}

// GetIMPERSONATE returns the IMPERSONATE field value if set, zero value otherwise.
func (o *RolePermissions) GetIMPERSONATE() []string {
	if o == nil || IsNil(o.IMPERSONATE) {
		var ret []string
		return ret
	}
	return o.IMPERSONATE
}

// GetIMPERSONATEOk returns a tuple with the IMPERSONATE field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolePermissions) GetIMPERSONATEOk() ([]string, bool) {
	if o == nil || IsNil(o.IMPERSONATE) {
		return nil, false
	}
	return o.IMPERSONATE, true
}

// HasIMPERSONATE returns a boolean if a field has been set.
func (o *RolePermissions) HasIMPERSONATE() bool {
	if o != nil && !IsNil(o.IMPERSONATE) {
		return true
	}

	return false
}

// SetIMPERSONATE gets a reference to the given []string and assigns it to the IMPERSONATE field.
func (o *RolePermissions) SetIMPERSONATE(v []string) {
	o.IMPERSONATE = v
}

// GetSETTING returns the SETTING field value if set, zero value otherwise.
func (o *RolePermissions) GetSETTING() []string {
	if o == nil || IsNil(o.SETTING) {
		var ret []string
		return ret
	}
	return o.SETTING
}

// GetSETTINGOk returns a tuple with the SETTING field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolePermissions) GetSETTINGOk() ([]string, bool) {
	if o == nil || IsNil(o.SETTING) {
		return nil, false
	}
	return o.SETTING, true
}

// HasSETTING returns a boolean if a field has been set.
func (o *RolePermissions) HasSETTING() bool {
	if o != nil && !IsNil(o.SETTING) {
		return true
	}

	return false
}

// SetSETTING gets a reference to the given []string and assigns it to the SETTING field.
func (o *RolePermissions) SetSETTING(v []string) {
	o.SETTING = v
}

// GetINFRASTRUCTURE returns the INFRASTRUCTURE field value if set, zero value otherwise.
func (o *RolePermissions) GetINFRASTRUCTURE() []string {
	if o == nil || IsNil(o.INFRASTRUCTURE) {
		var ret []string
		return ret
	}
	return o.INFRASTRUCTURE
}

// GetINFRASTRUCTUREOk returns a tuple with the INFRASTRUCTURE field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolePermissions) GetINFRASTRUCTUREOk() ([]string, bool) {
	if o == nil || IsNil(o.INFRASTRUCTURE) {
		return nil, false
	}
	return o.INFRASTRUCTURE, true
}

// HasINFRASTRUCTURE returns a boolean if a field has been set.
func (o *RolePermissions) HasINFRASTRUCTURE() bool {
	if o != nil && !IsNil(o.INFRASTRUCTURE) {
		return true
	}

	return false
}

// SetINFRASTRUCTURE gets a reference to the given []string and assigns it to the INFRASTRUCTURE field.
func (o *RolePermissions) SetINFRASTRUCTURE(v []string) {
	o.INFRASTRUCTURE = v
}

// GetAPP returns the APP field value if set, zero value otherwise.
func (o *RolePermissions) GetAPP() []string {
	if o == nil || IsNil(o.APP) {
		var ret []string
		return ret
	}
	return o.APP
}

// GetAPPOk returns a tuple with the APP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolePermissions) GetAPPOk() ([]string, bool) {
	if o == nil || IsNil(o.APP) {
		return nil, false
	}
	return o.APP, true
}

// HasAPP returns a boolean if a field has been set.
func (o *RolePermissions) HasAPP() bool {
	if o != nil && !IsNil(o.APP) {
		return true
	}

	return false
}

// SetAPP gets a reference to the given []string and assigns it to the APP field.
func (o *RolePermissions) SetAPP(v []string) {
	o.APP = v
}

// GetAPPEXECUTION returns the APPEXECUTION field value if set, zero value otherwise.
func (o *RolePermissions) GetAPPEXECUTION() []string {
	if o == nil || IsNil(o.APPEXECUTION) {
		var ret []string
		return ret
	}
	return o.APPEXECUTION
}

// GetAPPEXECUTIONOk returns a tuple with the APPEXECUTION field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolePermissions) GetAPPEXECUTIONOk() ([]string, bool) {
	if o == nil || IsNil(o.APPEXECUTION) {
		return nil, false
	}
	return o.APPEXECUTION, true
}

// HasAPPEXECUTION returns a boolean if a field has been set.
func (o *RolePermissions) HasAPPEXECUTION() bool {
	if o != nil && !IsNil(o.APPEXECUTION) {
		return true
	}

	return false
}

// SetAPPEXECUTION gets a reference to the given []string and assigns it to the APPEXECUTION field.
func (o *RolePermissions) SetAPPEXECUTION(v []string) {
	o.APPEXECUTION = v
}

// GetTEST returns the TEST field value if set, zero value otherwise.
func (o *RolePermissions) GetTEST() []string {
	if o == nil || IsNil(o.TEST) {
		var ret []string
		return ret
	}
	return o.TEST
}

// GetTESTOk returns a tuple with the TEST field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolePermissions) GetTESTOk() ([]string, bool) {
	if o == nil || IsNil(o.TEST) {
		return nil, false
	}
	return o.TEST, true
}

// HasTEST returns a boolean if a field has been set.
func (o *RolePermissions) HasTEST() bool {
	if o != nil && !IsNil(o.TEST) {
		return true
	}

	return false
}

// SetTEST gets a reference to the given []string and assigns it to the TEST field.
func (o *RolePermissions) SetTEST(v []string) {
	o.TEST = v
}

// GetME returns the ME field value if set, zero value otherwise.
func (o *RolePermissions) GetME() []string {
	if o == nil || IsNil(o.ME) {
		var ret []string
		return ret
	}
	return o.ME
}

// GetMEOk returns a tuple with the ME field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolePermissions) GetMEOk() ([]string, bool) {
	if o == nil || IsNil(o.ME) {
		return nil, false
	}
	return o.ME, true
}

// HasME returns a boolean if a field has been set.
func (o *RolePermissions) HasME() bool {
	if o != nil && !IsNil(o.ME) {
		return true
	}

	return false
}

// SetME gets a reference to the given []string and assigns it to the ME field.
func (o *RolePermissions) SetME(v []string) {
	o.ME = v
}

// GetAPITOKEN returns the APITOKEN field value if set, zero value otherwise.
func (o *RolePermissions) GetAPITOKEN() []string {
	if o == nil || IsNil(o.APITOKEN) {
		var ret []string
		return ret
	}
	return o.APITOKEN
}

// GetAPITOKENOk returns a tuple with the APITOKEN field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolePermissions) GetAPITOKENOk() ([]string, bool) {
	if o == nil || IsNil(o.APITOKEN) {
		return nil, false
	}
	return o.APITOKEN, true
}

// HasAPITOKEN returns a boolean if a field has been set.
func (o *RolePermissions) HasAPITOKEN() bool {
	if o != nil && !IsNil(o.APITOKEN) {
		return true
	}

	return false
}

// SetAPITOKEN gets a reference to the given []string and assigns it to the APITOKEN field.
func (o *RolePermissions) SetAPITOKEN(v []string) {
	o.APITOKEN = v
}

// GetDASHBOARD returns the DASHBOARD field value if set, zero value otherwise.
func (o *RolePermissions) GetDASHBOARD() []string {
	if o == nil || IsNil(o.DASHBOARD) {
		var ret []string
		return ret
	}
	return o.DASHBOARD
}

// GetDASHBOARDOk returns a tuple with the DASHBOARD field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolePermissions) GetDASHBOARDOk() ([]string, bool) {
	if o == nil || IsNil(o.DASHBOARD) {
		return nil, false
	}
	return o.DASHBOARD, true
}

// HasDASHBOARD returns a boolean if a field has been set.
func (o *RolePermissions) HasDASHBOARD() bool {
	if o != nil && !IsNil(o.DASHBOARD) {
		return true
	}

	return false
}

// SetDASHBOARD gets a reference to the given []string and assigns it to the DASHBOARD field.
func (o *RolePermissions) SetDASHBOARD(v []string) {
	o.DASHBOARD = v
}

// GetTENANT returns the TENANT field value if set, zero value otherwise.
func (o *RolePermissions) GetTENANT() []string {
	if o == nil || IsNil(o.TENANT) {
		var ret []string
		return ret
	}
	return o.TENANT
}

// GetTENANTOk returns a tuple with the TENANT field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolePermissions) GetTENANTOk() ([]string, bool) {
	if o == nil || IsNil(o.TENANT) {
		return nil, false
	}
	return o.TENANT, true
}

// HasTENANT returns a boolean if a field has been set.
func (o *RolePermissions) HasTENANT() bool {
	if o != nil && !IsNil(o.TENANT) {
		return true
	}

	return false
}

// SetTENANT gets a reference to the given []string and assigns it to the TENANT field.
func (o *RolePermissions) SetTENANT(v []string) {
	o.TENANT = v
}

// GetUNKNOWN returns the UNKNOWN field value if set, zero value otherwise.
func (o *RolePermissions) GetUNKNOWN() []string {
	if o == nil || IsNil(o.UNKNOWN) {
		var ret []string
		return ret
	}
	return o.UNKNOWN
}

// GetUNKNOWNOk returns a tuple with the UNKNOWN field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolePermissions) GetUNKNOWNOk() ([]string, bool) {
	if o == nil || IsNil(o.UNKNOWN) {
		return nil, false
	}
	return o.UNKNOWN, true
}

// HasUNKNOWN returns a boolean if a field has been set.
func (o *RolePermissions) HasUNKNOWN() bool {
	if o != nil && !IsNil(o.UNKNOWN) {
		return true
	}

	return false
}

// SetUNKNOWN gets a reference to the given []string and assigns it to the UNKNOWN field.
func (o *RolePermissions) SetUNKNOWN(v []string) {
	o.UNKNOWN = v
}

func (o RolePermissions) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RolePermissions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FLOW) {
		toSerialize["FLOW"] = o.FLOW
	}
	if !IsNil(o.BLUEPRINT) {
		toSerialize["BLUEPRINT"] = o.BLUEPRINT
	}
	if !IsNil(o.TEMPLATE) {
		toSerialize["TEMPLATE"] = o.TEMPLATE
	}
	if !IsNil(o.NAMESPACE) {
		toSerialize["NAMESPACE"] = o.NAMESPACE
	}
	if !IsNil(o.EXECUTION) {
		toSerialize["EXECUTION"] = o.EXECUTION
	}
	if !IsNil(o.USER) {
		toSerialize["USER"] = o.USER
	}
	if !IsNil(o.GROUP) {
		toSerialize["GROUP"] = o.GROUP
	}
	if !IsNil(o.ROLE) {
		toSerialize["ROLE"] = o.ROLE
	}
	if !IsNil(o.BINDING) {
		toSerialize["BINDING"] = o.BINDING
	}
	if !IsNil(o.AUDITLOG) {
		toSerialize["AUDITLOG"] = o.AUDITLOG
	}
	if !IsNil(o.SECRET) {
		toSerialize["SECRET"] = o.SECRET
	}
	if !IsNil(o.KVSTORE) {
		toSerialize["KVSTORE"] = o.KVSTORE
	}
	if !IsNil(o.IMPERSONATE) {
		toSerialize["IMPERSONATE"] = o.IMPERSONATE
	}
	if !IsNil(o.SETTING) {
		toSerialize["SETTING"] = o.SETTING
	}
	if !IsNil(o.INFRASTRUCTURE) {
		toSerialize["INFRASTRUCTURE"] = o.INFRASTRUCTURE
	}
	if !IsNil(o.APP) {
		toSerialize["APP"] = o.APP
	}
	if !IsNil(o.APPEXECUTION) {
		toSerialize["APPEXECUTION"] = o.APPEXECUTION
	}
	if !IsNil(o.TEST) {
		toSerialize["TEST"] = o.TEST
	}
	if !IsNil(o.ME) {
		toSerialize["ME"] = o.ME
	}
	if !IsNil(o.APITOKEN) {
		toSerialize["APITOKEN"] = o.APITOKEN
	}
	if !IsNil(o.DASHBOARD) {
		toSerialize["DASHBOARD"] = o.DASHBOARD
	}
	if !IsNil(o.TENANT) {
		toSerialize["TENANT"] = o.TENANT
	}
	if !IsNil(o.UNKNOWN) {
		toSerialize["UNKNOWN"] = o.UNKNOWN
	}
	return toSerialize, nil
}

type NullableRolePermissions struct {
	value *RolePermissions
	isSet bool
}

func (v NullableRolePermissions) Get() *RolePermissions {
	return v.value
}

func (v *NullableRolePermissions) Set(val *RolePermissions) {
	v.value = val
	v.isSet = true
}

func (v NullableRolePermissions) IsSet() bool {
	return v.isSet
}

func (v *NullableRolePermissions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRolePermissions(val *RolePermissions) *NullableRolePermissions {
	return &NullableRolePermissions{value: val, isSet: true}
}

func (v NullableRolePermissions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRolePermissions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
