/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
)

// checks if the SchemaAttribute type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SchemaAttribute{}

// SchemaAttribute struct for SchemaAttribute
type SchemaAttribute struct {
	Attributes              []SchemaAttribute          `json:"attributes,omitempty"`
	Urn                     *string                    `json:"urn,omitempty"`
	Name                    *string                    `json:"name,omitempty" validate:"regexp=\\\\p{Alpha}(-|_|\\\\p{Alnum})*"`
	Type                    *SchemaAttributeType       `json:"type,omitempty"`
	SubAttributes           []SchemaAttribute          `json:"subAttributes,omitempty"`
	MultiValued             *bool                      `json:"multiValued,omitempty"`
	Description             *string                    `json:"description,omitempty"`
	Required                *bool                      `json:"required,omitempty"`
	CanonicalValues         []string                   `json:"canonicalValues,omitempty"`
	CaseExact               *bool                      `json:"caseExact,omitempty"`
	Mutability              *SchemaAttributeMutability `json:"mutability,omitempty"`
	Returned                *SchemaAttributeReturned   `json:"returned,omitempty"`
	Uniqueness              *SchemaAttributeUniqueness `json:"uniqueness,omitempty"`
	ReferenceTypes          []string                   `json:"referenceTypes,omitempty"`
	Accessor                map[string]interface{}     `json:"accessor,omitempty"`
	ScimResourceIdReference *bool                      `json:"scimResourceIdReference,omitempty"`
	AdditionalProperties    map[string]interface{}
}

type _SchemaAttribute SchemaAttribute

// NewSchemaAttribute instantiates a new SchemaAttribute object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchemaAttribute() *SchemaAttribute {
	this := SchemaAttribute{}
	return &this
}

// NewSchemaAttributeWithDefaults instantiates a new SchemaAttribute object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchemaAttributeWithDefaults() *SchemaAttribute {
	this := SchemaAttribute{}
	return &this
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *SchemaAttribute) GetAttributes() []SchemaAttribute {
	if o == nil || IsNil(o.Attributes) {
		var ret []SchemaAttribute
		return ret
	}
	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaAttribute) GetAttributesOk() ([]SchemaAttribute, bool) {
	if o == nil || IsNil(o.Attributes) {
		return nil, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *SchemaAttribute) HasAttributes() bool {
	if o != nil && !IsNil(o.Attributes) {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given []SchemaAttribute and assigns it to the Attributes field.
func (o *SchemaAttribute) SetAttributes(v []SchemaAttribute) {
	o.Attributes = v
}

// GetUrn returns the Urn field value if set, zero value otherwise.
func (o *SchemaAttribute) GetUrn() string {
	if o == nil || IsNil(o.Urn) {
		var ret string
		return ret
	}
	return *o.Urn
}

// GetUrnOk returns a tuple with the Urn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaAttribute) GetUrnOk() (*string, bool) {
	if o == nil || IsNil(o.Urn) {
		return nil, false
	}
	return o.Urn, true
}

// HasUrn returns a boolean if a field has been set.
func (o *SchemaAttribute) HasUrn() bool {
	if o != nil && !IsNil(o.Urn) {
		return true
	}

	return false
}

// SetUrn gets a reference to the given string and assigns it to the Urn field.
func (o *SchemaAttribute) SetUrn(v string) {
	o.Urn = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SchemaAttribute) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaAttribute) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SchemaAttribute) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SchemaAttribute) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SchemaAttribute) GetType() SchemaAttributeType {
	if o == nil || IsNil(o.Type) {
		var ret SchemaAttributeType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaAttribute) GetTypeOk() (*SchemaAttributeType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SchemaAttribute) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given SchemaAttributeType and assigns it to the Type field.
func (o *SchemaAttribute) SetType(v SchemaAttributeType) {
	o.Type = &v
}

// GetSubAttributes returns the SubAttributes field value if set, zero value otherwise.
func (o *SchemaAttribute) GetSubAttributes() []SchemaAttribute {
	if o == nil || IsNil(o.SubAttributes) {
		var ret []SchemaAttribute
		return ret
	}
	return o.SubAttributes
}

// GetSubAttributesOk returns a tuple with the SubAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaAttribute) GetSubAttributesOk() ([]SchemaAttribute, bool) {
	if o == nil || IsNil(o.SubAttributes) {
		return nil, false
	}
	return o.SubAttributes, true
}

// HasSubAttributes returns a boolean if a field has been set.
func (o *SchemaAttribute) HasSubAttributes() bool {
	if o != nil && !IsNil(o.SubAttributes) {
		return true
	}

	return false
}

// SetSubAttributes gets a reference to the given []SchemaAttribute and assigns it to the SubAttributes field.
func (o *SchemaAttribute) SetSubAttributes(v []SchemaAttribute) {
	o.SubAttributes = v
}

// GetMultiValued returns the MultiValued field value if set, zero value otherwise.
func (o *SchemaAttribute) GetMultiValued() bool {
	if o == nil || IsNil(o.MultiValued) {
		var ret bool
		return ret
	}
	return *o.MultiValued
}

// GetMultiValuedOk returns a tuple with the MultiValued field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaAttribute) GetMultiValuedOk() (*bool, bool) {
	if o == nil || IsNil(o.MultiValued) {
		return nil, false
	}
	return o.MultiValued, true
}

// HasMultiValued returns a boolean if a field has been set.
func (o *SchemaAttribute) HasMultiValued() bool {
	if o != nil && !IsNil(o.MultiValued) {
		return true
	}

	return false
}

// SetMultiValued gets a reference to the given bool and assigns it to the MultiValued field.
func (o *SchemaAttribute) SetMultiValued(v bool) {
	o.MultiValued = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *SchemaAttribute) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaAttribute) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *SchemaAttribute) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *SchemaAttribute) SetDescription(v string) {
	o.Description = &v
}

// GetRequired returns the Required field value if set, zero value otherwise.
func (o *SchemaAttribute) GetRequired() bool {
	if o == nil || IsNil(o.Required) {
		var ret bool
		return ret
	}
	return *o.Required
}

// GetRequiredOk returns a tuple with the Required field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaAttribute) GetRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.Required) {
		return nil, false
	}
	return o.Required, true
}

// HasRequired returns a boolean if a field has been set.
func (o *SchemaAttribute) HasRequired() bool {
	if o != nil && !IsNil(o.Required) {
		return true
	}

	return false
}

// SetRequired gets a reference to the given bool and assigns it to the Required field.
func (o *SchemaAttribute) SetRequired(v bool) {
	o.Required = &v
}

// GetCanonicalValues returns the CanonicalValues field value if set, zero value otherwise.
func (o *SchemaAttribute) GetCanonicalValues() []string {
	if o == nil || IsNil(o.CanonicalValues) {
		var ret []string
		return ret
	}
	return o.CanonicalValues
}

// GetCanonicalValuesOk returns a tuple with the CanonicalValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaAttribute) GetCanonicalValuesOk() ([]string, bool) {
	if o == nil || IsNil(o.CanonicalValues) {
		return nil, false
	}
	return o.CanonicalValues, true
}

// HasCanonicalValues returns a boolean if a field has been set.
func (o *SchemaAttribute) HasCanonicalValues() bool {
	if o != nil && !IsNil(o.CanonicalValues) {
		return true
	}

	return false
}

// SetCanonicalValues gets a reference to the given []string and assigns it to the CanonicalValues field.
func (o *SchemaAttribute) SetCanonicalValues(v []string) {
	o.CanonicalValues = v
}

// GetCaseExact returns the CaseExact field value if set, zero value otherwise.
func (o *SchemaAttribute) GetCaseExact() bool {
	if o == nil || IsNil(o.CaseExact) {
		var ret bool
		return ret
	}
	return *o.CaseExact
}

// GetCaseExactOk returns a tuple with the CaseExact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaAttribute) GetCaseExactOk() (*bool, bool) {
	if o == nil || IsNil(o.CaseExact) {
		return nil, false
	}
	return o.CaseExact, true
}

// HasCaseExact returns a boolean if a field has been set.
func (o *SchemaAttribute) HasCaseExact() bool {
	if o != nil && !IsNil(o.CaseExact) {
		return true
	}

	return false
}

// SetCaseExact gets a reference to the given bool and assigns it to the CaseExact field.
func (o *SchemaAttribute) SetCaseExact(v bool) {
	o.CaseExact = &v
}

// GetMutability returns the Mutability field value if set, zero value otherwise.
func (o *SchemaAttribute) GetMutability() SchemaAttributeMutability {
	if o == nil || IsNil(o.Mutability) {
		var ret SchemaAttributeMutability
		return ret
	}
	return *o.Mutability
}

// GetMutabilityOk returns a tuple with the Mutability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaAttribute) GetMutabilityOk() (*SchemaAttributeMutability, bool) {
	if o == nil || IsNil(o.Mutability) {
		return nil, false
	}
	return o.Mutability, true
}

// HasMutability returns a boolean if a field has been set.
func (o *SchemaAttribute) HasMutability() bool {
	if o != nil && !IsNil(o.Mutability) {
		return true
	}

	return false
}

// SetMutability gets a reference to the given SchemaAttributeMutability and assigns it to the Mutability field.
func (o *SchemaAttribute) SetMutability(v SchemaAttributeMutability) {
	o.Mutability = &v
}

// GetReturned returns the Returned field value if set, zero value otherwise.
func (o *SchemaAttribute) GetReturned() SchemaAttributeReturned {
	if o == nil || IsNil(o.Returned) {
		var ret SchemaAttributeReturned
		return ret
	}
	return *o.Returned
}

// GetReturnedOk returns a tuple with the Returned field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaAttribute) GetReturnedOk() (*SchemaAttributeReturned, bool) {
	if o == nil || IsNil(o.Returned) {
		return nil, false
	}
	return o.Returned, true
}

// HasReturned returns a boolean if a field has been set.
func (o *SchemaAttribute) HasReturned() bool {
	if o != nil && !IsNil(o.Returned) {
		return true
	}

	return false
}

// SetReturned gets a reference to the given SchemaAttributeReturned and assigns it to the Returned field.
func (o *SchemaAttribute) SetReturned(v SchemaAttributeReturned) {
	o.Returned = &v
}

// GetUniqueness returns the Uniqueness field value if set, zero value otherwise.
func (o *SchemaAttribute) GetUniqueness() SchemaAttributeUniqueness {
	if o == nil || IsNil(o.Uniqueness) {
		var ret SchemaAttributeUniqueness
		return ret
	}
	return *o.Uniqueness
}

// GetUniquenessOk returns a tuple with the Uniqueness field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaAttribute) GetUniquenessOk() (*SchemaAttributeUniqueness, bool) {
	if o == nil || IsNil(o.Uniqueness) {
		return nil, false
	}
	return o.Uniqueness, true
}

// HasUniqueness returns a boolean if a field has been set.
func (o *SchemaAttribute) HasUniqueness() bool {
	if o != nil && !IsNil(o.Uniqueness) {
		return true
	}

	return false
}

// SetUniqueness gets a reference to the given SchemaAttributeUniqueness and assigns it to the Uniqueness field.
func (o *SchemaAttribute) SetUniqueness(v SchemaAttributeUniqueness) {
	o.Uniqueness = &v
}

// GetReferenceTypes returns the ReferenceTypes field value if set, zero value otherwise.
func (o *SchemaAttribute) GetReferenceTypes() []string {
	if o == nil || IsNil(o.ReferenceTypes) {
		var ret []string
		return ret
	}
	return o.ReferenceTypes
}

// GetReferenceTypesOk returns a tuple with the ReferenceTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaAttribute) GetReferenceTypesOk() ([]string, bool) {
	if o == nil || IsNil(o.ReferenceTypes) {
		return nil, false
	}
	return o.ReferenceTypes, true
}

// HasReferenceTypes returns a boolean if a field has been set.
func (o *SchemaAttribute) HasReferenceTypes() bool {
	if o != nil && !IsNil(o.ReferenceTypes) {
		return true
	}

	return false
}

// SetReferenceTypes gets a reference to the given []string and assigns it to the ReferenceTypes field.
func (o *SchemaAttribute) SetReferenceTypes(v []string) {
	o.ReferenceTypes = v
}

// GetAccessor returns the Accessor field value if set, zero value otherwise.
func (o *SchemaAttribute) GetAccessor() map[string]interface{} {
	if o == nil || IsNil(o.Accessor) {
		var ret map[string]interface{}
		return ret
	}
	return o.Accessor
}

// GetAccessorOk returns a tuple with the Accessor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaAttribute) GetAccessorOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Accessor) {
		return map[string]interface{}{}, false
	}
	return o.Accessor, true
}

// HasAccessor returns a boolean if a field has been set.
func (o *SchemaAttribute) HasAccessor() bool {
	if o != nil && !IsNil(o.Accessor) {
		return true
	}

	return false
}

// SetAccessor gets a reference to the given map[string]interface{} and assigns it to the Accessor field.
func (o *SchemaAttribute) SetAccessor(v map[string]interface{}) {
	o.Accessor = v
}

// GetScimResourceIdReference returns the ScimResourceIdReference field value if set, zero value otherwise.
func (o *SchemaAttribute) GetScimResourceIdReference() bool {
	if o == nil || IsNil(o.ScimResourceIdReference) {
		var ret bool
		return ret
	}
	return *o.ScimResourceIdReference
}

// GetScimResourceIdReferenceOk returns a tuple with the ScimResourceIdReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaAttribute) GetScimResourceIdReferenceOk() (*bool, bool) {
	if o == nil || IsNil(o.ScimResourceIdReference) {
		return nil, false
	}
	return o.ScimResourceIdReference, true
}

// HasScimResourceIdReference returns a boolean if a field has been set.
func (o *SchemaAttribute) HasScimResourceIdReference() bool {
	if o != nil && !IsNil(o.ScimResourceIdReference) {
		return true
	}

	return false
}

// SetScimResourceIdReference gets a reference to the given bool and assigns it to the ScimResourceIdReference field.
func (o *SchemaAttribute) SetScimResourceIdReference(v bool) {
	o.ScimResourceIdReference = &v
}

func (o SchemaAttribute) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SchemaAttribute) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Attributes) {
		toSerialize["attributes"] = o.Attributes
	}
	if !IsNil(o.Urn) {
		toSerialize["urn"] = o.Urn
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.SubAttributes) {
		toSerialize["subAttributes"] = o.SubAttributes
	}
	if !IsNil(o.MultiValued) {
		toSerialize["multiValued"] = o.MultiValued
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Required) {
		toSerialize["required"] = o.Required
	}
	if !IsNil(o.CanonicalValues) {
		toSerialize["canonicalValues"] = o.CanonicalValues
	}
	if !IsNil(o.CaseExact) {
		toSerialize["caseExact"] = o.CaseExact
	}
	if !IsNil(o.Mutability) {
		toSerialize["mutability"] = o.Mutability
	}
	if !IsNil(o.Returned) {
		toSerialize["returned"] = o.Returned
	}
	if !IsNil(o.Uniqueness) {
		toSerialize["uniqueness"] = o.Uniqueness
	}
	if !IsNil(o.ReferenceTypes) {
		toSerialize["referenceTypes"] = o.ReferenceTypes
	}
	if !IsNil(o.Accessor) {
		toSerialize["accessor"] = o.Accessor
	}
	if !IsNil(o.ScimResourceIdReference) {
		toSerialize["scimResourceIdReference"] = o.ScimResourceIdReference
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SchemaAttribute) UnmarshalJSON(data []byte) (err error) {
	varSchemaAttribute := _SchemaAttribute{}

	err = json.Unmarshal(data, &varSchemaAttribute)

	if err != nil {
		return err
	}

	*o = SchemaAttribute(varSchemaAttribute)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "attributes")
		delete(additionalProperties, "urn")
		delete(additionalProperties, "name")
		delete(additionalProperties, "type")
		delete(additionalProperties, "subAttributes")
		delete(additionalProperties, "multiValued")
		delete(additionalProperties, "description")
		delete(additionalProperties, "required")
		delete(additionalProperties, "canonicalValues")
		delete(additionalProperties, "caseExact")
		delete(additionalProperties, "mutability")
		delete(additionalProperties, "returned")
		delete(additionalProperties, "uniqueness")
		delete(additionalProperties, "referenceTypes")
		delete(additionalProperties, "accessor")
		delete(additionalProperties, "scimResourceIdReference")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSchemaAttribute struct {
	value *SchemaAttribute
	isSet bool
}

func (v NullableSchemaAttribute) Get() *SchemaAttribute {
	return v.value
}

func (v *NullableSchemaAttribute) Set(val *SchemaAttribute) {
	v.value = val
	v.isSet = true
}

func (v NullableSchemaAttribute) IsSet() bool {
	return v.isSet
}

func (v *NullableSchemaAttribute) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchemaAttribute(val *SchemaAttribute) *NullableSchemaAttribute {
	return &NullableSchemaAttribute{value: val, isSet: true}
}

func (v NullableSchemaAttribute) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchemaAttribute) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
