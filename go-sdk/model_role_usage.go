/*
Kestra EE

All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
)

// checks if the RoleUsage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoleUsage{}

// RoleUsage struct for RoleUsage
type RoleUsage struct {
	Count *int64 `json:"count,omitempty"`
}

// NewRoleUsage instantiates a new RoleUsage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoleUsage() *RoleUsage {
	this := RoleUsage{}
	return &this
}

// NewRoleUsageWithDefaults instantiates a new RoleUsage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoleUsageWithDefaults() *RoleUsage {
	this := RoleUsage{}
	return &this
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *RoleUsage) GetCount() int64 {
	if o == nil || IsNil(o.Count) {
		var ret int64
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleUsage) GetCountOk() (*int64, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *RoleUsage) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int64 and assigns it to the Count field.
func (o *RoleUsage) SetCount(v int64) {
	o.Count = &v
}

func (o RoleUsage) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoleUsage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	return toSerialize, nil
}

type NullableRoleUsage struct {
	value *RoleUsage
	isSet bool
}

func (v NullableRoleUsage) Get() *RoleUsage {
	return v.value
}

func (v *NullableRoleUsage) Set(val *RoleUsage) {
	v.value = val
	v.isSet = true
}

func (v NullableRoleUsage) IsSet() bool {
	return v.isSet
}

func (v *NullableRoleUsage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoleUsage(val *RoleUsage) *NullableRoleUsage {
	return &NullableRoleUsage{value: val, isSet: true}
}

func (v NullableRoleUsage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoleUsage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
