/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
)

// checks if the ServerConfigLiveness type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServerConfigLiveness{}

// ServerConfigLiveness struct for ServerConfigLiveness
type ServerConfigLiveness struct {
	Enabled              bool   `json:"enabled"`
	Interval             string `json:"interval"`
	Timeout              string `json:"timeout"`
	InitialDelay         string `json:"initialDelay"`
	HeartbeatInterval    string `json:"heartbeatInterval"`
	AdditionalProperties map[string]interface{}
}

type _ServerConfigLiveness ServerConfigLiveness

// NewServerConfigLiveness instantiates a new ServerConfigLiveness object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerConfigLiveness(enabled bool, interval string, timeout string, initialDelay string, heartbeatInterval string) *ServerConfigLiveness {
	this := ServerConfigLiveness{}
	this.Enabled = enabled
	this.Interval = interval
	this.Timeout = timeout
	this.InitialDelay = initialDelay
	this.HeartbeatInterval = heartbeatInterval
	return &this
}

// NewServerConfigLivenessWithDefaults instantiates a new ServerConfigLiveness object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerConfigLivenessWithDefaults() *ServerConfigLiveness {
	this := ServerConfigLiveness{}
	var enabled bool = true
	this.Enabled = enabled
	var interval string = "5s"
	this.Interval = interval
	var timeout string = "45s"
	this.Timeout = timeout
	var initialDelay string = "45s"
	this.InitialDelay = initialDelay
	var heartbeatInterval string = "3s"
	this.HeartbeatInterval = heartbeatInterval
	return &this
}

// GetEnabled returns the Enabled field value
func (o *ServerConfigLiveness) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *ServerConfigLiveness) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *ServerConfigLiveness) SetEnabled(v bool) {
	o.Enabled = v
}

// GetInterval returns the Interval field value
func (o *ServerConfigLiveness) GetInterval() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Interval
}

// GetIntervalOk returns a tuple with the Interval field value
// and a boolean to check if the value has been set.
func (o *ServerConfigLiveness) GetIntervalOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Interval, true
}

// SetInterval sets field value
func (o *ServerConfigLiveness) SetInterval(v string) {
	o.Interval = v
}

// GetTimeout returns the Timeout field value
func (o *ServerConfigLiveness) GetTimeout() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Timeout
}

// GetTimeoutOk returns a tuple with the Timeout field value
// and a boolean to check if the value has been set.
func (o *ServerConfigLiveness) GetTimeoutOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timeout, true
}

// SetTimeout sets field value
func (o *ServerConfigLiveness) SetTimeout(v string) {
	o.Timeout = v
}

// GetInitialDelay returns the InitialDelay field value
func (o *ServerConfigLiveness) GetInitialDelay() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InitialDelay
}

// GetInitialDelayOk returns a tuple with the InitialDelay field value
// and a boolean to check if the value has been set.
func (o *ServerConfigLiveness) GetInitialDelayOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InitialDelay, true
}

// SetInitialDelay sets field value
func (o *ServerConfigLiveness) SetInitialDelay(v string) {
	o.InitialDelay = v
}

// GetHeartbeatInterval returns the HeartbeatInterval field value
func (o *ServerConfigLiveness) GetHeartbeatInterval() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.HeartbeatInterval
}

// GetHeartbeatIntervalOk returns a tuple with the HeartbeatInterval field value
// and a boolean to check if the value has been set.
func (o *ServerConfigLiveness) GetHeartbeatIntervalOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HeartbeatInterval, true
}

// SetHeartbeatInterval sets field value
func (o *ServerConfigLiveness) SetHeartbeatInterval(v string) {
	o.HeartbeatInterval = v
}

func (o ServerConfigLiveness) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServerConfigLiveness) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["enabled"] = o.Enabled
	toSerialize["interval"] = o.Interval
	toSerialize["timeout"] = o.Timeout
	toSerialize["initialDelay"] = o.InitialDelay
	toSerialize["heartbeatInterval"] = o.HeartbeatInterval

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ServerConfigLiveness) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"enabled",
		"interval",
		"timeout",
		"initialDelay",
		"heartbeatInterval",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServerConfigLiveness := _ServerConfigLiveness{}

	err = json.Unmarshal(data, &varServerConfigLiveness)

	if err != nil {
		return err
	}

	*o = ServerConfigLiveness(varServerConfigLiveness)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "interval")
		delete(additionalProperties, "timeout")
		delete(additionalProperties, "initialDelay")
		delete(additionalProperties, "heartbeatInterval")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableServerConfigLiveness struct {
	value *ServerConfigLiveness
	isSet bool
}

func (v NullableServerConfigLiveness) Get() *ServerConfigLiveness {
	return v.value
}

func (v *NullableServerConfigLiveness) Set(val *ServerConfigLiveness) {
	v.value = val
	v.isSet = true
}

func (v NullableServerConfigLiveness) IsSet() bool {
	return v.isSet
}

func (v *NullableServerConfigLiveness) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerConfigLiveness(val *ServerConfigLiveness) *NullableServerConfigLiveness {
	return &NullableServerConfigLiveness{value: val, isSet: true}
}

func (v NullableServerConfigLiveness) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerConfigLiveness) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
