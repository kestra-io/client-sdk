/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
)

// checks if the PluginArtifactMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PluginArtifactMetadata{}

// PluginArtifactMetadata struct for PluginArtifactMetadata
type PluginArtifactMetadata struct {
	Uri                  string `json:"uri"`
	Name                 string `json:"name"`
	Size                 int64  `json:"size"`
	LastModifiedTime     int64  `json:"lastModifiedTime"`
	CreationTime         int64  `json:"creationTime"`
	AdditionalProperties map[string]interface{}
}

type _PluginArtifactMetadata PluginArtifactMetadata

// NewPluginArtifactMetadata instantiates a new PluginArtifactMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPluginArtifactMetadata(uri string, name string, size int64, lastModifiedTime int64, creationTime int64) *PluginArtifactMetadata {
	this := PluginArtifactMetadata{}
	this.Uri = uri
	this.Name = name
	this.Size = size
	this.LastModifiedTime = lastModifiedTime
	this.CreationTime = creationTime
	return &this
}

// NewPluginArtifactMetadataWithDefaults instantiates a new PluginArtifactMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPluginArtifactMetadataWithDefaults() *PluginArtifactMetadata {
	this := PluginArtifactMetadata{}
	return &this
}

// GetUri returns the Uri field value
func (o *PluginArtifactMetadata) GetUri() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uri
}

// GetUriOk returns a tuple with the Uri field value
// and a boolean to check if the value has been set.
func (o *PluginArtifactMetadata) GetUriOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uri, true
}

// SetUri sets field value
func (o *PluginArtifactMetadata) SetUri(v string) {
	o.Uri = v
}

// GetName returns the Name field value
func (o *PluginArtifactMetadata) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *PluginArtifactMetadata) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *PluginArtifactMetadata) SetName(v string) {
	o.Name = v
}

// GetSize returns the Size field value
func (o *PluginArtifactMetadata) GetSize() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Size
}

// GetSizeOk returns a tuple with the Size field value
// and a boolean to check if the value has been set.
func (o *PluginArtifactMetadata) GetSizeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Size, true
}

// SetSize sets field value
func (o *PluginArtifactMetadata) SetSize(v int64) {
	o.Size = v
}

// GetLastModifiedTime returns the LastModifiedTime field value
func (o *PluginArtifactMetadata) GetLastModifiedTime() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.LastModifiedTime
}

// GetLastModifiedTimeOk returns a tuple with the LastModifiedTime field value
// and a boolean to check if the value has been set.
func (o *PluginArtifactMetadata) GetLastModifiedTimeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastModifiedTime, true
}

// SetLastModifiedTime sets field value
func (o *PluginArtifactMetadata) SetLastModifiedTime(v int64) {
	o.LastModifiedTime = v
}

// GetCreationTime returns the CreationTime field value
func (o *PluginArtifactMetadata) GetCreationTime() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.CreationTime
}

// GetCreationTimeOk returns a tuple with the CreationTime field value
// and a boolean to check if the value has been set.
func (o *PluginArtifactMetadata) GetCreationTimeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreationTime, true
}

// SetCreationTime sets field value
func (o *PluginArtifactMetadata) SetCreationTime(v int64) {
	o.CreationTime = v
}

func (o PluginArtifactMetadata) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PluginArtifactMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["uri"] = o.Uri
	toSerialize["name"] = o.Name
	toSerialize["size"] = o.Size
	toSerialize["lastModifiedTime"] = o.LastModifiedTime
	toSerialize["creationTime"] = o.CreationTime

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PluginArtifactMetadata) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"uri",
		"name",
		"size",
		"lastModifiedTime",
		"creationTime",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPluginArtifactMetadata := _PluginArtifactMetadata{}

	err = json.Unmarshal(data, &varPluginArtifactMetadata)

	if err != nil {
		return err
	}

	*o = PluginArtifactMetadata(varPluginArtifactMetadata)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "uri")
		delete(additionalProperties, "name")
		delete(additionalProperties, "size")
		delete(additionalProperties, "lastModifiedTime")
		delete(additionalProperties, "creationTime")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePluginArtifactMetadata struct {
	value *PluginArtifactMetadata
	isSet bool
}

func (v NullablePluginArtifactMetadata) Get() *PluginArtifactMetadata {
	return v.value
}

func (v *NullablePluginArtifactMetadata) Set(val *PluginArtifactMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullablePluginArtifactMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullablePluginArtifactMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePluginArtifactMetadata(val *PluginArtifactMetadata) *NullablePluginArtifactMetadata {
	return &NullablePluginArtifactMetadata{value: val, isSet: true}
}

func (v NullablePluginArtifactMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePluginArtifactMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
