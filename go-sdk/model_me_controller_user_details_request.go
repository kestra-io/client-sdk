/*
Kestra EE

All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
)

// checks if the MeControllerUserDetailsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MeControllerUserDetailsRequest{}

// MeControllerUserDetailsRequest struct for MeControllerUserDetailsRequest
type MeControllerUserDetailsRequest struct {
	FirstName *string `json:"firstName,omitempty"`
	LastName  *string `json:"lastName,omitempty"`
	Email     *string `json:"email,omitempty"`
}

// NewMeControllerUserDetailsRequest instantiates a new MeControllerUserDetailsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMeControllerUserDetailsRequest() *MeControllerUserDetailsRequest {
	this := MeControllerUserDetailsRequest{}
	return &this
}

// NewMeControllerUserDetailsRequestWithDefaults instantiates a new MeControllerUserDetailsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMeControllerUserDetailsRequestWithDefaults() *MeControllerUserDetailsRequest {
	this := MeControllerUserDetailsRequest{}
	return &this
}

// GetFirstName returns the FirstName field value if set, zero value otherwise.
func (o *MeControllerUserDetailsRequest) GetFirstName() string {
	if o == nil || IsNil(o.FirstName) {
		var ret string
		return ret
	}
	return *o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeControllerUserDetailsRequest) GetFirstNameOk() (*string, bool) {
	if o == nil || IsNil(o.FirstName) {
		return nil, false
	}
	return o.FirstName, true
}

// HasFirstName returns a boolean if a field has been set.
func (o *MeControllerUserDetailsRequest) HasFirstName() bool {
	if o != nil && !IsNil(o.FirstName) {
		return true
	}

	return false
}

// SetFirstName gets a reference to the given string and assigns it to the FirstName field.
func (o *MeControllerUserDetailsRequest) SetFirstName(v string) {
	o.FirstName = &v
}

// GetLastName returns the LastName field value if set, zero value otherwise.
func (o *MeControllerUserDetailsRequest) GetLastName() string {
	if o == nil || IsNil(o.LastName) {
		var ret string
		return ret
	}
	return *o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeControllerUserDetailsRequest) GetLastNameOk() (*string, bool) {
	if o == nil || IsNil(o.LastName) {
		return nil, false
	}
	return o.LastName, true
}

// HasLastName returns a boolean if a field has been set.
func (o *MeControllerUserDetailsRequest) HasLastName() bool {
	if o != nil && !IsNil(o.LastName) {
		return true
	}

	return false
}

// SetLastName gets a reference to the given string and assigns it to the LastName field.
func (o *MeControllerUserDetailsRequest) SetLastName(v string) {
	o.LastName = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *MeControllerUserDetailsRequest) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeControllerUserDetailsRequest) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *MeControllerUserDetailsRequest) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *MeControllerUserDetailsRequest) SetEmail(v string) {
	o.Email = &v
}

func (o MeControllerUserDetailsRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MeControllerUserDetailsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FirstName) {
		toSerialize["firstName"] = o.FirstName
	}
	if !IsNil(o.LastName) {
		toSerialize["lastName"] = o.LastName
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	return toSerialize, nil
}

type NullableMeControllerUserDetailsRequest struct {
	value *MeControllerUserDetailsRequest
	isSet bool
}

func (v NullableMeControllerUserDetailsRequest) Get() *MeControllerUserDetailsRequest {
	return v.value
}

func (v *NullableMeControllerUserDetailsRequest) Set(val *MeControllerUserDetailsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableMeControllerUserDetailsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableMeControllerUserDetailsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMeControllerUserDetailsRequest(val *MeControllerUserDetailsRequest) *NullableMeControllerUserDetailsRequest {
	return &NullableMeControllerUserDetailsRequest{value: val, isSet: true}
}

func (v NullableMeControllerUserDetailsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMeControllerUserDetailsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
