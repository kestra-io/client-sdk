/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
)

// checks if the HostUsageHardware type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HostUsageHardware{}

// HostUsageHardware struct for HostUsageHardware
type HostUsageHardware struct {
	LogicalProcessorCount  *int32 `json:"logicalProcessorCount,omitempty"`
	PhysicalProcessorCount *int64 `json:"physicalProcessorCount,omitempty"`
	MaxFreq                *int64 `json:"maxFreq,omitempty"`
	Memory                 *int64 `json:"memory,omitempty"`
	KnownVmMacAddr         *bool  `json:"knownVmMacAddr,omitempty"`
	KnownDockerMacAddr     *bool  `json:"knownDockerMacAddr,omitempty"`
	AdditionalProperties   map[string]interface{}
}

type _HostUsageHardware HostUsageHardware

// NewHostUsageHardware instantiates a new HostUsageHardware object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHostUsageHardware() *HostUsageHardware {
	this := HostUsageHardware{}
	return &this
}

// NewHostUsageHardwareWithDefaults instantiates a new HostUsageHardware object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHostUsageHardwareWithDefaults() *HostUsageHardware {
	this := HostUsageHardware{}
	return &this
}

// GetLogicalProcessorCount returns the LogicalProcessorCount field value if set, zero value otherwise.
func (o *HostUsageHardware) GetLogicalProcessorCount() int32 {
	if o == nil || IsNil(o.LogicalProcessorCount) {
		var ret int32
		return ret
	}
	return *o.LogicalProcessorCount
}

// GetLogicalProcessorCountOk returns a tuple with the LogicalProcessorCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HostUsageHardware) GetLogicalProcessorCountOk() (*int32, bool) {
	if o == nil || IsNil(o.LogicalProcessorCount) {
		return nil, false
	}
	return o.LogicalProcessorCount, true
}

// HasLogicalProcessorCount returns a boolean if a field has been set.
func (o *HostUsageHardware) HasLogicalProcessorCount() bool {
	if o != nil && !IsNil(o.LogicalProcessorCount) {
		return true
	}

	return false
}

// SetLogicalProcessorCount gets a reference to the given int32 and assigns it to the LogicalProcessorCount field.
func (o *HostUsageHardware) SetLogicalProcessorCount(v int32) {
	o.LogicalProcessorCount = &v
}

// GetPhysicalProcessorCount returns the PhysicalProcessorCount field value if set, zero value otherwise.
func (o *HostUsageHardware) GetPhysicalProcessorCount() int64 {
	if o == nil || IsNil(o.PhysicalProcessorCount) {
		var ret int64
		return ret
	}
	return *o.PhysicalProcessorCount
}

// GetPhysicalProcessorCountOk returns a tuple with the PhysicalProcessorCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HostUsageHardware) GetPhysicalProcessorCountOk() (*int64, bool) {
	if o == nil || IsNil(o.PhysicalProcessorCount) {
		return nil, false
	}
	return o.PhysicalProcessorCount, true
}

// HasPhysicalProcessorCount returns a boolean if a field has been set.
func (o *HostUsageHardware) HasPhysicalProcessorCount() bool {
	if o != nil && !IsNil(o.PhysicalProcessorCount) {
		return true
	}

	return false
}

// SetPhysicalProcessorCount gets a reference to the given int64 and assigns it to the PhysicalProcessorCount field.
func (o *HostUsageHardware) SetPhysicalProcessorCount(v int64) {
	o.PhysicalProcessorCount = &v
}

// GetMaxFreq returns the MaxFreq field value if set, zero value otherwise.
func (o *HostUsageHardware) GetMaxFreq() int64 {
	if o == nil || IsNil(o.MaxFreq) {
		var ret int64
		return ret
	}
	return *o.MaxFreq
}

// GetMaxFreqOk returns a tuple with the MaxFreq field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HostUsageHardware) GetMaxFreqOk() (*int64, bool) {
	if o == nil || IsNil(o.MaxFreq) {
		return nil, false
	}
	return o.MaxFreq, true
}

// HasMaxFreq returns a boolean if a field has been set.
func (o *HostUsageHardware) HasMaxFreq() bool {
	if o != nil && !IsNil(o.MaxFreq) {
		return true
	}

	return false
}

// SetMaxFreq gets a reference to the given int64 and assigns it to the MaxFreq field.
func (o *HostUsageHardware) SetMaxFreq(v int64) {
	o.MaxFreq = &v
}

// GetMemory returns the Memory field value if set, zero value otherwise.
func (o *HostUsageHardware) GetMemory() int64 {
	if o == nil || IsNil(o.Memory) {
		var ret int64
		return ret
	}
	return *o.Memory
}

// GetMemoryOk returns a tuple with the Memory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HostUsageHardware) GetMemoryOk() (*int64, bool) {
	if o == nil || IsNil(o.Memory) {
		return nil, false
	}
	return o.Memory, true
}

// HasMemory returns a boolean if a field has been set.
func (o *HostUsageHardware) HasMemory() bool {
	if o != nil && !IsNil(o.Memory) {
		return true
	}

	return false
}

// SetMemory gets a reference to the given int64 and assigns it to the Memory field.
func (o *HostUsageHardware) SetMemory(v int64) {
	o.Memory = &v
}

// GetKnownVmMacAddr returns the KnownVmMacAddr field value if set, zero value otherwise.
func (o *HostUsageHardware) GetKnownVmMacAddr() bool {
	if o == nil || IsNil(o.KnownVmMacAddr) {
		var ret bool
		return ret
	}
	return *o.KnownVmMacAddr
}

// GetKnownVmMacAddrOk returns a tuple with the KnownVmMacAddr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HostUsageHardware) GetKnownVmMacAddrOk() (*bool, bool) {
	if o == nil || IsNil(o.KnownVmMacAddr) {
		return nil, false
	}
	return o.KnownVmMacAddr, true
}

// HasKnownVmMacAddr returns a boolean if a field has been set.
func (o *HostUsageHardware) HasKnownVmMacAddr() bool {
	if o != nil && !IsNil(o.KnownVmMacAddr) {
		return true
	}

	return false
}

// SetKnownVmMacAddr gets a reference to the given bool and assigns it to the KnownVmMacAddr field.
func (o *HostUsageHardware) SetKnownVmMacAddr(v bool) {
	o.KnownVmMacAddr = &v
}

// GetKnownDockerMacAddr returns the KnownDockerMacAddr field value if set, zero value otherwise.
func (o *HostUsageHardware) GetKnownDockerMacAddr() bool {
	if o == nil || IsNil(o.KnownDockerMacAddr) {
		var ret bool
		return ret
	}
	return *o.KnownDockerMacAddr
}

// GetKnownDockerMacAddrOk returns a tuple with the KnownDockerMacAddr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HostUsageHardware) GetKnownDockerMacAddrOk() (*bool, bool) {
	if o == nil || IsNil(o.KnownDockerMacAddr) {
		return nil, false
	}
	return o.KnownDockerMacAddr, true
}

// HasKnownDockerMacAddr returns a boolean if a field has been set.
func (o *HostUsageHardware) HasKnownDockerMacAddr() bool {
	if o != nil && !IsNil(o.KnownDockerMacAddr) {
		return true
	}

	return false
}

// SetKnownDockerMacAddr gets a reference to the given bool and assigns it to the KnownDockerMacAddr field.
func (o *HostUsageHardware) SetKnownDockerMacAddr(v bool) {
	o.KnownDockerMacAddr = &v
}

func (o HostUsageHardware) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HostUsageHardware) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LogicalProcessorCount) {
		toSerialize["logicalProcessorCount"] = o.LogicalProcessorCount
	}
	if !IsNil(o.PhysicalProcessorCount) {
		toSerialize["physicalProcessorCount"] = o.PhysicalProcessorCount
	}
	if !IsNil(o.MaxFreq) {
		toSerialize["maxFreq"] = o.MaxFreq
	}
	if !IsNil(o.Memory) {
		toSerialize["memory"] = o.Memory
	}
	if !IsNil(o.KnownVmMacAddr) {
		toSerialize["knownVmMacAddr"] = o.KnownVmMacAddr
	}
	if !IsNil(o.KnownDockerMacAddr) {
		toSerialize["knownDockerMacAddr"] = o.KnownDockerMacAddr
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *HostUsageHardware) UnmarshalJSON(data []byte) (err error) {
	varHostUsageHardware := _HostUsageHardware{}

	err = json.Unmarshal(data, &varHostUsageHardware)

	if err != nil {
		return err
	}

	*o = HostUsageHardware(varHostUsageHardware)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "logicalProcessorCount")
		delete(additionalProperties, "physicalProcessorCount")
		delete(additionalProperties, "maxFreq")
		delete(additionalProperties, "memory")
		delete(additionalProperties, "knownVmMacAddr")
		delete(additionalProperties, "knownDockerMacAddr")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableHostUsageHardware struct {
	value *HostUsageHardware
	isSet bool
}

func (v NullableHostUsageHardware) Get() *HostUsageHardware {
	return v.value
}

func (v *NullableHostUsageHardware) Set(val *HostUsageHardware) {
	v.value = val
	v.isSet = true
}

func (v NullableHostUsageHardware) IsSet() bool {
	return v.isSet
}

func (v *NullableHostUsageHardware) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHostUsageHardware(val *HostUsageHardware) *NullableHostUsageHardware {
	return &NullableHostUsageHardware{value: val, isSet: true}
}

func (v NullableHostUsageHardware) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHostUsageHardware) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
