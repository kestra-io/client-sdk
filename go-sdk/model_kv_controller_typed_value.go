/*
Kestra EE

All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
)

// checks if the KVControllerTypedValue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KVControllerTypedValue{}

// KVControllerTypedValue struct for KVControllerTypedValue
type KVControllerTypedValue struct {
	Type  *KVType                `json:"type,omitempty"`
	Value map[string]interface{} `json:"value,omitempty"`
}

// NewKVControllerTypedValue instantiates a new KVControllerTypedValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKVControllerTypedValue() *KVControllerTypedValue {
	this := KVControllerTypedValue{}
	return &this
}

// NewKVControllerTypedValueWithDefaults instantiates a new KVControllerTypedValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKVControllerTypedValueWithDefaults() *KVControllerTypedValue {
	this := KVControllerTypedValue{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *KVControllerTypedValue) GetType() KVType {
	if o == nil || IsNil(o.Type) {
		var ret KVType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KVControllerTypedValue) GetTypeOk() (*KVType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *KVControllerTypedValue) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given KVType and assigns it to the Type field.
func (o *KVControllerTypedValue) SetType(v KVType) {
	o.Type = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *KVControllerTypedValue) GetValue() map[string]interface{} {
	if o == nil || IsNil(o.Value) {
		var ret map[string]interface{}
		return ret
	}
	return o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KVControllerTypedValue) GetValueOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Value) {
		return map[string]interface{}{}, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *KVControllerTypedValue) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given map[string]interface{} and assigns it to the Value field.
func (o *KVControllerTypedValue) SetValue(v map[string]interface{}) {
	o.Value = v
}

func (o KVControllerTypedValue) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KVControllerTypedValue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableKVControllerTypedValue struct {
	value *KVControllerTypedValue
	isSet bool
}

func (v NullableKVControllerTypedValue) Get() *KVControllerTypedValue {
	return v.value
}

func (v *NullableKVControllerTypedValue) Set(val *KVControllerTypedValue) {
	v.value = val
	v.isSet = true
}

func (v NullableKVControllerTypedValue) IsSet() bool {
	return v.isSet
}

func (v *NullableKVControllerTypedValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKVControllerTypedValue(val *KVControllerTypedValue) *NullableKVControllerTypedValue {
	return &NullableKVControllerTypedValue{value: val, isSet: true}
}

func (v NullableKVControllerTypedValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKVControllerTypedValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
