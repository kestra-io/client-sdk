/*
Kestra EE

All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"time"
)

// checks if the ClusterControllerApiServiceInstance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClusterControllerApiServiceInstance{}

// ClusterControllerApiServiceInstance struct for ClusterControllerApiServiceInstance
type ClusterControllerApiServiceInstance struct {
	Id        *string                             `json:"id,omitempty"`
	Type      *ServiceType                        `json:"type,omitempty"`
	State     *ServiceServiceState                `json:"state,omitempty"`
	Server    *ClusterControllerApiServerInstance `json:"server,omitempty"`
	CreatedAt *time.Time                          `json:"createdAt,omitempty"`
	UpdatedAt *time.Time                          `json:"updatedAt,omitempty"`
}

// NewClusterControllerApiServiceInstance instantiates a new ClusterControllerApiServiceInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterControllerApiServiceInstance() *ClusterControllerApiServiceInstance {
	this := ClusterControllerApiServiceInstance{}
	return &this
}

// NewClusterControllerApiServiceInstanceWithDefaults instantiates a new ClusterControllerApiServiceInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterControllerApiServiceInstanceWithDefaults() *ClusterControllerApiServiceInstance {
	this := ClusterControllerApiServiceInstance{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ClusterControllerApiServiceInstance) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterControllerApiServiceInstance) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ClusterControllerApiServiceInstance) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ClusterControllerApiServiceInstance) SetId(v string) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ClusterControllerApiServiceInstance) GetType() ServiceType {
	if o == nil || IsNil(o.Type) {
		var ret ServiceType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterControllerApiServiceInstance) GetTypeOk() (*ServiceType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ClusterControllerApiServiceInstance) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given ServiceType and assigns it to the Type field.
func (o *ClusterControllerApiServiceInstance) SetType(v ServiceType) {
	o.Type = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *ClusterControllerApiServiceInstance) GetState() ServiceServiceState {
	if o == nil || IsNil(o.State) {
		var ret ServiceServiceState
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterControllerApiServiceInstance) GetStateOk() (*ServiceServiceState, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *ClusterControllerApiServiceInstance) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given ServiceServiceState and assigns it to the State field.
func (o *ClusterControllerApiServiceInstance) SetState(v ServiceServiceState) {
	o.State = &v
}

// GetServer returns the Server field value if set, zero value otherwise.
func (o *ClusterControllerApiServiceInstance) GetServer() ClusterControllerApiServerInstance {
	if o == nil || IsNil(o.Server) {
		var ret ClusterControllerApiServerInstance
		return ret
	}
	return *o.Server
}

// GetServerOk returns a tuple with the Server field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterControllerApiServiceInstance) GetServerOk() (*ClusterControllerApiServerInstance, bool) {
	if o == nil || IsNil(o.Server) {
		return nil, false
	}
	return o.Server, true
}

// HasServer returns a boolean if a field has been set.
func (o *ClusterControllerApiServiceInstance) HasServer() bool {
	if o != nil && !IsNil(o.Server) {
		return true
	}

	return false
}

// SetServer gets a reference to the given ClusterControllerApiServerInstance and assigns it to the Server field.
func (o *ClusterControllerApiServiceInstance) SetServer(v ClusterControllerApiServerInstance) {
	o.Server = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *ClusterControllerApiServiceInstance) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterControllerApiServiceInstance) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *ClusterControllerApiServiceInstance) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *ClusterControllerApiServiceInstance) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *ClusterControllerApiServiceInstance) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterControllerApiServiceInstance) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *ClusterControllerApiServiceInstance) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *ClusterControllerApiServiceInstance) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o ClusterControllerApiServiceInstance) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClusterControllerApiServiceInstance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.Server) {
		toSerialize["server"] = o.Server
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	return toSerialize, nil
}

type NullableClusterControllerApiServiceInstance struct {
	value *ClusterControllerApiServiceInstance
	isSet bool
}

func (v NullableClusterControllerApiServiceInstance) Get() *ClusterControllerApiServiceInstance {
	return v.value
}

func (v *NullableClusterControllerApiServiceInstance) Set(val *ClusterControllerApiServiceInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterControllerApiServiceInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterControllerApiServiceInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterControllerApiServiceInstance(val *ClusterControllerApiServiceInstance) *NullableClusterControllerApiServiceInstance {
	return &NullableClusterControllerApiServiceInstance{value: val, isSet: true}
}

func (v NullableClusterControllerApiServiceInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterControllerApiServiceInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
