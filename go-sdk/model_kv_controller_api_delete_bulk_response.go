/*
Kestra EE

All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
)

// checks if the KVControllerApiDeleteBulkResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KVControllerApiDeleteBulkResponse{}

// KVControllerApiDeleteBulkResponse struct for KVControllerApiDeleteBulkResponse
type KVControllerApiDeleteBulkResponse struct {
	Keys []string `json:"keys,omitempty"`
}

// NewKVControllerApiDeleteBulkResponse instantiates a new KVControllerApiDeleteBulkResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKVControllerApiDeleteBulkResponse() *KVControllerApiDeleteBulkResponse {
	this := KVControllerApiDeleteBulkResponse{}
	return &this
}

// NewKVControllerApiDeleteBulkResponseWithDefaults instantiates a new KVControllerApiDeleteBulkResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKVControllerApiDeleteBulkResponseWithDefaults() *KVControllerApiDeleteBulkResponse {
	this := KVControllerApiDeleteBulkResponse{}
	return &this
}

// GetKeys returns the Keys field value if set, zero value otherwise.
func (o *KVControllerApiDeleteBulkResponse) GetKeys() []string {
	if o == nil || IsNil(o.Keys) {
		var ret []string
		return ret
	}
	return o.Keys
}

// GetKeysOk returns a tuple with the Keys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KVControllerApiDeleteBulkResponse) GetKeysOk() ([]string, bool) {
	if o == nil || IsNil(o.Keys) {
		return nil, false
	}
	return o.Keys, true
}

// HasKeys returns a boolean if a field has been set.
func (o *KVControllerApiDeleteBulkResponse) HasKeys() bool {
	if o != nil && !IsNil(o.Keys) {
		return true
	}

	return false
}

// SetKeys gets a reference to the given []string and assigns it to the Keys field.
func (o *KVControllerApiDeleteBulkResponse) SetKeys(v []string) {
	o.Keys = v
}

func (o KVControllerApiDeleteBulkResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KVControllerApiDeleteBulkResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Keys) {
		toSerialize["keys"] = o.Keys
	}
	return toSerialize, nil
}

type NullableKVControllerApiDeleteBulkResponse struct {
	value *KVControllerApiDeleteBulkResponse
	isSet bool
}

func (v NullableKVControllerApiDeleteBulkResponse) Get() *KVControllerApiDeleteBulkResponse {
	return v.value
}

func (v *NullableKVControllerApiDeleteBulkResponse) Set(val *KVControllerApiDeleteBulkResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableKVControllerApiDeleteBulkResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableKVControllerApiDeleteBulkResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKVControllerApiDeleteBulkResponse(val *KVControllerApiDeleteBulkResponse) *NullableKVControllerApiDeleteBulkResponse {
	return &NullableKVControllerApiDeleteBulkResponse{value: val, isSet: true}
}

func (v NullableKVControllerApiDeleteBulkResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKVControllerApiDeleteBulkResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
