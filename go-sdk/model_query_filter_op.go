/*
Kestra EE

All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
)

// QueryFilterOp the model 'QueryFilterOp'
type QueryFilterOp string

// List of QueryFilter.Op
const (
	QUERYFILTEROP_EQUALS                   QueryFilterOp = "EQUALS"
	QUERYFILTEROP_NOT_EQUALS               QueryFilterOp = "NOT_EQUALS"
	QUERYFILTEROP_GREATER_THAN             QueryFilterOp = "GREATER_THAN"
	QUERYFILTEROP_LESS_THAN                QueryFilterOp = "LESS_THAN"
	QUERYFILTEROP_GREATER_THAN_OR_EQUAL_TO QueryFilterOp = "GREATER_THAN_OR_EQUAL_TO"
	QUERYFILTEROP_LESS_THAN_OR_EQUAL_TO    QueryFilterOp = "LESS_THAN_OR_EQUAL_TO"
	QUERYFILTEROP_IN                       QueryFilterOp = "IN"
	QUERYFILTEROP_NOT_IN                   QueryFilterOp = "NOT_IN"
	QUERYFILTEROP_STARTS_WITH              QueryFilterOp = "STARTS_WITH"
	QUERYFILTEROP_ENDS_WITH                QueryFilterOp = "ENDS_WITH"
	QUERYFILTEROP_CONTAINS                 QueryFilterOp = "CONTAINS"
	QUERYFILTEROP_REGEX                    QueryFilterOp = "REGEX"
	QUERYFILTEROP_PREFIX                   QueryFilterOp = "PREFIX"
)

// All allowed values of QueryFilterOp enum
var AllowedQueryFilterOpEnumValues = []QueryFilterOp{
	"EQUALS",
	"NOT_EQUALS",
	"GREATER_THAN",
	"LESS_THAN",
	"GREATER_THAN_OR_EQUAL_TO",
	"LESS_THAN_OR_EQUAL_TO",
	"IN",
	"NOT_IN",
	"STARTS_WITH",
	"ENDS_WITH",
	"CONTAINS",
	"REGEX",
	"PREFIX",
}

func (v *QueryFilterOp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := QueryFilterOp(value)
	for _, existing := range AllowedQueryFilterOpEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid QueryFilterOp", value)
}

// NewQueryFilterOpFromValue returns a pointer to a valid QueryFilterOp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewQueryFilterOpFromValue(v string) (*QueryFilterOp, error) {
	ev := QueryFilterOp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for QueryFilterOp: valid values are %v", v, AllowedQueryFilterOpEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v QueryFilterOp) IsValid() bool {
	for _, existing := range AllowedQueryFilterOpEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to QueryFilter.Op value
func (v QueryFilterOp) Ptr() *QueryFilterOp {
	return &v
}

type NullableQueryFilterOp struct {
	value *QueryFilterOp
	isSet bool
}

func (v NullableQueryFilterOp) Get() *QueryFilterOp {
	return v.value
}

func (v *NullableQueryFilterOp) Set(val *QueryFilterOp) {
	v.value = val
	v.isSet = true
}

func (v NullableQueryFilterOp) IsSet() bool {
	return v.isSet
}

func (v *NullableQueryFilterOp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQueryFilterOp(val *QueryFilterOp) *NullableQueryFilterOp {
	return &NullableQueryFilterOp{value: val, isSet: true}
}

func (v NullableQueryFilterOp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQueryFilterOp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
