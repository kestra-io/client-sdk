/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
)

// RBACServiceRoleAssignmentRoleOrigin the model 'RBACServiceRoleAssignmentRoleOrigin'
type RBACServiceRoleAssignmentRoleOrigin string

// List of RBACService.RoleAssignment.RoleOrigin
const (
	RBACSERVICEROLEASSIGNMENTROLEORIGIN_BINDING RBACServiceRoleAssignmentRoleOrigin = "BINDING"
	RBACSERVICEROLEASSIGNMENTROLEORIGIN_GROUP   RBACServiceRoleAssignmentRoleOrigin = "GROUP"
)

// All allowed values of RBACServiceRoleAssignmentRoleOrigin enum
var AllowedRBACServiceRoleAssignmentRoleOriginEnumValues = []RBACServiceRoleAssignmentRoleOrigin{
	"BINDING",
	"GROUP",
}

func (v *RBACServiceRoleAssignmentRoleOrigin) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RBACServiceRoleAssignmentRoleOrigin(value)
	for _, existing := range AllowedRBACServiceRoleAssignmentRoleOriginEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RBACServiceRoleAssignmentRoleOrigin", value)
}

// NewRBACServiceRoleAssignmentRoleOriginFromValue returns a pointer to a valid RBACServiceRoleAssignmentRoleOrigin
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRBACServiceRoleAssignmentRoleOriginFromValue(v string) (*RBACServiceRoleAssignmentRoleOrigin, error) {
	ev := RBACServiceRoleAssignmentRoleOrigin(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RBACServiceRoleAssignmentRoleOrigin: valid values are %v", v, AllowedRBACServiceRoleAssignmentRoleOriginEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RBACServiceRoleAssignmentRoleOrigin) IsValid() bool {
	for _, existing := range AllowedRBACServiceRoleAssignmentRoleOriginEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RBACService.RoleAssignment.RoleOrigin value
func (v RBACServiceRoleAssignmentRoleOrigin) Ptr() *RBACServiceRoleAssignmentRoleOrigin {
	return &v
}

type NullableRBACServiceRoleAssignmentRoleOrigin struct {
	value *RBACServiceRoleAssignmentRoleOrigin
	isSet bool
}

func (v NullableRBACServiceRoleAssignmentRoleOrigin) Get() *RBACServiceRoleAssignmentRoleOrigin {
	return v.value
}

func (v *NullableRBACServiceRoleAssignmentRoleOrigin) Set(val *RBACServiceRoleAssignmentRoleOrigin) {
	v.value = val
	v.isSet = true
}

func (v NullableRBACServiceRoleAssignmentRoleOrigin) IsSet() bool {
	return v.isSet
}

func (v *NullableRBACServiceRoleAssignmentRoleOrigin) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRBACServiceRoleAssignmentRoleOrigin(val *RBACServiceRoleAssignmentRoleOrigin) *NullableRBACServiceRoleAssignmentRoleOrigin {
	return &NullableRBACServiceRoleAssignmentRoleOrigin{value: val, isSet: true}
}

func (v NullableRBACServiceRoleAssignmentRoleOrigin) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRBACServiceRoleAssignmentRoleOrigin) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
