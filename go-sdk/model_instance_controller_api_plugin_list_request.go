/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
)

// checks if the InstanceControllerApiPluginListRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InstanceControllerApiPluginListRequest{}

// InstanceControllerApiPluginListRequest struct for InstanceControllerApiPluginListRequest
type InstanceControllerApiPluginListRequest struct {
	Plugins              []string `json:"plugins,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _InstanceControllerApiPluginListRequest InstanceControllerApiPluginListRequest

// NewInstanceControllerApiPluginListRequest instantiates a new InstanceControllerApiPluginListRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstanceControllerApiPluginListRequest() *InstanceControllerApiPluginListRequest {
	this := InstanceControllerApiPluginListRequest{}
	return &this
}

// NewInstanceControllerApiPluginListRequestWithDefaults instantiates a new InstanceControllerApiPluginListRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceControllerApiPluginListRequestWithDefaults() *InstanceControllerApiPluginListRequest {
	this := InstanceControllerApiPluginListRequest{}
	return &this
}

// GetPlugins returns the Plugins field value if set, zero value otherwise.
func (o *InstanceControllerApiPluginListRequest) GetPlugins() []string {
	if o == nil || IsNil(o.Plugins) {
		var ret []string
		return ret
	}
	return o.Plugins
}

// GetPluginsOk returns a tuple with the Plugins field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceControllerApiPluginListRequest) GetPluginsOk() ([]string, bool) {
	if o == nil || IsNil(o.Plugins) {
		return nil, false
	}
	return o.Plugins, true
}

// HasPlugins returns a boolean if a field has been set.
func (o *InstanceControllerApiPluginListRequest) HasPlugins() bool {
	if o != nil && !IsNil(o.Plugins) {
		return true
	}

	return false
}

// SetPlugins gets a reference to the given []string and assigns it to the Plugins field.
func (o *InstanceControllerApiPluginListRequest) SetPlugins(v []string) {
	o.Plugins = v
}

func (o InstanceControllerApiPluginListRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InstanceControllerApiPluginListRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Plugins) {
		toSerialize["plugins"] = o.Plugins
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *InstanceControllerApiPluginListRequest) UnmarshalJSON(data []byte) (err error) {
	varInstanceControllerApiPluginListRequest := _InstanceControllerApiPluginListRequest{}

	err = json.Unmarshal(data, &varInstanceControllerApiPluginListRequest)

	if err != nil {
		return err
	}

	*o = InstanceControllerApiPluginListRequest(varInstanceControllerApiPluginListRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "plugins")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInstanceControllerApiPluginListRequest struct {
	value *InstanceControllerApiPluginListRequest
	isSet bool
}

func (v NullableInstanceControllerApiPluginListRequest) Get() *InstanceControllerApiPluginListRequest {
	return v.value
}

func (v *NullableInstanceControllerApiPluginListRequest) Set(val *InstanceControllerApiPluginListRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceControllerApiPluginListRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceControllerApiPluginListRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceControllerApiPluginListRequest(val *InstanceControllerApiPluginListRequest) *NullableInstanceControllerApiPluginListRequest {
	return &NullableInstanceControllerApiPluginListRequest{value: val, isSet: true}
}

func (v NullableInstanceControllerApiPluginListRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceControllerApiPluginListRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
