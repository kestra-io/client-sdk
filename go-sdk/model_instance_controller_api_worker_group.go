/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
)

// checks if the InstanceControllerApiWorkerGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InstanceControllerApiWorkerGroup{}

// InstanceControllerApiWorkerGroup ApiWorkerGroup.
type InstanceControllerApiWorkerGroup struct {
	// The ID of worker group.
	Id *string `json:"id,omitempty"`
	// The key of the worker group.
	Key *string `json:"key,omitempty"`
	// The description of the worker group.
	Description          *string  `json:"description,omitempty"`
	AllowedTenants       []string `json:"allowedTenants,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _InstanceControllerApiWorkerGroup InstanceControllerApiWorkerGroup

// NewInstanceControllerApiWorkerGroup instantiates a new InstanceControllerApiWorkerGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstanceControllerApiWorkerGroup() *InstanceControllerApiWorkerGroup {
	this := InstanceControllerApiWorkerGroup{}
	return &this
}

// NewInstanceControllerApiWorkerGroupWithDefaults instantiates a new InstanceControllerApiWorkerGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceControllerApiWorkerGroupWithDefaults() *InstanceControllerApiWorkerGroup {
	this := InstanceControllerApiWorkerGroup{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *InstanceControllerApiWorkerGroup) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceControllerApiWorkerGroup) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *InstanceControllerApiWorkerGroup) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *InstanceControllerApiWorkerGroup) SetId(v string) {
	o.Id = &v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *InstanceControllerApiWorkerGroup) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceControllerApiWorkerGroup) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *InstanceControllerApiWorkerGroup) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *InstanceControllerApiWorkerGroup) SetKey(v string) {
	o.Key = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *InstanceControllerApiWorkerGroup) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceControllerApiWorkerGroup) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *InstanceControllerApiWorkerGroup) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *InstanceControllerApiWorkerGroup) SetDescription(v string) {
	o.Description = &v
}

// GetAllowedTenants returns the AllowedTenants field value if set, zero value otherwise.
func (o *InstanceControllerApiWorkerGroup) GetAllowedTenants() []string {
	if o == nil || IsNil(o.AllowedTenants) {
		var ret []string
		return ret
	}
	return o.AllowedTenants
}

// GetAllowedTenantsOk returns a tuple with the AllowedTenants field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceControllerApiWorkerGroup) GetAllowedTenantsOk() ([]string, bool) {
	if o == nil || IsNil(o.AllowedTenants) {
		return nil, false
	}
	return o.AllowedTenants, true
}

// HasAllowedTenants returns a boolean if a field has been set.
func (o *InstanceControllerApiWorkerGroup) HasAllowedTenants() bool {
	if o != nil && !IsNil(o.AllowedTenants) {
		return true
	}

	return false
}

// SetAllowedTenants gets a reference to the given []string and assigns it to the AllowedTenants field.
func (o *InstanceControllerApiWorkerGroup) SetAllowedTenants(v []string) {
	o.AllowedTenants = v
}

func (o InstanceControllerApiWorkerGroup) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InstanceControllerApiWorkerGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.AllowedTenants) {
		toSerialize["allowedTenants"] = o.AllowedTenants
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *InstanceControllerApiWorkerGroup) UnmarshalJSON(data []byte) (err error) {
	varInstanceControllerApiWorkerGroup := _InstanceControllerApiWorkerGroup{}

	err = json.Unmarshal(data, &varInstanceControllerApiWorkerGroup)

	if err != nil {
		return err
	}

	*o = InstanceControllerApiWorkerGroup(varInstanceControllerApiWorkerGroup)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "key")
		delete(additionalProperties, "description")
		delete(additionalProperties, "allowedTenants")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInstanceControllerApiWorkerGroup struct {
	value *InstanceControllerApiWorkerGroup
	isSet bool
}

func (v NullableInstanceControllerApiWorkerGroup) Get() *InstanceControllerApiWorkerGroup {
	return v.value
}

func (v *NullableInstanceControllerApiWorkerGroup) Set(val *InstanceControllerApiWorkerGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceControllerApiWorkerGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceControllerApiWorkerGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceControllerApiWorkerGroup(val *InstanceControllerApiWorkerGroup) *NullableInstanceControllerApiWorkerGroup {
	return &NullableInstanceControllerApiWorkerGroup{value: val, isSet: true}
}

func (v NullableInstanceControllerApiWorkerGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceControllerApiWorkerGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
