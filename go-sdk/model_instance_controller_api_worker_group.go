/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
)

// checks if the InstanceControllerApiWorkerGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InstanceControllerApiWorkerGroup{}

// InstanceControllerApiWorkerGroup ApiWorkerGroup.
type InstanceControllerApiWorkerGroup struct {
	// The ID of worker group.
	Id string `json:"id"`
	// The key of the worker group.
	Key string `json:"key"`
	// The description of the worker group.
	Description          string   `json:"description"`
	AllowedTenants       []string `json:"allowedTenants"`
	AdditionalProperties map[string]interface{}
}

type _InstanceControllerApiWorkerGroup InstanceControllerApiWorkerGroup

// NewInstanceControllerApiWorkerGroup instantiates a new InstanceControllerApiWorkerGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstanceControllerApiWorkerGroup(id string, key string, description string, allowedTenants []string) *InstanceControllerApiWorkerGroup {
	this := InstanceControllerApiWorkerGroup{}
	this.Id = id
	this.Key = key
	this.Description = description
	this.AllowedTenants = allowedTenants
	return &this
}

// NewInstanceControllerApiWorkerGroupWithDefaults instantiates a new InstanceControllerApiWorkerGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceControllerApiWorkerGroupWithDefaults() *InstanceControllerApiWorkerGroup {
	this := InstanceControllerApiWorkerGroup{}
	return &this
}

// GetId returns the Id field value
func (o *InstanceControllerApiWorkerGroup) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *InstanceControllerApiWorkerGroup) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *InstanceControllerApiWorkerGroup) SetId(v string) {
	o.Id = v
}

// GetKey returns the Key field value
func (o *InstanceControllerApiWorkerGroup) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *InstanceControllerApiWorkerGroup) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *InstanceControllerApiWorkerGroup) SetKey(v string) {
	o.Key = v
}

// GetDescription returns the Description field value
func (o *InstanceControllerApiWorkerGroup) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *InstanceControllerApiWorkerGroup) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *InstanceControllerApiWorkerGroup) SetDescription(v string) {
	o.Description = v
}

// GetAllowedTenants returns the AllowedTenants field value
func (o *InstanceControllerApiWorkerGroup) GetAllowedTenants() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.AllowedTenants
}

// GetAllowedTenantsOk returns a tuple with the AllowedTenants field value
// and a boolean to check if the value has been set.
func (o *InstanceControllerApiWorkerGroup) GetAllowedTenantsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AllowedTenants, true
}

// SetAllowedTenants sets field value
func (o *InstanceControllerApiWorkerGroup) SetAllowedTenants(v []string) {
	o.AllowedTenants = v
}

func (o InstanceControllerApiWorkerGroup) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InstanceControllerApiWorkerGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["key"] = o.Key
	toSerialize["description"] = o.Description
	toSerialize["allowedTenants"] = o.AllowedTenants

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *InstanceControllerApiWorkerGroup) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"key",
		"description",
		"allowedTenants",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInstanceControllerApiWorkerGroup := _InstanceControllerApiWorkerGroup{}

	err = json.Unmarshal(data, &varInstanceControllerApiWorkerGroup)

	if err != nil {
		return err
	}

	*o = InstanceControllerApiWorkerGroup(varInstanceControllerApiWorkerGroup)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "key")
		delete(additionalProperties, "description")
		delete(additionalProperties, "allowedTenants")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInstanceControllerApiWorkerGroup struct {
	value *InstanceControllerApiWorkerGroup
	isSet bool
}

func (v NullableInstanceControllerApiWorkerGroup) Get() *InstanceControllerApiWorkerGroup {
	return v.value
}

func (v *NullableInstanceControllerApiWorkerGroup) Set(val *InstanceControllerApiWorkerGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceControllerApiWorkerGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceControllerApiWorkerGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceControllerApiWorkerGroup(val *InstanceControllerApiWorkerGroup) *NullableInstanceControllerApiWorkerGroup {
	return &NullableInstanceControllerApiWorkerGroup{value: val, isSet: true}
}

func (v NullableInstanceControllerApiWorkerGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceControllerApiWorkerGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
