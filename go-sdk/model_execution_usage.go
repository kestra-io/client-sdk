/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
)

// checks if the ExecutionUsage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExecutionUsage{}

// ExecutionUsage struct for ExecutionUsage
type ExecutionUsage struct {
	DailyExecutionsCount []DailyExecutionStatistics `json:"dailyExecutionsCount,omitempty"`
	DailyTaskRunsCount   []DailyExecutionStatistics `json:"dailyTaskRunsCount,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ExecutionUsage ExecutionUsage

// NewExecutionUsage instantiates a new ExecutionUsage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExecutionUsage() *ExecutionUsage {
	this := ExecutionUsage{}
	return &this
}

// NewExecutionUsageWithDefaults instantiates a new ExecutionUsage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExecutionUsageWithDefaults() *ExecutionUsage {
	this := ExecutionUsage{}
	return &this
}

// GetDailyExecutionsCount returns the DailyExecutionsCount field value if set, zero value otherwise.
func (o *ExecutionUsage) GetDailyExecutionsCount() []DailyExecutionStatistics {
	if o == nil || IsNil(o.DailyExecutionsCount) {
		var ret []DailyExecutionStatistics
		return ret
	}
	return o.DailyExecutionsCount
}

// GetDailyExecutionsCountOk returns a tuple with the DailyExecutionsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionUsage) GetDailyExecutionsCountOk() ([]DailyExecutionStatistics, bool) {
	if o == nil || IsNil(o.DailyExecutionsCount) {
		return nil, false
	}
	return o.DailyExecutionsCount, true
}

// HasDailyExecutionsCount returns a boolean if a field has been set.
func (o *ExecutionUsage) HasDailyExecutionsCount() bool {
	if o != nil && !IsNil(o.DailyExecutionsCount) {
		return true
	}

	return false
}

// SetDailyExecutionsCount gets a reference to the given []DailyExecutionStatistics and assigns it to the DailyExecutionsCount field.
func (o *ExecutionUsage) SetDailyExecutionsCount(v []DailyExecutionStatistics) {
	o.DailyExecutionsCount = v
}

// GetDailyTaskRunsCount returns the DailyTaskRunsCount field value if set, zero value otherwise.
func (o *ExecutionUsage) GetDailyTaskRunsCount() []DailyExecutionStatistics {
	if o == nil || IsNil(o.DailyTaskRunsCount) {
		var ret []DailyExecutionStatistics
		return ret
	}
	return o.DailyTaskRunsCount
}

// GetDailyTaskRunsCountOk returns a tuple with the DailyTaskRunsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionUsage) GetDailyTaskRunsCountOk() ([]DailyExecutionStatistics, bool) {
	if o == nil || IsNil(o.DailyTaskRunsCount) {
		return nil, false
	}
	return o.DailyTaskRunsCount, true
}

// HasDailyTaskRunsCount returns a boolean if a field has been set.
func (o *ExecutionUsage) HasDailyTaskRunsCount() bool {
	if o != nil && !IsNil(o.DailyTaskRunsCount) {
		return true
	}

	return false
}

// SetDailyTaskRunsCount gets a reference to the given []DailyExecutionStatistics and assigns it to the DailyTaskRunsCount field.
func (o *ExecutionUsage) SetDailyTaskRunsCount(v []DailyExecutionStatistics) {
	o.DailyTaskRunsCount = v
}

func (o ExecutionUsage) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExecutionUsage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DailyExecutionsCount) {
		toSerialize["dailyExecutionsCount"] = o.DailyExecutionsCount
	}
	if !IsNil(o.DailyTaskRunsCount) {
		toSerialize["dailyTaskRunsCount"] = o.DailyTaskRunsCount
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ExecutionUsage) UnmarshalJSON(data []byte) (err error) {
	varExecutionUsage := _ExecutionUsage{}

	err = json.Unmarshal(data, &varExecutionUsage)

	if err != nil {
		return err
	}

	*o = ExecutionUsage(varExecutionUsage)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "dailyExecutionsCount")
		delete(additionalProperties, "dailyTaskRunsCount")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableExecutionUsage struct {
	value *ExecutionUsage
	isSet bool
}

func (v NullableExecutionUsage) Get() *ExecutionUsage {
	return v.value
}

func (v *NullableExecutionUsage) Set(val *ExecutionUsage) {
	v.value = val
	v.isSet = true
}

func (v NullableExecutionUsage) IsSet() bool {
	return v.isSet
}

func (v *NullableExecutionUsage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExecutionUsage(val *ExecutionUsage) *NullableExecutionUsage {
	return &NullableExecutionUsage{value: val, isSet: true}
}

func (v NullableExecutionUsage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExecutionUsage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
