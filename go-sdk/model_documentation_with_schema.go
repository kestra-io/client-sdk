/*
Kestra EE

All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
)

// checks if the DocumentationWithSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DocumentationWithSchema{}

// DocumentationWithSchema struct for DocumentationWithSchema
type DocumentationWithSchema struct {
	Markdown *string       `json:"markdown,omitempty"`
	Schema   *PluginSchema `json:"schema,omitempty"`
}

// NewDocumentationWithSchema instantiates a new DocumentationWithSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDocumentationWithSchema() *DocumentationWithSchema {
	this := DocumentationWithSchema{}
	return &this
}

// NewDocumentationWithSchemaWithDefaults instantiates a new DocumentationWithSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDocumentationWithSchemaWithDefaults() *DocumentationWithSchema {
	this := DocumentationWithSchema{}
	return &this
}

// GetMarkdown returns the Markdown field value if set, zero value otherwise.
func (o *DocumentationWithSchema) GetMarkdown() string {
	if o == nil || IsNil(o.Markdown) {
		var ret string
		return ret
	}
	return *o.Markdown
}

// GetMarkdownOk returns a tuple with the Markdown field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentationWithSchema) GetMarkdownOk() (*string, bool) {
	if o == nil || IsNil(o.Markdown) {
		return nil, false
	}
	return o.Markdown, true
}

// HasMarkdown returns a boolean if a field has been set.
func (o *DocumentationWithSchema) HasMarkdown() bool {
	if o != nil && !IsNil(o.Markdown) {
		return true
	}

	return false
}

// SetMarkdown gets a reference to the given string and assigns it to the Markdown field.
func (o *DocumentationWithSchema) SetMarkdown(v string) {
	o.Markdown = &v
}

// GetSchema returns the Schema field value if set, zero value otherwise.
func (o *DocumentationWithSchema) GetSchema() PluginSchema {
	if o == nil || IsNil(o.Schema) {
		var ret PluginSchema
		return ret
	}
	return *o.Schema
}

// GetSchemaOk returns a tuple with the Schema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentationWithSchema) GetSchemaOk() (*PluginSchema, bool) {
	if o == nil || IsNil(o.Schema) {
		return nil, false
	}
	return o.Schema, true
}

// HasSchema returns a boolean if a field has been set.
func (o *DocumentationWithSchema) HasSchema() bool {
	if o != nil && !IsNil(o.Schema) {
		return true
	}

	return false
}

// SetSchema gets a reference to the given PluginSchema and assigns it to the Schema field.
func (o *DocumentationWithSchema) SetSchema(v PluginSchema) {
	o.Schema = &v
}

func (o DocumentationWithSchema) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DocumentationWithSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Markdown) {
		toSerialize["markdown"] = o.Markdown
	}
	if !IsNil(o.Schema) {
		toSerialize["schema"] = o.Schema
	}
	return toSerialize, nil
}

type NullableDocumentationWithSchema struct {
	value *DocumentationWithSchema
	isSet bool
}

func (v NullableDocumentationWithSchema) Get() *DocumentationWithSchema {
	return v.value
}

func (v *NullableDocumentationWithSchema) Set(val *DocumentationWithSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableDocumentationWithSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableDocumentationWithSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDocumentationWithSchema(val *DocumentationWithSchema) *NullableDocumentationWithSchema {
	return &NullableDocumentationWithSchema{value: val, isSet: true}
}

func (v NullableDocumentationWithSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDocumentationWithSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
