/*
Kestra EE

All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
)

// checks if the AbstractUserGroupIdentifier type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AbstractUserGroupIdentifier{}

// AbstractUserGroupIdentifier struct for AbstractUserGroupIdentifier
type AbstractUserGroupIdentifier struct {
	TenantId          NullableString                         `json:"tenantId,omitempty"`
	GroupId           *string                                `json:"groupId,omitempty"`
	Membership        *AbstractUserGroupIdentifierMembership `json:"membership,omitempty"`
	ManagedExternally *bool                                  `json:"managedExternally,omitempty"`
}

// NewAbstractUserGroupIdentifier instantiates a new AbstractUserGroupIdentifier object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAbstractUserGroupIdentifier() *AbstractUserGroupIdentifier {
	this := AbstractUserGroupIdentifier{}
	return &this
}

// NewAbstractUserGroupIdentifierWithDefaults instantiates a new AbstractUserGroupIdentifier object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAbstractUserGroupIdentifierWithDefaults() *AbstractUserGroupIdentifier {
	this := AbstractUserGroupIdentifier{}
	return &this
}

// GetTenantId returns the TenantId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AbstractUserGroupIdentifier) GetTenantId() string {
	if o == nil || IsNil(o.TenantId.Get()) {
		var ret string
		return ret
	}
	return *o.TenantId.Get()
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AbstractUserGroupIdentifier) GetTenantIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TenantId.Get(), o.TenantId.IsSet()
}

// HasTenantId returns a boolean if a field has been set.
func (o *AbstractUserGroupIdentifier) HasTenantId() bool {
	if o != nil && o.TenantId.IsSet() {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given NullableString and assigns it to the TenantId field.
func (o *AbstractUserGroupIdentifier) SetTenantId(v string) {
	o.TenantId.Set(&v)
}

// SetTenantIdNil sets the value for TenantId to be an explicit nil
func (o *AbstractUserGroupIdentifier) SetTenantIdNil() {
	o.TenantId.Set(nil)
}

// UnsetTenantId ensures that no value is present for TenantId, not even an explicit nil
func (o *AbstractUserGroupIdentifier) UnsetTenantId() {
	o.TenantId.Unset()
}

// GetGroupId returns the GroupId field value if set, zero value otherwise.
func (o *AbstractUserGroupIdentifier) GetGroupId() string {
	if o == nil || IsNil(o.GroupId) {
		var ret string
		return ret
	}
	return *o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AbstractUserGroupIdentifier) GetGroupIdOk() (*string, bool) {
	if o == nil || IsNil(o.GroupId) {
		return nil, false
	}
	return o.GroupId, true
}

// HasGroupId returns a boolean if a field has been set.
func (o *AbstractUserGroupIdentifier) HasGroupId() bool {
	if o != nil && !IsNil(o.GroupId) {
		return true
	}

	return false
}

// SetGroupId gets a reference to the given string and assigns it to the GroupId field.
func (o *AbstractUserGroupIdentifier) SetGroupId(v string) {
	o.GroupId = &v
}

// GetMembership returns the Membership field value if set, zero value otherwise.
func (o *AbstractUserGroupIdentifier) GetMembership() AbstractUserGroupIdentifierMembership {
	if o == nil || IsNil(o.Membership) {
		var ret AbstractUserGroupIdentifierMembership
		return ret
	}
	return *o.Membership
}

// GetMembershipOk returns a tuple with the Membership field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AbstractUserGroupIdentifier) GetMembershipOk() (*AbstractUserGroupIdentifierMembership, bool) {
	if o == nil || IsNil(o.Membership) {
		return nil, false
	}
	return o.Membership, true
}

// HasMembership returns a boolean if a field has been set.
func (o *AbstractUserGroupIdentifier) HasMembership() bool {
	if o != nil && !IsNil(o.Membership) {
		return true
	}

	return false
}

// SetMembership gets a reference to the given AbstractUserGroupIdentifierMembership and assigns it to the Membership field.
func (o *AbstractUserGroupIdentifier) SetMembership(v AbstractUserGroupIdentifierMembership) {
	o.Membership = &v
}

// GetManagedExternally returns the ManagedExternally field value if set, zero value otherwise.
func (o *AbstractUserGroupIdentifier) GetManagedExternally() bool {
	if o == nil || IsNil(o.ManagedExternally) {
		var ret bool
		return ret
	}
	return *o.ManagedExternally
}

// GetManagedExternallyOk returns a tuple with the ManagedExternally field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AbstractUserGroupIdentifier) GetManagedExternallyOk() (*bool, bool) {
	if o == nil || IsNil(o.ManagedExternally) {
		return nil, false
	}
	return o.ManagedExternally, true
}

// HasManagedExternally returns a boolean if a field has been set.
func (o *AbstractUserGroupIdentifier) HasManagedExternally() bool {
	if o != nil && !IsNil(o.ManagedExternally) {
		return true
	}

	return false
}

// SetManagedExternally gets a reference to the given bool and assigns it to the ManagedExternally field.
func (o *AbstractUserGroupIdentifier) SetManagedExternally(v bool) {
	o.ManagedExternally = &v
}

func (o AbstractUserGroupIdentifier) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AbstractUserGroupIdentifier) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.TenantId.IsSet() {
		toSerialize["tenantId"] = o.TenantId.Get()
	}
	if !IsNil(o.GroupId) {
		toSerialize["groupId"] = o.GroupId
	}
	if !IsNil(o.Membership) {
		toSerialize["membership"] = o.Membership
	}
	if !IsNil(o.ManagedExternally) {
		toSerialize["managedExternally"] = o.ManagedExternally
	}
	return toSerialize, nil
}

type NullableAbstractUserGroupIdentifier struct {
	value *AbstractUserGroupIdentifier
	isSet bool
}

func (v NullableAbstractUserGroupIdentifier) Get() *AbstractUserGroupIdentifier {
	return v.value
}

func (v *NullableAbstractUserGroupIdentifier) Set(val *AbstractUserGroupIdentifier) {
	v.value = val
	v.isSet = true
}

func (v NullableAbstractUserGroupIdentifier) IsSet() bool {
	return v.isSet
}

func (v *NullableAbstractUserGroupIdentifier) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAbstractUserGroupIdentifier(val *AbstractUserGroupIdentifier) *NullableAbstractUserGroupIdentifier {
	return &NullableAbstractUserGroupIdentifier{value: val, isSet: true}
}

func (v NullableAbstractUserGroupIdentifier) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAbstractUserGroupIdentifier) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
