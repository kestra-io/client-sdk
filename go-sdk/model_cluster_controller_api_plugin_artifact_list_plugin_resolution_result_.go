/*
Kestra EE

All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
)

// checks if the ClusterControllerApiPluginArtifactListPluginResolutionResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClusterControllerApiPluginArtifactListPluginResolutionResult{}

// ClusterControllerApiPluginArtifactListPluginResolutionResult struct for ClusterControllerApiPluginArtifactListPluginResolutionResult
type ClusterControllerApiPluginArtifactListPluginResolutionResult struct {
	Total   *int32                   `json:"total,omitempty"`
	Results []map[string]interface{} `json:"results,omitempty"`
}

// NewClusterControllerApiPluginArtifactListPluginResolutionResult instantiates a new ClusterControllerApiPluginArtifactListPluginResolutionResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterControllerApiPluginArtifactListPluginResolutionResult() *ClusterControllerApiPluginArtifactListPluginResolutionResult {
	this := ClusterControllerApiPluginArtifactListPluginResolutionResult{}
	return &this
}

// NewClusterControllerApiPluginArtifactListPluginResolutionResultWithDefaults instantiates a new ClusterControllerApiPluginArtifactListPluginResolutionResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterControllerApiPluginArtifactListPluginResolutionResultWithDefaults() *ClusterControllerApiPluginArtifactListPluginResolutionResult {
	this := ClusterControllerApiPluginArtifactListPluginResolutionResult{}
	return &this
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *ClusterControllerApiPluginArtifactListPluginResolutionResult) GetTotal() int32 {
	if o == nil || IsNil(o.Total) {
		var ret int32
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterControllerApiPluginArtifactListPluginResolutionResult) GetTotalOk() (*int32, bool) {
	if o == nil || IsNil(o.Total) {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *ClusterControllerApiPluginArtifactListPluginResolutionResult) HasTotal() bool {
	if o != nil && !IsNil(o.Total) {
		return true
	}

	return false
}

// SetTotal gets a reference to the given int32 and assigns it to the Total field.
func (o *ClusterControllerApiPluginArtifactListPluginResolutionResult) SetTotal(v int32) {
	o.Total = &v
}

// GetResults returns the Results field value if set, zero value otherwise.
func (o *ClusterControllerApiPluginArtifactListPluginResolutionResult) GetResults() []map[string]interface{} {
	if o == nil || IsNil(o.Results) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Results
}

// GetResultsOk returns a tuple with the Results field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterControllerApiPluginArtifactListPluginResolutionResult) GetResultsOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Results) {
		return nil, false
	}
	return o.Results, true
}

// HasResults returns a boolean if a field has been set.
func (o *ClusterControllerApiPluginArtifactListPluginResolutionResult) HasResults() bool {
	if o != nil && !IsNil(o.Results) {
		return true
	}

	return false
}

// SetResults gets a reference to the given []map[string]interface{} and assigns it to the Results field.
func (o *ClusterControllerApiPluginArtifactListPluginResolutionResult) SetResults(v []map[string]interface{}) {
	o.Results = v
}

func (o ClusterControllerApiPluginArtifactListPluginResolutionResult) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClusterControllerApiPluginArtifactListPluginResolutionResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Total) {
		toSerialize["total"] = o.Total
	}
	if !IsNil(o.Results) {
		toSerialize["results"] = o.Results
	}
	return toSerialize, nil
}

type NullableClusterControllerApiPluginArtifactListPluginResolutionResult struct {
	value *ClusterControllerApiPluginArtifactListPluginResolutionResult
	isSet bool
}

func (v NullableClusterControllerApiPluginArtifactListPluginResolutionResult) Get() *ClusterControllerApiPluginArtifactListPluginResolutionResult {
	return v.value
}

func (v *NullableClusterControllerApiPluginArtifactListPluginResolutionResult) Set(val *ClusterControllerApiPluginArtifactListPluginResolutionResult) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterControllerApiPluginArtifactListPluginResolutionResult) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterControllerApiPluginArtifactListPluginResolutionResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterControllerApiPluginArtifactListPluginResolutionResult(val *ClusterControllerApiPluginArtifactListPluginResolutionResult) *NullableClusterControllerApiPluginArtifactListPluginResolutionResult {
	return &NullableClusterControllerApiPluginArtifactListPluginResolutionResult{value: val, isSet: true}
}

func (v NullableClusterControllerApiPluginArtifactListPluginResolutionResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterControllerApiPluginArtifactListPluginResolutionResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
