/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
)

// checks if the InstanceControllerApiWorkerGroupList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InstanceControllerApiWorkerGroupList{}

// InstanceControllerApiWorkerGroupList ApiWorkerGroupList.
type InstanceControllerApiWorkerGroupList struct {
	// The list of worker groups.
	WorkerGroups         []InstanceControllerApiWorkerGroupItem `json:"workerGroups"`
	AdditionalProperties map[string]interface{}
}

type _InstanceControllerApiWorkerGroupList InstanceControllerApiWorkerGroupList

// NewInstanceControllerApiWorkerGroupList instantiates a new InstanceControllerApiWorkerGroupList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstanceControllerApiWorkerGroupList(workerGroups []InstanceControllerApiWorkerGroupItem) *InstanceControllerApiWorkerGroupList {
	this := InstanceControllerApiWorkerGroupList{}
	this.WorkerGroups = workerGroups
	return &this
}

// NewInstanceControllerApiWorkerGroupListWithDefaults instantiates a new InstanceControllerApiWorkerGroupList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceControllerApiWorkerGroupListWithDefaults() *InstanceControllerApiWorkerGroupList {
	this := InstanceControllerApiWorkerGroupList{}
	return &this
}

// GetWorkerGroups returns the WorkerGroups field value
func (o *InstanceControllerApiWorkerGroupList) GetWorkerGroups() []InstanceControllerApiWorkerGroupItem {
	if o == nil {
		var ret []InstanceControllerApiWorkerGroupItem
		return ret
	}

	return o.WorkerGroups
}

// GetWorkerGroupsOk returns a tuple with the WorkerGroups field value
// and a boolean to check if the value has been set.
func (o *InstanceControllerApiWorkerGroupList) GetWorkerGroupsOk() ([]InstanceControllerApiWorkerGroupItem, bool) {
	if o == nil {
		return nil, false
	}
	return o.WorkerGroups, true
}

// SetWorkerGroups sets field value
func (o *InstanceControllerApiWorkerGroupList) SetWorkerGroups(v []InstanceControllerApiWorkerGroupItem) {
	o.WorkerGroups = v
}

func (o InstanceControllerApiWorkerGroupList) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InstanceControllerApiWorkerGroupList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["workerGroups"] = o.WorkerGroups

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *InstanceControllerApiWorkerGroupList) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"workerGroups",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInstanceControllerApiWorkerGroupList := _InstanceControllerApiWorkerGroupList{}

	err = json.Unmarshal(data, &varInstanceControllerApiWorkerGroupList)

	if err != nil {
		return err
	}

	*o = InstanceControllerApiWorkerGroupList(varInstanceControllerApiWorkerGroupList)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "workerGroups")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInstanceControllerApiWorkerGroupList struct {
	value *InstanceControllerApiWorkerGroupList
	isSet bool
}

func (v NullableInstanceControllerApiWorkerGroupList) Get() *InstanceControllerApiWorkerGroupList {
	return v.value
}

func (v *NullableInstanceControllerApiWorkerGroupList) Set(val *InstanceControllerApiWorkerGroupList) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceControllerApiWorkerGroupList) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceControllerApiWorkerGroupList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceControllerApiWorkerGroupList(val *InstanceControllerApiWorkerGroupList) *NullableInstanceControllerApiWorkerGroupList {
	return &NullableInstanceControllerApiWorkerGroupList{value: val, isSet: true}
}

func (v NullableInstanceControllerApiWorkerGroupList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceControllerApiWorkerGroupList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
