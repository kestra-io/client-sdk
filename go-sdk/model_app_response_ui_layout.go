/*
Kestra EE

All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
)

// checks if the AppResponseUILayout type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AppResponseUILayout{}

// AppResponseUILayout struct for AppResponseUILayout
type AppResponseUILayout struct {
	Blocks []map[string]interface{} `json:"blocks,omitempty"`
}

// NewAppResponseUILayout instantiates a new AppResponseUILayout object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppResponseUILayout() *AppResponseUILayout {
	this := AppResponseUILayout{}
	return &this
}

// NewAppResponseUILayoutWithDefaults instantiates a new AppResponseUILayout object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppResponseUILayoutWithDefaults() *AppResponseUILayout {
	this := AppResponseUILayout{}
	return &this
}

// GetBlocks returns the Blocks field value if set, zero value otherwise.
func (o *AppResponseUILayout) GetBlocks() []map[string]interface{} {
	if o == nil || IsNil(o.Blocks) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Blocks
}

// GetBlocksOk returns a tuple with the Blocks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppResponseUILayout) GetBlocksOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Blocks) {
		return nil, false
	}
	return o.Blocks, true
}

// HasBlocks returns a boolean if a field has been set.
func (o *AppResponseUILayout) HasBlocks() bool {
	if o != nil && !IsNil(o.Blocks) {
		return true
	}

	return false
}

// SetBlocks gets a reference to the given []map[string]interface{} and assigns it to the Blocks field.
func (o *AppResponseUILayout) SetBlocks(v []map[string]interface{}) {
	o.Blocks = v
}

func (o AppResponseUILayout) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AppResponseUILayout) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Blocks) {
		toSerialize["blocks"] = o.Blocks
	}
	return toSerialize, nil
}

type NullableAppResponseUILayout struct {
	value *AppResponseUILayout
	isSet bool
}

func (v NullableAppResponseUILayout) Get() *AppResponseUILayout {
	return v.value
}

func (v *NullableAppResponseUILayout) Set(val *AppResponseUILayout) {
	v.value = val
	v.isSet = true
}

func (v NullableAppResponseUILayout) IsSet() bool {
	return v.isSet
}

func (v *NullableAppResponseUILayout) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppResponseUILayout(val *AppResponseUILayout) *NullableAppResponseUILayout {
	return &NullableAppResponseUILayout{value: val, isSet: true}
}

func (v NullableAppResponseUILayout) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppResponseUILayout) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
