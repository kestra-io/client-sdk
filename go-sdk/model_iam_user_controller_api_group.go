/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
)

// checks if the IAMUserControllerApiGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IAMUserControllerApiGroup{}

// IAMUserControllerApiGroup struct for IAMUserControllerApiGroup
type IAMUserControllerApiGroup struct {
	Id                   *string `json:"id,omitempty"`
	TenantId             *string `json:"tenantId,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _IAMUserControllerApiGroup IAMUserControllerApiGroup

// NewIAMUserControllerApiGroup instantiates a new IAMUserControllerApiGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIAMUserControllerApiGroup() *IAMUserControllerApiGroup {
	this := IAMUserControllerApiGroup{}
	return &this
}

// NewIAMUserControllerApiGroupWithDefaults instantiates a new IAMUserControllerApiGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIAMUserControllerApiGroupWithDefaults() *IAMUserControllerApiGroup {
	this := IAMUserControllerApiGroup{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *IAMUserControllerApiGroup) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IAMUserControllerApiGroup) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *IAMUserControllerApiGroup) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *IAMUserControllerApiGroup) SetId(v string) {
	o.Id = &v
}

// GetTenantId returns the TenantId field value if set, zero value otherwise.
func (o *IAMUserControllerApiGroup) GetTenantId() string {
	if o == nil || IsNil(o.TenantId) {
		var ret string
		return ret
	}
	return *o.TenantId
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IAMUserControllerApiGroup) GetTenantIdOk() (*string, bool) {
	if o == nil || IsNil(o.TenantId) {
		return nil, false
	}
	return o.TenantId, true
}

// HasTenantId returns a boolean if a field has been set.
func (o *IAMUserControllerApiGroup) HasTenantId() bool {
	if o != nil && !IsNil(o.TenantId) {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given string and assigns it to the TenantId field.
func (o *IAMUserControllerApiGroup) SetTenantId(v string) {
	o.TenantId = &v
}

func (o IAMUserControllerApiGroup) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IAMUserControllerApiGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.TenantId) {
		toSerialize["tenantId"] = o.TenantId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *IAMUserControllerApiGroup) UnmarshalJSON(data []byte) (err error) {
	varIAMUserControllerApiGroup := _IAMUserControllerApiGroup{}

	err = json.Unmarshal(data, &varIAMUserControllerApiGroup)

	if err != nil {
		return err
	}

	*o = IAMUserControllerApiGroup(varIAMUserControllerApiGroup)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "tenantId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIAMUserControllerApiGroup struct {
	value *IAMUserControllerApiGroup
	isSet bool
}

func (v NullableIAMUserControllerApiGroup) Get() *IAMUserControllerApiGroup {
	return v.value
}

func (v *NullableIAMUserControllerApiGroup) Set(val *IAMUserControllerApiGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableIAMUserControllerApiGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableIAMUserControllerApiGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIAMUserControllerApiGroup(val *IAMUserControllerApiGroup) *NullableIAMUserControllerApiGroup {
	return &NullableIAMUserControllerApiGroup{value: val, isSet: true}
}

func (v NullableIAMUserControllerApiGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIAMUserControllerApiGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
