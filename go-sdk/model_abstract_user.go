/*
Kestra EE

All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the AbstractUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AbstractUser{}

// AbstractUser struct for AbstractUser
type AbstractUser struct {
	Type         UserType                             `json:"type"`
	GroupList    []AbstractUserGroupIdentifier        `json:"groupList,omitempty"`
	Groups       []map[string]interface{}             `json:"groups,omitempty"`
	Username     string                               `json:"username"`
	Email        string                               "json:\"email\" validate:\"regexp=^$|^[a-zA-Z0-9_!#$%&â€™*+\\/=?`{|}~^.-]+@[a-zA-Z0-9.-]+$\""
	SuperAdmin   *bool                                `json:"superAdmin,omitempty"`
	Id           *string                              `json:"id,omitempty"`
	Name         *string                              `json:"name,omitempty"`
	Description  *string                              `json:"description,omitempty"`
	FirstName    *string                              `json:"firstName,omitempty"`
	LastName     *string                              `json:"lastName,omitempty"`
	Providers    []AbstractUserTenantIdentityProvider `json:"providers,omitempty"`
	IsSuperAdmin *bool                                `json:"isSuperAdmin,omitempty"`
}

type _AbstractUser AbstractUser

// NewAbstractUser instantiates a new AbstractUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAbstractUser(type_ UserType, username string, email string) *AbstractUser {
	this := AbstractUser{}
	this.Type = type_
	this.Username = username
	this.Email = email
	return &this
}

// NewAbstractUserWithDefaults instantiates a new AbstractUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAbstractUserWithDefaults() *AbstractUser {
	this := AbstractUser{}
	return &this
}

// GetType returns the Type field value
func (o *AbstractUser) GetType() UserType {
	if o == nil {
		var ret UserType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *AbstractUser) GetTypeOk() (*UserType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *AbstractUser) SetType(v UserType) {
	o.Type = v
}

// GetGroupList returns the GroupList field value if set, zero value otherwise.
func (o *AbstractUser) GetGroupList() []AbstractUserGroupIdentifier {
	if o == nil || IsNil(o.GroupList) {
		var ret []AbstractUserGroupIdentifier
		return ret
	}
	return o.GroupList
}

// GetGroupListOk returns a tuple with the GroupList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AbstractUser) GetGroupListOk() ([]AbstractUserGroupIdentifier, bool) {
	if o == nil || IsNil(o.GroupList) {
		return nil, false
	}
	return o.GroupList, true
}

// HasGroupList returns a boolean if a field has been set.
func (o *AbstractUser) HasGroupList() bool {
	if o != nil && !IsNil(o.GroupList) {
		return true
	}

	return false
}

// SetGroupList gets a reference to the given []AbstractUserGroupIdentifier and assigns it to the GroupList field.
func (o *AbstractUser) SetGroupList(v []AbstractUserGroupIdentifier) {
	o.GroupList = v
}

// GetGroups returns the Groups field value if set, zero value otherwise.
func (o *AbstractUser) GetGroups() []map[string]interface{} {
	if o == nil || IsNil(o.Groups) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Groups
}

// GetGroupsOk returns a tuple with the Groups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AbstractUser) GetGroupsOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Groups) {
		return nil, false
	}
	return o.Groups, true
}

// HasGroups returns a boolean if a field has been set.
func (o *AbstractUser) HasGroups() bool {
	if o != nil && !IsNil(o.Groups) {
		return true
	}

	return false
}

// SetGroups gets a reference to the given []map[string]interface{} and assigns it to the Groups field.
func (o *AbstractUser) SetGroups(v []map[string]interface{}) {
	o.Groups = v
}

// GetUsername returns the Username field value
func (o *AbstractUser) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *AbstractUser) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *AbstractUser) SetUsername(v string) {
	o.Username = v
}

// GetEmail returns the Email field value
func (o *AbstractUser) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *AbstractUser) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *AbstractUser) SetEmail(v string) {
	o.Email = v
}

// GetSuperAdmin returns the SuperAdmin field value if set, zero value otherwise.
func (o *AbstractUser) GetSuperAdmin() bool {
	if o == nil || IsNil(o.SuperAdmin) {
		var ret bool
		return ret
	}
	return *o.SuperAdmin
}

// GetSuperAdminOk returns a tuple with the SuperAdmin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AbstractUser) GetSuperAdminOk() (*bool, bool) {
	if o == nil || IsNil(o.SuperAdmin) {
		return nil, false
	}
	return o.SuperAdmin, true
}

// HasSuperAdmin returns a boolean if a field has been set.
func (o *AbstractUser) HasSuperAdmin() bool {
	if o != nil && !IsNil(o.SuperAdmin) {
		return true
	}

	return false
}

// SetSuperAdmin gets a reference to the given bool and assigns it to the SuperAdmin field.
func (o *AbstractUser) SetSuperAdmin(v bool) {
	o.SuperAdmin = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AbstractUser) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AbstractUser) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AbstractUser) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AbstractUser) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AbstractUser) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AbstractUser) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AbstractUser) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AbstractUser) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AbstractUser) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AbstractUser) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AbstractUser) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AbstractUser) SetDescription(v string) {
	o.Description = &v
}

// GetFirstName returns the FirstName field value if set, zero value otherwise.
func (o *AbstractUser) GetFirstName() string {
	if o == nil || IsNil(o.FirstName) {
		var ret string
		return ret
	}
	return *o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AbstractUser) GetFirstNameOk() (*string, bool) {
	if o == nil || IsNil(o.FirstName) {
		return nil, false
	}
	return o.FirstName, true
}

// HasFirstName returns a boolean if a field has been set.
func (o *AbstractUser) HasFirstName() bool {
	if o != nil && !IsNil(o.FirstName) {
		return true
	}

	return false
}

// SetFirstName gets a reference to the given string and assigns it to the FirstName field.
func (o *AbstractUser) SetFirstName(v string) {
	o.FirstName = &v
}

// GetLastName returns the LastName field value if set, zero value otherwise.
func (o *AbstractUser) GetLastName() string {
	if o == nil || IsNil(o.LastName) {
		var ret string
		return ret
	}
	return *o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AbstractUser) GetLastNameOk() (*string, bool) {
	if o == nil || IsNil(o.LastName) {
		return nil, false
	}
	return o.LastName, true
}

// HasLastName returns a boolean if a field has been set.
func (o *AbstractUser) HasLastName() bool {
	if o != nil && !IsNil(o.LastName) {
		return true
	}

	return false
}

// SetLastName gets a reference to the given string and assigns it to the LastName field.
func (o *AbstractUser) SetLastName(v string) {
	o.LastName = &v
}

// GetProviders returns the Providers field value if set, zero value otherwise.
func (o *AbstractUser) GetProviders() []AbstractUserTenantIdentityProvider {
	if o == nil || IsNil(o.Providers) {
		var ret []AbstractUserTenantIdentityProvider
		return ret
	}
	return o.Providers
}

// GetProvidersOk returns a tuple with the Providers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AbstractUser) GetProvidersOk() ([]AbstractUserTenantIdentityProvider, bool) {
	if o == nil || IsNil(o.Providers) {
		return nil, false
	}
	return o.Providers, true
}

// HasProviders returns a boolean if a field has been set.
func (o *AbstractUser) HasProviders() bool {
	if o != nil && !IsNil(o.Providers) {
		return true
	}

	return false
}

// SetProviders gets a reference to the given []AbstractUserTenantIdentityProvider and assigns it to the Providers field.
func (o *AbstractUser) SetProviders(v []AbstractUserTenantIdentityProvider) {
	o.Providers = v
}

// GetIsSuperAdmin returns the IsSuperAdmin field value if set, zero value otherwise.
func (o *AbstractUser) GetIsSuperAdmin() bool {
	if o == nil || IsNil(o.IsSuperAdmin) {
		var ret bool
		return ret
	}
	return *o.IsSuperAdmin
}

// GetIsSuperAdminOk returns a tuple with the IsSuperAdmin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AbstractUser) GetIsSuperAdminOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSuperAdmin) {
		return nil, false
	}
	return o.IsSuperAdmin, true
}

// HasIsSuperAdmin returns a boolean if a field has been set.
func (o *AbstractUser) HasIsSuperAdmin() bool {
	if o != nil && !IsNil(o.IsSuperAdmin) {
		return true
	}

	return false
}

// SetIsSuperAdmin gets a reference to the given bool and assigns it to the IsSuperAdmin field.
func (o *AbstractUser) SetIsSuperAdmin(v bool) {
	o.IsSuperAdmin = &v
}

func (o AbstractUser) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AbstractUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	if !IsNil(o.GroupList) {
		toSerialize["groupList"] = o.GroupList
	}
	if !IsNil(o.Groups) {
		toSerialize["groups"] = o.Groups
	}
	toSerialize["username"] = o.Username
	toSerialize["email"] = o.Email
	if !IsNil(o.SuperAdmin) {
		toSerialize["superAdmin"] = o.SuperAdmin
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.FirstName) {
		toSerialize["firstName"] = o.FirstName
	}
	if !IsNil(o.LastName) {
		toSerialize["lastName"] = o.LastName
	}
	if !IsNil(o.Providers) {
		toSerialize["providers"] = o.Providers
	}
	if !IsNil(o.IsSuperAdmin) {
		toSerialize["isSuperAdmin"] = o.IsSuperAdmin
	}
	return toSerialize, nil
}

func (o *AbstractUser) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"username",
		"email",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAbstractUser := _AbstractUser{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAbstractUser)

	if err != nil {
		return err
	}

	*o = AbstractUser(varAbstractUser)

	return err
}

type NullableAbstractUser struct {
	value *AbstractUser
	isSet bool
}

func (v NullableAbstractUser) Get() *AbstractUser {
	return v.value
}

func (v *NullableAbstractUser) Set(val *AbstractUser) {
	v.value = val
	v.isSet = true
}

func (v NullableAbstractUser) IsSet() bool {
	return v.isSet
}

func (v *NullableAbstractUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAbstractUser(val *AbstractUser) *NullableAbstractUser {
	return &NullableAbstractUser{value: val, isSet: true}
}

func (v NullableAbstractUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAbstractUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
