/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
)

// checks if the ExecutionControllerSetLabelsByIdsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExecutionControllerSetLabelsByIdsRequest{}

// ExecutionControllerSetLabelsByIdsRequest struct for ExecutionControllerSetLabelsByIdsRequest
type ExecutionControllerSetLabelsByIdsRequest struct {
	ExecutionsId         []string `json:"executionsId,omitempty"`
	ExecutionLabels      []Label  `json:"executionLabels,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ExecutionControllerSetLabelsByIdsRequest ExecutionControllerSetLabelsByIdsRequest

// NewExecutionControllerSetLabelsByIdsRequest instantiates a new ExecutionControllerSetLabelsByIdsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExecutionControllerSetLabelsByIdsRequest() *ExecutionControllerSetLabelsByIdsRequest {
	this := ExecutionControllerSetLabelsByIdsRequest{}
	return &this
}

// NewExecutionControllerSetLabelsByIdsRequestWithDefaults instantiates a new ExecutionControllerSetLabelsByIdsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExecutionControllerSetLabelsByIdsRequestWithDefaults() *ExecutionControllerSetLabelsByIdsRequest {
	this := ExecutionControllerSetLabelsByIdsRequest{}
	return &this
}

// GetExecutionsId returns the ExecutionsId field value if set, zero value otherwise.
func (o *ExecutionControllerSetLabelsByIdsRequest) GetExecutionsId() []string {
	if o == nil || IsNil(o.ExecutionsId) {
		var ret []string
		return ret
	}
	return o.ExecutionsId
}

// GetExecutionsIdOk returns a tuple with the ExecutionsId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionControllerSetLabelsByIdsRequest) GetExecutionsIdOk() ([]string, bool) {
	if o == nil || IsNil(o.ExecutionsId) {
		return nil, false
	}
	return o.ExecutionsId, true
}

// HasExecutionsId returns a boolean if a field has been set.
func (o *ExecutionControllerSetLabelsByIdsRequest) HasExecutionsId() bool {
	if o != nil && !IsNil(o.ExecutionsId) {
		return true
	}

	return false
}

// SetExecutionsId gets a reference to the given []string and assigns it to the ExecutionsId field.
func (o *ExecutionControllerSetLabelsByIdsRequest) SetExecutionsId(v []string) {
	o.ExecutionsId = v
}

// GetExecutionLabels returns the ExecutionLabels field value if set, zero value otherwise.
func (o *ExecutionControllerSetLabelsByIdsRequest) GetExecutionLabels() []Label {
	if o == nil || IsNil(o.ExecutionLabels) {
		var ret []Label
		return ret
	}
	return o.ExecutionLabels
}

// GetExecutionLabelsOk returns a tuple with the ExecutionLabels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionControllerSetLabelsByIdsRequest) GetExecutionLabelsOk() ([]Label, bool) {
	if o == nil || IsNil(o.ExecutionLabels) {
		return nil, false
	}
	return o.ExecutionLabels, true
}

// HasExecutionLabels returns a boolean if a field has been set.
func (o *ExecutionControllerSetLabelsByIdsRequest) HasExecutionLabels() bool {
	if o != nil && !IsNil(o.ExecutionLabels) {
		return true
	}

	return false
}

// SetExecutionLabels gets a reference to the given []Label and assigns it to the ExecutionLabels field.
func (o *ExecutionControllerSetLabelsByIdsRequest) SetExecutionLabels(v []Label) {
	o.ExecutionLabels = v
}

func (o ExecutionControllerSetLabelsByIdsRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExecutionControllerSetLabelsByIdsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ExecutionsId) {
		toSerialize["executionsId"] = o.ExecutionsId
	}
	if !IsNil(o.ExecutionLabels) {
		toSerialize["executionLabels"] = o.ExecutionLabels
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ExecutionControllerSetLabelsByIdsRequest) UnmarshalJSON(data []byte) (err error) {
	varExecutionControllerSetLabelsByIdsRequest := _ExecutionControllerSetLabelsByIdsRequest{}

	err = json.Unmarshal(data, &varExecutionControllerSetLabelsByIdsRequest)

	if err != nil {
		return err
	}

	*o = ExecutionControllerSetLabelsByIdsRequest(varExecutionControllerSetLabelsByIdsRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "executionsId")
		delete(additionalProperties, "executionLabels")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableExecutionControllerSetLabelsByIdsRequest struct {
	value *ExecutionControllerSetLabelsByIdsRequest
	isSet bool
}

func (v NullableExecutionControllerSetLabelsByIdsRequest) Get() *ExecutionControllerSetLabelsByIdsRequest {
	return v.value
}

func (v *NullableExecutionControllerSetLabelsByIdsRequest) Set(val *ExecutionControllerSetLabelsByIdsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableExecutionControllerSetLabelsByIdsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableExecutionControllerSetLabelsByIdsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExecutionControllerSetLabelsByIdsRequest(val *ExecutionControllerSetLabelsByIdsRequest) *NullableExecutionControllerSetLabelsByIdsRequest {
	return &NullableExecutionControllerSetLabelsByIdsRequest{value: val, isSet: true}
}

func (v NullableExecutionControllerSetLabelsByIdsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExecutionControllerSetLabelsByIdsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
