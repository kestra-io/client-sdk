/*
Kestra EE

All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
)

// checks if the SearchResultFlow type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchResultFlow{}

// SearchResultFlow struct for SearchResultFlow
type SearchResultFlow struct {
	Model     *Flow    `json:"model,omitempty"`
	Fragments []string `json:"fragments,omitempty"`
}

// NewSearchResultFlow instantiates a new SearchResultFlow object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchResultFlow() *SearchResultFlow {
	this := SearchResultFlow{}
	return &this
}

// NewSearchResultFlowWithDefaults instantiates a new SearchResultFlow object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchResultFlowWithDefaults() *SearchResultFlow {
	this := SearchResultFlow{}
	return &this
}

// GetModel returns the Model field value if set, zero value otherwise.
func (o *SearchResultFlow) GetModel() Flow {
	if o == nil || IsNil(o.Model) {
		var ret Flow
		return ret
	}
	return *o.Model
}

// GetModelOk returns a tuple with the Model field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResultFlow) GetModelOk() (*Flow, bool) {
	if o == nil || IsNil(o.Model) {
		return nil, false
	}
	return o.Model, true
}

// HasModel returns a boolean if a field has been set.
func (o *SearchResultFlow) HasModel() bool {
	if o != nil && !IsNil(o.Model) {
		return true
	}

	return false
}

// SetModel gets a reference to the given Flow and assigns it to the Model field.
func (o *SearchResultFlow) SetModel(v Flow) {
	o.Model = &v
}

// GetFragments returns the Fragments field value if set, zero value otherwise.
func (o *SearchResultFlow) GetFragments() []string {
	if o == nil || IsNil(o.Fragments) {
		var ret []string
		return ret
	}
	return o.Fragments
}

// GetFragmentsOk returns a tuple with the Fragments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResultFlow) GetFragmentsOk() ([]string, bool) {
	if o == nil || IsNil(o.Fragments) {
		return nil, false
	}
	return o.Fragments, true
}

// HasFragments returns a boolean if a field has been set.
func (o *SearchResultFlow) HasFragments() bool {
	if o != nil && !IsNil(o.Fragments) {
		return true
	}

	return false
}

// SetFragments gets a reference to the given []string and assigns it to the Fragments field.
func (o *SearchResultFlow) SetFragments(v []string) {
	o.Fragments = v
}

func (o SearchResultFlow) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchResultFlow) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Model) {
		toSerialize["model"] = o.Model
	}
	if !IsNil(o.Fragments) {
		toSerialize["fragments"] = o.Fragments
	}
	return toSerialize, nil
}

type NullableSearchResultFlow struct {
	value *SearchResultFlow
	isSet bool
}

func (v NullableSearchResultFlow) Get() *SearchResultFlow {
	return v.value
}

func (v *NullableSearchResultFlow) Set(val *SearchResultFlow) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchResultFlow) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchResultFlow) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchResultFlow(val *SearchResultFlow) *NullableSearchResultFlow {
	return &NullableSearchResultFlow{value: val, isSet: true}
}

func (v NullableSearchResultFlow) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchResultFlow) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
