/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
)

// checks if the ExecutionControllerApiValidateExecutionInputsResponseApiInputAndValue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExecutionControllerApiValidateExecutionInputsResponseApiInputAndValue{}

// ExecutionControllerApiValidateExecutionInputsResponseApiInputAndValue struct for ExecutionControllerApiValidateExecutionInputsResponseApiInputAndValue
type ExecutionControllerApiValidateExecutionInputsResponseApiInputAndValue struct {
	Input                *InputObject                                                         `json:"input,omitempty"`
	Value                map[string]interface{}                                               `json:"value,omitempty"`
	Enabled              *bool                                                                `json:"enabled,omitempty"`
	Errors               []ExecutionControllerApiValidateExecutionInputsResponseApiInputError `json:"errors,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ExecutionControllerApiValidateExecutionInputsResponseApiInputAndValue ExecutionControllerApiValidateExecutionInputsResponseApiInputAndValue

// NewExecutionControllerApiValidateExecutionInputsResponseApiInputAndValue instantiates a new ExecutionControllerApiValidateExecutionInputsResponseApiInputAndValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExecutionControllerApiValidateExecutionInputsResponseApiInputAndValue() *ExecutionControllerApiValidateExecutionInputsResponseApiInputAndValue {
	this := ExecutionControllerApiValidateExecutionInputsResponseApiInputAndValue{}
	return &this
}

// NewExecutionControllerApiValidateExecutionInputsResponseApiInputAndValueWithDefaults instantiates a new ExecutionControllerApiValidateExecutionInputsResponseApiInputAndValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExecutionControllerApiValidateExecutionInputsResponseApiInputAndValueWithDefaults() *ExecutionControllerApiValidateExecutionInputsResponseApiInputAndValue {
	this := ExecutionControllerApiValidateExecutionInputsResponseApiInputAndValue{}
	return &this
}

// GetInput returns the Input field value if set, zero value otherwise.
func (o *ExecutionControllerApiValidateExecutionInputsResponseApiInputAndValue) GetInput() InputObject {
	if o == nil || IsNil(o.Input) {
		var ret InputObject
		return ret
	}
	return *o.Input
}

// GetInputOk returns a tuple with the Input field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionControllerApiValidateExecutionInputsResponseApiInputAndValue) GetInputOk() (*InputObject, bool) {
	if o == nil || IsNil(o.Input) {
		return nil, false
	}
	return o.Input, true
}

// HasInput returns a boolean if a field has been set.
func (o *ExecutionControllerApiValidateExecutionInputsResponseApiInputAndValue) HasInput() bool {
	if o != nil && !IsNil(o.Input) {
		return true
	}

	return false
}

// SetInput gets a reference to the given InputObject and assigns it to the Input field.
func (o *ExecutionControllerApiValidateExecutionInputsResponseApiInputAndValue) SetInput(v InputObject) {
	o.Input = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *ExecutionControllerApiValidateExecutionInputsResponseApiInputAndValue) GetValue() map[string]interface{} {
	if o == nil || IsNil(o.Value) {
		var ret map[string]interface{}
		return ret
	}
	return o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionControllerApiValidateExecutionInputsResponseApiInputAndValue) GetValueOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Value) {
		return map[string]interface{}{}, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *ExecutionControllerApiValidateExecutionInputsResponseApiInputAndValue) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given map[string]interface{} and assigns it to the Value field.
func (o *ExecutionControllerApiValidateExecutionInputsResponseApiInputAndValue) SetValue(v map[string]interface{}) {
	o.Value = v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *ExecutionControllerApiValidateExecutionInputsResponseApiInputAndValue) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionControllerApiValidateExecutionInputsResponseApiInputAndValue) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *ExecutionControllerApiValidateExecutionInputsResponseApiInputAndValue) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *ExecutionControllerApiValidateExecutionInputsResponseApiInputAndValue) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *ExecutionControllerApiValidateExecutionInputsResponseApiInputAndValue) GetErrors() []ExecutionControllerApiValidateExecutionInputsResponseApiInputError {
	if o == nil || IsNil(o.Errors) {
		var ret []ExecutionControllerApiValidateExecutionInputsResponseApiInputError
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionControllerApiValidateExecutionInputsResponseApiInputAndValue) GetErrorsOk() ([]ExecutionControllerApiValidateExecutionInputsResponseApiInputError, bool) {
	if o == nil || IsNil(o.Errors) {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *ExecutionControllerApiValidateExecutionInputsResponseApiInputAndValue) HasErrors() bool {
	if o != nil && !IsNil(o.Errors) {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []ExecutionControllerApiValidateExecutionInputsResponseApiInputError and assigns it to the Errors field.
func (o *ExecutionControllerApiValidateExecutionInputsResponseApiInputAndValue) SetErrors(v []ExecutionControllerApiValidateExecutionInputsResponseApiInputError) {
	o.Errors = v
}

func (o ExecutionControllerApiValidateExecutionInputsResponseApiInputAndValue) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExecutionControllerApiValidateExecutionInputsResponseApiInputAndValue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Input) {
		toSerialize["input"] = o.Input
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Errors) {
		toSerialize["errors"] = o.Errors
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ExecutionControllerApiValidateExecutionInputsResponseApiInputAndValue) UnmarshalJSON(data []byte) (err error) {
	varExecutionControllerApiValidateExecutionInputsResponseApiInputAndValue := _ExecutionControllerApiValidateExecutionInputsResponseApiInputAndValue{}

	err = json.Unmarshal(data, &varExecutionControllerApiValidateExecutionInputsResponseApiInputAndValue)

	if err != nil {
		return err
	}

	*o = ExecutionControllerApiValidateExecutionInputsResponseApiInputAndValue(varExecutionControllerApiValidateExecutionInputsResponseApiInputAndValue)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "input")
		delete(additionalProperties, "value")
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "errors")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableExecutionControllerApiValidateExecutionInputsResponseApiInputAndValue struct {
	value *ExecutionControllerApiValidateExecutionInputsResponseApiInputAndValue
	isSet bool
}

func (v NullableExecutionControllerApiValidateExecutionInputsResponseApiInputAndValue) Get() *ExecutionControllerApiValidateExecutionInputsResponseApiInputAndValue {
	return v.value
}

func (v *NullableExecutionControllerApiValidateExecutionInputsResponseApiInputAndValue) Set(val *ExecutionControllerApiValidateExecutionInputsResponseApiInputAndValue) {
	v.value = val
	v.isSet = true
}

func (v NullableExecutionControllerApiValidateExecutionInputsResponseApiInputAndValue) IsSet() bool {
	return v.isSet
}

func (v *NullableExecutionControllerApiValidateExecutionInputsResponseApiInputAndValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExecutionControllerApiValidateExecutionInputsResponseApiInputAndValue(val *ExecutionControllerApiValidateExecutionInputsResponseApiInputAndValue) *NullableExecutionControllerApiValidateExecutionInputsResponseApiInputAndValue {
	return &NullableExecutionControllerApiValidateExecutionInputsResponseApiInputAndValue{value: val, isSet: true}
}

func (v NullableExecutionControllerApiValidateExecutionInputsResponseApiInputAndValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExecutionControllerApiValidateExecutionInputsResponseApiInputAndValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
