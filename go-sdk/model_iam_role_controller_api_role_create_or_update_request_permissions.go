/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
)

// checks if the IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions{}

// IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions struct for IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions
type IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions struct {
	FLOW                 []string `json:"FLOW,omitempty"`
	BLUEPRINT            []string `json:"BLUEPRINT,omitempty"`
	TEMPLATE             []string `json:"TEMPLATE,omitempty"`
	NAMESPACE            []string `json:"NAMESPACE,omitempty"`
	EXECUTION            []string `json:"EXECUTION,omitempty"`
	USER                 []string `json:"USER,omitempty"`
	GROUP                []string `json:"GROUP,omitempty"`
	ROLE                 []string `json:"ROLE,omitempty"`
	BINDING              []string `json:"BINDING,omitempty"`
	AUDITLOG             []string `json:"AUDITLOG,omitempty"`
	SECRET               []string `json:"SECRET,omitempty"`
	KVSTORE              []string `json:"KVSTORE,omitempty"`
	IMPERSONATE          []string `json:"IMPERSONATE,omitempty"`
	SETTING              []string `json:"SETTING,omitempty"`
	INFRASTRUCTURE       []string `json:"INFRASTRUCTURE,omitempty"`
	APP                  []string `json:"APP,omitempty"`
	APPEXECUTION         []string `json:"APPEXECUTION,omitempty"`
	TEST                 []string `json:"TEST,omitempty"`
	DASHBOARD            []string `json:"DASHBOARD,omitempty"`
	TENANT_ACCESS        []string `json:"TENANT_ACCESS,omitempty"`
	SERVICE_ACCOUNT      []string `json:"SERVICE_ACCOUNT,omitempty"`
	INVITATION           []string `json:"INVITATION,omitempty"`
	GROUP_MEMBERSHIP     []string `json:"GROUP_MEMBERSHIP,omitempty"`
	UNKNOWN              []string `json:"UNKNOWN,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions

// NewIAMRoleControllerApiRoleCreateOrUpdateRequestPermissions instantiates a new IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIAMRoleControllerApiRoleCreateOrUpdateRequestPermissions() *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions {
	this := IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions{}
	return &this
}

// NewIAMRoleControllerApiRoleCreateOrUpdateRequestPermissionsWithDefaults instantiates a new IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIAMRoleControllerApiRoleCreateOrUpdateRequestPermissionsWithDefaults() *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions {
	this := IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions{}
	return &this
}

// GetFLOW returns the FLOW field value if set, zero value otherwise.
func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) GetFLOW() []string {
	if o == nil || IsNil(o.FLOW) {
		var ret []string
		return ret
	}
	return o.FLOW
}

// GetFLOWOk returns a tuple with the FLOW field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) GetFLOWOk() ([]string, bool) {
	if o == nil || IsNil(o.FLOW) {
		return nil, false
	}
	return o.FLOW, true
}

// HasFLOW returns a boolean if a field has been set.
func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) HasFLOW() bool {
	if o != nil && !IsNil(o.FLOW) {
		return true
	}

	return false
}

// SetFLOW gets a reference to the given []string and assigns it to the FLOW field.
func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) SetFLOW(v []string) {
	o.FLOW = v
}

// GetBLUEPRINT returns the BLUEPRINT field value if set, zero value otherwise.
func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) GetBLUEPRINT() []string {
	if o == nil || IsNil(o.BLUEPRINT) {
		var ret []string
		return ret
	}
	return o.BLUEPRINT
}

// GetBLUEPRINTOk returns a tuple with the BLUEPRINT field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) GetBLUEPRINTOk() ([]string, bool) {
	if o == nil || IsNil(o.BLUEPRINT) {
		return nil, false
	}
	return o.BLUEPRINT, true
}

// HasBLUEPRINT returns a boolean if a field has been set.
func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) HasBLUEPRINT() bool {
	if o != nil && !IsNil(o.BLUEPRINT) {
		return true
	}

	return false
}

// SetBLUEPRINT gets a reference to the given []string and assigns it to the BLUEPRINT field.
func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) SetBLUEPRINT(v []string) {
	o.BLUEPRINT = v
}

// GetTEMPLATE returns the TEMPLATE field value if set, zero value otherwise.
func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) GetTEMPLATE() []string {
	if o == nil || IsNil(o.TEMPLATE) {
		var ret []string
		return ret
	}
	return o.TEMPLATE
}

// GetTEMPLATEOk returns a tuple with the TEMPLATE field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) GetTEMPLATEOk() ([]string, bool) {
	if o == nil || IsNil(o.TEMPLATE) {
		return nil, false
	}
	return o.TEMPLATE, true
}

// HasTEMPLATE returns a boolean if a field has been set.
func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) HasTEMPLATE() bool {
	if o != nil && !IsNil(o.TEMPLATE) {
		return true
	}

	return false
}

// SetTEMPLATE gets a reference to the given []string and assigns it to the TEMPLATE field.
func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) SetTEMPLATE(v []string) {
	o.TEMPLATE = v
}

// GetNAMESPACE returns the NAMESPACE field value if set, zero value otherwise.
func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) GetNAMESPACE() []string {
	if o == nil || IsNil(o.NAMESPACE) {
		var ret []string
		return ret
	}
	return o.NAMESPACE
}

// GetNAMESPACEOk returns a tuple with the NAMESPACE field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) GetNAMESPACEOk() ([]string, bool) {
	if o == nil || IsNil(o.NAMESPACE) {
		return nil, false
	}
	return o.NAMESPACE, true
}

// HasNAMESPACE returns a boolean if a field has been set.
func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) HasNAMESPACE() bool {
	if o != nil && !IsNil(o.NAMESPACE) {
		return true
	}

	return false
}

// SetNAMESPACE gets a reference to the given []string and assigns it to the NAMESPACE field.
func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) SetNAMESPACE(v []string) {
	o.NAMESPACE = v
}

// GetEXECUTION returns the EXECUTION field value if set, zero value otherwise.
func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) GetEXECUTION() []string {
	if o == nil || IsNil(o.EXECUTION) {
		var ret []string
		return ret
	}
	return o.EXECUTION
}

// GetEXECUTIONOk returns a tuple with the EXECUTION field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) GetEXECUTIONOk() ([]string, bool) {
	if o == nil || IsNil(o.EXECUTION) {
		return nil, false
	}
	return o.EXECUTION, true
}

// HasEXECUTION returns a boolean if a field has been set.
func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) HasEXECUTION() bool {
	if o != nil && !IsNil(o.EXECUTION) {
		return true
	}

	return false
}

// SetEXECUTION gets a reference to the given []string and assigns it to the EXECUTION field.
func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) SetEXECUTION(v []string) {
	o.EXECUTION = v
}

// GetUSER returns the USER field value if set, zero value otherwise.
func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) GetUSER() []string {
	if o == nil || IsNil(o.USER) {
		var ret []string
		return ret
	}
	return o.USER
}

// GetUSEROk returns a tuple with the USER field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) GetUSEROk() ([]string, bool) {
	if o == nil || IsNil(o.USER) {
		return nil, false
	}
	return o.USER, true
}

// HasUSER returns a boolean if a field has been set.
func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) HasUSER() bool {
	if o != nil && !IsNil(o.USER) {
		return true
	}

	return false
}

// SetUSER gets a reference to the given []string and assigns it to the USER field.
func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) SetUSER(v []string) {
	o.USER = v
}

// GetGROUP returns the GROUP field value if set, zero value otherwise.
func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) GetGROUP() []string {
	if o == nil || IsNil(o.GROUP) {
		var ret []string
		return ret
	}
	return o.GROUP
}

// GetGROUPOk returns a tuple with the GROUP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) GetGROUPOk() ([]string, bool) {
	if o == nil || IsNil(o.GROUP) {
		return nil, false
	}
	return o.GROUP, true
}

// HasGROUP returns a boolean if a field has been set.
func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) HasGROUP() bool {
	if o != nil && !IsNil(o.GROUP) {
		return true
	}

	return false
}

// SetGROUP gets a reference to the given []string and assigns it to the GROUP field.
func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) SetGROUP(v []string) {
	o.GROUP = v
}

// GetROLE returns the ROLE field value if set, zero value otherwise.
func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) GetROLE() []string {
	if o == nil || IsNil(o.ROLE) {
		var ret []string
		return ret
	}
	return o.ROLE
}

// GetROLEOk returns a tuple with the ROLE field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) GetROLEOk() ([]string, bool) {
	if o == nil || IsNil(o.ROLE) {
		return nil, false
	}
	return o.ROLE, true
}

// HasROLE returns a boolean if a field has been set.
func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) HasROLE() bool {
	if o != nil && !IsNil(o.ROLE) {
		return true
	}

	return false
}

// SetROLE gets a reference to the given []string and assigns it to the ROLE field.
func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) SetROLE(v []string) {
	o.ROLE = v
}

// GetBINDING returns the BINDING field value if set, zero value otherwise.
func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) GetBINDING() []string {
	if o == nil || IsNil(o.BINDING) {
		var ret []string
		return ret
	}
	return o.BINDING
}

// GetBINDINGOk returns a tuple with the BINDING field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) GetBINDINGOk() ([]string, bool) {
	if o == nil || IsNil(o.BINDING) {
		return nil, false
	}
	return o.BINDING, true
}

// HasBINDING returns a boolean if a field has been set.
func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) HasBINDING() bool {
	if o != nil && !IsNil(o.BINDING) {
		return true
	}

	return false
}

// SetBINDING gets a reference to the given []string and assigns it to the BINDING field.
func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) SetBINDING(v []string) {
	o.BINDING = v
}

// GetAUDITLOG returns the AUDITLOG field value if set, zero value otherwise.
func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) GetAUDITLOG() []string {
	if o == nil || IsNil(o.AUDITLOG) {
		var ret []string
		return ret
	}
	return o.AUDITLOG
}

// GetAUDITLOGOk returns a tuple with the AUDITLOG field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) GetAUDITLOGOk() ([]string, bool) {
	if o == nil || IsNil(o.AUDITLOG) {
		return nil, false
	}
	return o.AUDITLOG, true
}

// HasAUDITLOG returns a boolean if a field has been set.
func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) HasAUDITLOG() bool {
	if o != nil && !IsNil(o.AUDITLOG) {
		return true
	}

	return false
}

// SetAUDITLOG gets a reference to the given []string and assigns it to the AUDITLOG field.
func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) SetAUDITLOG(v []string) {
	o.AUDITLOG = v
}

// GetSECRET returns the SECRET field value if set, zero value otherwise.
func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) GetSECRET() []string {
	if o == nil || IsNil(o.SECRET) {
		var ret []string
		return ret
	}
	return o.SECRET
}

// GetSECRETOk returns a tuple with the SECRET field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) GetSECRETOk() ([]string, bool) {
	if o == nil || IsNil(o.SECRET) {
		return nil, false
	}
	return o.SECRET, true
}

// HasSECRET returns a boolean if a field has been set.
func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) HasSECRET() bool {
	if o != nil && !IsNil(o.SECRET) {
		return true
	}

	return false
}

// SetSECRET gets a reference to the given []string and assigns it to the SECRET field.
func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) SetSECRET(v []string) {
	o.SECRET = v
}

// GetKVSTORE returns the KVSTORE field value if set, zero value otherwise.
func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) GetKVSTORE() []string {
	if o == nil || IsNil(o.KVSTORE) {
		var ret []string
		return ret
	}
	return o.KVSTORE
}

// GetKVSTOREOk returns a tuple with the KVSTORE field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) GetKVSTOREOk() ([]string, bool) {
	if o == nil || IsNil(o.KVSTORE) {
		return nil, false
	}
	return o.KVSTORE, true
}

// HasKVSTORE returns a boolean if a field has been set.
func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) HasKVSTORE() bool {
	if o != nil && !IsNil(o.KVSTORE) {
		return true
	}

	return false
}

// SetKVSTORE gets a reference to the given []string and assigns it to the KVSTORE field.
func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) SetKVSTORE(v []string) {
	o.KVSTORE = v
}

// GetIMPERSONATE returns the IMPERSONATE field value if set, zero value otherwise.
func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) GetIMPERSONATE() []string {
	if o == nil || IsNil(o.IMPERSONATE) {
		var ret []string
		return ret
	}
	return o.IMPERSONATE
}

// GetIMPERSONATEOk returns a tuple with the IMPERSONATE field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) GetIMPERSONATEOk() ([]string, bool) {
	if o == nil || IsNil(o.IMPERSONATE) {
		return nil, false
	}
	return o.IMPERSONATE, true
}

// HasIMPERSONATE returns a boolean if a field has been set.
func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) HasIMPERSONATE() bool {
	if o != nil && !IsNil(o.IMPERSONATE) {
		return true
	}

	return false
}

// SetIMPERSONATE gets a reference to the given []string and assigns it to the IMPERSONATE field.
func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) SetIMPERSONATE(v []string) {
	o.IMPERSONATE = v
}

// GetSETTING returns the SETTING field value if set, zero value otherwise.
func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) GetSETTING() []string {
	if o == nil || IsNil(o.SETTING) {
		var ret []string
		return ret
	}
	return o.SETTING
}

// GetSETTINGOk returns a tuple with the SETTING field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) GetSETTINGOk() ([]string, bool) {
	if o == nil || IsNil(o.SETTING) {
		return nil, false
	}
	return o.SETTING, true
}

// HasSETTING returns a boolean if a field has been set.
func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) HasSETTING() bool {
	if o != nil && !IsNil(o.SETTING) {
		return true
	}

	return false
}

// SetSETTING gets a reference to the given []string and assigns it to the SETTING field.
func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) SetSETTING(v []string) {
	o.SETTING = v
}

// GetINFRASTRUCTURE returns the INFRASTRUCTURE field value if set, zero value otherwise.
func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) GetINFRASTRUCTURE() []string {
	if o == nil || IsNil(o.INFRASTRUCTURE) {
		var ret []string
		return ret
	}
	return o.INFRASTRUCTURE
}

// GetINFRASTRUCTUREOk returns a tuple with the INFRASTRUCTURE field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) GetINFRASTRUCTUREOk() ([]string, bool) {
	if o == nil || IsNil(o.INFRASTRUCTURE) {
		return nil, false
	}
	return o.INFRASTRUCTURE, true
}

// HasINFRASTRUCTURE returns a boolean if a field has been set.
func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) HasINFRASTRUCTURE() bool {
	if o != nil && !IsNil(o.INFRASTRUCTURE) {
		return true
	}

	return false
}

// SetINFRASTRUCTURE gets a reference to the given []string and assigns it to the INFRASTRUCTURE field.
func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) SetINFRASTRUCTURE(v []string) {
	o.INFRASTRUCTURE = v
}

// GetAPP returns the APP field value if set, zero value otherwise.
func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) GetAPP() []string {
	if o == nil || IsNil(o.APP) {
		var ret []string
		return ret
	}
	return o.APP
}

// GetAPPOk returns a tuple with the APP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) GetAPPOk() ([]string, bool) {
	if o == nil || IsNil(o.APP) {
		return nil, false
	}
	return o.APP, true
}

// HasAPP returns a boolean if a field has been set.
func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) HasAPP() bool {
	if o != nil && !IsNil(o.APP) {
		return true
	}

	return false
}

// SetAPP gets a reference to the given []string and assigns it to the APP field.
func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) SetAPP(v []string) {
	o.APP = v
}

// GetAPPEXECUTION returns the APPEXECUTION field value if set, zero value otherwise.
func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) GetAPPEXECUTION() []string {
	if o == nil || IsNil(o.APPEXECUTION) {
		var ret []string
		return ret
	}
	return o.APPEXECUTION
}

// GetAPPEXECUTIONOk returns a tuple with the APPEXECUTION field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) GetAPPEXECUTIONOk() ([]string, bool) {
	if o == nil || IsNil(o.APPEXECUTION) {
		return nil, false
	}
	return o.APPEXECUTION, true
}

// HasAPPEXECUTION returns a boolean if a field has been set.
func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) HasAPPEXECUTION() bool {
	if o != nil && !IsNil(o.APPEXECUTION) {
		return true
	}

	return false
}

// SetAPPEXECUTION gets a reference to the given []string and assigns it to the APPEXECUTION field.
func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) SetAPPEXECUTION(v []string) {
	o.APPEXECUTION = v
}

// GetTEST returns the TEST field value if set, zero value otherwise.
func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) GetTEST() []string {
	if o == nil || IsNil(o.TEST) {
		var ret []string
		return ret
	}
	return o.TEST
}

// GetTESTOk returns a tuple with the TEST field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) GetTESTOk() ([]string, bool) {
	if o == nil || IsNil(o.TEST) {
		return nil, false
	}
	return o.TEST, true
}

// HasTEST returns a boolean if a field has been set.
func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) HasTEST() bool {
	if o != nil && !IsNil(o.TEST) {
		return true
	}

	return false
}

// SetTEST gets a reference to the given []string and assigns it to the TEST field.
func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) SetTEST(v []string) {
	o.TEST = v
}

// GetDASHBOARD returns the DASHBOARD field value if set, zero value otherwise.
func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) GetDASHBOARD() []string {
	if o == nil || IsNil(o.DASHBOARD) {
		var ret []string
		return ret
	}
	return o.DASHBOARD
}

// GetDASHBOARDOk returns a tuple with the DASHBOARD field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) GetDASHBOARDOk() ([]string, bool) {
	if o == nil || IsNil(o.DASHBOARD) {
		return nil, false
	}
	return o.DASHBOARD, true
}

// HasDASHBOARD returns a boolean if a field has been set.
func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) HasDASHBOARD() bool {
	if o != nil && !IsNil(o.DASHBOARD) {
		return true
	}

	return false
}

// SetDASHBOARD gets a reference to the given []string and assigns it to the DASHBOARD field.
func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) SetDASHBOARD(v []string) {
	o.DASHBOARD = v
}

// GetTENANT_ACCESS returns the TENANT_ACCESS field value if set, zero value otherwise.
func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) GetTENANT_ACCESS() []string {
	if o == nil || IsNil(o.TENANT_ACCESS) {
		var ret []string
		return ret
	}
	return o.TENANT_ACCESS
}

// GetTENANT_ACCESSOk returns a tuple with the TENANT_ACCESS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) GetTENANT_ACCESSOk() ([]string, bool) {
	if o == nil || IsNil(o.TENANT_ACCESS) {
		return nil, false
	}
	return o.TENANT_ACCESS, true
}

// HasTENANT_ACCESS returns a boolean if a field has been set.
func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) HasTENANT_ACCESS() bool {
	if o != nil && !IsNil(o.TENANT_ACCESS) {
		return true
	}

	return false
}

// SetTENANT_ACCESS gets a reference to the given []string and assigns it to the TENANT_ACCESS field.
func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) SetTENANT_ACCESS(v []string) {
	o.TENANT_ACCESS = v
}

// GetSERVICE_ACCOUNT returns the SERVICE_ACCOUNT field value if set, zero value otherwise.
func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) GetSERVICE_ACCOUNT() []string {
	if o == nil || IsNil(o.SERVICE_ACCOUNT) {
		var ret []string
		return ret
	}
	return o.SERVICE_ACCOUNT
}

// GetSERVICE_ACCOUNTOk returns a tuple with the SERVICE_ACCOUNT field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) GetSERVICE_ACCOUNTOk() ([]string, bool) {
	if o == nil || IsNil(o.SERVICE_ACCOUNT) {
		return nil, false
	}
	return o.SERVICE_ACCOUNT, true
}

// HasSERVICE_ACCOUNT returns a boolean if a field has been set.
func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) HasSERVICE_ACCOUNT() bool {
	if o != nil && !IsNil(o.SERVICE_ACCOUNT) {
		return true
	}

	return false
}

// SetSERVICE_ACCOUNT gets a reference to the given []string and assigns it to the SERVICE_ACCOUNT field.
func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) SetSERVICE_ACCOUNT(v []string) {
	o.SERVICE_ACCOUNT = v
}

// GetINVITATION returns the INVITATION field value if set, zero value otherwise.
func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) GetINVITATION() []string {
	if o == nil || IsNil(o.INVITATION) {
		var ret []string
		return ret
	}
	return o.INVITATION
}

// GetINVITATIONOk returns a tuple with the INVITATION field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) GetINVITATIONOk() ([]string, bool) {
	if o == nil || IsNil(o.INVITATION) {
		return nil, false
	}
	return o.INVITATION, true
}

// HasINVITATION returns a boolean if a field has been set.
func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) HasINVITATION() bool {
	if o != nil && !IsNil(o.INVITATION) {
		return true
	}

	return false
}

// SetINVITATION gets a reference to the given []string and assigns it to the INVITATION field.
func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) SetINVITATION(v []string) {
	o.INVITATION = v
}

// GetGROUP_MEMBERSHIP returns the GROUP_MEMBERSHIP field value if set, zero value otherwise.
func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) GetGROUP_MEMBERSHIP() []string {
	if o == nil || IsNil(o.GROUP_MEMBERSHIP) {
		var ret []string
		return ret
	}
	return o.GROUP_MEMBERSHIP
}

// GetGROUP_MEMBERSHIPOk returns a tuple with the GROUP_MEMBERSHIP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) GetGROUP_MEMBERSHIPOk() ([]string, bool) {
	if o == nil || IsNil(o.GROUP_MEMBERSHIP) {
		return nil, false
	}
	return o.GROUP_MEMBERSHIP, true
}

// HasGROUP_MEMBERSHIP returns a boolean if a field has been set.
func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) HasGROUP_MEMBERSHIP() bool {
	if o != nil && !IsNil(o.GROUP_MEMBERSHIP) {
		return true
	}

	return false
}

// SetGROUP_MEMBERSHIP gets a reference to the given []string and assigns it to the GROUP_MEMBERSHIP field.
func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) SetGROUP_MEMBERSHIP(v []string) {
	o.GROUP_MEMBERSHIP = v
}

// GetUNKNOWN returns the UNKNOWN field value if set, zero value otherwise.
func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) GetUNKNOWN() []string {
	if o == nil || IsNil(o.UNKNOWN) {
		var ret []string
		return ret
	}
	return o.UNKNOWN
}

// GetUNKNOWNOk returns a tuple with the UNKNOWN field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) GetUNKNOWNOk() ([]string, bool) {
	if o == nil || IsNil(o.UNKNOWN) {
		return nil, false
	}
	return o.UNKNOWN, true
}

// HasUNKNOWN returns a boolean if a field has been set.
func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) HasUNKNOWN() bool {
	if o != nil && !IsNil(o.UNKNOWN) {
		return true
	}

	return false
}

// SetUNKNOWN gets a reference to the given []string and assigns it to the UNKNOWN field.
func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) SetUNKNOWN(v []string) {
	o.UNKNOWN = v
}

func (o IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FLOW) {
		toSerialize["FLOW"] = o.FLOW
	}
	if !IsNil(o.BLUEPRINT) {
		toSerialize["BLUEPRINT"] = o.BLUEPRINT
	}
	if !IsNil(o.TEMPLATE) {
		toSerialize["TEMPLATE"] = o.TEMPLATE
	}
	if !IsNil(o.NAMESPACE) {
		toSerialize["NAMESPACE"] = o.NAMESPACE
	}
	if !IsNil(o.EXECUTION) {
		toSerialize["EXECUTION"] = o.EXECUTION
	}
	if !IsNil(o.USER) {
		toSerialize["USER"] = o.USER
	}
	if !IsNil(o.GROUP) {
		toSerialize["GROUP"] = o.GROUP
	}
	if !IsNil(o.ROLE) {
		toSerialize["ROLE"] = o.ROLE
	}
	if !IsNil(o.BINDING) {
		toSerialize["BINDING"] = o.BINDING
	}
	if !IsNil(o.AUDITLOG) {
		toSerialize["AUDITLOG"] = o.AUDITLOG
	}
	if !IsNil(o.SECRET) {
		toSerialize["SECRET"] = o.SECRET
	}
	if !IsNil(o.KVSTORE) {
		toSerialize["KVSTORE"] = o.KVSTORE
	}
	if !IsNil(o.IMPERSONATE) {
		toSerialize["IMPERSONATE"] = o.IMPERSONATE
	}
	if !IsNil(o.SETTING) {
		toSerialize["SETTING"] = o.SETTING
	}
	if !IsNil(o.INFRASTRUCTURE) {
		toSerialize["INFRASTRUCTURE"] = o.INFRASTRUCTURE
	}
	if !IsNil(o.APP) {
		toSerialize["APP"] = o.APP
	}
	if !IsNil(o.APPEXECUTION) {
		toSerialize["APPEXECUTION"] = o.APPEXECUTION
	}
	if !IsNil(o.TEST) {
		toSerialize["TEST"] = o.TEST
	}
	if !IsNil(o.DASHBOARD) {
		toSerialize["DASHBOARD"] = o.DASHBOARD
	}
	if !IsNil(o.TENANT_ACCESS) {
		toSerialize["TENANT_ACCESS"] = o.TENANT_ACCESS
	}
	if !IsNil(o.SERVICE_ACCOUNT) {
		toSerialize["SERVICE_ACCOUNT"] = o.SERVICE_ACCOUNT
	}
	if !IsNil(o.INVITATION) {
		toSerialize["INVITATION"] = o.INVITATION
	}
	if !IsNil(o.GROUP_MEMBERSHIP) {
		toSerialize["GROUP_MEMBERSHIP"] = o.GROUP_MEMBERSHIP
	}
	if !IsNil(o.UNKNOWN) {
		toSerialize["UNKNOWN"] = o.UNKNOWN
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) UnmarshalJSON(data []byte) (err error) {
	varIAMRoleControllerApiRoleCreateOrUpdateRequestPermissions := _IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions{}

	err = json.Unmarshal(data, &varIAMRoleControllerApiRoleCreateOrUpdateRequestPermissions)

	if err != nil {
		return err
	}

	*o = IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions(varIAMRoleControllerApiRoleCreateOrUpdateRequestPermissions)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "FLOW")
		delete(additionalProperties, "BLUEPRINT")
		delete(additionalProperties, "TEMPLATE")
		delete(additionalProperties, "NAMESPACE")
		delete(additionalProperties, "EXECUTION")
		delete(additionalProperties, "USER")
		delete(additionalProperties, "GROUP")
		delete(additionalProperties, "ROLE")
		delete(additionalProperties, "BINDING")
		delete(additionalProperties, "AUDITLOG")
		delete(additionalProperties, "SECRET")
		delete(additionalProperties, "KVSTORE")
		delete(additionalProperties, "IMPERSONATE")
		delete(additionalProperties, "SETTING")
		delete(additionalProperties, "INFRASTRUCTURE")
		delete(additionalProperties, "APP")
		delete(additionalProperties, "APPEXECUTION")
		delete(additionalProperties, "TEST")
		delete(additionalProperties, "DASHBOARD")
		delete(additionalProperties, "TENANT_ACCESS")
		delete(additionalProperties, "SERVICE_ACCOUNT")
		delete(additionalProperties, "INVITATION")
		delete(additionalProperties, "GROUP_MEMBERSHIP")
		delete(additionalProperties, "UNKNOWN")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIAMRoleControllerApiRoleCreateOrUpdateRequestPermissions struct {
	value *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions
	isSet bool
}

func (v NullableIAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) Get() *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions {
	return v.value
}

func (v *NullableIAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) Set(val *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) {
	v.value = val
	v.isSet = true
}

func (v NullableIAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) IsSet() bool {
	return v.isSet
}

func (v *NullableIAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIAMRoleControllerApiRoleCreateOrUpdateRequestPermissions(val *IAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) *NullableIAMRoleControllerApiRoleCreateOrUpdateRequestPermissions {
	return &NullableIAMRoleControllerApiRoleCreateOrUpdateRequestPermissions{value: val, isSet: true}
}

func (v NullableIAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIAMRoleControllerApiRoleCreateOrUpdateRequestPermissions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
