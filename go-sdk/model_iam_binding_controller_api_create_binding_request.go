/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
)

// checks if the IAMBindingControllerApiCreateBindingRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IAMBindingControllerApiCreateBindingRequest{}

// IAMBindingControllerApiCreateBindingRequest struct for IAMBindingControllerApiCreateBindingRequest
type IAMBindingControllerApiCreateBindingRequest struct {
	Type                 BindingType    `json:"type"`
	ExternalId           string         `json:"externalId"`
	RoleId               string         `json:"roleId"`
	NamespaceId          NullableString `json:"namespaceId,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _IAMBindingControllerApiCreateBindingRequest IAMBindingControllerApiCreateBindingRequest

// NewIAMBindingControllerApiCreateBindingRequest instantiates a new IAMBindingControllerApiCreateBindingRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIAMBindingControllerApiCreateBindingRequest(type_ BindingType, externalId string, roleId string) *IAMBindingControllerApiCreateBindingRequest {
	this := IAMBindingControllerApiCreateBindingRequest{}
	this.Type = type_
	this.ExternalId = externalId
	this.RoleId = roleId
	return &this
}

// NewIAMBindingControllerApiCreateBindingRequestWithDefaults instantiates a new IAMBindingControllerApiCreateBindingRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIAMBindingControllerApiCreateBindingRequestWithDefaults() *IAMBindingControllerApiCreateBindingRequest {
	this := IAMBindingControllerApiCreateBindingRequest{}
	return &this
}

// GetType returns the Type field value
func (o *IAMBindingControllerApiCreateBindingRequest) GetType() BindingType {
	if o == nil {
		var ret BindingType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *IAMBindingControllerApiCreateBindingRequest) GetTypeOk() (*BindingType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *IAMBindingControllerApiCreateBindingRequest) SetType(v BindingType) {
	o.Type = v
}

// GetExternalId returns the ExternalId field value
func (o *IAMBindingControllerApiCreateBindingRequest) GetExternalId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExternalId
}

// GetExternalIdOk returns a tuple with the ExternalId field value
// and a boolean to check if the value has been set.
func (o *IAMBindingControllerApiCreateBindingRequest) GetExternalIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExternalId, true
}

// SetExternalId sets field value
func (o *IAMBindingControllerApiCreateBindingRequest) SetExternalId(v string) {
	o.ExternalId = v
}

// GetRoleId returns the RoleId field value
func (o *IAMBindingControllerApiCreateBindingRequest) GetRoleId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RoleId
}

// GetRoleIdOk returns a tuple with the RoleId field value
// and a boolean to check if the value has been set.
func (o *IAMBindingControllerApiCreateBindingRequest) GetRoleIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RoleId, true
}

// SetRoleId sets field value
func (o *IAMBindingControllerApiCreateBindingRequest) SetRoleId(v string) {
	o.RoleId = v
}

// GetNamespaceId returns the NamespaceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IAMBindingControllerApiCreateBindingRequest) GetNamespaceId() string {
	if o == nil || IsNil(o.NamespaceId.Get()) {
		var ret string
		return ret
	}
	return *o.NamespaceId.Get()
}

// GetNamespaceIdOk returns a tuple with the NamespaceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IAMBindingControllerApiCreateBindingRequest) GetNamespaceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NamespaceId.Get(), o.NamespaceId.IsSet()
}

// HasNamespaceId returns a boolean if a field has been set.
func (o *IAMBindingControllerApiCreateBindingRequest) HasNamespaceId() bool {
	if o != nil && o.NamespaceId.IsSet() {
		return true
	}

	return false
}

// SetNamespaceId gets a reference to the given NullableString and assigns it to the NamespaceId field.
func (o *IAMBindingControllerApiCreateBindingRequest) SetNamespaceId(v string) {
	o.NamespaceId.Set(&v)
}

// SetNamespaceIdNil sets the value for NamespaceId to be an explicit nil
func (o *IAMBindingControllerApiCreateBindingRequest) SetNamespaceIdNil() {
	o.NamespaceId.Set(nil)
}

// UnsetNamespaceId ensures that no value is present for NamespaceId, not even an explicit nil
func (o *IAMBindingControllerApiCreateBindingRequest) UnsetNamespaceId() {
	o.NamespaceId.Unset()
}

func (o IAMBindingControllerApiCreateBindingRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IAMBindingControllerApiCreateBindingRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["externalId"] = o.ExternalId
	toSerialize["roleId"] = o.RoleId
	if o.NamespaceId.IsSet() {
		toSerialize["namespaceId"] = o.NamespaceId.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *IAMBindingControllerApiCreateBindingRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"externalId",
		"roleId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIAMBindingControllerApiCreateBindingRequest := _IAMBindingControllerApiCreateBindingRequest{}

	err = json.Unmarshal(data, &varIAMBindingControllerApiCreateBindingRequest)

	if err != nil {
		return err
	}

	*o = IAMBindingControllerApiCreateBindingRequest(varIAMBindingControllerApiCreateBindingRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "externalId")
		delete(additionalProperties, "roleId")
		delete(additionalProperties, "namespaceId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIAMBindingControllerApiCreateBindingRequest struct {
	value *IAMBindingControllerApiCreateBindingRequest
	isSet bool
}

func (v NullableIAMBindingControllerApiCreateBindingRequest) Get() *IAMBindingControllerApiCreateBindingRequest {
	return v.value
}

func (v *NullableIAMBindingControllerApiCreateBindingRequest) Set(val *IAMBindingControllerApiCreateBindingRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableIAMBindingControllerApiCreateBindingRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableIAMBindingControllerApiCreateBindingRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIAMBindingControllerApiCreateBindingRequest(val *IAMBindingControllerApiCreateBindingRequest) *NullableIAMBindingControllerApiCreateBindingRequest {
	return &NullableIAMBindingControllerApiCreateBindingRequest{value: val, isSet: true}
}

func (v NullableIAMBindingControllerApiCreateBindingRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIAMBindingControllerApiCreateBindingRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
