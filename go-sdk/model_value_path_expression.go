/*
Kestra EE

All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
)

// checks if the ValuePathExpression type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ValuePathExpression{}

// ValuePathExpression struct for ValuePathExpression
type ValuePathExpression struct {
	AttributePath       *AttributeReference    `json:"attributePath,omitempty"`
	AttributeExpression map[string]interface{} `json:"attributeExpression,omitempty"`
}

// NewValuePathExpression instantiates a new ValuePathExpression object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewValuePathExpression() *ValuePathExpression {
	this := ValuePathExpression{}
	return &this
}

// NewValuePathExpressionWithDefaults instantiates a new ValuePathExpression object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewValuePathExpressionWithDefaults() *ValuePathExpression {
	this := ValuePathExpression{}
	return &this
}

// GetAttributePath returns the AttributePath field value if set, zero value otherwise.
func (o *ValuePathExpression) GetAttributePath() AttributeReference {
	if o == nil || IsNil(o.AttributePath) {
		var ret AttributeReference
		return ret
	}
	return *o.AttributePath
}

// GetAttributePathOk returns a tuple with the AttributePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValuePathExpression) GetAttributePathOk() (*AttributeReference, bool) {
	if o == nil || IsNil(o.AttributePath) {
		return nil, false
	}
	return o.AttributePath, true
}

// HasAttributePath returns a boolean if a field has been set.
func (o *ValuePathExpression) HasAttributePath() bool {
	if o != nil && !IsNil(o.AttributePath) {
		return true
	}

	return false
}

// SetAttributePath gets a reference to the given AttributeReference and assigns it to the AttributePath field.
func (o *ValuePathExpression) SetAttributePath(v AttributeReference) {
	o.AttributePath = &v
}

// GetAttributeExpression returns the AttributeExpression field value if set, zero value otherwise.
func (o *ValuePathExpression) GetAttributeExpression() map[string]interface{} {
	if o == nil || IsNil(o.AttributeExpression) {
		var ret map[string]interface{}
		return ret
	}
	return o.AttributeExpression
}

// GetAttributeExpressionOk returns a tuple with the AttributeExpression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValuePathExpression) GetAttributeExpressionOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.AttributeExpression) {
		return map[string]interface{}{}, false
	}
	return o.AttributeExpression, true
}

// HasAttributeExpression returns a boolean if a field has been set.
func (o *ValuePathExpression) HasAttributeExpression() bool {
	if o != nil && !IsNil(o.AttributeExpression) {
		return true
	}

	return false
}

// SetAttributeExpression gets a reference to the given map[string]interface{} and assigns it to the AttributeExpression field.
func (o *ValuePathExpression) SetAttributeExpression(v map[string]interface{}) {
	o.AttributeExpression = v
}

func (o ValuePathExpression) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ValuePathExpression) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AttributePath) {
		toSerialize["attributePath"] = o.AttributePath
	}
	if !IsNil(o.AttributeExpression) {
		toSerialize["attributeExpression"] = o.AttributeExpression
	}
	return toSerialize, nil
}

type NullableValuePathExpression struct {
	value *ValuePathExpression
	isSet bool
}

func (v NullableValuePathExpression) Get() *ValuePathExpression {
	return v.value
}

func (v *NullableValuePathExpression) Set(val *ValuePathExpression) {
	v.value = val
	v.isSet = true
}

func (v NullableValuePathExpression) IsSet() bool {
	return v.isSet
}

func (v *NullableValuePathExpression) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValuePathExpression(val *ValuePathExpression) *NullableValuePathExpression {
	return &NullableValuePathExpression{value: val, isSet: true}
}

func (v NullableValuePathExpression) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValuePathExpression) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
