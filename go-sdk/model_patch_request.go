/*
Kestra EE

All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
)

// checks if the PatchRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PatchRequest{}

// PatchRequest struct for PatchRequest
type PatchRequest struct {
	Schemas            []string         `json:"schemas,omitempty"`
	PatchOperationList []PatchOperation `json:"patchOperationList,omitempty"`
}

// NewPatchRequest instantiates a new PatchRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchRequest() *PatchRequest {
	this := PatchRequest{}
	return &this
}

// NewPatchRequestWithDefaults instantiates a new PatchRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchRequestWithDefaults() *PatchRequest {
	this := PatchRequest{}
	return &this
}

// GetSchemas returns the Schemas field value if set, zero value otherwise.
func (o *PatchRequest) GetSchemas() []string {
	if o == nil || IsNil(o.Schemas) {
		var ret []string
		return ret
	}
	return o.Schemas
}

// GetSchemasOk returns a tuple with the Schemas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchRequest) GetSchemasOk() ([]string, bool) {
	if o == nil || IsNil(o.Schemas) {
		return nil, false
	}
	return o.Schemas, true
}

// HasSchemas returns a boolean if a field has been set.
func (o *PatchRequest) HasSchemas() bool {
	if o != nil && !IsNil(o.Schemas) {
		return true
	}

	return false
}

// SetSchemas gets a reference to the given []string and assigns it to the Schemas field.
func (o *PatchRequest) SetSchemas(v []string) {
	o.Schemas = v
}

// GetPatchOperationList returns the PatchOperationList field value if set, zero value otherwise.
func (o *PatchRequest) GetPatchOperationList() []PatchOperation {
	if o == nil || IsNil(o.PatchOperationList) {
		var ret []PatchOperation
		return ret
	}
	return o.PatchOperationList
}

// GetPatchOperationListOk returns a tuple with the PatchOperationList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchRequest) GetPatchOperationListOk() ([]PatchOperation, bool) {
	if o == nil || IsNil(o.PatchOperationList) {
		return nil, false
	}
	return o.PatchOperationList, true
}

// HasPatchOperationList returns a boolean if a field has been set.
func (o *PatchRequest) HasPatchOperationList() bool {
	if o != nil && !IsNil(o.PatchOperationList) {
		return true
	}

	return false
}

// SetPatchOperationList gets a reference to the given []PatchOperation and assigns it to the PatchOperationList field.
func (o *PatchRequest) SetPatchOperationList(v []PatchOperation) {
	o.PatchOperationList = v
}

func (o PatchRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PatchRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Schemas) {
		toSerialize["schemas"] = o.Schemas
	}
	if !IsNil(o.PatchOperationList) {
		toSerialize["patchOperationList"] = o.PatchOperationList
	}
	return toSerialize, nil
}

type NullablePatchRequest struct {
	value *PatchRequest
	isSet bool
}

func (v NullablePatchRequest) Get() *PatchRequest {
	return v.value
}

func (v *NullablePatchRequest) Set(val *PatchRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchRequest(val *PatchRequest) *NullablePatchRequest {
	return &NullablePatchRequest{value: val, isSet: true}
}

func (v NullablePatchRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
