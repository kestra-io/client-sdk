/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
	"time"
)

// checks if the Backfill type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Backfill{}

// Backfill struct for Backfill
type Backfill struct {
	Start                     time.Time                         `json:"start"`
	End                       *time.Time                        `json:"end,omitempty"`
	CurrentDate               *time.Time                        `json:"currentDate,omitempty"`
	Paused                    *bool                             `json:"paused,omitempty"`
	Inputs                    map[string]map[string]interface{} `json:"inputs,omitempty"`
	Labels                    []Label                           `json:"labels,omitempty"`
	PreviousNextExecutionDate *time.Time                        `json:"previousNextExecutionDate,omitempty"`
	AdditionalProperties      map[string]interface{}
}

type _Backfill Backfill

// NewBackfill instantiates a new Backfill object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBackfill(start time.Time) *Backfill {
	this := Backfill{}
	this.Start = start
	return &this
}

// NewBackfillWithDefaults instantiates a new Backfill object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBackfillWithDefaults() *Backfill {
	this := Backfill{}
	return &this
}

// GetStart returns the Start field value
func (o *Backfill) GetStart() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Start
}

// GetStartOk returns a tuple with the Start field value
// and a boolean to check if the value has been set.
func (o *Backfill) GetStartOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Start, true
}

// SetStart sets field value
func (o *Backfill) SetStart(v time.Time) {
	o.Start = v
}

// GetEnd returns the End field value if set, zero value otherwise.
func (o *Backfill) GetEnd() time.Time {
	if o == nil || IsNil(o.End) {
		var ret time.Time
		return ret
	}
	return *o.End
}

// GetEndOk returns a tuple with the End field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Backfill) GetEndOk() (*time.Time, bool) {
	if o == nil || IsNil(o.End) {
		return nil, false
	}
	return o.End, true
}

// HasEnd returns a boolean if a field has been set.
func (o *Backfill) HasEnd() bool {
	if o != nil && !IsNil(o.End) {
		return true
	}

	return false
}

// SetEnd gets a reference to the given time.Time and assigns it to the End field.
func (o *Backfill) SetEnd(v time.Time) {
	o.End = &v
}

// GetCurrentDate returns the CurrentDate field value if set, zero value otherwise.
func (o *Backfill) GetCurrentDate() time.Time {
	if o == nil || IsNil(o.CurrentDate) {
		var ret time.Time
		return ret
	}
	return *o.CurrentDate
}

// GetCurrentDateOk returns a tuple with the CurrentDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Backfill) GetCurrentDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CurrentDate) {
		return nil, false
	}
	return o.CurrentDate, true
}

// HasCurrentDate returns a boolean if a field has been set.
func (o *Backfill) HasCurrentDate() bool {
	if o != nil && !IsNil(o.CurrentDate) {
		return true
	}

	return false
}

// SetCurrentDate gets a reference to the given time.Time and assigns it to the CurrentDate field.
func (o *Backfill) SetCurrentDate(v time.Time) {
	o.CurrentDate = &v
}

// GetPaused returns the Paused field value if set, zero value otherwise.
func (o *Backfill) GetPaused() bool {
	if o == nil || IsNil(o.Paused) {
		var ret bool
		return ret
	}
	return *o.Paused
}

// GetPausedOk returns a tuple with the Paused field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Backfill) GetPausedOk() (*bool, bool) {
	if o == nil || IsNil(o.Paused) {
		return nil, false
	}
	return o.Paused, true
}

// HasPaused returns a boolean if a field has been set.
func (o *Backfill) HasPaused() bool {
	if o != nil && !IsNil(o.Paused) {
		return true
	}

	return false
}

// SetPaused gets a reference to the given bool and assigns it to the Paused field.
func (o *Backfill) SetPaused(v bool) {
	o.Paused = &v
}

// GetInputs returns the Inputs field value if set, zero value otherwise.
func (o *Backfill) GetInputs() map[string]map[string]interface{} {
	if o == nil || IsNil(o.Inputs) {
		var ret map[string]map[string]interface{}
		return ret
	}
	return o.Inputs
}

// GetInputsOk returns a tuple with the Inputs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Backfill) GetInputsOk() (map[string]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Inputs) {
		return map[string]map[string]interface{}{}, false
	}
	return o.Inputs, true
}

// HasInputs returns a boolean if a field has been set.
func (o *Backfill) HasInputs() bool {
	if o != nil && !IsNil(o.Inputs) {
		return true
	}

	return false
}

// SetInputs gets a reference to the given map[string]map[string]interface{} and assigns it to the Inputs field.
func (o *Backfill) SetInputs(v map[string]map[string]interface{}) {
	o.Inputs = v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *Backfill) GetLabels() []Label {
	if o == nil || IsNil(o.Labels) {
		var ret []Label
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Backfill) GetLabelsOk() ([]Label, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *Backfill) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []Label and assigns it to the Labels field.
func (o *Backfill) SetLabels(v []Label) {
	o.Labels = v
}

// GetPreviousNextExecutionDate returns the PreviousNextExecutionDate field value if set, zero value otherwise.
func (o *Backfill) GetPreviousNextExecutionDate() time.Time {
	if o == nil || IsNil(o.PreviousNextExecutionDate) {
		var ret time.Time
		return ret
	}
	return *o.PreviousNextExecutionDate
}

// GetPreviousNextExecutionDateOk returns a tuple with the PreviousNextExecutionDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Backfill) GetPreviousNextExecutionDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.PreviousNextExecutionDate) {
		return nil, false
	}
	return o.PreviousNextExecutionDate, true
}

// HasPreviousNextExecutionDate returns a boolean if a field has been set.
func (o *Backfill) HasPreviousNextExecutionDate() bool {
	if o != nil && !IsNil(o.PreviousNextExecutionDate) {
		return true
	}

	return false
}

// SetPreviousNextExecutionDate gets a reference to the given time.Time and assigns it to the PreviousNextExecutionDate field.
func (o *Backfill) SetPreviousNextExecutionDate(v time.Time) {
	o.PreviousNextExecutionDate = &v
}

func (o Backfill) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Backfill) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["start"] = o.Start
	if !IsNil(o.End) {
		toSerialize["end"] = o.End
	}
	if !IsNil(o.CurrentDate) {
		toSerialize["currentDate"] = o.CurrentDate
	}
	if !IsNil(o.Paused) {
		toSerialize["paused"] = o.Paused
	}
	if !IsNil(o.Inputs) {
		toSerialize["inputs"] = o.Inputs
	}
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	if !IsNil(o.PreviousNextExecutionDate) {
		toSerialize["previousNextExecutionDate"] = o.PreviousNextExecutionDate
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Backfill) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"start",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBackfill := _Backfill{}

	err = json.Unmarshal(data, &varBackfill)

	if err != nil {
		return err
	}

	*o = Backfill(varBackfill)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "start")
		delete(additionalProperties, "end")
		delete(additionalProperties, "currentDate")
		delete(additionalProperties, "paused")
		delete(additionalProperties, "inputs")
		delete(additionalProperties, "labels")
		delete(additionalProperties, "previousNextExecutionDate")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBackfill struct {
	value *Backfill
	isSet bool
}

func (v NullableBackfill) Get() *Backfill {
	return v.value
}

func (v *NullableBackfill) Set(val *Backfill) {
	v.value = val
	v.isSet = true
}

func (v NullableBackfill) IsSet() bool {
	return v.isSet
}

func (v *NullableBackfill) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBackfill(val *Backfill) *NullableBackfill {
	return &NullableBackfill{value: val, isSet: true}
}

func (v NullableBackfill) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBackfill) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
