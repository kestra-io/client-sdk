/*
Kestra EE

All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the UsernamePasswordCredentials type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UsernamePasswordCredentials{}

// UsernamePasswordCredentials struct for UsernamePasswordCredentials
type UsernamePasswordCredentials struct {
	Username string         `json:"username"`
	Password string         `json:"password"`
	Identity NullableString `json:"identity,omitempty"`
	Secret   NullableString `json:"secret,omitempty"`
}

type _UsernamePasswordCredentials UsernamePasswordCredentials

// NewUsernamePasswordCredentials instantiates a new UsernamePasswordCredentials object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsernamePasswordCredentials(username string, password string) *UsernamePasswordCredentials {
	this := UsernamePasswordCredentials{}
	this.Username = username
	this.Password = password
	return &this
}

// NewUsernamePasswordCredentialsWithDefaults instantiates a new UsernamePasswordCredentials object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsernamePasswordCredentialsWithDefaults() *UsernamePasswordCredentials {
	this := UsernamePasswordCredentials{}
	return &this
}

// GetUsername returns the Username field value
func (o *UsernamePasswordCredentials) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *UsernamePasswordCredentials) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *UsernamePasswordCredentials) SetUsername(v string) {
	o.Username = v
}

// GetPassword returns the Password field value
func (o *UsernamePasswordCredentials) GetPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *UsernamePasswordCredentials) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *UsernamePasswordCredentials) SetPassword(v string) {
	o.Password = v
}

// GetIdentity returns the Identity field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UsernamePasswordCredentials) GetIdentity() string {
	if o == nil || IsNil(o.Identity.Get()) {
		var ret string
		return ret
	}
	return *o.Identity.Get()
}

// GetIdentityOk returns a tuple with the Identity field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UsernamePasswordCredentials) GetIdentityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Identity.Get(), o.Identity.IsSet()
}

// HasIdentity returns a boolean if a field has been set.
func (o *UsernamePasswordCredentials) HasIdentity() bool {
	if o != nil && o.Identity.IsSet() {
		return true
	}

	return false
}

// SetIdentity gets a reference to the given NullableString and assigns it to the Identity field.
func (o *UsernamePasswordCredentials) SetIdentity(v string) {
	o.Identity.Set(&v)
}

// SetIdentityNil sets the value for Identity to be an explicit nil
func (o *UsernamePasswordCredentials) SetIdentityNil() {
	o.Identity.Set(nil)
}

// UnsetIdentity ensures that no value is present for Identity, not even an explicit nil
func (o *UsernamePasswordCredentials) UnsetIdentity() {
	o.Identity.Unset()
}

// GetSecret returns the Secret field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UsernamePasswordCredentials) GetSecret() string {
	if o == nil || IsNil(o.Secret.Get()) {
		var ret string
		return ret
	}
	return *o.Secret.Get()
}

// GetSecretOk returns a tuple with the Secret field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UsernamePasswordCredentials) GetSecretOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Secret.Get(), o.Secret.IsSet()
}

// HasSecret returns a boolean if a field has been set.
func (o *UsernamePasswordCredentials) HasSecret() bool {
	if o != nil && o.Secret.IsSet() {
		return true
	}

	return false
}

// SetSecret gets a reference to the given NullableString and assigns it to the Secret field.
func (o *UsernamePasswordCredentials) SetSecret(v string) {
	o.Secret.Set(&v)
}

// SetSecretNil sets the value for Secret to be an explicit nil
func (o *UsernamePasswordCredentials) SetSecretNil() {
	o.Secret.Set(nil)
}

// UnsetSecret ensures that no value is present for Secret, not even an explicit nil
func (o *UsernamePasswordCredentials) UnsetSecret() {
	o.Secret.Unset()
}

func (o UsernamePasswordCredentials) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UsernamePasswordCredentials) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["username"] = o.Username
	toSerialize["password"] = o.Password
	if o.Identity.IsSet() {
		toSerialize["identity"] = o.Identity.Get()
	}
	if o.Secret.IsSet() {
		toSerialize["secret"] = o.Secret.Get()
	}
	return toSerialize, nil
}

func (o *UsernamePasswordCredentials) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"username",
		"password",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUsernamePasswordCredentials := _UsernamePasswordCredentials{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUsernamePasswordCredentials)

	if err != nil {
		return err
	}

	*o = UsernamePasswordCredentials(varUsernamePasswordCredentials)

	return err
}

type NullableUsernamePasswordCredentials struct {
	value *UsernamePasswordCredentials
	isSet bool
}

func (v NullableUsernamePasswordCredentials) Get() *UsernamePasswordCredentials {
	return v.value
}

func (v *NullableUsernamePasswordCredentials) Set(val *UsernamePasswordCredentials) {
	v.value = val
	v.isSet = true
}

func (v NullableUsernamePasswordCredentials) IsSet() bool {
	return v.isSet
}

func (v *NullableUsernamePasswordCredentials) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsernamePasswordCredentials(val *UsernamePasswordCredentials) *NullableUsernamePasswordCredentials {
	return &NullableUsernamePasswordCredentials{value: val, isSet: true}
}

func (v NullableUsernamePasswordCredentials) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsernamePasswordCredentials) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
