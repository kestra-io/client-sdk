/*
Kestra EE

All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
)

// SchemaAttributeUniqueness the model 'SchemaAttributeUniqueness'
type SchemaAttributeUniqueness string

// List of Schema.Attribute.Uniqueness
const (
	SCHEMAATTRIBUTEUNIQUENESS_GLOBAL SchemaAttributeUniqueness = "GLOBAL"
	SCHEMAATTRIBUTEUNIQUENESS_NONE   SchemaAttributeUniqueness = "NONE"
	SCHEMAATTRIBUTEUNIQUENESS_SERVER SchemaAttributeUniqueness = "SERVER"
)

// All allowed values of SchemaAttributeUniqueness enum
var AllowedSchemaAttributeUniquenessEnumValues = []SchemaAttributeUniqueness{
	"GLOBAL",
	"NONE",
	"SERVER",
}

func (v *SchemaAttributeUniqueness) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SchemaAttributeUniqueness(value)
	for _, existing := range AllowedSchemaAttributeUniquenessEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SchemaAttributeUniqueness", value)
}

// NewSchemaAttributeUniquenessFromValue returns a pointer to a valid SchemaAttributeUniqueness
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSchemaAttributeUniquenessFromValue(v string) (*SchemaAttributeUniqueness, error) {
	ev := SchemaAttributeUniqueness(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SchemaAttributeUniqueness: valid values are %v", v, AllowedSchemaAttributeUniquenessEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SchemaAttributeUniqueness) IsValid() bool {
	for _, existing := range AllowedSchemaAttributeUniquenessEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Schema.Attribute.Uniqueness value
func (v SchemaAttributeUniqueness) Ptr() *SchemaAttributeUniqueness {
	return &v
}

type NullableSchemaAttributeUniqueness struct {
	value *SchemaAttributeUniqueness
	isSet bool
}

func (v NullableSchemaAttributeUniqueness) Get() *SchemaAttributeUniqueness {
	return v.value
}

func (v *NullableSchemaAttributeUniqueness) Set(val *SchemaAttributeUniqueness) {
	v.value = val
	v.isSet = true
}

func (v NullableSchemaAttributeUniqueness) IsSet() bool {
	return v.isSet
}

func (v *NullableSchemaAttributeUniqueness) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchemaAttributeUniqueness(val *SchemaAttributeUniqueness) *NullableSchemaAttributeUniqueness {
	return &NullableSchemaAttributeUniqueness{value: val, isSet: true}
}

func (v NullableSchemaAttributeUniqueness) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchemaAttributeUniqueness) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
