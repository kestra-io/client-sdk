/*
Kestra EE

All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// FlowAllOfLabels - struct for FlowAllOfLabels
type FlowAllOfLabels struct {
	MapObjectObject *MapObjectObject
	ArrayOfString   *[]string
}

// MapObjectObjectAsFlowAllOfLabels is a convenience function that returns MapObjectObject wrapped in FlowAllOfLabels
func MapObjectObjectAsFlowAllOfLabels(v *MapObjectObject) FlowAllOfLabels {
	return FlowAllOfLabels{
		MapObjectObject: v,
	}
}

// []stringAsFlowAllOfLabels is a convenience function that returns []string wrapped in FlowAllOfLabels
func ArrayOfStringAsFlowAllOfLabels(v *[]string) FlowAllOfLabels {
	return FlowAllOfLabels{
		ArrayOfString: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *FlowAllOfLabels) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into MapObjectObject
	err = newStrictDecoder(data).Decode(&dst.MapObjectObject)
	if err == nil {
		jsonMapObjectObject, _ := json.Marshal(dst.MapObjectObject)
		if string(jsonMapObjectObject) == "{}" { // empty struct
			dst.MapObjectObject = nil
		} else {
			if err = validator.Validate(dst.MapObjectObject); err != nil {
				dst.MapObjectObject = nil
			} else {
				match++
			}
		}
	} else {
		dst.MapObjectObject = nil
	}

	// try to unmarshal data into ArrayOfString
	err = newStrictDecoder(data).Decode(&dst.ArrayOfString)
	if err == nil {
		jsonArrayOfString, _ := json.Marshal(dst.ArrayOfString)
		if string(jsonArrayOfString) == "{}" { // empty struct
			dst.ArrayOfString = nil
		} else {
			if err = validator.Validate(dst.ArrayOfString); err != nil {
				dst.ArrayOfString = nil
			} else {
				match++
			}
		}
	} else {
		dst.ArrayOfString = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.MapObjectObject = nil
		dst.ArrayOfString = nil

		return fmt.Errorf("data matches more than one schema in oneOf(FlowAllOfLabels)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(FlowAllOfLabels)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src FlowAllOfLabels) MarshalJSON() ([]byte, error) {
	if src.MapObjectObject != nil {
		return json.Marshal(&src.MapObjectObject)
	}

	if src.ArrayOfString != nil {
		return json.Marshal(&src.ArrayOfString)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *FlowAllOfLabels) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.MapObjectObject != nil {
		return obj.MapObjectObject
	}

	if obj.ArrayOfString != nil {
		return obj.ArrayOfString
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj FlowAllOfLabels) GetActualInstanceValue() interface{} {
	if obj.MapObjectObject != nil {
		return *obj.MapObjectObject
	}

	if obj.ArrayOfString != nil {
		return *obj.ArrayOfString
	}

	// all schemas are nil
	return nil
}

type NullableFlowAllOfLabels struct {
	value *FlowAllOfLabels
	isSet bool
}

func (v NullableFlowAllOfLabels) Get() *FlowAllOfLabels {
	return v.value
}

func (v *NullableFlowAllOfLabels) Set(val *FlowAllOfLabels) {
	v.value = val
	v.isSet = true
}

func (v NullableFlowAllOfLabels) IsSet() bool {
	return v.isSet
}

func (v *NullableFlowAllOfLabels) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFlowAllOfLabels(val *FlowAllOfLabels) *NullableFlowAllOfLabels {
	return &NullableFlowAllOfLabels{value: val, isSet: true}
}

func (v NullableFlowAllOfLabels) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFlowAllOfLabels) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
