/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
)

// checks if the UsageEE type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UsageEE{}

// UsageEE struct for UsageEE
type UsageEE struct {
	Groups               *GroupUsage     `json:"groups,omitempty"`
	Users                *UserUsage      `json:"users,omitempty"`
	Roles                *RoleUsage      `json:"roles,omitempty"`
	Tenants              *TenantUsage    `json:"tenants,omitempty"`
	Flows                *FlowUsage      `json:"flows,omitempty"`
	Executions           *ExecutionUsage `json:"executions,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UsageEE UsageEE

// NewUsageEE instantiates a new UsageEE object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsageEE() *UsageEE {
	this := UsageEE{}
	return &this
}

// NewUsageEEWithDefaults instantiates a new UsageEE object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsageEEWithDefaults() *UsageEE {
	this := UsageEE{}
	return &this
}

// GetGroups returns the Groups field value if set, zero value otherwise.
func (o *UsageEE) GetGroups() GroupUsage {
	if o == nil || IsNil(o.Groups) {
		var ret GroupUsage
		return ret
	}
	return *o.Groups
}

// GetGroupsOk returns a tuple with the Groups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageEE) GetGroupsOk() (*GroupUsage, bool) {
	if o == nil || IsNil(o.Groups) {
		return nil, false
	}
	return o.Groups, true
}

// HasGroups returns a boolean if a field has been set.
func (o *UsageEE) HasGroups() bool {
	if o != nil && !IsNil(o.Groups) {
		return true
	}

	return false
}

// SetGroups gets a reference to the given GroupUsage and assigns it to the Groups field.
func (o *UsageEE) SetGroups(v GroupUsage) {
	o.Groups = &v
}

// GetUsers returns the Users field value if set, zero value otherwise.
func (o *UsageEE) GetUsers() UserUsage {
	if o == nil || IsNil(o.Users) {
		var ret UserUsage
		return ret
	}
	return *o.Users
}

// GetUsersOk returns a tuple with the Users field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageEE) GetUsersOk() (*UserUsage, bool) {
	if o == nil || IsNil(o.Users) {
		return nil, false
	}
	return o.Users, true
}

// HasUsers returns a boolean if a field has been set.
func (o *UsageEE) HasUsers() bool {
	if o != nil && !IsNil(o.Users) {
		return true
	}

	return false
}

// SetUsers gets a reference to the given UserUsage and assigns it to the Users field.
func (o *UsageEE) SetUsers(v UserUsage) {
	o.Users = &v
}

// GetRoles returns the Roles field value if set, zero value otherwise.
func (o *UsageEE) GetRoles() RoleUsage {
	if o == nil || IsNil(o.Roles) {
		var ret RoleUsage
		return ret
	}
	return *o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageEE) GetRolesOk() (*RoleUsage, bool) {
	if o == nil || IsNil(o.Roles) {
		return nil, false
	}
	return o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *UsageEE) HasRoles() bool {
	if o != nil && !IsNil(o.Roles) {
		return true
	}

	return false
}

// SetRoles gets a reference to the given RoleUsage and assigns it to the Roles field.
func (o *UsageEE) SetRoles(v RoleUsage) {
	o.Roles = &v
}

// GetTenants returns the Tenants field value if set, zero value otherwise.
func (o *UsageEE) GetTenants() TenantUsage {
	if o == nil || IsNil(o.Tenants) {
		var ret TenantUsage
		return ret
	}
	return *o.Tenants
}

// GetTenantsOk returns a tuple with the Tenants field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageEE) GetTenantsOk() (*TenantUsage, bool) {
	if o == nil || IsNil(o.Tenants) {
		return nil, false
	}
	return o.Tenants, true
}

// HasTenants returns a boolean if a field has been set.
func (o *UsageEE) HasTenants() bool {
	if o != nil && !IsNil(o.Tenants) {
		return true
	}

	return false
}

// SetTenants gets a reference to the given TenantUsage and assigns it to the Tenants field.
func (o *UsageEE) SetTenants(v TenantUsage) {
	o.Tenants = &v
}

// GetFlows returns the Flows field value if set, zero value otherwise.
func (o *UsageEE) GetFlows() FlowUsage {
	if o == nil || IsNil(o.Flows) {
		var ret FlowUsage
		return ret
	}
	return *o.Flows
}

// GetFlowsOk returns a tuple with the Flows field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageEE) GetFlowsOk() (*FlowUsage, bool) {
	if o == nil || IsNil(o.Flows) {
		return nil, false
	}
	return o.Flows, true
}

// HasFlows returns a boolean if a field has been set.
func (o *UsageEE) HasFlows() bool {
	if o != nil && !IsNil(o.Flows) {
		return true
	}

	return false
}

// SetFlows gets a reference to the given FlowUsage and assigns it to the Flows field.
func (o *UsageEE) SetFlows(v FlowUsage) {
	o.Flows = &v
}

// GetExecutions returns the Executions field value if set, zero value otherwise.
func (o *UsageEE) GetExecutions() ExecutionUsage {
	if o == nil || IsNil(o.Executions) {
		var ret ExecutionUsage
		return ret
	}
	return *o.Executions
}

// GetExecutionsOk returns a tuple with the Executions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageEE) GetExecutionsOk() (*ExecutionUsage, bool) {
	if o == nil || IsNil(o.Executions) {
		return nil, false
	}
	return o.Executions, true
}

// HasExecutions returns a boolean if a field has been set.
func (o *UsageEE) HasExecutions() bool {
	if o != nil && !IsNil(o.Executions) {
		return true
	}

	return false
}

// SetExecutions gets a reference to the given ExecutionUsage and assigns it to the Executions field.
func (o *UsageEE) SetExecutions(v ExecutionUsage) {
	o.Executions = &v
}

func (o UsageEE) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UsageEE) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Groups) {
		toSerialize["groups"] = o.Groups
	}
	if !IsNil(o.Users) {
		toSerialize["users"] = o.Users
	}
	if !IsNil(o.Roles) {
		toSerialize["roles"] = o.Roles
	}
	if !IsNil(o.Tenants) {
		toSerialize["tenants"] = o.Tenants
	}
	if !IsNil(o.Flows) {
		toSerialize["flows"] = o.Flows
	}
	if !IsNil(o.Executions) {
		toSerialize["executions"] = o.Executions
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UsageEE) UnmarshalJSON(data []byte) (err error) {
	varUsageEE := _UsageEE{}

	err = json.Unmarshal(data, &varUsageEE)

	if err != nil {
		return err
	}

	*o = UsageEE(varUsageEE)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "groups")
		delete(additionalProperties, "users")
		delete(additionalProperties, "roles")
		delete(additionalProperties, "tenants")
		delete(additionalProperties, "flows")
		delete(additionalProperties, "executions")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUsageEE struct {
	value *UsageEE
	isSet bool
}

func (v NullableUsageEE) Get() *UsageEE {
	return v.value
}

func (v *NullableUsageEE) Set(val *UsageEE) {
	v.value = val
	v.isSet = true
}

func (v NullableUsageEE) IsSet() bool {
	return v.isSet
}

func (v *NullableUsageEE) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsageEE(val *UsageEE) *NullableUsageEE {
	return &NullableUsageEE{value: val, isSet: true}
}

func (v NullableUsageEE) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsageEE) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
