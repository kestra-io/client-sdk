/*
Kestra EE

Testing KVAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package kestra_api_client

import (
	"context"
	openapiclient "github.com/kestra-io/client-sdk/go-sdk"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_kestra_api_client_KVAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test KVAPIService DeleteKeyValue", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var namespace string
		var key string
		var tenant string

		resp, httpRes, err := apiClient.KVAPI.DeleteKeyValue(context.Background(), namespace, key, tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KVAPIService DeleteKeyValues", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var namespace string
		var tenant string

		resp, httpRes, err := apiClient.KVAPI.DeleteKeyValues(context.Background(), namespace, tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KVAPIService GetKeyValue", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var namespace string
		var key string
		var tenant string

		resp, httpRes, err := apiClient.KVAPI.GetKeyValue(context.Background(), namespace, key, tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KVAPIService ListKeys", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var namespace string
		var tenant string

		resp, httpRes, err := apiClient.KVAPI.ListKeys(context.Background(), namespace, tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KVAPIService ListKeysWithInheritence", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var namespace string
		var tenant string

		resp, httpRes, err := apiClient.KVAPI.ListKeysWithInheritence(context.Background(), namespace, tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KVAPIService SetKeyValue", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var namespace string
		var key string
		var tenant string

		httpRes, err := apiClient.KVAPI.SetKeyValue(context.Background(), namespace, key, tenant).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
