/*
Kestra EE

Testing RolesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package kestra_api_client

import (
	"context"
	openapiclient "github.com/kestra-io/client-sdk/go-sdk"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_kestra_api_client_RolesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test RolesAPIService AutocompleteRoles", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tenant string

		resp, httpRes, err := apiClient.RolesAPI.AutocompleteRoles(context.Background(), tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesAPIService CreateRole", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tenant string

		resp, httpRes, err := apiClient.RolesAPI.CreateRole(context.Background(), tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesAPIService DeleteRole", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string
		var tenant string

		httpRes, err := apiClient.RolesAPI.DeleteRole(context.Background(), id, tenant).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesAPIService GetRole", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string
		var tenant string

		resp, httpRes, err := apiClient.RolesAPI.GetRole(context.Background(), id, tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesAPIService ListRolesFromGivenIds", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tenant string

		resp, httpRes, err := apiClient.RolesAPI.ListRolesFromGivenIds(context.Background(), tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesAPIService SearchRoles", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tenant string

		resp, httpRes, err := apiClient.RolesAPI.SearchRoles(context.Background(), tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesAPIService UpdateRole", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string
		var tenant string

		resp, httpRes, err := apiClient.RolesAPI.UpdateRole(context.Background(), id, tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
