/*
Kestra EE

Testing TriggersAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package kestra_api_client

import (
	"context"
	openapiclient "github.com/kestra-io/client-sdk/go-sdk"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_kestra_api_client_TriggersAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test TriggersAPIService DeleteBackfill", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tenant string

		resp, httpRes, err := apiClient.TriggersAPI.DeleteBackfill(context.Background(), tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TriggersAPIService DeleteBackfillByIds", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tenant string

		resp, httpRes, err := apiClient.TriggersAPI.DeleteBackfillByIds(context.Background(), tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TriggersAPIService DeleteBackfillByQuery", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tenant string

		resp, httpRes, err := apiClient.TriggersAPI.DeleteBackfillByQuery(context.Background(), tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TriggersAPIService DisabledTriggersByIds", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tenant string

		resp, httpRes, err := apiClient.TriggersAPI.DisabledTriggersByIds(context.Background(), tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TriggersAPIService DisabledTriggersByQuery", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tenant string

		resp, httpRes, err := apiClient.TriggersAPI.DisabledTriggersByQuery(context.Background(), tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TriggersAPIService PauseBackfill", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tenant string

		resp, httpRes, err := apiClient.TriggersAPI.PauseBackfill(context.Background(), tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TriggersAPIService PauseBackfillByIds", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tenant string

		resp, httpRes, err := apiClient.TriggersAPI.PauseBackfillByIds(context.Background(), tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TriggersAPIService PauseBackfillByQuery", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tenant string

		resp, httpRes, err := apiClient.TriggersAPI.PauseBackfillByQuery(context.Background(), tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TriggersAPIService RestartTrigger", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var namespace string
		var flowId string
		var triggerId string
		var tenant string

		resp, httpRes, err := apiClient.TriggersAPI.RestartTrigger(context.Background(), namespace, flowId, triggerId, tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TriggersAPIService SearchTriggers", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tenant string

		resp, httpRes, err := apiClient.TriggersAPI.SearchTriggers(context.Background(), tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TriggersAPIService SearchTriggersForFlow", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var namespace string
		var flowId string
		var tenant string

		resp, httpRes, err := apiClient.TriggersAPI.SearchTriggersForFlow(context.Background(), namespace, flowId, tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TriggersAPIService UnlockTrigger", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var namespace string
		var flowId string
		var triggerId string
		var tenant string

		resp, httpRes, err := apiClient.TriggersAPI.UnlockTrigger(context.Background(), namespace, flowId, triggerId, tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TriggersAPIService UnlockTriggersByIds", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tenant string

		resp, httpRes, err := apiClient.TriggersAPI.UnlockTriggersByIds(context.Background(), tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TriggersAPIService UnlockTriggersByQuery", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tenant string

		resp, httpRes, err := apiClient.TriggersAPI.UnlockTriggersByQuery(context.Background(), tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TriggersAPIService UnpauseBackfill", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tenant string

		resp, httpRes, err := apiClient.TriggersAPI.UnpauseBackfill(context.Background(), tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TriggersAPIService UnpauseBackfillByIds", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tenant string

		resp, httpRes, err := apiClient.TriggersAPI.UnpauseBackfillByIds(context.Background(), tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TriggersAPIService UnpauseBackfillByQuery", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tenant string

		resp, httpRes, err := apiClient.TriggersAPI.UnpauseBackfillByQuery(context.Background(), tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TriggersAPIService UpdateTrigger", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tenant string

		resp, httpRes, err := apiClient.TriggersAPI.UpdateTrigger(context.Background(), tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
