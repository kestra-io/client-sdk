/*
Kestra EE

Testing NamespacesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package kestra_api_client

import (
	"context"
	openapiclient "github.com/kestra-io/client-sdk/go-sdk"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_kestra_api_client_NamespacesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test NamespacesAPIService AutocompleteNamespaces", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tenant string

		resp, httpRes, err := apiClient.NamespacesAPI.AutocompleteNamespaces(context.Background(), tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NamespacesAPIService CreateNamespace", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tenant string

		resp, httpRes, err := apiClient.NamespacesAPI.CreateNamespace(context.Background(), tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NamespacesAPIService DeleteNamespace", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string
		var tenant string

		httpRes, err := apiClient.NamespacesAPI.DeleteNamespace(context.Background(), id, tenant).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NamespacesAPIService DeleteSecret", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var namespace string
		var key string
		var tenant string

		resp, httpRes, err := apiClient.NamespacesAPI.DeleteSecret(context.Background(), namespace, key, tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NamespacesAPIService GetInheritedSecrets", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var namespace string
		var tenant string

		resp, httpRes, err := apiClient.NamespacesAPI.GetInheritedSecrets(context.Background(), namespace, tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NamespacesAPIService GetNamespace", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string
		var tenant string

		resp, httpRes, err := apiClient.NamespacesAPI.GetNamespace(context.Background(), id, tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NamespacesAPIService InheritedPluginDefaults", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string
		var tenant string

		resp, httpRes, err := apiClient.NamespacesAPI.InheritedPluginDefaults(context.Background(), id, tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NamespacesAPIService InheritedVariables", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string
		var tenant string

		resp, httpRes, err := apiClient.NamespacesAPI.InheritedVariables(context.Background(), id, tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NamespacesAPIService ListNamespaceSecrets", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var namespace string
		var tenant string

		resp, httpRes, err := apiClient.NamespacesAPI.ListNamespaceSecrets(context.Background(), namespace, tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NamespacesAPIService PatchSecret", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var namespace string
		var tenant string
		var key string

		resp, httpRes, err := apiClient.NamespacesAPI.PatchSecret(context.Background(), namespace, tenant, key).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NamespacesAPIService PutSecrets", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var namespace string
		var tenant string

		resp, httpRes, err := apiClient.NamespacesAPI.PutSecrets(context.Background(), namespace, tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NamespacesAPIService SearchNamespaces", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tenant string

		resp, httpRes, err := apiClient.NamespacesAPI.SearchNamespaces(context.Background(), tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NamespacesAPIService UpdateNamespace", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string
		var tenant string

		resp, httpRes, err := apiClient.NamespacesAPI.UpdateNamespace(context.Background(), id, tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
