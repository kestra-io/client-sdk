/*
Kestra EE

Testing FlowsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package kestra_api_client

import (
	"context"
	openapiclient "github.com/kestra-io/client-sdk/go-sdk"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_kestra_api_client_FlowsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test FlowsAPIService BulkImportApps", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tenant string

		resp, httpRes, err := apiClient.FlowsAPI.BulkImportApps(context.Background(), tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowsAPIService BulkUpdateFlows", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tenant string

		resp, httpRes, err := apiClient.FlowsAPI.BulkUpdateFlows(context.Background(), tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowsAPIService CreateFlow", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tenant string

		resp, httpRes, err := apiClient.FlowsAPI.CreateFlow(context.Background(), tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowsAPIService DeleteFlow", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var namespace string
		var id string
		var tenant string

		httpRes, err := apiClient.FlowsAPI.DeleteFlow(context.Background(), namespace, id, tenant).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowsAPIService DeleteFlowsByIds", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tenant string

		resp, httpRes, err := apiClient.FlowsAPI.DeleteFlowsByIds(context.Background(), tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowsAPIService DeleteFlowsByQuery", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tenant string

		resp, httpRes, err := apiClient.FlowsAPI.DeleteFlowsByQuery(context.Background(), tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowsAPIService DisableFlowsByIds", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tenant string

		resp, httpRes, err := apiClient.FlowsAPI.DisableFlowsByIds(context.Background(), tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowsAPIService DisableFlowsByQuery", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tenant string

		resp, httpRes, err := apiClient.FlowsAPI.DisableFlowsByQuery(context.Background(), tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowsAPIService EnableFlowsByIds", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tenant string

		resp, httpRes, err := apiClient.FlowsAPI.EnableFlowsByIds(context.Background(), tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowsAPIService EnableFlowsByQuery", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tenant string

		resp, httpRes, err := apiClient.FlowsAPI.EnableFlowsByQuery(context.Background(), tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowsAPIService ExportFlowsByIds", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tenant string

		resp, httpRes, err := apiClient.FlowsAPI.ExportFlowsByIds(context.Background(), tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowsAPIService ExportFlowsByQuery", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tenant string

		resp, httpRes, err := apiClient.FlowsAPI.ExportFlowsByQuery(context.Background(), tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowsAPIService GenerateFlowGraph", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var namespace string
		var id string
		var tenant string

		resp, httpRes, err := apiClient.FlowsAPI.GenerateFlowGraph(context.Background(), namespace, id, tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowsAPIService GenerateFlowGraphFromSource", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tenant string

		resp, httpRes, err := apiClient.FlowsAPI.GenerateFlowGraphFromSource(context.Background(), tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowsAPIService GetFlow", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var namespace string
		var id string
		var tenant string

		resp, httpRes, err := apiClient.FlowsAPI.GetFlow(context.Background(), namespace, id, tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowsAPIService GetFlowDependencies", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var namespace string
		var id string
		var tenant string

		resp, httpRes, err := apiClient.FlowsAPI.GetFlowDependencies(context.Background(), namespace, id, tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowsAPIService GetFlowDependenciesFromNamespace", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var namespace string
		var tenant string

		resp, httpRes, err := apiClient.FlowsAPI.GetFlowDependenciesFromNamespace(context.Background(), namespace, tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowsAPIService GetTaskFromFlow", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var namespace string
		var id string
		var taskId string
		var tenant string

		resp, httpRes, err := apiClient.FlowsAPI.GetTaskFromFlow(context.Background(), namespace, id, taskId, tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowsAPIService ImportFlows", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tenant string

		resp, httpRes, err := apiClient.FlowsAPI.ImportFlows(context.Background(), tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowsAPIService ListDistinctNamespaces", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tenant string

		resp, httpRes, err := apiClient.FlowsAPI.ListDistinctNamespaces(context.Background(), tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowsAPIService ListFlowRevisions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var namespace string
		var id string
		var tenant string

		resp, httpRes, err := apiClient.FlowsAPI.ListFlowRevisions(context.Background(), namespace, id, tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowsAPIService ListFlowsByNamespace", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var namespace string
		var tenant string

		resp, httpRes, err := apiClient.FlowsAPI.ListFlowsByNamespace(context.Background(), namespace, tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowsAPIService SearchFlows", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tenant string

		resp, httpRes, err := apiClient.FlowsAPI.SearchFlows(context.Background(), tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowsAPIService SearchFlowsBySourceCode", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tenant string

		resp, httpRes, err := apiClient.FlowsAPI.SearchFlowsBySourceCode(context.Background(), tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowsAPIService UpdateFlow", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string
		var namespace string
		var tenant string

		resp, httpRes, err := apiClient.FlowsAPI.UpdateFlow(context.Background(), id, namespace, tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowsAPIService UpdateFlowsInNamespaceFromJson", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var namespace string
		var tenant string

		resp, httpRes, err := apiClient.FlowsAPI.UpdateFlowsInNamespaceFromJson(context.Background(), namespace, tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowsAPIService UpdateTask", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var namespace string
		var id string
		var taskId string
		var tenant string

		resp, httpRes, err := apiClient.FlowsAPI.UpdateTask(context.Background(), namespace, id, taskId, tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowsAPIService ValidateFlows", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tenant string

		resp, httpRes, err := apiClient.FlowsAPI.ValidateFlows(context.Background(), tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowsAPIService ValidateTask", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tenant string

		resp, httpRes, err := apiClient.FlowsAPI.ValidateTask(context.Background(), tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowsAPIService ValidateTrigger", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tenant string

		resp, httpRes, err := apiClient.FlowsAPI.ValidateTrigger(context.Background(), tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
