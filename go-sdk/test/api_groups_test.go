/*
Kestra EE

Testing GroupsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package kestra_api_client

import (
	"context"
	openapiclient "github.com/kestra-io/client-sdk/go-sdk"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_kestra_api_client_GroupsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test GroupsAPIService AddUserToGroup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string
		var userId string
		var tenant string

		resp, httpRes, err := apiClient.GroupsAPI.AddUserToGroup(context.Background(), id, userId, tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupsAPIService AutocompleteGroups", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tenant string

		resp, httpRes, err := apiClient.GroupsAPI.AutocompleteGroups(context.Background(), tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupsAPIService CreateGroup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tenant string

		resp, httpRes, err := apiClient.GroupsAPI.CreateGroup(context.Background(), tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupsAPIService DeleteGroup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string
		var tenant string

		httpRes, err := apiClient.GroupsAPI.DeleteGroup(context.Background(), id, tenant).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupsAPIService DeleteUserFromGroup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string
		var userId string
		var tenant string

		resp, httpRes, err := apiClient.GroupsAPI.DeleteUserFromGroup(context.Background(), id, userId, tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupsAPIService GetGroup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string
		var tenant string

		resp, httpRes, err := apiClient.GroupsAPI.GetGroup(context.Background(), id, tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupsAPIService ListGroupIds", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tenant string

		resp, httpRes, err := apiClient.GroupsAPI.ListGroupIds(context.Background(), tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupsAPIService SearchGroupMembers", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string
		var tenant string

		resp, httpRes, err := apiClient.GroupsAPI.SearchGroupMembers(context.Background(), id, tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupsAPIService SearchGroups", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tenant string

		resp, httpRes, err := apiClient.GroupsAPI.SearchGroups(context.Background(), tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupsAPIService SetUserMembershipForGroup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string
		var userId string
		var tenant string

		resp, httpRes, err := apiClient.GroupsAPI.SetUserMembershipForGroup(context.Background(), id, userId, tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupsAPIService UpdateGroup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string
		var tenant string

		resp, httpRes, err := apiClient.GroupsAPI.UpdateGroup(context.Background(), id, tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
