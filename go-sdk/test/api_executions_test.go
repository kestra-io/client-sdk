/*
Kestra EE

Testing ExecutionsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package kestra_api_client

import (
	"context"
	openapiclient "github.com/kestra-io/client-sdk/go-sdk"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_kestra_api_client_ExecutionsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ExecutionsAPIService CreateExecution", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var namespace string
		var id string
		var tenant string

		resp, httpRes, err := apiClient.ExecutionsAPI.CreateExecution(context.Background(), namespace, id, tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExecutionsAPIService DeleteExecution", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var executionId string
		var tenant string

		httpRes, err := apiClient.ExecutionsAPI.DeleteExecution(context.Background(), executionId, tenant).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExecutionsAPIService DeleteExecutionsByIds", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tenant string

		resp, httpRes, err := apiClient.ExecutionsAPI.DeleteExecutionsByIds(context.Background(), tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExecutionsAPIService DeleteExecutionsByQuery", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tenant string

		resp, httpRes, err := apiClient.ExecutionsAPI.DeleteExecutionsByQuery(context.Background(), tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExecutionsAPIService DownloadFileFromExecution", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var executionId string
		var tenant string

		resp, httpRes, err := apiClient.ExecutionsAPI.DownloadFileFromExecution(context.Background(), executionId, tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExecutionsAPIService EvalTaskRunExpression", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var executionId string
		var taskRunId string
		var tenant string

		resp, httpRes, err := apiClient.ExecutionsAPI.EvalTaskRunExpression(context.Background(), executionId, taskRunId, tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExecutionsAPIService FollowDependenciesExecutions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var executionId string
		var tenant string

		resp, httpRes, err := apiClient.ExecutionsAPI.FollowDependenciesExecutions(context.Background(), executionId, tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExecutionsAPIService FollowExecution", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var executionId string
		var tenant string

		resp, httpRes, err := apiClient.ExecutionsAPI.FollowExecution(context.Background(), executionId, tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExecutionsAPIService ForceRunByIds", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tenant string

		resp, httpRes, err := apiClient.ExecutionsAPI.ForceRunByIds(context.Background(), tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExecutionsAPIService ForceRunExecution", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var executionId string
		var tenant string

		resp, httpRes, err := apiClient.ExecutionsAPI.ForceRunExecution(context.Background(), executionId, tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExecutionsAPIService ForceRunExecutionsByQuery", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tenant string

		resp, httpRes, err := apiClient.ExecutionsAPI.ForceRunExecutionsByQuery(context.Background(), tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExecutionsAPIService GetExecution", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var executionId string
		var tenant string

		resp, httpRes, err := apiClient.ExecutionsAPI.GetExecution(context.Background(), executionId, tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExecutionsAPIService GetExecutionFlowGraph", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var executionId string
		var tenant string

		resp, httpRes, err := apiClient.ExecutionsAPI.GetExecutionFlowGraph(context.Background(), executionId, tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExecutionsAPIService GetFileMetadatasFromExecution", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var executionId string
		var tenant string

		resp, httpRes, err := apiClient.ExecutionsAPI.GetFileMetadatasFromExecution(context.Background(), executionId, tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExecutionsAPIService GetFlowFromExecution", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var namespace string
		var flowId string
		var tenant string

		resp, httpRes, err := apiClient.ExecutionsAPI.GetFlowFromExecution(context.Background(), namespace, flowId, tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExecutionsAPIService GetFlowFromExecutionById", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var executionId string
		var tenant string

		resp, httpRes, err := apiClient.ExecutionsAPI.GetFlowFromExecutionById(context.Background(), executionId, tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExecutionsAPIService GetLatestExecutions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tenant string

		resp, httpRes, err := apiClient.ExecutionsAPI.GetLatestExecutions(context.Background(), tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExecutionsAPIService KillExecution", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var executionId string
		var tenant string

		resp, httpRes, err := apiClient.ExecutionsAPI.KillExecution(context.Background(), executionId, tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExecutionsAPIService KillExecutionsByIds", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tenant string

		resp, httpRes, err := apiClient.ExecutionsAPI.KillExecutionsByIds(context.Background(), tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExecutionsAPIService KillExecutionsByQuery", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tenant string

		resp, httpRes, err := apiClient.ExecutionsAPI.KillExecutionsByQuery(context.Background(), tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExecutionsAPIService ListExecutableDistinctNamespaces", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tenant string

		resp, httpRes, err := apiClient.ExecutionsAPI.ListExecutableDistinctNamespaces(context.Background(), tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExecutionsAPIService ListFlowExecutionsByNamespace", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var namespace string
		var tenant string

		resp, httpRes, err := apiClient.ExecutionsAPI.ListFlowExecutionsByNamespace(context.Background(), namespace, tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExecutionsAPIService PauseExecution", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var executionId string
		var tenant string

		httpRes, err := apiClient.ExecutionsAPI.PauseExecution(context.Background(), executionId, tenant).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExecutionsAPIService PauseExecutionsByIds", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tenant string

		resp, httpRes, err := apiClient.ExecutionsAPI.PauseExecutionsByIds(context.Background(), tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExecutionsAPIService PauseExecutionsByQuery", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tenant string

		resp, httpRes, err := apiClient.ExecutionsAPI.PauseExecutionsByQuery(context.Background(), tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExecutionsAPIService PreviewFileFromExecution", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var executionId string
		var tenant string

		resp, httpRes, err := apiClient.ExecutionsAPI.PreviewFileFromExecution(context.Background(), executionId, tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExecutionsAPIService ReplayExecution", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var executionId string
		var tenant string

		resp, httpRes, err := apiClient.ExecutionsAPI.ReplayExecution(context.Background(), executionId, tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExecutionsAPIService ReplayExecutionWithinputs", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var executionId string
		var tenant string

		resp, httpRes, err := apiClient.ExecutionsAPI.ReplayExecutionWithinputs(context.Background(), executionId, tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExecutionsAPIService ReplayExecutionsByIds", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tenant string

		resp, httpRes, err := apiClient.ExecutionsAPI.ReplayExecutionsByIds(context.Background(), tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExecutionsAPIService ReplayExecutionsByQuery", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tenant string

		resp, httpRes, err := apiClient.ExecutionsAPI.ReplayExecutionsByQuery(context.Background(), tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExecutionsAPIService RestartExecution", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var executionId string
		var tenant string

		resp, httpRes, err := apiClient.ExecutionsAPI.RestartExecution(context.Background(), executionId, tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExecutionsAPIService RestartExecutionsByIds", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tenant string

		resp, httpRes, err := apiClient.ExecutionsAPI.RestartExecutionsByIds(context.Background(), tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExecutionsAPIService RestartExecutionsByQuery", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tenant string

		resp, httpRes, err := apiClient.ExecutionsAPI.RestartExecutionsByQuery(context.Background(), tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExecutionsAPIService ResumeExecution", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var executionId string
		var tenant string

		resp, httpRes, err := apiClient.ExecutionsAPI.ResumeExecution(context.Background(), executionId, tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExecutionsAPIService ResumeExecutionFromBreakpoint", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var executionId string
		var tenant string

		httpRes, err := apiClient.ExecutionsAPI.ResumeExecutionFromBreakpoint(context.Background(), executionId, tenant).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExecutionsAPIService ResumeExecutionsByIds", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tenant string

		resp, httpRes, err := apiClient.ExecutionsAPI.ResumeExecutionsByIds(context.Background(), tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExecutionsAPIService ResumeExecutionsByQuery", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tenant string

		resp, httpRes, err := apiClient.ExecutionsAPI.ResumeExecutionsByQuery(context.Background(), tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExecutionsAPIService SearchExecutions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tenant string

		resp, httpRes, err := apiClient.ExecutionsAPI.SearchExecutions(context.Background(), tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExecutionsAPIService SearchExecutionsByFlowId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tenant string

		resp, httpRes, err := apiClient.ExecutionsAPI.SearchExecutionsByFlowId(context.Background(), tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExecutionsAPIService SearchTaskRun", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tenant string

		resp, httpRes, err := apiClient.ExecutionsAPI.SearchTaskRun(context.Background(), tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExecutionsAPIService SetLabelsOnTerminatedExecution", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var executionId string
		var tenant string

		resp, httpRes, err := apiClient.ExecutionsAPI.SetLabelsOnTerminatedExecution(context.Background(), executionId, tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExecutionsAPIService SetLabelsOnTerminatedExecutionsByIds", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tenant string

		resp, httpRes, err := apiClient.ExecutionsAPI.SetLabelsOnTerminatedExecutionsByIds(context.Background(), tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExecutionsAPIService SetLabelsOnTerminatedExecutionsByQuery", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tenant string

		resp, httpRes, err := apiClient.ExecutionsAPI.SetLabelsOnTerminatedExecutionsByQuery(context.Background(), tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExecutionsAPIService TriggerExecution", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var namespace string
		var id string
		var tenant string

		resp, httpRes, err := apiClient.ExecutionsAPI.TriggerExecution(context.Background(), namespace, id, tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExecutionsAPIService TriggerExecutionByGetWebhook", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var namespace string
		var id string
		var key string
		var tenant string

		resp, httpRes, err := apiClient.ExecutionsAPI.TriggerExecutionByGetWebhook(context.Background(), namespace, id, key, tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExecutionsAPIService TriggerExecutionByPostWebhook", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var namespace string
		var id string
		var key string
		var tenant string

		resp, httpRes, err := apiClient.ExecutionsAPI.TriggerExecutionByPostWebhook(context.Background(), namespace, id, key, tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExecutionsAPIService TriggerExecutionByPutWebhook", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var namespace string
		var id string
		var key string
		var tenant string

		resp, httpRes, err := apiClient.ExecutionsAPI.TriggerExecutionByPutWebhook(context.Background(), namespace, id, key, tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExecutionsAPIService UnqueueExecution", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var executionId string
		var tenant string

		resp, httpRes, err := apiClient.ExecutionsAPI.UnqueueExecution(context.Background(), executionId, tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExecutionsAPIService UnqueueExecutionsByIds", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tenant string

		resp, httpRes, err := apiClient.ExecutionsAPI.UnqueueExecutionsByIds(context.Background(), tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExecutionsAPIService UnqueueExecutionsByQuery", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tenant string

		resp, httpRes, err := apiClient.ExecutionsAPI.UnqueueExecutionsByQuery(context.Background(), tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExecutionsAPIService UpdateExecutionStatus", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var executionId string
		var tenant string

		resp, httpRes, err := apiClient.ExecutionsAPI.UpdateExecutionStatus(context.Background(), executionId, tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExecutionsAPIService UpdateExecutionsStatusByIds", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tenant string

		resp, httpRes, err := apiClient.ExecutionsAPI.UpdateExecutionsStatusByIds(context.Background(), tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExecutionsAPIService UpdateExecutionsStatusByQuery", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tenant string

		resp, httpRes, err := apiClient.ExecutionsAPI.UpdateExecutionsStatusByQuery(context.Background(), tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExecutionsAPIService UpdateTaskRunState", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var executionId string
		var tenant string

		resp, httpRes, err := apiClient.ExecutionsAPI.UpdateTaskRunState(context.Background(), executionId, tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExecutionsAPIService ValidateNewExecutionInputs", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var namespace string
		var id string
		var tenant string

		resp, httpRes, err := apiClient.ExecutionsAPI.ValidateNewExecutionInputs(context.Background(), namespace, id, tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExecutionsAPIService ValidateResumeExecutionInputs", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var executionId string
		var tenant string

		resp, httpRes, err := apiClient.ExecutionsAPI.ValidateResumeExecutionInputs(context.Background(), executionId, tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
