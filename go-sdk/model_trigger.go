/*
Kestra EE

All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the Trigger type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Trigger{}

// Trigger struct for Trigger
type Trigger struct {
	Disabled            *bool            `json:"disabled,omitempty"`
	TenantId            *string          `json:"tenantId,omitempty" validate:"regexp=^[a-z0-9][a-z0-9_-]"`
	Namespace           string           `json:"namespace"`
	FlowId              string           `json:"flowId"`
	TriggerId           string           `json:"triggerId"`
	Date                time.Time        `json:"date"`
	NextExecutionDate   NullableTime     `json:"nextExecutionDate,omitempty"`
	Backfill            NullableBackfill `json:"backfill,omitempty"`
	StopAfter           []StateType      `json:"stopAfter,omitempty"`
	ExecutionId         NullableString   `json:"executionId,omitempty"`
	UpdatedDate         NullableTime     `json:"updatedDate,omitempty"`
	EvaluateRunningDate NullableTime     `json:"evaluateRunningDate,omitempty"`
	WorkerId            NullableString   `json:"workerId,omitempty"`
}

type _Trigger Trigger

// NewTrigger instantiates a new Trigger object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrigger(namespace string, flowId string, triggerId string, date time.Time) *Trigger {
	this := Trigger{}
	this.Namespace = namespace
	this.FlowId = flowId
	this.TriggerId = triggerId
	this.Date = date
	return &this
}

// NewTriggerWithDefaults instantiates a new Trigger object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTriggerWithDefaults() *Trigger {
	this := Trigger{}
	return &this
}

// GetDisabled returns the Disabled field value if set, zero value otherwise.
func (o *Trigger) GetDisabled() bool {
	if o == nil || IsNil(o.Disabled) {
		var ret bool
		return ret
	}
	return *o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Trigger) GetDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Disabled) {
		return nil, false
	}
	return o.Disabled, true
}

// HasDisabled returns a boolean if a field has been set.
func (o *Trigger) HasDisabled() bool {
	if o != nil && !IsNil(o.Disabled) {
		return true
	}

	return false
}

// SetDisabled gets a reference to the given bool and assigns it to the Disabled field.
func (o *Trigger) SetDisabled(v bool) {
	o.Disabled = &v
}

// GetTenantId returns the TenantId field value if set, zero value otherwise.
func (o *Trigger) GetTenantId() string {
	if o == nil || IsNil(o.TenantId) {
		var ret string
		return ret
	}
	return *o.TenantId
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Trigger) GetTenantIdOk() (*string, bool) {
	if o == nil || IsNil(o.TenantId) {
		return nil, false
	}
	return o.TenantId, true
}

// HasTenantId returns a boolean if a field has been set.
func (o *Trigger) HasTenantId() bool {
	if o != nil && !IsNil(o.TenantId) {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given string and assigns it to the TenantId field.
func (o *Trigger) SetTenantId(v string) {
	o.TenantId = &v
}

// GetNamespace returns the Namespace field value
func (o *Trigger) GetNamespace() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value
// and a boolean to check if the value has been set.
func (o *Trigger) GetNamespaceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Namespace, true
}

// SetNamespace sets field value
func (o *Trigger) SetNamespace(v string) {
	o.Namespace = v
}

// GetFlowId returns the FlowId field value
func (o *Trigger) GetFlowId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FlowId
}

// GetFlowIdOk returns a tuple with the FlowId field value
// and a boolean to check if the value has been set.
func (o *Trigger) GetFlowIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FlowId, true
}

// SetFlowId sets field value
func (o *Trigger) SetFlowId(v string) {
	o.FlowId = v
}

// GetTriggerId returns the TriggerId field value
func (o *Trigger) GetTriggerId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TriggerId
}

// GetTriggerIdOk returns a tuple with the TriggerId field value
// and a boolean to check if the value has been set.
func (o *Trigger) GetTriggerIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TriggerId, true
}

// SetTriggerId sets field value
func (o *Trigger) SetTriggerId(v string) {
	o.TriggerId = v
}

// GetDate returns the Date field value
func (o *Trigger) GetDate() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Date
}

// GetDateOk returns a tuple with the Date field value
// and a boolean to check if the value has been set.
func (o *Trigger) GetDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Date, true
}

// SetDate sets field value
func (o *Trigger) SetDate(v time.Time) {
	o.Date = v
}

// GetNextExecutionDate returns the NextExecutionDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Trigger) GetNextExecutionDate() time.Time {
	if o == nil || IsNil(o.NextExecutionDate.Get()) {
		var ret time.Time
		return ret
	}
	return *o.NextExecutionDate.Get()
}

// GetNextExecutionDateOk returns a tuple with the NextExecutionDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Trigger) GetNextExecutionDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.NextExecutionDate.Get(), o.NextExecutionDate.IsSet()
}

// HasNextExecutionDate returns a boolean if a field has been set.
func (o *Trigger) HasNextExecutionDate() bool {
	if o != nil && o.NextExecutionDate.IsSet() {
		return true
	}

	return false
}

// SetNextExecutionDate gets a reference to the given NullableTime and assigns it to the NextExecutionDate field.
func (o *Trigger) SetNextExecutionDate(v time.Time) {
	o.NextExecutionDate.Set(&v)
}

// SetNextExecutionDateNil sets the value for NextExecutionDate to be an explicit nil
func (o *Trigger) SetNextExecutionDateNil() {
	o.NextExecutionDate.Set(nil)
}

// UnsetNextExecutionDate ensures that no value is present for NextExecutionDate, not even an explicit nil
func (o *Trigger) UnsetNextExecutionDate() {
	o.NextExecutionDate.Unset()
}

// GetBackfill returns the Backfill field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Trigger) GetBackfill() Backfill {
	if o == nil || IsNil(o.Backfill.Get()) {
		var ret Backfill
		return ret
	}
	return *o.Backfill.Get()
}

// GetBackfillOk returns a tuple with the Backfill field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Trigger) GetBackfillOk() (*Backfill, bool) {
	if o == nil {
		return nil, false
	}
	return o.Backfill.Get(), o.Backfill.IsSet()
}

// HasBackfill returns a boolean if a field has been set.
func (o *Trigger) HasBackfill() bool {
	if o != nil && o.Backfill.IsSet() {
		return true
	}

	return false
}

// SetBackfill gets a reference to the given NullableBackfill and assigns it to the Backfill field.
func (o *Trigger) SetBackfill(v Backfill) {
	o.Backfill.Set(&v)
}

// SetBackfillNil sets the value for Backfill to be an explicit nil
func (o *Trigger) SetBackfillNil() {
	o.Backfill.Set(nil)
}

// UnsetBackfill ensures that no value is present for Backfill, not even an explicit nil
func (o *Trigger) UnsetBackfill() {
	o.Backfill.Unset()
}

// GetStopAfter returns the StopAfter field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Trigger) GetStopAfter() []StateType {
	if o == nil {
		var ret []StateType
		return ret
	}
	return o.StopAfter
}

// GetStopAfterOk returns a tuple with the StopAfter field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Trigger) GetStopAfterOk() ([]StateType, bool) {
	if o == nil || IsNil(o.StopAfter) {
		return nil, false
	}
	return o.StopAfter, true
}

// HasStopAfter returns a boolean if a field has been set.
func (o *Trigger) HasStopAfter() bool {
	if o != nil && !IsNil(o.StopAfter) {
		return true
	}

	return false
}

// SetStopAfter gets a reference to the given []StateType and assigns it to the StopAfter field.
func (o *Trigger) SetStopAfter(v []StateType) {
	o.StopAfter = v
}

// GetExecutionId returns the ExecutionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Trigger) GetExecutionId() string {
	if o == nil || IsNil(o.ExecutionId.Get()) {
		var ret string
		return ret
	}
	return *o.ExecutionId.Get()
}

// GetExecutionIdOk returns a tuple with the ExecutionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Trigger) GetExecutionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExecutionId.Get(), o.ExecutionId.IsSet()
}

// HasExecutionId returns a boolean if a field has been set.
func (o *Trigger) HasExecutionId() bool {
	if o != nil && o.ExecutionId.IsSet() {
		return true
	}

	return false
}

// SetExecutionId gets a reference to the given NullableString and assigns it to the ExecutionId field.
func (o *Trigger) SetExecutionId(v string) {
	o.ExecutionId.Set(&v)
}

// SetExecutionIdNil sets the value for ExecutionId to be an explicit nil
func (o *Trigger) SetExecutionIdNil() {
	o.ExecutionId.Set(nil)
}

// UnsetExecutionId ensures that no value is present for ExecutionId, not even an explicit nil
func (o *Trigger) UnsetExecutionId() {
	o.ExecutionId.Unset()
}

// GetUpdatedDate returns the UpdatedDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Trigger) GetUpdatedDate() time.Time {
	if o == nil || IsNil(o.UpdatedDate.Get()) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedDate.Get()
}

// GetUpdatedDateOk returns a tuple with the UpdatedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Trigger) GetUpdatedDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.UpdatedDate.Get(), o.UpdatedDate.IsSet()
}

// HasUpdatedDate returns a boolean if a field has been set.
func (o *Trigger) HasUpdatedDate() bool {
	if o != nil && o.UpdatedDate.IsSet() {
		return true
	}

	return false
}

// SetUpdatedDate gets a reference to the given NullableTime and assigns it to the UpdatedDate field.
func (o *Trigger) SetUpdatedDate(v time.Time) {
	o.UpdatedDate.Set(&v)
}

// SetUpdatedDateNil sets the value for UpdatedDate to be an explicit nil
func (o *Trigger) SetUpdatedDateNil() {
	o.UpdatedDate.Set(nil)
}

// UnsetUpdatedDate ensures that no value is present for UpdatedDate, not even an explicit nil
func (o *Trigger) UnsetUpdatedDate() {
	o.UpdatedDate.Unset()
}

// GetEvaluateRunningDate returns the EvaluateRunningDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Trigger) GetEvaluateRunningDate() time.Time {
	if o == nil || IsNil(o.EvaluateRunningDate.Get()) {
		var ret time.Time
		return ret
	}
	return *o.EvaluateRunningDate.Get()
}

// GetEvaluateRunningDateOk returns a tuple with the EvaluateRunningDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Trigger) GetEvaluateRunningDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.EvaluateRunningDate.Get(), o.EvaluateRunningDate.IsSet()
}

// HasEvaluateRunningDate returns a boolean if a field has been set.
func (o *Trigger) HasEvaluateRunningDate() bool {
	if o != nil && o.EvaluateRunningDate.IsSet() {
		return true
	}

	return false
}

// SetEvaluateRunningDate gets a reference to the given NullableTime and assigns it to the EvaluateRunningDate field.
func (o *Trigger) SetEvaluateRunningDate(v time.Time) {
	o.EvaluateRunningDate.Set(&v)
}

// SetEvaluateRunningDateNil sets the value for EvaluateRunningDate to be an explicit nil
func (o *Trigger) SetEvaluateRunningDateNil() {
	o.EvaluateRunningDate.Set(nil)
}

// UnsetEvaluateRunningDate ensures that no value is present for EvaluateRunningDate, not even an explicit nil
func (o *Trigger) UnsetEvaluateRunningDate() {
	o.EvaluateRunningDate.Unset()
}

// GetWorkerId returns the WorkerId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Trigger) GetWorkerId() string {
	if o == nil || IsNil(o.WorkerId.Get()) {
		var ret string
		return ret
	}
	return *o.WorkerId.Get()
}

// GetWorkerIdOk returns a tuple with the WorkerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Trigger) GetWorkerIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.WorkerId.Get(), o.WorkerId.IsSet()
}

// HasWorkerId returns a boolean if a field has been set.
func (o *Trigger) HasWorkerId() bool {
	if o != nil && o.WorkerId.IsSet() {
		return true
	}

	return false
}

// SetWorkerId gets a reference to the given NullableString and assigns it to the WorkerId field.
func (o *Trigger) SetWorkerId(v string) {
	o.WorkerId.Set(&v)
}

// SetWorkerIdNil sets the value for WorkerId to be an explicit nil
func (o *Trigger) SetWorkerIdNil() {
	o.WorkerId.Set(nil)
}

// UnsetWorkerId ensures that no value is present for WorkerId, not even an explicit nil
func (o *Trigger) UnsetWorkerId() {
	o.WorkerId.Unset()
}

func (o Trigger) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Trigger) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Disabled) {
		toSerialize["disabled"] = o.Disabled
	}
	if !IsNil(o.TenantId) {
		toSerialize["tenantId"] = o.TenantId
	}
	toSerialize["namespace"] = o.Namespace
	toSerialize["flowId"] = o.FlowId
	toSerialize["triggerId"] = o.TriggerId
	toSerialize["date"] = o.Date
	if o.NextExecutionDate.IsSet() {
		toSerialize["nextExecutionDate"] = o.NextExecutionDate.Get()
	}
	if o.Backfill.IsSet() {
		toSerialize["backfill"] = o.Backfill.Get()
	}
	if o.StopAfter != nil {
		toSerialize["stopAfter"] = o.StopAfter
	}
	if o.ExecutionId.IsSet() {
		toSerialize["executionId"] = o.ExecutionId.Get()
	}
	if o.UpdatedDate.IsSet() {
		toSerialize["updatedDate"] = o.UpdatedDate.Get()
	}
	if o.EvaluateRunningDate.IsSet() {
		toSerialize["evaluateRunningDate"] = o.EvaluateRunningDate.Get()
	}
	if o.WorkerId.IsSet() {
		toSerialize["workerId"] = o.WorkerId.Get()
	}
	return toSerialize, nil
}

func (o *Trigger) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"namespace",
		"flowId",
		"triggerId",
		"date",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTrigger := _Trigger{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTrigger)

	if err != nil {
		return err
	}

	*o = Trigger(varTrigger)

	return err
}

type NullableTrigger struct {
	value *Trigger
	isSet bool
}

func (v NullableTrigger) Get() *Trigger {
	return v.value
}

func (v *NullableTrigger) Set(val *Trigger) {
	v.value = val
	v.isSet = true
}

func (v NullableTrigger) IsSet() bool {
	return v.isSet
}

func (v *NullableTrigger) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrigger(val *Trigger) *NullableTrigger {
	return &NullableTrigger{value: val, isSet: true}
}

func (v NullableTrigger) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrigger) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
