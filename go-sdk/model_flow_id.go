/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
)

// checks if the FlowId type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FlowId{}

// FlowId struct for FlowId
type FlowId struct {
	Id                   *string `json:"id,omitempty"`
	Namespace            *string `json:"namespace,omitempty"`
	Revision             *int32  `json:"revision,omitempty"`
	TenantId             *string `json:"tenantId,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _FlowId FlowId

// NewFlowId instantiates a new FlowId object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFlowId() *FlowId {
	this := FlowId{}
	return &this
}

// NewFlowIdWithDefaults instantiates a new FlowId object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFlowIdWithDefaults() *FlowId {
	this := FlowId{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *FlowId) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowId) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *FlowId) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *FlowId) SetId(v string) {
	o.Id = &v
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *FlowId) GetNamespace() string {
	if o == nil || IsNil(o.Namespace) {
		var ret string
		return ret
	}
	return *o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowId) GetNamespaceOk() (*string, bool) {
	if o == nil || IsNil(o.Namespace) {
		return nil, false
	}
	return o.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *FlowId) HasNamespace() bool {
	if o != nil && !IsNil(o.Namespace) {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the Namespace field.
func (o *FlowId) SetNamespace(v string) {
	o.Namespace = &v
}

// GetRevision returns the Revision field value if set, zero value otherwise.
func (o *FlowId) GetRevision() int32 {
	if o == nil || IsNil(o.Revision) {
		var ret int32
		return ret
	}
	return *o.Revision
}

// GetRevisionOk returns a tuple with the Revision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowId) GetRevisionOk() (*int32, bool) {
	if o == nil || IsNil(o.Revision) {
		return nil, false
	}
	return o.Revision, true
}

// HasRevision returns a boolean if a field has been set.
func (o *FlowId) HasRevision() bool {
	if o != nil && !IsNil(o.Revision) {
		return true
	}

	return false
}

// SetRevision gets a reference to the given int32 and assigns it to the Revision field.
func (o *FlowId) SetRevision(v int32) {
	o.Revision = &v
}

// GetTenantId returns the TenantId field value if set, zero value otherwise.
func (o *FlowId) GetTenantId() string {
	if o == nil || IsNil(o.TenantId) {
		var ret string
		return ret
	}
	return *o.TenantId
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowId) GetTenantIdOk() (*string, bool) {
	if o == nil || IsNil(o.TenantId) {
		return nil, false
	}
	return o.TenantId, true
}

// HasTenantId returns a boolean if a field has been set.
func (o *FlowId) HasTenantId() bool {
	if o != nil && !IsNil(o.TenantId) {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given string and assigns it to the TenantId field.
func (o *FlowId) SetTenantId(v string) {
	o.TenantId = &v
}

func (o FlowId) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FlowId) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Namespace) {
		toSerialize["namespace"] = o.Namespace
	}
	if !IsNil(o.Revision) {
		toSerialize["revision"] = o.Revision
	}
	if !IsNil(o.TenantId) {
		toSerialize["tenantId"] = o.TenantId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FlowId) UnmarshalJSON(data []byte) (err error) {
	varFlowId := _FlowId{}

	err = json.Unmarshal(data, &varFlowId)

	if err != nil {
		return err
	}

	*o = FlowId(varFlowId)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "namespace")
		delete(additionalProperties, "revision")
		delete(additionalProperties, "tenantId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFlowId struct {
	value *FlowId
	isSet bool
}

func (v NullableFlowId) Get() *FlowId {
	return v.value
}

func (v *NullableFlowId) Set(val *FlowId) {
	v.value = val
	v.isSet = true
}

func (v NullableFlowId) IsSet() bool {
	return v.isSet
}

func (v *NullableFlowId) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFlowId(val *FlowId) *NullableFlowId {
	return &NullableFlowId{value: val, isSet: true}
}

func (v NullableFlowId) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFlowId) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
