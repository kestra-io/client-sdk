/*
Kestra EE

All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ApiSecretListResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiSecretListResponse{}

// ApiSecretListResponse struct for ApiSecretListResponse
type ApiSecretListResponse struct {
	ReadOnly bool            `json:"readOnly"`
	Results  []ApiSecretMeta `json:"results"`
	Total    *int64          `json:"total,omitempty"`
}

type _ApiSecretListResponse ApiSecretListResponse

// NewApiSecretListResponse instantiates a new ApiSecretListResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiSecretListResponse(readOnly bool, results []ApiSecretMeta) *ApiSecretListResponse {
	this := ApiSecretListResponse{}
	this.ReadOnly = readOnly
	this.Results = results
	return &this
}

// NewApiSecretListResponseWithDefaults instantiates a new ApiSecretListResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiSecretListResponseWithDefaults() *ApiSecretListResponse {
	this := ApiSecretListResponse{}
	return &this
}

// GetReadOnly returns the ReadOnly field value
func (o *ApiSecretListResponse) GetReadOnly() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ReadOnly
}

// GetReadOnlyOk returns a tuple with the ReadOnly field value
// and a boolean to check if the value has been set.
func (o *ApiSecretListResponse) GetReadOnlyOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReadOnly, true
}

// SetReadOnly sets field value
func (o *ApiSecretListResponse) SetReadOnly(v bool) {
	o.ReadOnly = v
}

// GetResults returns the Results field value
func (o *ApiSecretListResponse) GetResults() []ApiSecretMeta {
	if o == nil {
		var ret []ApiSecretMeta
		return ret
	}

	return o.Results
}

// GetResultsOk returns a tuple with the Results field value
// and a boolean to check if the value has been set.
func (o *ApiSecretListResponse) GetResultsOk() ([]ApiSecretMeta, bool) {
	if o == nil {
		return nil, false
	}
	return o.Results, true
}

// SetResults sets field value
func (o *ApiSecretListResponse) SetResults(v []ApiSecretMeta) {
	o.Results = v
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *ApiSecretListResponse) GetTotal() int64 {
	if o == nil || IsNil(o.Total) {
		var ret int64
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiSecretListResponse) GetTotalOk() (*int64, bool) {
	if o == nil || IsNil(o.Total) {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *ApiSecretListResponse) HasTotal() bool {
	if o != nil && !IsNil(o.Total) {
		return true
	}

	return false
}

// SetTotal gets a reference to the given int64 and assigns it to the Total field.
func (o *ApiSecretListResponse) SetTotal(v int64) {
	o.Total = &v
}

func (o ApiSecretListResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiSecretListResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["readOnly"] = o.ReadOnly
	toSerialize["results"] = o.Results
	if !IsNil(o.Total) {
		toSerialize["total"] = o.Total
	}
	return toSerialize, nil
}

func (o *ApiSecretListResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"readOnly",
		"results",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varApiSecretListResponse := _ApiSecretListResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varApiSecretListResponse)

	if err != nil {
		return err
	}

	*o = ApiSecretListResponse(varApiSecretListResponse)

	return err
}

type NullableApiSecretListResponse struct {
	value *ApiSecretListResponse
	isSet bool
}

func (v NullableApiSecretListResponse) Get() *ApiSecretListResponse {
	return v.value
}

func (v *NullableApiSecretListResponse) Set(val *ApiSecretListResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableApiSecretListResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableApiSecretListResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiSecretListResponse(val *ApiSecretListResponse) *NullableApiSecretListResponse {
	return &NullableApiSecretListResponse{value: val, isSet: true}
}

func (v NullableApiSecretListResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiSecretListResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
