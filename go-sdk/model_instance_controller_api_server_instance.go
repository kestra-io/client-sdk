/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
)

// checks if the InstanceControllerApiServerInstance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InstanceControllerApiServerInstance{}

// InstanceControllerApiServerInstance struct for InstanceControllerApiServerInstance
type InstanceControllerApiServerInstance struct {
	Id                   string             `json:"id"`
	Type                 ServerInstanceType `json:"type"`
	Version              string             `json:"version"`
	Hostname             string             `json:"hostname"`
	AdditionalProperties map[string]interface{}
}

type _InstanceControllerApiServerInstance InstanceControllerApiServerInstance

// NewInstanceControllerApiServerInstance instantiates a new InstanceControllerApiServerInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstanceControllerApiServerInstance(id string, type_ ServerInstanceType, version string, hostname string) *InstanceControllerApiServerInstance {
	this := InstanceControllerApiServerInstance{}
	this.Id = id
	this.Type = type_
	this.Version = version
	this.Hostname = hostname
	return &this
}

// NewInstanceControllerApiServerInstanceWithDefaults instantiates a new InstanceControllerApiServerInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceControllerApiServerInstanceWithDefaults() *InstanceControllerApiServerInstance {
	this := InstanceControllerApiServerInstance{}
	return &this
}

// GetId returns the Id field value
func (o *InstanceControllerApiServerInstance) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *InstanceControllerApiServerInstance) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *InstanceControllerApiServerInstance) SetId(v string) {
	o.Id = v
}

// GetType returns the Type field value
func (o *InstanceControllerApiServerInstance) GetType() ServerInstanceType {
	if o == nil {
		var ret ServerInstanceType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *InstanceControllerApiServerInstance) GetTypeOk() (*ServerInstanceType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *InstanceControllerApiServerInstance) SetType(v ServerInstanceType) {
	o.Type = v
}

// GetVersion returns the Version field value
func (o *InstanceControllerApiServerInstance) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *InstanceControllerApiServerInstance) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *InstanceControllerApiServerInstance) SetVersion(v string) {
	o.Version = v
}

// GetHostname returns the Hostname field value
func (o *InstanceControllerApiServerInstance) GetHostname() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value
// and a boolean to check if the value has been set.
func (o *InstanceControllerApiServerInstance) GetHostnameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hostname, true
}

// SetHostname sets field value
func (o *InstanceControllerApiServerInstance) SetHostname(v string) {
	o.Hostname = v
}

func (o InstanceControllerApiServerInstance) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InstanceControllerApiServerInstance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["type"] = o.Type
	toSerialize["version"] = o.Version
	toSerialize["hostname"] = o.Hostname

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *InstanceControllerApiServerInstance) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"type",
		"version",
		"hostname",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInstanceControllerApiServerInstance := _InstanceControllerApiServerInstance{}

	err = json.Unmarshal(data, &varInstanceControllerApiServerInstance)

	if err != nil {
		return err
	}

	*o = InstanceControllerApiServerInstance(varInstanceControllerApiServerInstance)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "type")
		delete(additionalProperties, "version")
		delete(additionalProperties, "hostname")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInstanceControllerApiServerInstance struct {
	value *InstanceControllerApiServerInstance
	isSet bool
}

func (v NullableInstanceControllerApiServerInstance) Get() *InstanceControllerApiServerInstance {
	return v.value
}

func (v *NullableInstanceControllerApiServerInstance) Set(val *InstanceControllerApiServerInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceControllerApiServerInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceControllerApiServerInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceControllerApiServerInstance(val *InstanceControllerApiServerInstance) *NullableInstanceControllerApiServerInstance {
	return &NullableInstanceControllerApiServerInstance{value: val, isSet: true}
}

func (v NullableInstanceControllerApiServerInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceControllerApiServerInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
