/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
)

// checks if the Relation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Relation{}

// Relation struct for Relation
type Relation struct {
	RelationType         RelationType `json:"relationType"`
	Value                string       `json:"value"`
	AdditionalProperties map[string]interface{}
}

type _Relation Relation

// NewRelation instantiates a new Relation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRelation(relationType RelationType, value string) *Relation {
	this := Relation{}
	this.RelationType = relationType
	this.Value = value
	return &this
}

// NewRelationWithDefaults instantiates a new Relation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRelationWithDefaults() *Relation {
	this := Relation{}
	return &this
}

// GetRelationType returns the RelationType field value
func (o *Relation) GetRelationType() RelationType {
	if o == nil {
		var ret RelationType
		return ret
	}

	return o.RelationType
}

// GetRelationTypeOk returns a tuple with the RelationType field value
// and a boolean to check if the value has been set.
func (o *Relation) GetRelationTypeOk() (*RelationType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RelationType, true
}

// SetRelationType sets field value
func (o *Relation) SetRelationType(v RelationType) {
	o.RelationType = v
}

// GetValue returns the Value field value
func (o *Relation) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *Relation) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *Relation) SetValue(v string) {
	o.Value = v
}

func (o Relation) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Relation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["relationType"] = o.RelationType
	toSerialize["value"] = o.Value

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Relation) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"relationType",
		"value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRelation := _Relation{}

	err = json.Unmarshal(data, &varRelation)

	if err != nil {
		return err
	}

	*o = Relation(varRelation)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "relationType")
		delete(additionalProperties, "value")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRelation struct {
	value *Relation
	isSet bool
}

func (v NullableRelation) Get() *Relation {
	return v.value
}

func (v *NullableRelation) Set(val *Relation) {
	v.value = val
	v.isSet = true
}

func (v NullableRelation) IsSet() bool {
	return v.isSet
}

func (v *NullableRelation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRelation(val *Relation) *NullableRelation {
	return &NullableRelation{value: val, isSet: true}
}

func (v NullableRelation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRelation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
