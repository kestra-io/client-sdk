/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
)

// checks if the PluginDefault type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PluginDefault{}

// PluginDefault struct for PluginDefault
type PluginDefault struct {
	Type                 string                            `json:"type"`
	Forced               bool                              `json:"forced"`
	Values               map[string]map[string]interface{} `json:"values"`
	AdditionalProperties map[string]interface{}
}

type _PluginDefault PluginDefault

// NewPluginDefault instantiates a new PluginDefault object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPluginDefault(type_ string, forced bool, values map[string]map[string]interface{}) *PluginDefault {
	this := PluginDefault{}
	this.Type = type_
	this.Forced = forced
	this.Values = values
	return &this
}

// NewPluginDefaultWithDefaults instantiates a new PluginDefault object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPluginDefaultWithDefaults() *PluginDefault {
	this := PluginDefault{}
	return &this
}

// GetType returns the Type field value
func (o *PluginDefault) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *PluginDefault) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *PluginDefault) SetType(v string) {
	o.Type = v
}

// GetForced returns the Forced field value
func (o *PluginDefault) GetForced() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Forced
}

// GetForcedOk returns a tuple with the Forced field value
// and a boolean to check if the value has been set.
func (o *PluginDefault) GetForcedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Forced, true
}

// SetForced sets field value
func (o *PluginDefault) SetForced(v bool) {
	o.Forced = v
}

// GetValues returns the Values field value
func (o *PluginDefault) GetValues() map[string]map[string]interface{} {
	if o == nil {
		var ret map[string]map[string]interface{}
		return ret
	}

	return o.Values
}

// GetValuesOk returns a tuple with the Values field value
// and a boolean to check if the value has been set.
func (o *PluginDefault) GetValuesOk() (map[string]map[string]interface{}, bool) {
	if o == nil {
		return map[string]map[string]interface{}{}, false
	}
	return o.Values, true
}

// SetValues sets field value
func (o *PluginDefault) SetValues(v map[string]map[string]interface{}) {
	o.Values = v
}

func (o PluginDefault) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PluginDefault) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["forced"] = o.Forced
	toSerialize["values"] = o.Values

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PluginDefault) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"forced",
		"values",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPluginDefault := _PluginDefault{}

	err = json.Unmarshal(data, &varPluginDefault)

	if err != nil {
		return err
	}

	*o = PluginDefault(varPluginDefault)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "forced")
		delete(additionalProperties, "values")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePluginDefault struct {
	value *PluginDefault
	isSet bool
}

func (v NullablePluginDefault) Get() *PluginDefault {
	return v.value
}

func (v *NullablePluginDefault) Set(val *PluginDefault) {
	v.value = val
	v.isSet = true
}

func (v NullablePluginDefault) IsSet() bool {
	return v.isSet
}

func (v *NullablePluginDefault) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePluginDefault(val *PluginDefault) *NullablePluginDefault {
	return &NullablePluginDefault{value: val, isSet: true}
}

func (v NullablePluginDefault) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePluginDefault) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
