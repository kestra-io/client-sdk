/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
)

// checks if the InstanceControllerApiWorkerGroupItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InstanceControllerApiWorkerGroupItem{}

// InstanceControllerApiWorkerGroupItem ApiWorkerGroup.
type InstanceControllerApiWorkerGroupItem struct {
	// The ID of worker group.
	Id string `json:"id"`
	// The key of the worker group.
	Key string `json:"key"`
	// The description of the worker group.
	Description string `json:"description"`
	// The number of active workers for the group.
	ActiveWorkers        int32 `json:"activeWorkers"`
	AdditionalProperties map[string]interface{}
}

type _InstanceControllerApiWorkerGroupItem InstanceControllerApiWorkerGroupItem

// NewInstanceControllerApiWorkerGroupItem instantiates a new InstanceControllerApiWorkerGroupItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstanceControllerApiWorkerGroupItem(id string, key string, description string, activeWorkers int32) *InstanceControllerApiWorkerGroupItem {
	this := InstanceControllerApiWorkerGroupItem{}
	this.Id = id
	this.Key = key
	this.Description = description
	this.ActiveWorkers = activeWorkers
	return &this
}

// NewInstanceControllerApiWorkerGroupItemWithDefaults instantiates a new InstanceControllerApiWorkerGroupItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceControllerApiWorkerGroupItemWithDefaults() *InstanceControllerApiWorkerGroupItem {
	this := InstanceControllerApiWorkerGroupItem{}
	return &this
}

// GetId returns the Id field value
func (o *InstanceControllerApiWorkerGroupItem) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *InstanceControllerApiWorkerGroupItem) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *InstanceControllerApiWorkerGroupItem) SetId(v string) {
	o.Id = v
}

// GetKey returns the Key field value
func (o *InstanceControllerApiWorkerGroupItem) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *InstanceControllerApiWorkerGroupItem) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *InstanceControllerApiWorkerGroupItem) SetKey(v string) {
	o.Key = v
}

// GetDescription returns the Description field value
func (o *InstanceControllerApiWorkerGroupItem) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *InstanceControllerApiWorkerGroupItem) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *InstanceControllerApiWorkerGroupItem) SetDescription(v string) {
	o.Description = v
}

// GetActiveWorkers returns the ActiveWorkers field value
func (o *InstanceControllerApiWorkerGroupItem) GetActiveWorkers() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ActiveWorkers
}

// GetActiveWorkersOk returns a tuple with the ActiveWorkers field value
// and a boolean to check if the value has been set.
func (o *InstanceControllerApiWorkerGroupItem) GetActiveWorkersOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ActiveWorkers, true
}

// SetActiveWorkers sets field value
func (o *InstanceControllerApiWorkerGroupItem) SetActiveWorkers(v int32) {
	o.ActiveWorkers = v
}

func (o InstanceControllerApiWorkerGroupItem) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InstanceControllerApiWorkerGroupItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["key"] = o.Key
	toSerialize["description"] = o.Description
	toSerialize["activeWorkers"] = o.ActiveWorkers

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *InstanceControllerApiWorkerGroupItem) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"key",
		"description",
		"activeWorkers",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInstanceControllerApiWorkerGroupItem := _InstanceControllerApiWorkerGroupItem{}

	err = json.Unmarshal(data, &varInstanceControllerApiWorkerGroupItem)

	if err != nil {
		return err
	}

	*o = InstanceControllerApiWorkerGroupItem(varInstanceControllerApiWorkerGroupItem)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "key")
		delete(additionalProperties, "description")
		delete(additionalProperties, "activeWorkers")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInstanceControllerApiWorkerGroupItem struct {
	value *InstanceControllerApiWorkerGroupItem
	isSet bool
}

func (v NullableInstanceControllerApiWorkerGroupItem) Get() *InstanceControllerApiWorkerGroupItem {
	return v.value
}

func (v *NullableInstanceControllerApiWorkerGroupItem) Set(val *InstanceControllerApiWorkerGroupItem) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceControllerApiWorkerGroupItem) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceControllerApiWorkerGroupItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceControllerApiWorkerGroupItem(val *InstanceControllerApiWorkerGroupItem) *NullableInstanceControllerApiWorkerGroupItem {
	return &NullableInstanceControllerApiWorkerGroupItem{value: val, isSet: true}
}

func (v NullableInstanceControllerApiWorkerGroupItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceControllerApiWorkerGroupItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
