/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
	"time"
)

// checks if the Invitation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Invitation{}

// Invitation struct for Invitation
type Invitation struct {
	IsExpired            bool                       `json:"isExpired"`
	Email                string                     "json:\"email\" validate:\"regexp=^$|^[a-zA-Z0-9_!#$%&â€™*+\\/=?`{|}~^.-]+@[a-zA-Z0-9.-]+$\""
	Id                   string                     `json:"id"`
	Bindings             []Binding                  `json:"bindings"`
	GroupIds             []string                   `json:"groupIds"`
	TenantId             string                     `json:"tenantId"`
	Status               InvitationInvitationStatus `json:"status"`
	SentAt               time.Time                  `json:"sentAt"`
	ExpiredAt            time.Time                  `json:"expiredAt"`
	AcceptedAt           time.Time                  `json:"acceptedAt"`
	Deleted              bool                       `json:"deleted"`
	UserType             UserType                   `json:"userType"`
	SuperAdmin           bool                       `json:"superAdmin"`
	Link                 string                     `json:"link"`
	AdditionalProperties map[string]interface{}
}

type _Invitation Invitation

// NewInvitation instantiates a new Invitation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInvitation(isExpired bool, email string, id string, bindings []Binding, groupIds []string, tenantId string, status InvitationInvitationStatus, sentAt time.Time, expiredAt time.Time, acceptedAt time.Time, deleted bool, userType UserType, superAdmin bool, link string) *Invitation {
	this := Invitation{}
	this.IsExpired = isExpired
	this.Email = email
	this.Id = id
	this.Bindings = bindings
	this.GroupIds = groupIds
	this.TenantId = tenantId
	this.Status = status
	this.SentAt = sentAt
	this.ExpiredAt = expiredAt
	this.AcceptedAt = acceptedAt
	this.Deleted = deleted
	this.UserType = userType
	this.SuperAdmin = superAdmin
	this.Link = link
	return &this
}

// NewInvitationWithDefaults instantiates a new Invitation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInvitationWithDefaults() *Invitation {
	this := Invitation{}
	return &this
}

// GetIsExpired returns the IsExpired field value
func (o *Invitation) GetIsExpired() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsExpired
}

// GetIsExpiredOk returns a tuple with the IsExpired field value
// and a boolean to check if the value has been set.
func (o *Invitation) GetIsExpiredOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsExpired, true
}

// SetIsExpired sets field value
func (o *Invitation) SetIsExpired(v bool) {
	o.IsExpired = v
}

// GetEmail returns the Email field value
func (o *Invitation) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *Invitation) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *Invitation) SetEmail(v string) {
	o.Email = v
}

// GetId returns the Id field value
func (o *Invitation) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Invitation) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Invitation) SetId(v string) {
	o.Id = v
}

// GetBindings returns the Bindings field value
func (o *Invitation) GetBindings() []Binding {
	if o == nil {
		var ret []Binding
		return ret
	}

	return o.Bindings
}

// GetBindingsOk returns a tuple with the Bindings field value
// and a boolean to check if the value has been set.
func (o *Invitation) GetBindingsOk() ([]Binding, bool) {
	if o == nil {
		return nil, false
	}
	return o.Bindings, true
}

// SetBindings sets field value
func (o *Invitation) SetBindings(v []Binding) {
	o.Bindings = v
}

// GetGroupIds returns the GroupIds field value
func (o *Invitation) GetGroupIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.GroupIds
}

// GetGroupIdsOk returns a tuple with the GroupIds field value
// and a boolean to check if the value has been set.
func (o *Invitation) GetGroupIdsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.GroupIds, true
}

// SetGroupIds sets field value
func (o *Invitation) SetGroupIds(v []string) {
	o.GroupIds = v
}

// GetTenantId returns the TenantId field value
func (o *Invitation) GetTenantId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TenantId
}

// GetTenantIdOk returns a tuple with the TenantId field value
// and a boolean to check if the value has been set.
func (o *Invitation) GetTenantIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TenantId, true
}

// SetTenantId sets field value
func (o *Invitation) SetTenantId(v string) {
	o.TenantId = v
}

// GetStatus returns the Status field value
func (o *Invitation) GetStatus() InvitationInvitationStatus {
	if o == nil {
		var ret InvitationInvitationStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *Invitation) GetStatusOk() (*InvitationInvitationStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *Invitation) SetStatus(v InvitationInvitationStatus) {
	o.Status = v
}

// GetSentAt returns the SentAt field value
func (o *Invitation) GetSentAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.SentAt
}

// GetSentAtOk returns a tuple with the SentAt field value
// and a boolean to check if the value has been set.
func (o *Invitation) GetSentAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SentAt, true
}

// SetSentAt sets field value
func (o *Invitation) SetSentAt(v time.Time) {
	o.SentAt = v
}

// GetExpiredAt returns the ExpiredAt field value
func (o *Invitation) GetExpiredAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.ExpiredAt
}

// GetExpiredAtOk returns a tuple with the ExpiredAt field value
// and a boolean to check if the value has been set.
func (o *Invitation) GetExpiredAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExpiredAt, true
}

// SetExpiredAt sets field value
func (o *Invitation) SetExpiredAt(v time.Time) {
	o.ExpiredAt = v
}

// GetAcceptedAt returns the AcceptedAt field value
func (o *Invitation) GetAcceptedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.AcceptedAt
}

// GetAcceptedAtOk returns a tuple with the AcceptedAt field value
// and a boolean to check if the value has been set.
func (o *Invitation) GetAcceptedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AcceptedAt, true
}

// SetAcceptedAt sets field value
func (o *Invitation) SetAcceptedAt(v time.Time) {
	o.AcceptedAt = v
}

// GetDeleted returns the Deleted field value
func (o *Invitation) GetDeleted() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Deleted
}

// GetDeletedOk returns a tuple with the Deleted field value
// and a boolean to check if the value has been set.
func (o *Invitation) GetDeletedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Deleted, true
}

// SetDeleted sets field value
func (o *Invitation) SetDeleted(v bool) {
	o.Deleted = v
}

// GetUserType returns the UserType field value
func (o *Invitation) GetUserType() UserType {
	if o == nil {
		var ret UserType
		return ret
	}

	return o.UserType
}

// GetUserTypeOk returns a tuple with the UserType field value
// and a boolean to check if the value has been set.
func (o *Invitation) GetUserTypeOk() (*UserType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserType, true
}

// SetUserType sets field value
func (o *Invitation) SetUserType(v UserType) {
	o.UserType = v
}

// GetSuperAdmin returns the SuperAdmin field value
func (o *Invitation) GetSuperAdmin() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.SuperAdmin
}

// GetSuperAdminOk returns a tuple with the SuperAdmin field value
// and a boolean to check if the value has been set.
func (o *Invitation) GetSuperAdminOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SuperAdmin, true
}

// SetSuperAdmin sets field value
func (o *Invitation) SetSuperAdmin(v bool) {
	o.SuperAdmin = v
}

// GetLink returns the Link field value
func (o *Invitation) GetLink() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Link
}

// GetLinkOk returns a tuple with the Link field value
// and a boolean to check if the value has been set.
func (o *Invitation) GetLinkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Link, true
}

// SetLink sets field value
func (o *Invitation) SetLink(v string) {
	o.Link = v
}

func (o Invitation) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Invitation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["isExpired"] = o.IsExpired
	toSerialize["email"] = o.Email
	toSerialize["id"] = o.Id
	toSerialize["bindings"] = o.Bindings
	toSerialize["groupIds"] = o.GroupIds
	toSerialize["tenantId"] = o.TenantId
	toSerialize["status"] = o.Status
	toSerialize["sentAt"] = o.SentAt
	toSerialize["expiredAt"] = o.ExpiredAt
	toSerialize["acceptedAt"] = o.AcceptedAt
	toSerialize["deleted"] = o.Deleted
	toSerialize["userType"] = o.UserType
	toSerialize["superAdmin"] = o.SuperAdmin
	toSerialize["link"] = o.Link

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Invitation) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"isExpired",
		"email",
		"id",
		"bindings",
		"groupIds",
		"tenantId",
		"status",
		"sentAt",
		"expiredAt",
		"acceptedAt",
		"deleted",
		"userType",
		"superAdmin",
		"link",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInvitation := _Invitation{}

	err = json.Unmarshal(data, &varInvitation)

	if err != nil {
		return err
	}

	*o = Invitation(varInvitation)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "isExpired")
		delete(additionalProperties, "email")
		delete(additionalProperties, "id")
		delete(additionalProperties, "bindings")
		delete(additionalProperties, "groupIds")
		delete(additionalProperties, "tenantId")
		delete(additionalProperties, "status")
		delete(additionalProperties, "sentAt")
		delete(additionalProperties, "expiredAt")
		delete(additionalProperties, "acceptedAt")
		delete(additionalProperties, "deleted")
		delete(additionalProperties, "userType")
		delete(additionalProperties, "superAdmin")
		delete(additionalProperties, "link")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInvitation struct {
	value *Invitation
	isSet bool
}

func (v NullableInvitation) Get() *Invitation {
	return v.value
}

func (v *NullableInvitation) Set(val *Invitation) {
	v.value = val
	v.isSet = true
}

func (v NullableInvitation) IsSet() bool {
	return v.isSet
}

func (v *NullableInvitation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInvitation(val *Invitation) *NullableInvitation {
	return &NullableInvitation{value: val, isSet: true}
}

func (v NullableInvitation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInvitation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
