/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
)

// checks if the ServerConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServerConfig{}

// ServerConfig struct for ServerConfig
type ServerConfig struct {
	WorkerTaskRestartStrategy NullableWorkerTaskRestartStrategy `json:"workerTaskRestartStrategy,omitempty"`
	TerminationGracePeriod    string                            `json:"terminationGracePeriod"`
	Liveness                  ServerConfigLiveness              `json:"liveness"`
	AdditionalProperties      map[string]interface{}
}

type _ServerConfig ServerConfig

// NewServerConfig instantiates a new ServerConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerConfig(terminationGracePeriod string, liveness ServerConfigLiveness) *ServerConfig {
	this := ServerConfig{}
	this.TerminationGracePeriod = terminationGracePeriod
	this.Liveness = liveness
	return &this
}

// NewServerConfigWithDefaults instantiates a new ServerConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerConfigWithDefaults() *ServerConfig {
	this := ServerConfig{}
	var terminationGracePeriod string = "5m"
	this.TerminationGracePeriod = terminationGracePeriod
	return &this
}

// GetWorkerTaskRestartStrategy returns the WorkerTaskRestartStrategy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServerConfig) GetWorkerTaskRestartStrategy() WorkerTaskRestartStrategy {
	if o == nil || IsNil(o.WorkerTaskRestartStrategy.Get()) {
		var ret WorkerTaskRestartStrategy
		return ret
	}
	return *o.WorkerTaskRestartStrategy.Get()
}

// GetWorkerTaskRestartStrategyOk returns a tuple with the WorkerTaskRestartStrategy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServerConfig) GetWorkerTaskRestartStrategyOk() (*WorkerTaskRestartStrategy, bool) {
	if o == nil {
		return nil, false
	}
	return o.WorkerTaskRestartStrategy.Get(), o.WorkerTaskRestartStrategy.IsSet()
}

// HasWorkerTaskRestartStrategy returns a boolean if a field has been set.
func (o *ServerConfig) HasWorkerTaskRestartStrategy() bool {
	if o != nil && o.WorkerTaskRestartStrategy.IsSet() {
		return true
	}

	return false
}

// SetWorkerTaskRestartStrategy gets a reference to the given NullableWorkerTaskRestartStrategy and assigns it to the WorkerTaskRestartStrategy field.
func (o *ServerConfig) SetWorkerTaskRestartStrategy(v WorkerTaskRestartStrategy) {
	o.WorkerTaskRestartStrategy.Set(&v)
}

// SetWorkerTaskRestartStrategyNil sets the value for WorkerTaskRestartStrategy to be an explicit nil
func (o *ServerConfig) SetWorkerTaskRestartStrategyNil() {
	o.WorkerTaskRestartStrategy.Set(nil)
}

// UnsetWorkerTaskRestartStrategy ensures that no value is present for WorkerTaskRestartStrategy, not even an explicit nil
func (o *ServerConfig) UnsetWorkerTaskRestartStrategy() {
	o.WorkerTaskRestartStrategy.Unset()
}

// GetTerminationGracePeriod returns the TerminationGracePeriod field value
func (o *ServerConfig) GetTerminationGracePeriod() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TerminationGracePeriod
}

// GetTerminationGracePeriodOk returns a tuple with the TerminationGracePeriod field value
// and a boolean to check if the value has been set.
func (o *ServerConfig) GetTerminationGracePeriodOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TerminationGracePeriod, true
}

// SetTerminationGracePeriod sets field value
func (o *ServerConfig) SetTerminationGracePeriod(v string) {
	o.TerminationGracePeriod = v
}

// GetLiveness returns the Liveness field value
func (o *ServerConfig) GetLiveness() ServerConfigLiveness {
	if o == nil {
		var ret ServerConfigLiveness
		return ret
	}

	return o.Liveness
}

// GetLivenessOk returns a tuple with the Liveness field value
// and a boolean to check if the value has been set.
func (o *ServerConfig) GetLivenessOk() (*ServerConfigLiveness, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Liveness, true
}

// SetLiveness sets field value
func (o *ServerConfig) SetLiveness(v ServerConfigLiveness) {
	o.Liveness = v
}

func (o ServerConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServerConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.WorkerTaskRestartStrategy.IsSet() {
		toSerialize["workerTaskRestartStrategy"] = o.WorkerTaskRestartStrategy.Get()
	}
	toSerialize["terminationGracePeriod"] = o.TerminationGracePeriod
	toSerialize["liveness"] = o.Liveness

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ServerConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"terminationGracePeriod",
		"liveness",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServerConfig := _ServerConfig{}

	err = json.Unmarshal(data, &varServerConfig)

	if err != nil {
		return err
	}

	*o = ServerConfig(varServerConfig)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "workerTaskRestartStrategy")
		delete(additionalProperties, "terminationGracePeriod")
		delete(additionalProperties, "liveness")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableServerConfig struct {
	value *ServerConfig
	isSet bool
}

func (v NullableServerConfig) Get() *ServerConfig {
	return v.value
}

func (v *NullableServerConfig) Set(val *ServerConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableServerConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableServerConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerConfig(val *ServerConfig) *NullableServerConfig {
	return &NullableServerConfig{value: val, isSet: true}
}

func (v NullableServerConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
