/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
)

// checks if the PluginMetric type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PluginMetric{}

// PluginMetric struct for PluginMetric
type PluginMetric struct {
	Type                 string  `json:"type"`
	Count                float64 `json:"count"`
	TotalTime            float64 `json:"totalTime"`
	MeanTime             float64 `json:"meanTime"`
	AdditionalProperties map[string]interface{}
}

type _PluginMetric PluginMetric

// NewPluginMetric instantiates a new PluginMetric object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPluginMetric(type_ string, count float64, totalTime float64, meanTime float64) *PluginMetric {
	this := PluginMetric{}
	this.Type = type_
	this.Count = count
	this.TotalTime = totalTime
	this.MeanTime = meanTime
	return &this
}

// NewPluginMetricWithDefaults instantiates a new PluginMetric object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPluginMetricWithDefaults() *PluginMetric {
	this := PluginMetric{}
	return &this
}

// GetType returns the Type field value
func (o *PluginMetric) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *PluginMetric) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *PluginMetric) SetType(v string) {
	o.Type = v
}

// GetCount returns the Count field value
func (o *PluginMetric) GetCount() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *PluginMetric) GetCountOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *PluginMetric) SetCount(v float64) {
	o.Count = v
}

// GetTotalTime returns the TotalTime field value
func (o *PluginMetric) GetTotalTime() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.TotalTime
}

// GetTotalTimeOk returns a tuple with the TotalTime field value
// and a boolean to check if the value has been set.
func (o *PluginMetric) GetTotalTimeOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalTime, true
}

// SetTotalTime sets field value
func (o *PluginMetric) SetTotalTime(v float64) {
	o.TotalTime = v
}

// GetMeanTime returns the MeanTime field value
func (o *PluginMetric) GetMeanTime() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.MeanTime
}

// GetMeanTimeOk returns a tuple with the MeanTime field value
// and a boolean to check if the value has been set.
func (o *PluginMetric) GetMeanTimeOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MeanTime, true
}

// SetMeanTime sets field value
func (o *PluginMetric) SetMeanTime(v float64) {
	o.MeanTime = v
}

func (o PluginMetric) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PluginMetric) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["count"] = o.Count
	toSerialize["totalTime"] = o.TotalTime
	toSerialize["meanTime"] = o.MeanTime

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PluginMetric) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"count",
		"totalTime",
		"meanTime",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPluginMetric := _PluginMetric{}

	err = json.Unmarshal(data, &varPluginMetric)

	if err != nil {
		return err
	}

	*o = PluginMetric(varPluginMetric)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "count")
		delete(additionalProperties, "totalTime")
		delete(additionalProperties, "meanTime")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePluginMetric struct {
	value *PluginMetric
	isSet bool
}

func (v NullablePluginMetric) Get() *PluginMetric {
	return v.value
}

func (v *NullablePluginMetric) Set(val *PluginMetric) {
	v.value = val
	v.isSet = true
}

func (v NullablePluginMetric) IsSet() bool {
	return v.isSet
}

func (v *NullablePluginMetric) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePluginMetric(val *PluginMetric) *NullablePluginMetric {
	return &NullablePluginMetric{value: val, isSet: true}
}

func (v NullablePluginMetric) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePluginMetric) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
