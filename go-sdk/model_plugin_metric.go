/*
Kestra EE

All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
)

// checks if the PluginMetric type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PluginMetric{}

// PluginMetric struct for PluginMetric
type PluginMetric struct {
	Type      *string  `json:"type,omitempty"`
	Count     *float64 `json:"count,omitempty"`
	TotalTime *float64 `json:"totalTime,omitempty"`
	MeanTime  *float64 `json:"meanTime,omitempty"`
}

// NewPluginMetric instantiates a new PluginMetric object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPluginMetric() *PluginMetric {
	this := PluginMetric{}
	return &this
}

// NewPluginMetricWithDefaults instantiates a new PluginMetric object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPluginMetricWithDefaults() *PluginMetric {
	this := PluginMetric{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *PluginMetric) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginMetric) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *PluginMetric) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *PluginMetric) SetType(v string) {
	o.Type = &v
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *PluginMetric) GetCount() float64 {
	if o == nil || IsNil(o.Count) {
		var ret float64
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginMetric) GetCountOk() (*float64, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *PluginMetric) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given float64 and assigns it to the Count field.
func (o *PluginMetric) SetCount(v float64) {
	o.Count = &v
}

// GetTotalTime returns the TotalTime field value if set, zero value otherwise.
func (o *PluginMetric) GetTotalTime() float64 {
	if o == nil || IsNil(o.TotalTime) {
		var ret float64
		return ret
	}
	return *o.TotalTime
}

// GetTotalTimeOk returns a tuple with the TotalTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginMetric) GetTotalTimeOk() (*float64, bool) {
	if o == nil || IsNil(o.TotalTime) {
		return nil, false
	}
	return o.TotalTime, true
}

// HasTotalTime returns a boolean if a field has been set.
func (o *PluginMetric) HasTotalTime() bool {
	if o != nil && !IsNil(o.TotalTime) {
		return true
	}

	return false
}

// SetTotalTime gets a reference to the given float64 and assigns it to the TotalTime field.
func (o *PluginMetric) SetTotalTime(v float64) {
	o.TotalTime = &v
}

// GetMeanTime returns the MeanTime field value if set, zero value otherwise.
func (o *PluginMetric) GetMeanTime() float64 {
	if o == nil || IsNil(o.MeanTime) {
		var ret float64
		return ret
	}
	return *o.MeanTime
}

// GetMeanTimeOk returns a tuple with the MeanTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginMetric) GetMeanTimeOk() (*float64, bool) {
	if o == nil || IsNil(o.MeanTime) {
		return nil, false
	}
	return o.MeanTime, true
}

// HasMeanTime returns a boolean if a field has been set.
func (o *PluginMetric) HasMeanTime() bool {
	if o != nil && !IsNil(o.MeanTime) {
		return true
	}

	return false
}

// SetMeanTime gets a reference to the given float64 and assigns it to the MeanTime field.
func (o *PluginMetric) SetMeanTime(v float64) {
	o.MeanTime = &v
}

func (o PluginMetric) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PluginMetric) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	if !IsNil(o.TotalTime) {
		toSerialize["totalTime"] = o.TotalTime
	}
	if !IsNil(o.MeanTime) {
		toSerialize["meanTime"] = o.MeanTime
	}
	return toSerialize, nil
}

type NullablePluginMetric struct {
	value *PluginMetric
	isSet bool
}

func (v NullablePluginMetric) Get() *PluginMetric {
	return v.value
}

func (v *NullablePluginMetric) Set(val *PluginMetric) {
	v.value = val
	v.isSet = true
}

func (v NullablePluginMetric) IsSet() bool {
	return v.isSet
}

func (v *NullablePluginMetric) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePluginMetric(val *PluginMetric) *NullablePluginMetric {
	return &NullablePluginMetric{value: val, isSet: true}
}

func (v NullablePluginMetric) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePluginMetric) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
