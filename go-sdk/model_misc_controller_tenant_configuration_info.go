/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
)

// checks if the MiscControllerTenantConfigurationInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MiscControllerTenantConfigurationInfo{}

// MiscControllerTenantConfigurationInfo struct for MiscControllerTenantConfigurationInfo
type MiscControllerTenantConfigurationInfo struct {
	StorageByTenant      bool `json:"storageByTenant"`
	SecretByTenant       bool `json:"secretByTenant"`
	AdditionalProperties map[string]interface{}
}

type _MiscControllerTenantConfigurationInfo MiscControllerTenantConfigurationInfo

// NewMiscControllerTenantConfigurationInfo instantiates a new MiscControllerTenantConfigurationInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMiscControllerTenantConfigurationInfo(storageByTenant bool, secretByTenant bool) *MiscControllerTenantConfigurationInfo {
	this := MiscControllerTenantConfigurationInfo{}
	this.StorageByTenant = storageByTenant
	this.SecretByTenant = secretByTenant
	return &this
}

// NewMiscControllerTenantConfigurationInfoWithDefaults instantiates a new MiscControllerTenantConfigurationInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMiscControllerTenantConfigurationInfoWithDefaults() *MiscControllerTenantConfigurationInfo {
	this := MiscControllerTenantConfigurationInfo{}
	return &this
}

// GetStorageByTenant returns the StorageByTenant field value
func (o *MiscControllerTenantConfigurationInfo) GetStorageByTenant() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.StorageByTenant
}

// GetStorageByTenantOk returns a tuple with the StorageByTenant field value
// and a boolean to check if the value has been set.
func (o *MiscControllerTenantConfigurationInfo) GetStorageByTenantOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StorageByTenant, true
}

// SetStorageByTenant sets field value
func (o *MiscControllerTenantConfigurationInfo) SetStorageByTenant(v bool) {
	o.StorageByTenant = v
}

// GetSecretByTenant returns the SecretByTenant field value
func (o *MiscControllerTenantConfigurationInfo) GetSecretByTenant() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.SecretByTenant
}

// GetSecretByTenantOk returns a tuple with the SecretByTenant field value
// and a boolean to check if the value has been set.
func (o *MiscControllerTenantConfigurationInfo) GetSecretByTenantOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SecretByTenant, true
}

// SetSecretByTenant sets field value
func (o *MiscControllerTenantConfigurationInfo) SetSecretByTenant(v bool) {
	o.SecretByTenant = v
}

func (o MiscControllerTenantConfigurationInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MiscControllerTenantConfigurationInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["storageByTenant"] = o.StorageByTenant
	toSerialize["secretByTenant"] = o.SecretByTenant

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MiscControllerTenantConfigurationInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"storageByTenant",
		"secretByTenant",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMiscControllerTenantConfigurationInfo := _MiscControllerTenantConfigurationInfo{}

	err = json.Unmarshal(data, &varMiscControllerTenantConfigurationInfo)

	if err != nil {
		return err
	}

	*o = MiscControllerTenantConfigurationInfo(varMiscControllerTenantConfigurationInfo)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "storageByTenant")
		delete(additionalProperties, "secretByTenant")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMiscControllerTenantConfigurationInfo struct {
	value *MiscControllerTenantConfigurationInfo
	isSet bool
}

func (v NullableMiscControllerTenantConfigurationInfo) Get() *MiscControllerTenantConfigurationInfo {
	return v.value
}

func (v *NullableMiscControllerTenantConfigurationInfo) Set(val *MiscControllerTenantConfigurationInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableMiscControllerTenantConfigurationInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableMiscControllerTenantConfigurationInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMiscControllerTenantConfigurationInfo(val *MiscControllerTenantConfigurationInfo) *NullableMiscControllerTenantConfigurationInfo {
	return &NullableMiscControllerTenantConfigurationInfo{value: val, isSet: true}
}

func (v NullableMiscControllerTenantConfigurationInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMiscControllerTenantConfigurationInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
