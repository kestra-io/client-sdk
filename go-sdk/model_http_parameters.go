/*
Kestra EE

All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the HttpParameters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HttpParameters{}

// HttpParameters struct for HttpParameters
type HttpParameters struct {
	ConversionService map[string]interface{} `json:"conversionService"`
	Empty             *bool                  `json:"empty,omitempty"`
}

type _HttpParameters HttpParameters

// NewHttpParameters instantiates a new HttpParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHttpParameters(conversionService map[string]interface{}) *HttpParameters {
	this := HttpParameters{}
	this.ConversionService = conversionService
	return &this
}

// NewHttpParametersWithDefaults instantiates a new HttpParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHttpParametersWithDefaults() *HttpParameters {
	this := HttpParameters{}
	return &this
}

// GetConversionService returns the ConversionService field value
func (o *HttpParameters) GetConversionService() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.ConversionService
}

// GetConversionServiceOk returns a tuple with the ConversionService field value
// and a boolean to check if the value has been set.
func (o *HttpParameters) GetConversionServiceOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.ConversionService, true
}

// SetConversionService sets field value
func (o *HttpParameters) SetConversionService(v map[string]interface{}) {
	o.ConversionService = v
}

// GetEmpty returns the Empty field value if set, zero value otherwise.
func (o *HttpParameters) GetEmpty() bool {
	if o == nil || IsNil(o.Empty) {
		var ret bool
		return ret
	}
	return *o.Empty
}

// GetEmptyOk returns a tuple with the Empty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpParameters) GetEmptyOk() (*bool, bool) {
	if o == nil || IsNil(o.Empty) {
		return nil, false
	}
	return o.Empty, true
}

// HasEmpty returns a boolean if a field has been set.
func (o *HttpParameters) HasEmpty() bool {
	if o != nil && !IsNil(o.Empty) {
		return true
	}

	return false
}

// SetEmpty gets a reference to the given bool and assigns it to the Empty field.
func (o *HttpParameters) SetEmpty(v bool) {
	o.Empty = &v
}

func (o HttpParameters) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HttpParameters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["conversionService"] = o.ConversionService
	if !IsNil(o.Empty) {
		toSerialize["empty"] = o.Empty
	}
	return toSerialize, nil
}

func (o *HttpParameters) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"conversionService",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHttpParameters := _HttpParameters{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHttpParameters)

	if err != nil {
		return err
	}

	*o = HttpParameters(varHttpParameters)

	return err
}

type NullableHttpParameters struct {
	value *HttpParameters
	isSet bool
}

func (v NullableHttpParameters) Get() *HttpParameters {
	return v.value
}

func (v *NullableHttpParameters) Set(val *HttpParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableHttpParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableHttpParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHttpParameters(val *HttpParameters) *NullableHttpParameters {
	return &NullableHttpParameters{value: val, isSet: true}
}

func (v NullableHttpParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHttpParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
