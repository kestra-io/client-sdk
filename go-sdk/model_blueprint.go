/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
	"time"
)

// checks if the Blueprint type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Blueprint{}

// Blueprint struct for Blueprint
type Blueprint struct {
	Id                   *string    `json:"id,omitempty"`
	Title                string     `json:"title"`
	Description          *string    `json:"description,omitempty"`
	Tags                 []string   `json:"tags,omitempty"`
	IncludedTasks        []string   `json:"includedTasks,omitempty"`
	PublishedAt          *time.Time `json:"publishedAt,omitempty"`
	Deleted              bool       `json:"deleted"`
	AdditionalProperties map[string]interface{}
}

type _Blueprint Blueprint

// NewBlueprint instantiates a new Blueprint object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlueprint(title string, deleted bool) *Blueprint {
	this := Blueprint{}
	this.Title = title
	this.Deleted = deleted
	return &this
}

// NewBlueprintWithDefaults instantiates a new Blueprint object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlueprintWithDefaults() *Blueprint {
	this := Blueprint{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Blueprint) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Blueprint) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Blueprint) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Blueprint) SetId(v string) {
	o.Id = &v
}

// GetTitle returns the Title field value
func (o *Blueprint) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *Blueprint) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *Blueprint) SetTitle(v string) {
	o.Title = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Blueprint) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Blueprint) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Blueprint) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Blueprint) SetDescription(v string) {
	o.Description = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *Blueprint) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Blueprint) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *Blueprint) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *Blueprint) SetTags(v []string) {
	o.Tags = v
}

// GetIncludedTasks returns the IncludedTasks field value if set, zero value otherwise.
func (o *Blueprint) GetIncludedTasks() []string {
	if o == nil || IsNil(o.IncludedTasks) {
		var ret []string
		return ret
	}
	return o.IncludedTasks
}

// GetIncludedTasksOk returns a tuple with the IncludedTasks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Blueprint) GetIncludedTasksOk() ([]string, bool) {
	if o == nil || IsNil(o.IncludedTasks) {
		return nil, false
	}
	return o.IncludedTasks, true
}

// HasIncludedTasks returns a boolean if a field has been set.
func (o *Blueprint) HasIncludedTasks() bool {
	if o != nil && !IsNil(o.IncludedTasks) {
		return true
	}

	return false
}

// SetIncludedTasks gets a reference to the given []string and assigns it to the IncludedTasks field.
func (o *Blueprint) SetIncludedTasks(v []string) {
	o.IncludedTasks = v
}

// GetPublishedAt returns the PublishedAt field value if set, zero value otherwise.
func (o *Blueprint) GetPublishedAt() time.Time {
	if o == nil || IsNil(o.PublishedAt) {
		var ret time.Time
		return ret
	}
	return *o.PublishedAt
}

// GetPublishedAtOk returns a tuple with the PublishedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Blueprint) GetPublishedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.PublishedAt) {
		return nil, false
	}
	return o.PublishedAt, true
}

// HasPublishedAt returns a boolean if a field has been set.
func (o *Blueprint) HasPublishedAt() bool {
	if o != nil && !IsNil(o.PublishedAt) {
		return true
	}

	return false
}

// SetPublishedAt gets a reference to the given time.Time and assigns it to the PublishedAt field.
func (o *Blueprint) SetPublishedAt(v time.Time) {
	o.PublishedAt = &v
}

// GetDeleted returns the Deleted field value
func (o *Blueprint) GetDeleted() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Deleted
}

// GetDeletedOk returns a tuple with the Deleted field value
// and a boolean to check if the value has been set.
func (o *Blueprint) GetDeletedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Deleted, true
}

// SetDeleted sets field value
func (o *Blueprint) SetDeleted(v bool) {
	o.Deleted = v
}

func (o Blueprint) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Blueprint) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["title"] = o.Title
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.IncludedTasks) {
		toSerialize["includedTasks"] = o.IncludedTasks
	}
	if !IsNil(o.PublishedAt) {
		toSerialize["publishedAt"] = o.PublishedAt
	}
	toSerialize["deleted"] = o.Deleted

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Blueprint) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"title",
		"deleted",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBlueprint := _Blueprint{}

	err = json.Unmarshal(data, &varBlueprint)

	if err != nil {
		return err
	}

	*o = Blueprint(varBlueprint)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "title")
		delete(additionalProperties, "description")
		delete(additionalProperties, "tags")
		delete(additionalProperties, "includedTasks")
		delete(additionalProperties, "publishedAt")
		delete(additionalProperties, "deleted")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBlueprint struct {
	value *Blueprint
	isSet bool
}

func (v NullableBlueprint) Get() *Blueprint {
	return v.value
}

func (v *NullableBlueprint) Set(val *Blueprint) {
	v.value = val
	v.isSet = true
}

func (v NullableBlueprint) IsSet() bool {
	return v.isSet
}

func (v *NullableBlueprint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlueprint(val *Blueprint) *NullableBlueprint {
	return &NullableBlueprint{value: val, isSet: true}
}

func (v NullableBlueprint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlueprint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
