/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
)

// checks if the MiscControllerBasicAuthCredentials type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MiscControllerBasicAuthCredentials{}

// MiscControllerBasicAuthCredentials struct for MiscControllerBasicAuthCredentials
type MiscControllerBasicAuthCredentials struct {
	Uid                  *string `json:"uid,omitempty"`
	Username             *string `json:"username,omitempty"`
	Password             *string `json:"password,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _MiscControllerBasicAuthCredentials MiscControllerBasicAuthCredentials

// NewMiscControllerBasicAuthCredentials instantiates a new MiscControllerBasicAuthCredentials object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMiscControllerBasicAuthCredentials() *MiscControllerBasicAuthCredentials {
	this := MiscControllerBasicAuthCredentials{}
	return &this
}

// NewMiscControllerBasicAuthCredentialsWithDefaults instantiates a new MiscControllerBasicAuthCredentials object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMiscControllerBasicAuthCredentialsWithDefaults() *MiscControllerBasicAuthCredentials {
	this := MiscControllerBasicAuthCredentials{}
	return &this
}

// GetUid returns the Uid field value if set, zero value otherwise.
func (o *MiscControllerBasicAuthCredentials) GetUid() string {
	if o == nil || IsNil(o.Uid) {
		var ret string
		return ret
	}
	return *o.Uid
}

// GetUidOk returns a tuple with the Uid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MiscControllerBasicAuthCredentials) GetUidOk() (*string, bool) {
	if o == nil || IsNil(o.Uid) {
		return nil, false
	}
	return o.Uid, true
}

// HasUid returns a boolean if a field has been set.
func (o *MiscControllerBasicAuthCredentials) HasUid() bool {
	if o != nil && !IsNil(o.Uid) {
		return true
	}

	return false
}

// SetUid gets a reference to the given string and assigns it to the Uid field.
func (o *MiscControllerBasicAuthCredentials) SetUid(v string) {
	o.Uid = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *MiscControllerBasicAuthCredentials) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MiscControllerBasicAuthCredentials) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *MiscControllerBasicAuthCredentials) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *MiscControllerBasicAuthCredentials) SetUsername(v string) {
	o.Username = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *MiscControllerBasicAuthCredentials) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MiscControllerBasicAuthCredentials) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *MiscControllerBasicAuthCredentials) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *MiscControllerBasicAuthCredentials) SetPassword(v string) {
	o.Password = &v
}

func (o MiscControllerBasicAuthCredentials) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MiscControllerBasicAuthCredentials) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Uid) {
		toSerialize["uid"] = o.Uid
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MiscControllerBasicAuthCredentials) UnmarshalJSON(data []byte) (err error) {
	varMiscControllerBasicAuthCredentials := _MiscControllerBasicAuthCredentials{}

	err = json.Unmarshal(data, &varMiscControllerBasicAuthCredentials)

	if err != nil {
		return err
	}

	*o = MiscControllerBasicAuthCredentials(varMiscControllerBasicAuthCredentials)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "uid")
		delete(additionalProperties, "username")
		delete(additionalProperties, "password")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMiscControllerBasicAuthCredentials struct {
	value *MiscControllerBasicAuthCredentials
	isSet bool
}

func (v NullableMiscControllerBasicAuthCredentials) Get() *MiscControllerBasicAuthCredentials {
	return v.value
}

func (v *NullableMiscControllerBasicAuthCredentials) Set(val *MiscControllerBasicAuthCredentials) {
	v.value = val
	v.isSet = true
}

func (v NullableMiscControllerBasicAuthCredentials) IsSet() bool {
	return v.isSet
}

func (v *NullableMiscControllerBasicAuthCredentials) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMiscControllerBasicAuthCredentials(val *MiscControllerBasicAuthCredentials) *NullableMiscControllerBasicAuthCredentials {
	return &NullableMiscControllerBasicAuthCredentials{value: val, isSet: true}
}

func (v NullableMiscControllerBasicAuthCredentials) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMiscControllerBasicAuthCredentials) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
